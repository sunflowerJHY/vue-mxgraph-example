{"version":3,"sources":["webpack:///./node_modules/mxgraph/javascript/mxClient.js"],"names":["mxClient","VERSION","IS_IE","navigator","userAgent","indexOf","IS_IE6","IS_IE11","match","IS_EDGE","IS_QUIRKS","document","documentMode","IS_EM","createElement","VML_PREFIX","OFFICE_PREFIX","IS_NS","IS_OP","IS_OT","IS_SF","IS_IOS","IS_GC","IS_CHROMEAPP","window","chrome","app","runtime","IS_FF","IS_MT","IS_VML","appName","toUpperCase","IS_SVG","NO_FO","createElementNS","IS_WIN","appVersion","IS_MAC","IS_CHROMEOS","test","IS_TOUCH","documentElement","IS_POINTER","PointerEvent","IS_LOCAL","location","href","defaultBundles","isBrowserSupported","link","rel","doc","id","write","setAttribute","head","getElementsByTagName","appendChild","loadResources","fn","lan","pending","length","callback","i","mxResources","add","include","src","mxLoadResources","mxForceIncludes","mxResourceExtension","mxLoadStylesheets","mxBasePath","substring","basePath","mxImageBasePath","imageBasePath","mxLanguage","language","userLanguage","mxDefaultLanguage","defaultLanguage","mxLanguages","languages","namespaces","styleSheets","node","type","styleSheet","cssText","createStyleSheet","mxLog","consoleName","TRACE","DEBUG","WARN","buffer","init","body","title","table","tbody","tr","td","style","verticalAlign","textarea","height","resize","value","compatMode","width","addButton","evt","info","content","mxUtils","getInnerHtml","debug","copy","err","alert","popup","h","w","innerHeight","innerWidth","clientHeight","clientWidth","mxWindow","Math","max","setMaximizable","setScrollable","setResizable","setClosable","destroyOnClose","elt","getElement","resizeHandler","sender","offsetHeight","addListener","mxEvent","RESIZE_END","MAXIMIZE","NORMALIZE","writeln","toString","lab","funct","button","isVisible","show","setVisible","visible","enter","string","Date","getTime","leave","t0","dt","apply","this","arguments","warn","visibility","scrollTop","scrollHeight","mxObjectIdentity","FIELD_NAME","counter","get","obj","ctor","getFunctionName","constructor","clear","mxDictionary","prototype","map","key","put","previous","remove","getKeys","result","push","getValues","visit","visitor","resources","extension","resourcesEncoded","loadDefaultBundle","loadSpecialBundle","isLanguageSupported","getDefaultBundle","basename","getSpecialBundle","dash","toLowerCase","mxConstants","NONE","defaultBundle","specialBundle","req","parse","getText","load","isReady","e","text","lines","split","charAt","index","idx","charCodeAt","replace","unescape","params","defaultValue","replacePlaceholders","c","parseInt","join","mxPoint","x","y","mxRectangle","call","equals","clone","setRect","getCenterX","getCenterY","rect","minX","min","minY","maxX","maxY","intersect","r1","r2","b1","b2","grow","amount","getPoint","rotate90","t","tmp","fromRectangle","mxEffects","animateChanges","graph","changes","done","maxStep","step","animate","isRequired","change","mxGeometryChange","mxTerminalChange","mxValueChange","mxChildChange","mxStyleChange","state","getView","getState","cell","child","model","isEdge","setOpacity","shape","scale","dx","geometry","dy","sx","sy","cellRenderer","redraw","cascadeOpacity","setTimeout","delay","opacity","childCount","getChildCount","getChildAt","childState","edges","getEdges","edgeState","fadeOut","from","isEnabled","f","parentNode","removeChild","errorResource","closeResource","errorImage","removeCursors","element","cursor","children","childNodes","getCurrentStyle","currentStyle","getComputedStyle","parseCssNumber","parseFloat","isNaN","setPrefixedStyle","prefix","name","hasScrollbars","overflow","bind","scope","eval","expr","_mxJavaScriptExpression","message","findNode","attr","nodeType","NODETYPE_ELEMENT","getAttribute","firstChild","nextSibling","str","trim","ltrim","idx2","array","forEach","splice","isNode","nodeName","attributeName","attributeValue","isAncestorNode","ancestor","parent","getChildNodes","importNode","allChildren","newNode","attributes","createTextNode","createXmlDocument","implementation","createDocument","ActiveXObject","parseXml","DOMParser","xml","parser","parseFromString","async","validateOnParse","resolveExternals","loadXML","clearSelection","selection","empty","getSelection","removeAllRanges","getPrettyXml","tab","indent","NODETYPE_TEXT","getTextContent","htmlEntities","attrs","val","removeWhitespace","before","previousSibling","next","s","newline","String","isVml","tagUrn","getXml","linefeed","XMLSerializer","xmlSerializer","serializeToString","extractTextWithWhitespace","elems","blocks","ret","doExtract","elts","innerHTML","elem","nodeValue","replaceTrailingNewlines","pattern","postfix","undefined","innerText","textContent","setTextContent","serializer","getOuterHtml","outerHTML","ownerDocument","br","count","label","para","p","addTransparentBackgroundFilter","filter","linkAction","editor","action","pad","execute","linkInvoke","functName","arg","a","color","textDecoration","paddingLeft","getDocumentSize","b","d","fit","ds","left","offsetLeft","offsetWidth","offset","getDocumentScrollOrigin","sl","st","right","top","offsetTop","bottom","url","mxXmlRequest","send","onload","onerror","binary","timeout","ontimeout","setBinary","getAll","urls","remain","errors","status","getStatus","post","submit","target","simulate","loadInto","onreadystatechange","readyState","addEventListener","getValue","getNumber","Number","getColor","transients","shallow","equalPoints","equalEntries","removeDuplicates","arr","dict","extend","superCtor","output","toRadians","deg","PI","toDegree","rad","arcToCurves","x0","y0","angle","largeArcFlag","sweepFlag","fS","psai","abs","sds","ctx","cty","cpsi","cos","spsi","sin","rxd","ryd","rxdd","rydd","r1x","r2y","lamda","sqrt","seif","txd","tyd","tx","ty","atan2","s1","dr","sse","seg","ceil","segr","cpsir1","cpsir2","spsir1","spsir2","mc","ms","x2","y2","x3","y3","n","getBoundingBox","rotation","cx","p1","p2","p3","p4","getRotatedPoint","pt","x1","y1","getPortConstraints","terminal","edge","source","STYLE_PORT_CONSTRAINT","STYLE_SOURCE_PORT_CONSTRAINT","STYLE_TARGET_PORT_CONSTRAINT","directions","returnValue","DIRECTION_MASK_NONE","constraintRotationEnabled","STYLE_PORT_CONSTRAINT_ROTATION","STYLE_ROTATION","quad","DIRECTION_NORTH","DIRECTION_MASK_NORTH","DIRECTION_MASK_EAST","DIRECTION_MASK_SOUTH","DIRECTION_MASK_WEST","DIRECTION_WEST","DIRECTION_SOUTH","DIRECTION_EAST","reversePortConstraints","constraint","findNearestSegment","absolutePoints","last","current","dist","ptSegDistSq","getDirectedBounds","m","flipH","flipV","STYLE_DIRECTION","STYLE_FLIPH","STYLE_FLIPV","round","m2","getPerimeterPoint","pts","center","point","intersection","ip","distSq","rectangleIntersectsSegment","bounds","contains","intersects","tw","th","rw","rh","rx","ry","intersectsHotspot","hotspot","cy","start","STYLE_STARTSIZE","view","STYLE_HORIZONTAL","alpha","getOffset","container","scrollOffset","fixed","position","r","getBoundingClientRect","scrollLeft","wnd","defaultView","parentWindow","pageXOffset","pageYOffset","getScrollOrigin","includeAncestors","includeDocument","origin","convertPoint","chars","RegExp","rtrim","isNumeric","isFinite","isInteger","mod","denom","nume_a","nume_b","ua","ub","px","py","projlenSq","dotprod","lenSq","ptLineDist","relativeCcw","ccw","createImage","imageNode","borderStyle","sortCells","cells","ascending","lookup","sort","o1","o2","mxCellPath","create","PATH_SEPARATOR","comp","compare","getStylename","pairs","stylename","getStylenames","indexOfStylename","tokens","pos","addStylename","removeStylename","removeAllStylenames","setCellStyles","beginUpdate","setStyle","getStyle","endUpdate","isValue","sep","setCellStyleFlags","flag","setStyleFlag","cont","getAlignmentAsPoint","align","valign","ALIGN_CENTER","ALIGN_RIGHT","ALIGN_MIDDLE","ALIGN_BOTTOM","getSizeForString","fontSize","fontFamily","textWidth","DEFAULT_FONTSIZE","DEFAULT_FONTFAMILY","div","lineHeight","LINE_HEIGHT","display","zoom","whiteSpace","size","getViewXml","getModel","getRoot","eventsEnabled","isEventsEnabled","setEventsEnabled","drawPane","overlayPane","dialect","DIALECT_SVG","NS_SVG","canvas","cloneNode","translate","getTranslate","temp","mxTemporaryCellStates","enc","mxCodec","encode","destroy","getScaleForPageCount","pageCount","pageFormat","border","PAGE_FORMAT_A4_PORTRAIT","availablePageWidth","availablePageHeight","graphBounds","getGraphBounds","sc","getScale","graphWidth","graphHeight","pageFormatAspectRatio","graphAspectRatio","pagesAspectRatio","pageRoot","pagesAspectRatioSqrt","numRowPages","numColumnPages","scaleChange","currentTotalPages","numLoops","roundRowDownProportion","floor","roundColumnDownProportion","posterWidth","open","html","base","close","links","styles","outer","svg","ownerSVGElement","minWidth","minHeight","printScreen","print","focus","isInternalWindow","pre","prompt","confirm","error","icon","padding","img","makeDraggable","graphF","dragElement","autoscroll","scalePreview","highlightDropTargets","getDropTarget","dragSource","mxDragSource","dragOffset","TOOLTIP_VERTICAL_OFFSET","setGuidesEnabled","getGraphForEvent","createDragElement","createPreviewElement","DEFAULT_HOTSPOT","MIN_HOTSPOT_SIZE","MAX_HOTSPOT_SIZE","RENDERING_HINT_EXACT","RENDERING_HINT_FASTER","RENDERING_HINT_FASTEST","DIALECT_VML","DIALECT_MIXEDHTML","DIALECT_PREFERHTML","DIALECT_STRICTHTML","NS_XHTML","NS_XLINK","SHADOWCOLOR","VML_SHADOWCOLOR","SHADOW_OFFSET_X","SHADOW_OFFSET_Y","SHADOW_OPACITY","NODETYPE_ATTRIBUTE","NODETYPE_CDATA","NODETYPE_ENTITY_REFERENCE","NODETYPE_ENTITY","NODETYPE_PROCESSING_INSTRUCTION","NODETYPE_COMMENT","NODETYPE_DOCUMENT","NODETYPE_DOCUMENTTYPE","NODETYPE_DOCUMENT_FRAGMENT","NODETYPE_NOTATION","DEFAULT_VALID_COLOR","DEFAULT_INVALID_COLOR","OUTLINE_HIGHLIGHT_COLOR","OUTLINE_HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_SIZE","HIGHLIGHT_OPACITY","CURSOR_MOVABLE_VERTEX","CURSOR_MOVABLE_EDGE","CURSOR_LABEL_HANDLE","CURSOR_TERMINAL_HANDLE","CURSOR_BEND_HANDLE","CURSOR_VIRTUAL_BEND_HANDLE","CURSOR_CONNECT","HIGHLIGHT_COLOR","CONNECT_TARGET_COLOR","INVALID_CONNECT_TARGET_COLOR","DROP_TARGET_COLOR","VALID_COLOR","INVALID_COLOR","EDGE_SELECTION_COLOR","VERTEX_SELECTION_COLOR","VERTEX_SELECTION_STROKEWIDTH","EDGE_SELECTION_STROKEWIDTH","VERTEX_SELECTION_DASHED","EDGE_SELECTION_DASHED","GUIDE_COLOR","GUIDE_STROKEWIDTH","OUTLINE_COLOR","OUTLINE_STROKEWIDTH","HANDLE_SIZE","LABEL_HANDLE_SIZE","HANDLE_FILLCOLOR","HANDLE_STROKECOLOR","LABEL_HANDLE_FILLCOLOR","CONNECT_HANDLE_FILLCOLOR","LOCKED_HANDLE_FILLCOLOR","OUTLINE_HANDLE_FILLCOLOR","OUTLINE_HANDLE_STROKECOLOR","DEFAULT_TEXT_DIRECTION","WORD_WRAP","ABSOLUTE_LINE_HEIGHT","DEFAULT_FONTSTYLE","DEFAULT_STARTSIZE","DEFAULT_MARKERSIZE","DEFAULT_IMAGESIZE","ENTITY_SEGMENT","RECTANGLE_ROUNDING_FACTOR","LINE_ARCSIZE","ARROW_SPACING","ARROW_WIDTH","ARROW_SIZE","PAGE_FORMAT_A4_LANDSCAPE","PAGE_FORMAT_LETTER_PORTRAIT","PAGE_FORMAT_LETTER_LANDSCAPE","STYLE_PERIMETER","STYLE_SOURCE_PORT","STYLE_TARGET_PORT","STYLE_OPACITY","STYLE_FILL_OPACITY","STYLE_STROKE_OPACITY","STYLE_TEXT_OPACITY","STYLE_TEXT_DIRECTION","STYLE_OVERFLOW","STYLE_ORTHOGONAL","STYLE_EXIT_X","STYLE_EXIT_Y","STYLE_EXIT_DX","STYLE_EXIT_DY","STYLE_EXIT_PERIMETER","STYLE_ENTRY_X","STYLE_ENTRY_Y","STYLE_ENTRY_DX","STYLE_ENTRY_DY","STYLE_ENTRY_PERIMETER","STYLE_WHITE_SPACE","STYLE_FILLCOLOR","STYLE_POINTER_EVENTS","STYLE_SWIMLANE_FILLCOLOR","STYLE_MARGIN","STYLE_GRADIENTCOLOR","STYLE_GRADIENT_DIRECTION","STYLE_STROKECOLOR","STYLE_SEPARATORCOLOR","STYLE_STROKEWIDTH","STYLE_ALIGN","STYLE_VERTICAL_ALIGN","STYLE_LABEL_WIDTH","STYLE_LABEL_POSITION","STYLE_VERTICAL_LABEL_POSITION","STYLE_IMAGE_ASPECT","STYLE_IMAGE_ALIGN","STYLE_IMAGE_VERTICAL_ALIGN","STYLE_GLASS","STYLE_IMAGE","STYLE_IMAGE_WIDTH","STYLE_IMAGE_HEIGHT","STYLE_IMAGE_BACKGROUND","STYLE_IMAGE_BORDER","STYLE_NOLABEL","STYLE_NOEDGESTYLE","STYLE_LABEL_BACKGROUNDCOLOR","STYLE_LABEL_BORDERCOLOR","STYLE_LABEL_PADDING","STYLE_INDICATOR_SHAPE","STYLE_INDICATOR_IMAGE","STYLE_INDICATOR_COLOR","STYLE_INDICATOR_STROKECOLOR","STYLE_INDICATOR_GRADIENTCOLOR","STYLE_INDICATOR_SPACING","STYLE_INDICATOR_WIDTH","STYLE_INDICATOR_HEIGHT","STYLE_INDICATOR_DIRECTION","STYLE_SHADOW","STYLE_SEGMENT","STYLE_ENDARROW","STYLE_STARTARROW","STYLE_ENDSIZE","STYLE_SWIMLANE_LINE","STYLE_ENDFILL","STYLE_STARTFILL","STYLE_DASHED","STYLE_DASH_PATTERN","STYLE_FIX_DASH","STYLE_ROUNDED","STYLE_CURVED","STYLE_ARCSIZE","STYLE_ABSOLUTE_ARCSIZE","STYLE_SOURCE_PERIMETER_SPACING","STYLE_TARGET_PERIMETER_SPACING","STYLE_PERIMETER_SPACING","STYLE_SPACING","STYLE_SPACING_TOP","STYLE_SPACING_LEFT","STYLE_SPACING_BOTTOM","STYLE_SPACING_RIGHT","STYLE_ANCHOR_POINT_DIRECTION","STYLE_ELBOW","STYLE_FONTCOLOR","STYLE_FONTFAMILY","STYLE_FONTSIZE","STYLE_FONTSTYLE","STYLE_ASPECT","STYLE_AUTOSIZE","STYLE_FOLDABLE","STYLE_EDITABLE","STYLE_BACKGROUND_OUTLINE","STYLE_BENDABLE","STYLE_MOVABLE","STYLE_RESIZABLE","STYLE_RESIZE_WIDTH","STYLE_RESIZE_HEIGHT","STYLE_ROTATABLE","STYLE_CLONEABLE","STYLE_DELETABLE","STYLE_SHAPE","STYLE_EDGE","STYLE_JETTY_SIZE","STYLE_SOURCE_JETTY_SIZE","STYLE_TARGET_JETTY_SIZE","STYLE_LOOP","STYLE_ORTHOGONAL_LOOP","STYLE_ROUTING_CENTER_X","STYLE_ROUTING_CENTER_Y","FONT_BOLD","FONT_ITALIC","FONT_UNDERLINE","SHAPE_RECTANGLE","SHAPE_ELLIPSE","SHAPE_DOUBLE_ELLIPSE","SHAPE_RHOMBUS","SHAPE_LINE","SHAPE_IMAGE","SHAPE_ARROW","SHAPE_ARROW_CONNECTOR","SHAPE_LABEL","SHAPE_CYLINDER","SHAPE_SWIMLANE","SHAPE_CONNECTOR","SHAPE_ACTOR","SHAPE_CLOUD","SHAPE_TRIANGLE","SHAPE_HEXAGON","ARROW_CLASSIC","ARROW_CLASSIC_THIN","ARROW_BLOCK","ARROW_BLOCK_THIN","ARROW_OPEN","ARROW_OPEN_THIN","ARROW_OVAL","ARROW_DIAMOND","ARROW_DIAMOND_THIN","ALIGN_LEFT","ALIGN_TOP","TEXT_DIRECTION_DEFAULT","TEXT_DIRECTION_AUTO","TEXT_DIRECTION_LTR","TEXT_DIRECTION_RTL","DIRECTION_MASK_ALL","ELBOW_VERTICAL","ELBOW_HORIZONTAL","EDGESTYLE_ELBOW","EDGESTYLE_ENTITY_RELATION","EDGESTYLE_LOOP","EDGESTYLE_SIDETOSIDE","EDGESTYLE_TOPTOBOTTOM","EDGESTYLE_ORTHOGONAL","EDGESTYLE_SEGMENT","PERIMETER_ELLIPSE","PERIMETER_RECTANGLE","PERIMETER_RHOMBUS","PERIMETER_HEXAGON","PERIMETER_TRIANGLE","mxEventObject","properties","mxMouseEvent","sourceState","mxEventSource","eventSource","setEventSource","consumed","getName","getProperties","getProperty","isConsumed","consume","graphX","graphY","getEvent","getSource","isSource","getX","getClientX","getY","getClientY","getGraphX","getGraphY","getCell","isPopupTrigger","preventDefault","touches","isMouseEvent","eventListeners","getEventSource","removeListener","fireEvent","args","listen","updateListenerList","eventName","mxListenerList","entry","attachEvent","updateListener","listenerCount","removeEventListener","detachEvent","removeAllListeners","list","addGestureListeners","startListener","moveListener","endListener","removeGestureListeners","redirectMouseEvents","down","move","up","dblClick","fireMouseEvent","MOUSE_DOWN","MOUSE_MOVE","MOUSE_UP","release","addMouseWheelListener","wheelHandler","event","delta","detail","wheelDelta","disableContextMenu","srcElement","isTouchEvent","pointerType","MSPOINTER_TYPE_TOUCH","mozInputSource","isPenEvent","MSPOINTER_TYPE_PEN","isMultiTouchEvent","MSPOINTER_TYPE_MOUSE","isLeftMouseButton","buttons","which","isMiddleMouseButton","isRightMouseButton","isControlDown","isShiftDown","isMetaDown","isAltDown","shiftKey","altKey","ctrlKey","metaKey","getMainEvent","changedTouches","clientX","clientY","stopPropagation","cancelBubble","LABEL_HANDLE","ROTATION_HANDLE","CUSTOM_HANDLE","VIRTUAL_HANDLE","ACTIVATE","RESIZE_START","RESIZE","MOVE_START","MOVE","MOVE_END","PAN_START","PAN","PAN_END","MINIMIZE","HIDE","SHOW","CLOSE","DESTROY","REFRESH","SIZE","SELECT","FIRED","FIRE_MOUSE_EVENT","GESTURE","TAP_AND_HOLD","GET","RECEIVE","CONNECT","DISCONNECT","SUSPEND","RESUME","MARK","ROOT","POST","OPEN","SAVE","BEFORE_ADD_VERTEX","ADD_VERTEX","AFTER_ADD_VERTEX","DONE","EXECUTE","EXECUTED","BEGIN_UPDATE","START_EDIT","END_UPDATE","END_EDIT","BEFORE_UNDO","UNDO","REDO","CHANGE","NOTIFY","LAYOUT_CELLS","CLICK","SCALE","TRANSLATE","SCALE_AND_TRANSLATE","UP","DOWN","ADD","REMOVE","CLEAR","ADD_CELLS","CELLS_ADDED","MOVE_CELLS","CELLS_MOVED","RESIZE_CELLS","CELLS_RESIZED","TOGGLE_CELLS","CELLS_TOGGLED","ORDER_CELLS","CELLS_ORDERED","REMOVE_CELLS","CELLS_REMOVED","GROUP_CELLS","UNGROUP_CELLS","REMOVE_CELLS_FROM_PARENT","FOLD_CELLS","CELLS_FOLDED","ALIGN_CELLS","LABEL_CHANGED","CONNECT_CELL","CELL_CONNECTED","SPLIT_EDGE","FLIP_EDGE","START_EDITING","EDITING_STARTED","EDITING_STOPPED","ADD_OVERLAY","REMOVE_OVERLAY","UPDATE_CELL_SIZE","ESCAPE","DOUBLE_CLICK","START","RESET","method","username","password","withCredentials","request","decodeSimulateValues","isBinary","responseText","getDocumentElement","responseXML","XMLHttpRequest","overrideMimeType","onreadystatechaange","setRequestHeaders","setRequestHeader","old","onbeforeunload","form","pars","decodeURIComponent","mxClipboard","STEPSIZE","insertCount","setCells","getCells","isEmpty","cut","removeCells","getSelectionCells","getExportableCells","getTopmostCells","cloneCells","paste","getImportableCells","getDefaultParent","importCells","setSelectionCells","minimizable","movable","replaceNode","installMaximizeHandler","installMinimizeHandler","installCloseHandler","setMinimizable","setTitle","installMoveHandler","replaceChild","mxForm","className","mxImage","mxDivResizer","resizeWidth","resizeHeight","handlingResize","dropHandler","mouseDown","eventConsumer","evtName","me","mxToolbar","mxUndoableEdit","significant","mxUndoManager","closeImage","minimizeImage","normalizeImage","maximizeImage","resizeImage","minimumSize","contentHeightCorrection","touchAction","contentWrapper","activator","activate","hide","scrollable","activeWindow","zIndex","previousWindow","isResizable","resizable","startX","startY","dragHandler","setSize","minimize","getMinimumSize","marginLeft","minimized","maxDisplay","maximize","minSize","maximizable","maximized","minDisplay","docHeight","setLocation","closeImg","setImage","image","marginRight","marginTop","insertBefore","closable","getTable","addButtons","okFunct","cancelFunct","addText","input","addField","addCheckbox","checked","addTextarea","rows","addCombo","isMultiSelect","select","addOption","combo","isSelected","option","getDocumentWidth","getDocumentHeight","l","previewElement","enabled","currentGraph","currentDropTarget","currentPoint","currentGuide","currentHighlight","guidesEnabled","gridEnabled","dragElementZIndex","dragElementOpacity","checkEventSource","setEnabled","isGuidesEnabled","isGridEnabled","setGridEnabled","getCellAt","isActive","mouseMoveHandler","reset","dragExit","removeDragElement","removeListeners","stopDrag","startDrag","mouseMove","mouseUpHandler","mouseUp","pointerEvents","getElementForEvent","elementFromPoint","graphContainsEvent","dragEnter","dragOver","drop","isMouseDown","isMouseTrigger","mxGuide","graphHandler","getGuideStates","mxCellHighlight","panDx","panDy","autoScroll","scrollPointToVisible","autoExtend","isDropEnabled","highlight","isGridEnabledEvent","hideGuide","isEnabledForEvent","off","gridSize","snap","previewOffset","dropTarget","noReset","updateDefaultMode","addItem","pressedIcon","factoryMethod","initialClassName","mouseHandler","backgroundColor","menu","mxPopupMenu","currentImg","isMenuShowing","hideMenu","addActionCombo","options","selectedIndex","addSwitchMode","altIcon","selectedMode","defaultMode","selectMode","addMode","toggle","defaultFunction","domNode","resetMode","forced","addSeparator","addBreak","addLine","hr","undone","redone","isSignificant","notify","die","undo","redo","history","indexOfNextAdd","canUndo","edit","canRedo","undoableEditHappened","undoableEdit","shift","edits","mxUrlConverter","mxPanningManager","thread","active","tdx","tdy","t0x","t0y","scrollbars","mouseListener","stop","addMouseListener","mouseUpListener","createThread","setInterval","panGraph","getDx","getDy","panTo","handleMouseOut","damper","clearInterval","setTranslate","removeMouseListener","mxAutoSaveManager","changeHandler","graphModelChanged","setGraph","mxAnimation","mxMorphing","steps","ease","mxImageBundle","alt","images","mxImageExport","mxAbstractCanvas2D","converter","createUrlConverter","mxXmlCanvas2D","root","writeDefaults","mxSvgCanvas2D","styleEnabled","gradients","defs","createStyle","baseUrl","baseDomain","updateBaseUrl","protocol","host","pathname","lastIndexOf","getBaseUrl","setBaseUrl","getBaseDomain","setBaseDomain","isRelativeUrl","convert","submenuImage","useLeftButtonForPopup","itemCount","autoExpand","smartSeparators","labels","iconCls","willAddSeparator","containsItems","col1","col2","col3","paddingRight","textAlign","createSubmenu","currentSelection","eventReceiver","activeRow","hideSubmenu","showSubmenu","createRange","addCheckmark","item","backgroundImage","backgroundRepeat","backgroundPosition","row","force","showMenu","autoSaveDelay","autoSaveThrottle","autoSaveThreshold","ignoredChanges","lastSnapshot","save","now","isRunning","startAnimation","updateAnimation","stopAnimation","mxCellStatePreview","animateCell","recurse","getDelta","isVertex","moveState","stopRecursion","getOriginForCell","getParent","geo","getCellGeometry","relative","pgeo","putImage","fallback","getImage","includeOverlays","drawState","visitStatesRecursive","drawCellState","drawOverlays","getLinkForCellState","setLink","drawShape","drawText","mxShape","checkBounds","paint","restore","overlays","states","path","rotateHtml","lastX","lastY","moveOp","lineOp","quadOp","curveOp","closeOp","createState","fillAlpha","strokeAlpha","fillColor","gradientFillAlpha","gradientColor","gradientAlpha","gradientDirection","strokeColor","strokeWidth","dashed","dashPattern","fixDash","lineCap","lineJoin","miterLimit","fontColor","fontBackgroundColor","fontBorderColor","fontStyle","shadow","shadowColor","shadowAlpha","shadowDx","shadowDy","rotationCx","rotationCy","format","addOp","rotatePoint","theta","pop","rotate","setAlpha","setFillAlpha","setStrokeAlpha","setFillColor","setGradient","color1","color2","direction","alpha1","alpha2","setStrokeColor","setStrokeWidth","setDashed","setDashPattern","setLineCap","setLineJoin","setMiterLimit","setFontColor","setFontBackgroundColor","setFontBorderColor","setFontSize","setFontFamily","setFontStyle","setShadow","setShadowColor","setShadowAlpha","setShadowOffset","begin","moveTo","lineTo","quadTo","curveTo","arcTo","curves","end","textEnabled","compressed","toFixed","roundrect","ellipse","aspect","wrap","clip","dir","stroke","fill","fillAndStroke","useDomParser","matchHtmlAlignment","foEnabled","foAltText","foOffset","textOffset","imageOffset","strokeTolerance","minStrokeWidth","refCount","blockImagePointerEvents","lineHeightCorrection","pointerEventsValue","fontMetricsPadding","cacheOffsetSize","hash","tagName","namespace","createAlternateContent","fo","createGradientId","getSvgGradient","gradient","tmpId","getElementById","createSvgGradient","op","addNode","filled","stroked","updateFill","updateStroke","transform","createShadow","createTolerance","originalRoot","getCurrentStrokeWidth","sw","updateStrokeAttributes","createDashPattern","pat","tol","removeAttribute","setAttributeNS","convertHtml","xd","xb","adoptNode","ta","createDiv","lh","css","invalidateCachedOffsetSize","mxCachedOffsetWidth","mxCachedFinalOffsetWidth","mxCachedFinalOffsetHeight","updateText","group","maxHeight","maxWidth","ow","oh","padX","sizeDiv","padY","wordWrap","ws","div2","padDx","plainText","createClip","updateFont","anchor","textHeight","addTextBackground","bbox","getBBox","ie","fontWeight","mxVmlCanvas2D","setStates","stencil","initStyles","mxStencil","desc","parseDescription","parseConstraints","rotatedHtmlBackground","vmlScale","createVmlElement","coordsize","strokeweight","strokecolor","createStroke","createFill","createTransparentFill","flip","endcap","joinstyle","miterlimit","dashstyle","getVmlDashStyle","tok","createShadowStroke","createShadowFill","cpx0","cpy0","qpx1","qpy1","cpx3","cpy3","cpx1","cpy1","cpx2","cpy2","createRect","box","margin","inner","rot","real_cos","real_sin","top_fix","left_fix","divParent","textpathok","v","tp","on","horizontal","vertical","guideX","guideY","rounded","getGuideTolerance","createGuideShape","guide","mxPolyline","isDashed","isStateIgnored","trx","overrideX","stateX","valueX","overrideY","stateY","valueY","tt","ttX","ttY","middle","snapX","override","getOverlayPane","snapY","points","getGuideColor","scrollWidth","antiAlias","minSvgStrokeWidth","boundingBox","svgStrokeTolerance","svgPointerEvents","shapePointerEvents","stencilPointerEvents","outline","useSvgBoundingBox","strokewidth","fillOpacity","strokeOpacity","isParseVml","isHtmlAllowed","getSvgScreenOffset","createSvg","createHtml","createVml","reconfigure","updateBoundsFromPoints","redrawShape","redrawHtmlShape","updateBoundingBox","lastChild","getLabelBounds","isPaintBoundsInverted","getLabelMargins","createVmlGroup","createCanvas","insertAdjacentHTML","destroyCanvas","createSvgCanvas","updateVmlContainer","createVmlCanvas","updateHtmlBounds","updateHtmlFilters","updateHtmlColors","isShadow","east","south","west","north","borderColor","borderWidth","setTransparentBackgroundImage","mxRefCount","releaseSvgGradients","oldGradients","strokeDrawn","updateTransform","configureCanvas","bg","bb","createBoundingBox","createTransparentSvgRectangle","paintEdgeShape","paintVertexShape","getGradientBounds","getShapeRotation","paintBackground","paintForeground","getArcSize","paintGlassEffect","arc","isRounded","addPoints","arcSize","exclude","initialMove","pe","slice","p0","wp","nx1","ny1","nx2","ny2","resetStyles","spacing","startSize","endSize","startArrow","endArrow","glass","setCursor","getCursor","isRoundable","augmentBoundingBox","getRotation","getTextRotation","mxText","verticalTextRotation","grads","defaultLocalized","allowEval","constraints","w0","h0","bgNode","fgNode","conns","parseConstraint","perimeter","mxConnectionConstraint","evaluateTextAttribute","attribute","evaluateAttribute","loc","computeAspect","minScale","drawChildren","disableShadow","drawNode","inverse","parseRegularly","pointCount","segs","childNode","childName","ps","arcsize","factor","mxStencilRegistry","getStencil","stencils","addStencil","mxMarker","markers","addMarker","createMarker","unitX","unitY","mxActor","mxCloud","mxRectangleShape","mxEllipse","mxDoubleEllipse","mxRhombus","mxArrow","arrowWidth","mxArrowConnector","arrowSpacing","family","spacingTop","spacingRight","spacingBottom","spacingLeft","background","clipped","labelPadding","textDirection","updateMargin","mxTriangle","mxHexagon","mxLine","mxImageShape","mxLabel","mxCylinder","mxConnector","mxSwimlane","mxGraphLayout","WeightedCellSorter","weightedValue","mxStackLayout","mxPartitionLayout","mxCompactTreeLayout","invert","mxRadialTreeLayout","mxFastOrganicLayout","mxCircleLayout","radius","mxParallelEdgeLayout","mxCompositeLayout","layouts","master","mxEdgeLabelLayout","mxGraphAbstractHierarchyCell","mxGraphHierarchyNode","connectsAsTarget","connectsAsSource","mxGraphHierarchyEdge","ids","mxGraphHierarchyModel","layout","vertices","roots","tightenToSource","getGraph","vertexMapper","edgeMapper","maxRank","internalVertices","getChildVertices","SOURCESCANSTARTRANK","createInternalCells","j","internalEdge","realEdges","realEdge","targetCell","getVisibleTerminal","internalTargetCell","mxSwimlaneModel","mxHierarchicalLayoutStage","mxMedianHybridCrossingReduction","MedianCellSorter","mxMinimumCycleRemover","mxCoordinateAssignment","intraCellSpacing","interRankCellSpacing","orientation","initialX","parallelEdgeSpacing","mxSwimlaneOrdering","mxHierarchicalLayout","deterministic","createArrow","widthFactor","endOffsetX","endOffsetY","createOpenArrow","diamond","swFactor","tk","redrawPath","events","hw","hh","prev","paintLine","paintCurvedLine","ix","iy","arrow","nx","ny","basex","basey","floorx","floory","p0x","p0y","p1x","p1y","p2x","p2y","p3x","p3y","p5x","p5y","getEdgeWidth","isMarkerStart","getStartArrowWidth","isMarkerEnd","getEndArrowWidth","startWidth","endWidth","edgeWidth","openEnded","isOpenEnded","markerStart","markerEnd","isArrowRounded","i0","orthx","orthy","fns","startNx","startNy","paintMarker","outStartX","outStartY","inEndX","inEndY","dx1","dy1","dist1","tmp1","dist2","strokeWidthFactor","angleFactor","outX","outY","inX","inY","c1x","c1y","c2x","c2y","inStartX","inStartY","ptX","ptY","widthArrowRatio","spaceX","spaceY","baseSpacingTop","baseSpacingBottom","baseSpacingLeft","baseSpacingRight","replaceLinefeeds","ignoreClippedStringSize","ignoreStringSize","textWidthPadding","lastValue","cacheEnabled","update","unscaledWidth","lastUnscaledWidth","realHtml","fmt","getAutoDirection","updateSize","textDiv","updateHtmlFilter","updateHtmlTransform","exec","updateInnerHtml","divs","unrotatedBoundingBox","updateValue","bd","enableWrap","getSpacing","mid","preserveImageAspect","useVml","imageSize","indicatorSize","indicatorSpacing","indicatorShape","indicator","indicatorColor","indicatorStrokeColor","indicatorGradientColor","indicatorDirection","paintImage","paintIndicator","getImageBounds","getIndicatorBounds","indicatorImage","hasChildNodes","getCylinderSize","isForeground","sourceMarker","targetMarker","getTitleSize","isHorizontal","shapeVertical","realHorizontal","realFlipH","realFlipV","swimlaneLine","paintRoundedSwimlane","paintSwimlane","paintSeparator","paintDivider","useBoundingBox","moveCell","getConstraint","getCellStyle","traverse","vertex","directed","func","visited","edgeCount","getEdgeCount","getEdgeAt","getTerminal","isAncestor","traverseAncestors","isVertexMovable","isCellMovable","isVertexIgnored","isCellVisible","isEdgeIgnored","setEdgeStyleEnabled","setOrthogonalEdge","getParentOffset","parentGeo","getGeometry","setEdgePoints","mxGeometry","setRelative","parentOffset","setGeometry","setVertexLocation","getVertexBounds","dx0","dy0","arrangeGroups","topBorder","rightBorder","bottomBorder","leftBorder","updateGroupBounds","nudge","rankIndex","marginBottom","keepFirstLocation","resizeParent","resizeParentMax","resizeLast","borderCollapse","allowGaps","pstate","getIndex","getParentSize","isLayer","currentRoot","getLayoutCells","c1","c2","geo1","geo2","fillValue","isSwimlane","horz","childStyle","setChildGeometry","isCellCollapsed","updateParentGeometry","pgeo2","resizeVertices","other","getStartSize","maintainParentLocation","groupPadding","groupPaddingTop","groupPaddingRight","groupPaddingBottom","groupPaddingLeft","parentsChanged","moveTree","levelDistance","nodeDistance","resetEdges","prefHozEdgeSep","prefVertEdgeOff","minEdgeJetty","channelBuffer","edgeRouting","sortEdges","alignRanks","maxRankHeight","getConnections","findTreeRoots","Object","parentX","parentY","dfs","findRankHeights","setCellHeights","g","horizontalLayout","verticalLayout","moveNode","adjustParents","localEdgeProcessing","sortOutgoingEdges","e1","e2","end1","end2","rank","createNode","out","attachParent","layoutLeaf","offsetX","offsetY","siblingOffset","contour","upperHead","createLine","lowerHead","upperTail","lowerTail","sum","merge","total","upper","lower","bridge","a1","a2","line1","line2","line","processNodeOutgoing","parentCell","sortedCells","sortingCriterion","availableWidth","requiredWidth","edgeSpacing","currentXOffset","currentYOffset","maxYOffset","parentBounds","childCell","childBounds","getEdgesBetween","newPoints","angleOffset","rootx","rooty","autoRadius","rowMinX","rowMaxX","rowMinCenX","rowMaxCenX","rowRadi","rootBounds","centerX","centerY","vertexBounds","calcRowDims","maxLeftGrad","maxRightGrad","leftGrad","rightGrad","xLeftLimit","xRightLimit","fullWidth","xProportion","totalTheta","averTheta","nextTheta","lastTheta","rowNum","rowHasChildren","useInputOrigin","disableEdgeStyle","forceConstant","forceConstantSquared","minDistanceLimit","maxDistanceLimit","minDistanceLimitSquared","initialTemp","temperature","maxIterations","iteration","vertexArray","dispX","dispY","cellLocation","radiusSquared","isMoveable","neighbours","indices","allowedToRun","initialBounds","getBoundingBoxFromGeometry","getOpposites","resetEdge","calcRepulsion","calcAttraction","calcPositions","reduceTemperature","minx","miny","moveCells","deltaLength","newXDisp","newYDisp","k","xDelta","yDelta","deltaLengthSquared","displacementX","displacementY","vertexCount","random","deltaLengthWithRadius","moveCircle","getRadius","circle","phi","findParallels","parallels","getEdgeId","trg","route","scx","scy","tcx","tcy","len","placeLabels","avoid","labRect","dy2","dx2","minRank","nextLayerConnectedCells","previousLayerConnectedCells","getNextLayerConnectedCells","layer","getPreviousLayerConnectedCells","getGeneralPurposeVariable","setGeneralPurposeVariable","setX","setY","hashCode","getRankValue","otherNode","getCoreCell","isReversed","ranks","dfsCount","undirectedEdges","directedEdges","initialRank","startNodes","internalNode","internalNodes","startNodesCopy","edgesToBeMarked","layerDeterminingEdges","allEdgesScanned","minimumLayer","removedCell","currentMaxLayer","fixRanks","rankList","rootsArray","oldRootsArray","seen","parentToCellRankDifference","dfsRoots","trackAncestors","seenNodes","extendedDfs","connectingEdge","rootId","outgoingEdges","targetNode","ancestors","childHash","hashCodeLength","ranksPerGroup","swimlanes","swimlaneIndex","ii","maxChainDfs","lowerRank","upperRank","chainCount","slIndex","incomingEdges","nestedBestRanks","currentBestCrossings","iterationsWithoutImprovement","maxNoImprovementIterations","calculateCrossings","weightedMedian","transpose","candidateCrossings","numRanks","totalCrossings","calculateRankCrossing","previousRank","tmpIndices","rankPosition","connectedCells","nodeIndices","connectedNode","otherCellRankPosition","concat","firstIndex","treeSize","tree","treeIndex","mainLoopIteration","improved","maxCount","orderedCells","tempRank","leftCellAboveConnections","leftCellBelowConnections","rightCellAboveConnections","rightCellBelowConnections","leftAbovePositions","leftBelowPositions","rightAbovePositions","rightBelowPositions","leftCell","rightCell","totalCurrentCrossings","totalSwitchedCrossings","ik","downwardSweep","medianRank","rankValue","numCellsForRank","medianValues","reservedPositions","nextLevelConnectedCells","nextRankValue","sorterEntry","medianValue","arrayCount","medianPoint","leftMedian","rightMedian","unseenNodesArray","unseenNodes","modelRoots","seenNodesCopy","jettyPositions","limitX","currentXDelta","widestRank","rankTopY","rankBottomY","widestRankValue","rankWidths","rankY","fineTuning","nextLayerConnectedCache","previousLayerConnectedCache","printStatus","initialCoords","minNode","bestXDelta","medianPos","minPath","setCellLocations","nodeList","nodeWrapper","maxTries","tolerance","cellWrapper","numNextLayerConnected","numPreviousLayerConnected","medianNextLevel","medianXValue","medianPreviousLevel","numConnectedNeighbours","currentPosition","cellMedian","positionChanged","leftLimit","rankSize","rightLimit","connectedCell","connectedCellWrapper","rankMedianPosition","weightedValues","cellMap","currentCell","calculatedWeightedValue","numConnectionsNextLevel","leftBuffer","rightBuffer","collection","totalWeight","facade","calculateWidestRank","rankCoordinates","localX","boundsWarning","numEdges","lastRankMaxCellHeight","maxCellHeight","distanceToNextRank","referenceX","edgeStraight","refSegCount","upSegCount","downSegCount","upXPositions","downXPositions","currentX","nextX","repositionValid","rankArray","MAX_VALUE","edgeStyle","mxHierarchicalEdgeStyle","ORTHOGONAL","POLYLINE","CURVE","setEdgePosition","cellIndex","currentCells","currentRank","sorter","connectedEdgeCount","connectedEdges","connections","innerCell","connIndex","connectedEdgeGroupCount","numActualEdges","parallelEdgeCount","jettys","layoutReversed","realSource","reversed","arrayOffset","jetty","modelSource","isPort","loopStart","loopLimit","loopDelta","positionX","topChannelY","bottomChannelY","modelTarget","realTarget","processReversedEdge","realCell","positionY","reversedOverSwimlane","cellId","STRAIGHT","mxSwimlaneLayout","mxGraphModel","currentEdit","createUndoableEdit","setRoot","mxRootChange","previousIndex","mxCollapseChange","collapsed","mxVisibleChange","mxCellAttributeChange","mxCell","onInit","moveParent","parentBorder","interHierarchySpacing","edgesCache","edgeSourceTermCache","edgesTargetTermCache","Array","rootsCopy","run","findRoots","best","maxDiff","fanOut","fanIn","diff","cachedEdges","isCollapsed","terminalCache","term","hierarchyVertices","allVertexSet","filledVertexSet","filterDescendants","filledVertexSetEmpty","candidateRoots","vertexSet","cycleStage","layeringStage","crossingStage","placementStage","allVertices","currentComp","vertexID","edgeIsSource","netCount","isSource2","otherTerm","dummyVertexWidth","dummyVertices","getChildCells","insertVertex","layoutBounds","lane","childrenY","maxChildrenY","newGeo","leftGroupBorder","isValidAncestor","laneCounter","otherVertex","otherIndex","maintainEdgeParent","ignoreRelativeEdgeParent","createIds","nextId","updateLevel","endingUpdate","createRoot","isCreateIds","setCreateIds","insert","filterCells","getDescendants","rootChanged","oldRoot","cellAdded","isRoot","parentChanged","updateEdgeParents","getId","setId","createId","collision","updateEdgeParent","getNearestCommonAncestor","origin1","getOrigin","origin2","cell1","cell2","getParentPath","cellRemoved","parentForCellChanged","oldIndex","par","getChildren","getChildEdges","setTerminal","terminalChanged","setTerminals","terminalForCellChanged","insertEdge","removeEdge","getDirectedEdgeCount","outgoing","ignoredEdge","getIncomingEdges","getOutgoingEdges","incoming","includeLoops","tmp2","directedMatch","oppositeMatch","sources","targets","terminals","topmost","isConnectable","setValue","valueForCellChanged","valueChanged","geometryForCellChanged","styleForCellChanged","setCollapsed","collapsedStateForCellChanged","visibleStateForCellChanged","mergeChildren","to","cloneAllEdges","mapping","mergeChildrenImpl","getParents","parents","cloneCell","includeChildren","clones","cloneCellImpl","restoreClone","ident","cellCloned","cloneChild","connect","isConnect","connectable","mxTransient","newValue","setVertex","setEdge","setConnectable","setParent","removeFromParent","getEdgeIndex","isOutgoing","removeFromTerminal","hasAttribute","userObject","cloneValue","TRANSLATE_CONTROL_POINTS","alternateBounds","sourcePoint","targetPoint","swap","getTerminalPoint","setTerminalPoint","ct","fixedAspect","resolve","t1","t2","mxPerimeter","RectanglePerimeter","orthogonal","pi","pi2","beta","tan","EllipsePerimeter","det","xout1","xout2","yout1","yout2","pow","xout","yout","RhombusPerimeter","TrianglePerimeter","corner","HexagonPerimeter","mxPrintPreview","pageSelector","pageScale","mxStylesheet","putDefaultVertexStyle","createDefaultVertexStyle","putDefaultEdgeStyle","createDefaultEdgeStyle","mxCellState","absoluteOffset","mxGraphSelectionModel","mxSelectionChange","selectionModel","added","removed","mxCellEditor","zoomHandler","isEditing","editingCell","stopEditing","mxCellRenderer","autoOrigin","printOverlays","printControls","printBackgroundImage","targetWindow","clipping","getWindow","getDoctype","appendGraph","forcePageBreaks","keepOpen","previousInitializeOverlay","initializeOverlay","overlay","getDrawPane","initControl","control","handleEvents","clickHandler","isNewWindow","writeHead","currentScale","availableHeight","hpages","vpages","writePageSelector","createPageSelector","addPage","pageBreakAfter","addPageBreak","cov","getCoverPages","apx","getAppendices","pageNum","renderPage","addGraphFragment","insertBackgroundImage","closeDocument","writePostfix","js","pageNumber","pageBreakInside","innerDiv","viewport","previousContainer","getCanvas","backgroundPane","getBackgroundPane","realScale","graphEnabled","tempClip","rendering","orig","svgs","getLinkForCell","putCellStyle","getDefaultVertexStyle","getDefaultEdgeStyle","defaultStyle","tmpStyle","invalidStyle","invalid","visibleSourceState","visibleTargetState","terminalDistance","segments","getPerimeterBounds","setAbsoluteTerminalPoint","getVisibleTerminalState","setVisibleTerminalState","terminalState","getCellBounds","cellBounds","getPaintBounds","paintBounds","updateCachedBounds","setState","doneResource","updatingSelectionResource","singleSelection","isSingleSelection","setSingleSelection","changeSelection","setCell","getFirstSelectableCell","isCellSelectable","addCell","addCells","removeCell","trigger","modified","autoSize","selectText","emptyLabelText","escapeCancelsEditing","textNode","minResize","wordWrapPadding","blurEnabled","initialValue","contentEditable","isLegacyEditor","installListeners","applyValue","labelChanged","setAlign","getInitialValue","getEditingValue","getCurrentValue","isCancelEditingKeyEvent","focusLost","isStopEditingEvent","keyCode","keypressHandler","clearOnChange","getEmptyLabelText","keyupHandler","resizeThread","clearTimeout","isEnterStopsCellEditing","isEventSource","lw","bds","hpos","vpos","legacySpacing","isWrapping","getEditorBounds","isInvokesStopCellEditing","getBackgroundColor","absoluteRoot","startEditing","tooltipHandler","hideTooltip","bold","italic","uline","isHideLabel","isSelectText","execCommand","cancel","initial","blur","prepareTextarea","getEditingCell","defaultShapes","defaultEdgeShape","defaultVertexShape","defaultTextShape","legacyControlPosition","forceControlClickHandler","registerShape","initializeShape","configureShape","createShape","getShapeConstructor","createIndicatorShape","getShape","getIndicatorShape","getIndicatorColor","getIndicatorGradientColor","getIndicatorImage","postConfigureShape","resolveColor","checkPlaceholderStyles","values","field","referenced","getSwimlane","swimlaneIndicatorColorAttribute","rstate","getLabelValue","getLabel","createLabel","isForceHtml","isHtmlLabel","getVerticalAlign","isLabelClipped","initializeLabel","forceGetCell","isLabelEvent","nativeDblClickEnabled","createCellOverlays","getCellOverlays","installCellOverlayListeners","createControl","getFoldingImage","foldingEnabled","createControlClickHandler","collapse","foldCells","innerNode","first","isShapeEvent","redrawLabel","wrapping","isTextShapeInvalid","nextScale","getTextScale","isClipping","vis","redrawLabelShape","check","property","dh","rotateLabelBounds","redrawCellOverlays","getBounds","redrawControl","getControlBounds","insertStateAfter","htmlNode","shapes","getShapesForState","shapeChanged","selectionCellsHandler","updateHandler","isShapeInvalid","doRedrawShape","mxEdgeStyle","EntityRelation","segment","isSourceLeft","sourceGeometry","isTargetLeft","targetGeometry","getRoutingCenterY","xe","ye","dep","midY","Loop","transformControlPoint","getRoutingCenterX","ElbowConnector","SideToSide","TopToBottom","SegmentConnector","hints","lastPushed","hint","pushPoint","lastInx","newHints","currentTerm","currentPt","hozChan","vertChan","currentHint","fixedVertAlign","fixedHozAlign","inHozChan","inVertChan","orthBuffer","orthPointsFallback","dirVectors","wayPoints1","routePatterns","inlineRoutePatterns","vertexSeperations","limits","LEFT_MASK","TOP_MASK","RIGHT_MASK","BOTTOM_MASK","LEFT","TOP","RIGHT","BOTTOM","SIDE_MASK","CENTER_MASK","SOURCE_MASK","TARGET_MASK","VERTEX_MASK","getJettySize","OrthConnector","sourceEdge","targetEdge","sourceX","sourceY","sourceWidth","sourceHeight","targetX","targetY","targetWidth","targetHeight","scaledSourceBuffer","scaledTargetBuffer","totalBuffer","tooShort","portConstraint","newRect","sourceCenX","sourceCenY","targetCenX","targetCenY","sourceTopDist","sourceLeftDist","sourceBottomDist","sourceRightDist","dirPref","horPref","vertPref","preferredHorizDist","preferredVertDist","prefOrdering","preferredOrderSet","sourceIndex","targetIndex","routePattern","currentIndex","lastOrientation","initialOrientation","currentOrientation","nextDirection","directionIndex","tar","sou","side","limit","souTar","deltaX","deltaY","targetOrientation","sameOrient","getRoutePattern","mxStyleRegistry","putValue","mxGraphView","mxCurrentRootChange","isUp","mxGraph","renderHint","stylesheet","mouseListeners","multiplicities","imageBundles","createCellRenderer","setSelectionModel","createSelectionModel","setStylesheet","createStylesheet","createGraphView","graphModelChangeListener","createHandlers","revalidate","mxCellOverlay","tooltip","mxOutline","mxMultiplicity","validNeighbors","countError","typeError","validNeighborsAllowed","mxLayoutManager","undoHandler","beforeUndo","moveHandler","cellsMoved","mxSwimlaneManager","addEnabled","resizeEnabled","addHandler","isAddEnabled","cellsAdded","isResizeEnabled","cellsResized","isCellVisibleFn","oldValidateCellState","validateCellState","oldBounds","oldStates","getStates","oldScale","oldDoRedrawShape","self","oldPaint","resurse","setScale","resetValidationState","validateCell","setGraphBounds","deltas","mxGraphHandler","panHandler","updatePreview","updateHint","escapeHandler","refreshHandler","pBounds","getPreviewBounds","livePreviewUsed","setHandlesVisibleForCells","mxPanningHandler","forcePanningHandler","isForcePanningEvent","gestureHandler","eo","isPinchEnabled","initialScale","mouseDownEvent","maxScale","zoomTo","mxPopupMenuHandler","inTolerance","mxCellMarker","validColor","invalidColor","mxSelectionCellsHandler","handlers","refresh","getSelectionModel","mxConnectionHandler","mxConstraintHandler","resetHandler","currentFocus","mxRubberband","forceRubberbandHandler","isForceRubberbandEvent","repaint","mxHandle","mxVertexHandler","livePreview","invalidate","validate","mxEdgeHandler","dirty","isRendering","mxElbowEdgeHandler","mxEdgeSegmentHandler","mxKeyHandler","normalKeys","shiftKeys","controlKeys","controlShiftKeys","keydownHandler","keyDown","mxTooltipHandler","mxCellTracker","highlightColor","repaintHandler","mxDefaultKeyHandler","handler","escape","hideProperties","mxDefaultPopupMenu","config","mxDefaultToolbar","mxEditor","actions","addActions","cycleAttributeValues","popupHandler","undoManager","createGraph","toolbar","createToolbar","keyHandler","configure","cycleAttributeName","EMPTY_POINT","updatingDocumentResource","captureDocumentGesture","optimizeVmlReflows","updateStyle","lastNode","lastHtmlNode","lastForegroundNode","lastForegroundHtmlNode","setCurrentRoot","sizeDidChange","scaleAndTranslate","previousScale","previousTranslate","viewStateChanged","removeState","includeEdges","invalidating","prevDisplay","placeholder","getEmptyBounds","validateBackground","createBackgroundPageShape","validateBackgroundImage","validateBackgroundPage","getBackgroundImage","redrawBackgroundImage","pageVisible","getBackgroundPageBounds","backgroundPageShape","isHideOnHover","updateCellState","stateValidated","pState","getChildOffsetForCell","updateVertexState","updateEdgeState","updateVertexLabelOffset","updateFixedTerminalPoints","updatePoints","updateFloatingTerminalPoints","updateEdgeBounds","updateEdgeLabelOffset","fg","keepEdgesInForeground","keepEdgesInBackground","updateFixedTerminalPoint","getConnectionConstraint","getFixedTerminalPoint","getConnectionPoint","isOrthogonal","updateBoundsFromStencil","asp","getEdgeStyle","getTerminalPort","srcBounds","trgBounds","isLoopStyleEnabled","tc","defaultLoopStyle","isAllowEval","updateFloatingTerminalPoint","getFloatingTerminalPoint","getNextPoint","orth","getPerimeterFunction","opposite","markerSize","gx","gy","getRelativePoint","totalLength","minDist","xSegment","ySegment","projlen","yDistance","setRendering","setAllowEval","getCellStates","getDecoratorPane","decoratorPane","isContainerEvent","isScrollEvent","outWidth","inWidth","outHeight","inHeight","fireGestureEvent","popupMenuHandler","endHandler","createHtmlPane","updateContainerStyle","onResize","updateHtmlCanvasSize","pane","createVmlPane","getTranslateForRoot","cellEditor","portsEnabled","doubleTapEnabled","doubleTapTimeout","doubleTapTolerance","lastTouchY","lastTouchTime","tapAndHoldEnabled","tapAndHoldDelay","tapAndHoldInProgress","tapAndHoldValid","initialTouchX","initialTouchY","defaultOverlap","defaultParent","alternateEdgeStyle","pageBreaksVisible","pageBreakColor","pageBreakDashed","minPageBreakDist","preferPageSize","escapeEnabled","invokesStopCellEditing","enterStopsCellEditing","useScrollbarsForPanning","exportEnabled","importEnabled","cellsLocked","cellsCloneable","cellsEditable","cellsDeletable","cellsMovable","edgeLabelsMovable","vertexLabelsMovable","dropEnabled","splitEnabled","cellsResizable","cellsBendable","cellsSelectable","cellsDisconnectable","autoSizeCells","autoSizeCellsOnAdd","ignoreScrollbars","translateToScrollPosition","timerAutoScroll","allowAutoPanning","maximumGraphBounds","minimumGraphSize","minimumContainerSize","maximumContainerSize","resizeContainer","allowNegativeCoordinates","constrainChildren","constrainRelativeChildren","extendParents","extendParentsOnAdd","extendParentsOnMove","recursiveResize","collapseToPreferredSize","zoomFactor","keepSelectionVisibleOnZoom","centerZoom","resetViewOnRootChange","resetEdgesOnResize","resetEdgesOnMove","resetEdgesOnConnect","allowLoops","multigraph","connectableEdges","allowDanglingEdges","cloneInvalidEdges","disconnectOnMove","labelsVisible","htmlLabels","swimlaneSelectionEnabled","swimlaneNesting","minFitScale","maxFitScale","collapsedImage","expandedImage","warningImage","alreadyConnectedResource","containsValidationErrorsResource","collapseExpandResource","createCellEditor","createTooltipHandler","createSelectionCellsHandler","connectionHandler","createConnectionHandler","createGraphHandler","panningHandler","createPanningHandler","panningEnabled","createPopupMenuHandler","getStylesheet","getSelectionCellsForChanges","processChange","updateSelection","removeSelectionCells","setDefaultParent","removeStateForCell","newParent","home","addCellOverlay","removeCellOverlay","removeCellOverlays","clearCellOverlays","setCellWarning","warning","isSelect","setSelectionCell","startEditingAtCell","getSelectionCell","isCellEditable","convertValueToString","cellLabelChanged","isAutoSizeCell","cellSizeUpdated","click","mxe","isTransparentClickEvent","selected","isCellSelected","selectCellForEvent","swimlane","isSwimlaneSelectionEnabled","getSwimlaneAt","isToggleEvent","tapAndHold","panningTrigger","marker","currentColor","markedState","mark","createEdgeState","panningManager","createPanningManager","getBorderSizes","borderLeftStyle","borderLeftWidth","paddingTop","borderTopStyle","borderTopWidth","borderRightStyle","borderRightWidth","paddingBottom","borderBottomStyle","borderBottomWidth","getPreferredPageSize","page","hCount","vCount","keepOrigin","ignoreWidth","ignoreHeight","getBorder","cssBorder","w1","h1","w2","h2","s2","doResizeContainer","updatePageBreaks","gb","horizontalCount","verticalCount","horizontalPageBreaks","verticalPageBreaks","drawPageBreaks","breaks","pageBreak","postProcessCellStyle","getImageFromBundles","encodeURIComponent","comma","setCellStyle","toggleCellStyle","toggleCellStyles","toggleCellStyleFlags","alignCells","param","resizeCell","flipEdge","addImageBundle","bundle","removeImageBundle","orderCells","back","cellsOrdered","groupCells","getCellsForGroup","createGroupCell","getBoundsForGroup","ungroupCells","removeCellsAfterUngroup","cellsRemoved","addAllEdges","removeCellsFromParent","moveGroup","allowInvalidEdges","keepPosition","trans","getEdgeValidationError","createVertex","createEdge","addEdge","absolute","constrain","parentState","zero","oldState","isAllowNegativeCoordinates","autoSizeCell","isExtendParentsOnAdd","isExtendParent","extendParent","constrainChild","cellConnected","updateCellSize","getDeletableCells","getAllEdges","disconnectTerminal","connected","tstate","splitEdge","newEdge","toggleCells","cellsToggled","checkFoldable","getFoldableCells","cellsFolded","isCellFoldable","swapBounds","willCollapse","updateAlternateBounds","getPreferredSizeForCell","allCells","ignoreChildren","cellStyle","gs2","resizeCells","isRecursiveResize","cellResized","ignoreRelative","resizeChildCells","constrainChildCells","scaleCell","isCellResizable","isCloneInvalidEdges","setAllowNegativeCoordinates","isDisconnectOnMove","isAllowDanglingEdges","isExtendParentsOnMove","disconnect","disconnectGraph","translateCell","getCellContainmentArea","getMaximumGraphBounds","sizeFirst","isConstrainRelativeChildren","isConstrainChild","overlap","getOverlap","getOutlineConstraint","getAllConnectionConstraints","setConnectionConstraint","connectCell","isPortsEnabled","getTerminalForPort","isCellDisconnectable","getCurrentRoot","enterGroup","isValidRoot","exitGroup","includeDescendants","addPoint","shiftPreview1","shiftPreview2","zoomIn","zoomOut","zoomActual","cw","ch","sh","scrollRectToVisible","zoomToRect","scaleX","scaleY","aspectFactor","rectRight","rectBottom","newHeight","deltaHeightBuffer","upperBuffer","newWidth","deltaWidthBuffer","newScale","scrollCellToVisible","tr2","isChanged","widthLimit","heightLimit","ddx","ddy","isCellConnectable","isLoop","isCloneEvent","isConstrainedEvent","isIgnoreTerminalEvent","validationAlert","isEdgeValid","isValidConnection","sourceOut","targetIn","validateEdge","validateGraph","context","isValid","getCellValidationError","outCount","inCount","rule","setBackgroundImage","isHtmlLabels","setHtmlLabels","getTooltip","tip","getHandler","getTooltipForNode","getTooltipForCell","getCursorForMouseEvent","getCursorForCell","setBorder","isResizeContainer","setResizeContainer","isEscapeEnabled","setEscapeEnabled","setInvokesStopCellEditing","setEnterStopsCellEditing","isCellLocked","isCellsLocked","setCellsLocked","getCloneableCells","isCellCloneable","isCellsCloneable","setCellsCloneable","canExportCell","canImportCell","isCellsSelectable","setCellsSelectable","isCellDeletable","isCellsDeletable","setCellsDeletable","isLabelMovable","isCellRotatable","getMovableCells","isCellsMovable","setCellsMovable","setPortsEnabled","getGridSize","setGridSize","getTolerance","setTolerance","isVertexLabelsMovable","setVertexLabelsMovable","isEdgeLabelsMovable","setEdgeLabelsMovable","isSwimlaneNesting","setSwimlaneNesting","setSwimlaneSelectionEnabled","isMultigraph","setMultigraph","isAllowLoops","setAllowDanglingEdges","setConnectableEdges","isConnectableEdges","setCloneInvalidEdges","setAllowLoops","setDisconnectOnMove","setDropEnabled","isSplitEnabled","setSplitEnabled","isCellsResizable","setCellsResizable","isTerminalPointMovable","isCellBendable","isCellsBendable","setCellsBendable","isCellsEditable","setCellsEditable","isCellsDisconnectable","setCellsDisconnectable","isValidSource","isValidTarget","setTooltips","setPanning","isAutoSizeCells","setAutoSizeCells","isExtendParents","setExtendParents","setExtendParentsOnAdd","setExtendParentsOnMove","setRecursiveResize","isConstrainChildren","setConstrainChildren","setConstrainRelativeChildren","isAllowOverlapParent","isValidDropTarget","isSplitTarget","ignoreFn","hitsSwimlaneContent","getPointForEvent","addOffset","getCellsBeyond","rightHalfpane","bottomHalfpane","isolate","isSelectionEmpty","getSelectionCount","addSelectionCell","addSelectionCells","removeSelectionCell","selectRegion","selectCellsForEvent","selectNextCell","selectCell","selectPreviousCell","selectParentCell","selectChildCell","isNext","isParent","isChild","sel","selectAll","descendants","selectVertices","selectCells","selectEdges","createHandler","createEdgeHandler","createVertexHandler","createElbowEdgeHandler","createEdgeSegmentHandler","listener","updateMouseEvent","getStateForTouchEvent","isEventIgnored","mouseEvent","lastEvent","mouseMoveRedirect","mouseUpRedirect","isSyntheticEventIgnored","lastMouseX","lastMouseY","ignoreMouseEvents","isEventSourceIgnored","candidate","getEventState","currentTime","fireDoubleClick","lastTouchEvent","lastTouchX","doubleClickCounter","doubleClickFired","lastTouchCell","valid","tapAndHoldThread","consumeMouseEvent","destroyed","graphRenderHint","showViewport","sizerSize","updateOnPan","sizerImage","suspended","forceVmlHandles","outlineGraphModelChanged","selectionBorder","redirect","redirect2","sizer","createSizer","setZoomEnabled","getSourceContainerSize","getOutlineOffset","getSourceGraphBounds","sourceScale","scaledGraphBounds","unscaledGraphBounds","unscaledFinderBounds","union","completeWidth","completeHeight","outlineScale","navView","scale2","scale3","hit","allowHandleBoundsCheck","getTranslateForEvent","viewRatio","checkTerminal","checkNeighbors","sourceValue","targetValue","checkType","attrValue","bubbling","isBubbling","setBubbling","getLayout","getCellsForChanges","executeLayoutForCells","sorted","reverse","layoutCells","getCellsForChange","executeLayout","setHorizontal","setAddEnabled","setResizeEnabled","isSwimlaneIgnored","isCellHorizontal","swimlaneAdded","parentHorizontal","resizeSwimlane","addEdges","translateState","revalidateState","maxCells","highlightEnabled","cloneEnabled","moveEnabled","currentDx","currentDy","updateCursor","selectEnabled","removeEmptyParents","connectOnDrop","scrollOnMove","previewColor","htmlPreview","scaleGrid","rotationEnabled","maxLivePreview","allowLivePreview","isCloneEnabled","setCloneEnabled","isMoveEnabled","setMoveEnabled","isSelectEnabled","setSelectEnabled","isRemoveCellsFromParent","setRemoveCellsFromParent","getInitialCellForEvent","isDelayedSelection","delayedSelection","cellWasClicked","initialCell","createPreviewShape","cloning","cellCount","addStates","ignore","isCellMoving","useGuidesForEvent","vector","roundLength","removeHint","livePreviewActive","setHighlightColor","resetLivePreview","remote","updateLivePreview","updatePreviewShape","tempState","originalPointerEvents","pt0","ptn","redrawHandles","resetPreviewStates","setHandlesVisible","selectDelayed","destroyShapes","guides","shouldRemoveCellsFromParent","shouldRemoveParent","useLeftButtonForPanning","usePopupTrigger","ignoreCell","previewEnabled","useGrid","pinchEnabled","isPanningEnabled","setPanningEnabled","setPinchEnabled","isPanningTrigger","consumePanningTrigger","selectOnPopup","clearSelectionOnBackground","triggerX","triggerY","screenX","screenY","isSelectOnPopup","popupTrigger","getCellForPopupEvent","hotspotEnabled","validState","setHotspot","getHotspot","setHotspotEnabled","isHotspotEnabled","hasValidState","getValidState","getMarkedState","unmark","process","setCurrentState","isValidState","getMarkerColor","markCell","getStateToMark","maxHandlers","oldHandlers","isHandlerActive","moveIconFront","moveIconBack","connectImage","targetConnectImage","createTarget","constraintHandler","waypointsEnabled","ignoreMouseDown","connectIconOffset","drillHandler","mouseDownCounter","movePreviewAway","outlineConnect","insertBeforeSource","isInsertBefore","isCreateTarget","setCreateTarget","iconState","redrawIcons","icons","isConnectableCell","isConnecting","validateConnection","getConnectImage","isMoveIconToFrontForState","createIcons","currentState","getIconPosition","destroyIcons","selectedIcon","isStartEvent","currentConstraint","sourceConstraint","waypoints","isImmediateConnectSource","isOutlineConnectEvent","clientLeft","clientTop","gridX","gridY","isHighlightAt","updateCurrentState","isCellEnabled","setFocus","convertWaypoint","snapToPreview","pt2","getTargetPerimeterPoint","getSourcePerimeterPoint","originalPoint","drawPreview","hitsIcon","updateIcons","realPoints","targetPerimeter","sourcePerimeter","isStopEvent","addWaypointForEvent","checkConstraints","getEdgeColor","terminalInserted","createTargetVertex","getAlignmentTolerance","pointImage","focusIcons","focusHighlight","currentFocusArea","focusPoints","getImageForConstraint","destroyFocusHighlight","isKeepFocusEvent","getCellForEvent","existingEdge","mouseleaveHandler","grid","mouse","minDistSq","hl","createHighlightShape","cp","defaultOpacity","sharedDiv","currentY","createMouseEvent","ignoreGrid","getPosition","setPosition","copyStyle","processEvent","getTotalRotation","flipPoint","snapPoint","isHtmlRequired","initShape","singleSizer","handleImage","parentHighlightEnabled","rotationRaster","rotationCursor","manageSizers","constrainGroupByChildren","rotationHandleVSpacing","horizontalOffset","verticalOffset","selectionBounds","getSelectionBounds","createSelectionShape","sizers","labelShape","isRotationHandleVisible","rotationShape","customHandles","createCustomHandles","updateMinBounds","isCenteredEvent","minBounds","createParentHighlightShape","getSelectionColor","getSelectionStrokeWidth","isSelectionDashed","createSizerShape","isSizerVisible","moveSizerTo","getHandleForEvent","checkShape","isCustomHandleEvent","handle","isLivePreviewBorder","childOffsetX","childOffsetY","preview","hideSizers","edgeHandlers","checkTolerance","roundAngle","moveLabel","rotateVertex","resizeVertex","currentAlpha","atan","raster","unscaledBounds","dx3","dy3","dx4","dy4","dx5","dy5","rotateCell","rotateClick","constrained","moveChildren","centered","cdx","cdy","ignoreHandles","getHandlePadding","crs","da","getRotationHandlePosition","updateParentHighlight","parentHighlight","bends","removeEnabled","dblClickRemoveEnabled","mergeRemoveEnabled","straightRemoveEnabled","virtualBendsEnabled","virtualBendOpacity","preferHtml","snapToTerminals","manageLabelHandle","abspoints","getSelectionPoints","targetState","createBends","isVirtualBendsEnabled","virtualBends","createVirtualBends","createLabelHandleShape","initBend","isAddPointEvent","isRemovePointEvent","otherCell","isHandleVisible","bend","createHandleShape","removePoint","isHandleEnabled","labelHandleImage","isAddVirtualBendEvent","isTarget","isLabel","clonePreviewState","getSnapToTerminalTolerance","isSnapToTerminalsEvent","snapToPoint","snapToTerminal","getPreviewTerminalState","getPreviewPoints","checkRemove","updatePreviewState","targetConstraint","setPreviewColor","changeTerminalPoint","changePoints","isClone","addPointAt","getHandleFillColor","checkLabelHandle","xn","yn","bn","redrawInnerBends","destroyBends","flipEnabled","doubleClickOrientationResource","createVirtualBend","dblClickHandler","getCursorForBend","getCurrentPoints","pt1","rpts","straight","bindKey","code","bindShiftKey","bindControlKey","bindControlShiftKey","getFunction","isGraphEvent","boundFunction","ignoreTouchEvents","hideOnHover","setHideOnHover","getStateForEvent","stateSource","resetTimer","restart","keepOnTop","drawHighlight","getStrokeWidth","bindAction","createMenu","conditions","createConditions","addItems","condition","as","enabledCond","addAction","isCell","condNodes","insertFunction","pressed","addActionOption","mode","setMode","addPrototype","ptype","factory","installDropHandler","addVertex","horizontalFlow","edgeGeometry","sprite","loader","askZoomResource","lastSavedResource","currentFileResource","propertiesResource","tasksResource","helpResource","outlineResource","dblClickAction","swimlaneRequired","forcedInserting","templates","defaultEdge","defaultEdgeStyle","defaultGroup","groupBorderSize","filename","postParameterName","escapePostData","urlPost","urlImage","layoutDiagram","swimlaneSpacing","maintainSwimlanes","layoutSwimlanes","cycleAttributeIndex","tasks","tasksWindowImage","tasksTop","help","helpWindowImage","urlHelp","helpWidth","helpHeight","propertiesWidth","propertiesHeight","movePropertiesDialog","validating","isModified","setModified","getUrlImage","showProperties","showTasks","showHelp","showOutline","dec","decode","resetHistory","resetFirstTime","cookie","actionname","addTemplate","template","getTemplate","installDblClickHandler","installUndoHandler","installDrillHandler","installChangeHandler","installInsertHandler","createPopupMenu","createSwimlaneManager","createLayoutManager","swimlaneMgr","layoutMgr","swimlaneLayout","createSwimlaneLayout","diagramLayout","createDiagramLayout","setGraphContainer","rubberband","insertHandler","gs","setToolbarContainer","setStatusContainer","tstamp","toLocaleString","setStatus","setTitleContainer","getTitle","treeLayout","getRootTitle","createGroup","readGraphModel","getUrlPost","data","writeGraphModel","postDiagram","swapStyles","second","createProperties","isPropertiesVisible","yField","xField","widthField","heightField","texts","okFunction","cancelFunction","createTasks","refreshTasks","frame","modename","consumeCycleAttribute","cycleAttribute","isConstrainedMoving","mxCodecRegistry","codecs","aliases","register","codec","classname","addAlias","codecname","getCodec","mxObjectCodec","objects","idrefs","elements","encodeDefaults","putObject","getObject","updateElements","addElement","Error","reference","into","encodeCell","isCellCodec","decodeCell","restoreStructures","decoder","insertIntoGraph","cloneTemplate","getFieldName","attributename","mapped","getAttributeName","fieldname","isExcluded","isReference","beforeEncode","encodeObject","afterEncode","encodeValue","writeAttribute","writePrimitiveAttribute","writeComplexAttribute","convertAttributeToXml","isBooleanAttribute","convertAttributeFromXml","isNumericAttribute","beforeDecode","decodeNode","afterDecode","decodeAttributes","decodeChildren","decodeAttribute","isIgnoredAttribute","processInclude","decodeChild","getFieldTemplate","addObjectValue","isWrite","ref","object","rootNode","decodeRoot","rootCell","childRef","mxGenericChangeCodec","variable","mxStylesheetCodec","styleNode","getStringValue","mxDefaultToolbarCodec","act","inc","role","decodeTemplates","decodeUi","setMapContainer","exports"],"mappings":"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","file":"js/chunk-2d21d12f.10d935ec.js","sourcesContent":["/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\nvar mxClient =\n{\n\t/**\n\t * Class: mxClient\n\t *\n\t * Bootstrapping mechanism for the mxGraph thin client. The production version\n\t * of this file contains all code required to run the mxGraph thin client, as\n\t * well as global constants to identify the browser and operating system in\n\t * use. You may have to load chrome://global/content/contentAreaUtils.js in\n\t * your page to disable certain security restrictions in Mozilla.\n\t * \n\t * Variable: VERSION\n\t *\n\t * Contains the current version of the mxGraph library. The strings that\n\t * communicate versions of mxGraph use the following format.\n\t * \n\t * versionMajor.versionMinor.buildNumber.revisionNumber\n\t * \n\t * Current version is 4.0.6.\n\t */\n\tVERSION: '4.0.6',\n\n\t/**\n\t * Variable: IS_IE\n\t *\n\t * True if the current browser is Internet Explorer 10 or below. Use <mxClient.IS_IE11>\n\t * to detect IE 11.\n\t */\n\tIS_IE: navigator.userAgent.indexOf('MSIE') >= 0,\n\n\t/**\n\t * Variable: IS_IE6\n\t *\n\t * True if the current browser is Internet Explorer 6.x.\n\t */\n\tIS_IE6: navigator.userAgent.indexOf('MSIE 6') >= 0,\n\n\t/**\n\t * Variable: IS_IE11\n\t *\n\t * True if the current browser is Internet Explorer 11.x.\n\t */\n\tIS_IE11: !!navigator.userAgent.match(/Trident\\/7\\./),\n\n\t/**\n\t * Variable: IS_EDGE\n\t *\n\t * True if the current browser is Microsoft Edge.\n\t */\n\tIS_EDGE: !!navigator.userAgent.match(/Edge\\//),\n\n\t/**\n\t * Variable: IS_QUIRKS\n\t *\n\t * True if the current browser is Internet Explorer and it is in quirks mode.\n\t */\n\tIS_QUIRKS: navigator.userAgent.indexOf('MSIE') >= 0 && (document.documentMode == null || document.documentMode == 5),\n\n\t/**\n\t * Variable: IS_EM\n\t * \n\t * True if the browser is IE11 in enterprise mode (IE8 standards mode).\n\t */\n\tIS_EM: 'spellcheck' in document.createElement('textarea') && document.documentMode == 8,\n\n\t/**\n\t * Variable: VML_PREFIX\n\t * \n\t * Prefix for VML namespace in node names. Default is 'v'.\n\t */\n\tVML_PREFIX: 'v',\n\n\t/**\n\t * Variable: OFFICE_PREFIX\n\t * \n\t * Prefix for VML office namespace in node names. Default is 'o'.\n\t */\n\tOFFICE_PREFIX: 'o',\n\n\t/**\n\t * Variable: IS_NS\n\t *\n\t * True if the current browser is Netscape (including Firefox).\n\t */\n  \tIS_NS: navigator.userAgent.indexOf('Mozilla/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('MSIE') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\n\t/**\n\t * Variable: IS_OP\n\t *\n\t * True if the current browser is Opera.\n\t */\n  \tIS_OP: navigator.userAgent.indexOf('Opera/') >= 0 ||\n  \t\tnavigator.userAgent.indexOf('OPR/') >= 0,\n\n\t/**\n\t * Variable: IS_OT\n\t *\n\t * True if -o-transform is available as a CSS style, ie for Opera browsers\n\t * based on a Presto engine with version 2.5 or later.\n\t */\n  \tIS_OT: navigator.userAgent.indexOf('Presto/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.4.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.3.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.2.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.0.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/1.') < 0,\n  \t\n\t/**\n\t * Variable: IS_SF\n\t *\n\t * True if the current browser is Safari.\n\t */\n  \tIS_SF: navigator.userAgent.indexOf('AppleWebKit/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Chrome/') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n  \t\n\t/**\n\t * Variable: IS_IOS\n\t * \n\t * Returns true if the user agent is an iPad, iPhone or iPod.\n\t */\n  \tIS_IOS: (navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false),\n  \t\t\n\t/**\n\t * Variable: IS_GC\n\t *\n\t * True if the current browser is Google Chrome.\n\t */\n  \tIS_GC: navigator.userAgent.indexOf('Chrome/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\t\n\t/**\n\t * Variable: IS_CHROMEAPP\n\t *\n\t * True if the this is running inside a Chrome App.\n\t */\n  \tIS_CHROMEAPP: window.chrome != null && chrome.app != null && chrome.app.runtime != null,\n\n\t/**\n\t * Variable: IS_FF\n\t *\n\t * True if the current browser is Firefox.\n\t */\n  \tIS_FF: navigator.userAgent.indexOf('Firefox/') >= 0,\n  \t\n\t/**\n\t * Variable: IS_MT\n\t *\n\t * True if -moz-transform is available as a CSS style. This is the case\n\t * for all Firefox-based browsers newer than or equal 3, such as Camino,\n\t * Iceweasel, Seamonkey and Iceape.\n\t */\n  \tIS_MT: (navigator.userAgent.indexOf('Firefox/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Firefox/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Firefox/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceweasel/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('SeaMonkey/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('SeaMonkey/1.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceape/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceape/1.') < 0),\n\n\t/**\n\t * Variable: IS_VML\n\t *\n\t * True if the browser supports VML.\n\t */\n  \tIS_VML: navigator.appName.toUpperCase() == 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: IS_SVG\n\t *\n\t * True if the browser supports SVG.\n\t */\n  \tIS_SVG: navigator.appName.toUpperCase() != 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: NO_FO\n\t *\n\t * True if foreignObject support is not available. This is the case for\n\t * Opera, older SVG-based browsers and all versions of IE.\n\t */\n  \tNO_FO: !document.createElementNS || document.createElementNS('http://www.w3.org/2000/svg',\n  \t\t'foreignObject') != '[object SVGForeignObjectElement]' || navigator.userAgent.indexOf('Opera/') >= 0,\n\n\t/**\n\t * Variable: IS_WIN\n\t *\n\t * True if the client is a Windows.\n\t */\n  \tIS_WIN: navigator.appVersion.indexOf('Win') > 0,\n\n\t/**\n\t * Variable: IS_MAC\n\t *\n\t * True if the client is a Mac.\n\t */\n  \tIS_MAC: navigator.appVersion.indexOf('Mac') > 0,\n\t\n\t/**\n\t * Variable: IS_CHROMEOS\n\t *\n\t * True if the client is a Chrome OS.\n\t */\n  \tIS_CHROMEOS: /\\bCrOS\\b/.test(navigator.userAgent),\n\n\t/**\n\t * Variable: IS_TOUCH\n\t * \n\t * True if this device supports touchstart/-move/-end events (Apple iOS,\n\t * Android, Chromebook and Chrome Browser on touch-enabled devices).\n\t */\n  \tIS_TOUCH: 'ontouchstart' in document.documentElement,\n\n\t/**\n\t * Variable: IS_POINTER\n\t * \n\t * True if this device supports Microsoft pointer events (always false on Macs).\n\t */\n  \tIS_POINTER: window.PointerEvent != null && !(navigator.appVersion.indexOf('Mac') > 0),\n\n\t/**\n\t * Variable: IS_LOCAL\n\t *\n\t * True if the documents location does not start with http:// or https://.\n\t */\n  \tIS_LOCAL: document.location.href.indexOf('http://') < 0 &&\n  \t\t\t  document.location.href.indexOf('https://') < 0,\n\n\t/**\n\t * Variable: defaultBundles\n\t * \n\t * Contains the base names of the default bundles if mxLoadResources is false.\n\t */\n  \tdefaultBundles: [],\n\n\t/**\n\t * Function: isBrowserSupported\n\t *\n\t * Returns true if the current browser is supported, that is, if\n\t * <mxClient.IS_VML> or <mxClient.IS_SVG> is true.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * if (!mxClient.isBrowserSupported())\n\t * {\n\t *   mxUtils.error('Browser is not supported!', 200, false);\n\t * }\n\t * (end)\n\t */\n\tisBrowserSupported: function()\n\t{\n\t\treturn mxClient.IS_VML || mxClient.IS_SVG;\n\t},\n\n\t/**\n\t * Function: link\n\t *\n\t * Adds a link node to the head of the document. Use this\n\t * to add a stylesheet to the page as follows:\n\t *\n\t * (code)\n\t * mxClient.link('stylesheet', filename);\n\t * (end)\n\t *\n\t * where filename is the (relative) URL of the stylesheet. The charset\n\t * is hardcoded to ISO-8859-1 and the type is text/css.\n\t * \n\t * Parameters:\n\t * \n\t * rel - String that represents the rel attribute of the link node.\n\t * href - String that represents the href attribute of the link node.\n\t * doc - Optional parent document of the link node.\n\t * id - unique id for the link element to check if it already exists\n\t */\n\tlink: function(rel, href, doc, id)\n\t{\n\t\tdoc = doc || document;\n\n\t\t// Workaround for Operation Aborted in IE6 if base tag is used in head\n\t\tif (mxClient.IS_IE6)\n\t\t{\n\t\t\tdoc.write('<link rel=\"' + rel + '\" href=\"' + href + '\" charset=\"UTF-8\" type=\"text/css\"/>');\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tvar link = doc.createElement('link');\n\t\t\t\n\t\t\tlink.setAttribute('rel', rel);\n\t\t\tlink.setAttribute('href', href);\n\t\t\tlink.setAttribute('charset', 'UTF-8');\n\t\t\tlink.setAttribute('type', 'text/css');\n\t\t\t\n\t\t\tif (id)\n\t\t\t{\n\t\t\t\tlink.setAttribute('id', id);\n\t\t\t}\n\t\t\t\n\t\t\tvar head = doc.getElementsByTagName('head')[0];\n\t   \t\thead.appendChild(link);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: loadResources\n\t * \n\t * Helper method to load the default bundles if mxLoadResources is false.\n\t * \n\t * Parameters:\n\t * \n\t * fn - Function to call after all resources have been loaded.\n\t * lan - Optional string to pass to <mxResources.add>.\n\t */\n\tloadResources: function(fn, lan)\n\t{\n\t\tvar pending = mxClient.defaultBundles.length;\n\t\t\n\t\tfunction callback()\n\t\t{\n\t\t\tif (--pending == 0)\n\t\t\t{\n\t\t\t\tfn();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < mxClient.defaultBundles.length; i++)\n\t\t{\n\t\t\tmxResources.add(mxClient.defaultBundles[i], lan, callback);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: include\n\t *\n\t * Dynamically adds a script node to the document header.\n\t * \n\t * In production environments, the includes are resolved in the mxClient.js\n\t * file to reduce the number of requests required for client startup. This\n\t * function should only be used in development environments, but not in\n\t * production systems.\n\t */\n\tinclude: function(src)\n\t{\n\t\tdocument.write('<script src=\"'+src+'\"></script>');\n\t}\n};\n\n/**\n * Variable: mxLoadResources\n * \n * Optional global config variable to toggle loading of the two resource files\n * in <mxGraph> and <mxEditor>. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient. If this is false, you can use <mxClient.loadResources>\n * with its callback to load the default bundles asynchronously.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadResources) == 'undefined')\n{\n\tmxLoadResources = true;\n}\n\n/**\n * Variable: mxForceIncludes\n * \n * Optional global config variable to force loading the JavaScript files in\n * development mode. Default is undefined. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = true;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxForceIncludes) == 'undefined')\n{\n\tmxForceIncludes = false;\n}\n\n/**\n * Variable: mxResourceExtension\n * \n * Optional global config variable to specify the extension of resource files.\n * Default is true. NOTE: This is a global variable, not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxResourceExtension = '.txt';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxResourceExtension) == 'undefined')\n{\n\tmxResourceExtension = '.txt';\n}\n\n/**\n * Variable: mxLoadStylesheets\n * \n * Optional global config variable to toggle loading of the CSS files when\n * the library is initialized. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadStylesheets = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadStylesheets) == 'undefined')\n{\n\tmxLoadStylesheets = true;\n}\n\n/**\n * Variable: basePath\n *\n * Basepath for all URLs in the core without trailing slash. Default is '.'.\n * Set mxBasePath prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxBasePath = '/path/to/core/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxBasePath) != 'undefined' && mxBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxBasePath.substring(mxBasePath.length - 1) == '/')\n\t{\n\t\tmxBasePath = mxBasePath.substring(0, mxBasePath.length - 1);\n\t}\n\n\tmxClient.basePath = mxBasePath;\n}\nelse\n{\n\tmxClient.basePath = '.';\n}\n\n/**\n * Variable: imageBasePath\n *\n * Basepath for all images URLs in the core without trailing slash. Default is\n * <mxClient.basePath> + '/images'. Set mxImageBasePath prior to loading the\n * mxClient library as follows to override this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxImageBasePath = '/path/to/image/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxImageBasePath) != 'undefined' && mxImageBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxImageBasePath.substring(mxImageBasePath.length - 1) == '/')\n\t{\n\t\tmxImageBasePath = mxImageBasePath.substring(0, mxImageBasePath.length - 1);\n\t}\n\n\tmxClient.imageBasePath = mxImageBasePath;\n}\nelse\n{\n\tmxClient.imageBasePath = mxClient.basePath + '/images';\t\n}\n\n/**\n * Variable: language\n *\n * Defines the language of the client, eg. en for english, de for german etc.\n * The special value 'none' will disable all built-in internationalization and\n * resource loading. See <mxResources.getSpecialBundle> for handling identifiers\n * with and without a dash.\n * \n * Set mxLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguage = 'en';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * If internationalization is disabled, then the following variables should be\n * overridden to reflect the current language of the system. These variables are\n * cleared when i18n is disabled.\n * <mxEditor.askZoomResource>, <mxEditor.lastSavedResource>,\n * <mxEditor.currentFileResource>, <mxEditor.propertiesResource>,\n * <mxEditor.tasksResource>, <mxEditor.helpResource>, <mxEditor.outlineResource>,\n * <mxElbowEdgeHandler.doubleClickOrientationResource>, <mxUtils.errorResource>,\n * <mxUtils.closeResource>, <mxGraphSelectionModel.doneResource>,\n * <mxGraphSelectionModel.updatingSelectionResource>, <mxGraphView.doneResource>,\n * <mxGraphView.updatingDocumentResource>, <mxCellRenderer.collapseExpandResource>,\n * <mxGraph.containsValidationErrorsResource> and\n * <mxGraph.alreadyConnectedResource>.\n */\nif (typeof(mxLanguage) != 'undefined' && mxLanguage != null)\n{\n\tmxClient.language = mxLanguage;\n}\nelse\n{\n\tmxClient.language = (mxClient.IS_IE) ? navigator.userLanguage : navigator.language;\n}\n\n/**\n * Variable: defaultLanguage\n * \n * Defines the default language which is used in the common resource files. Any\n * resources for this language will only load the common resource file, but not\n * the language-specific resource file. Default is 'en'.\n * \n * Set mxDefaultLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxDefaultLanguage = 'de';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxDefaultLanguage) != 'undefined' && mxDefaultLanguage != null)\n{\n\tmxClient.defaultLanguage = mxDefaultLanguage;\n}\nelse\n{\n\tmxClient.defaultLanguage = 'en';\n}\n\n// Adds all required stylesheets and namespaces\nif (mxLoadStylesheets)\n{\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css');\n}\n\n/**\n * Variable: languages\n *\n * Defines the optional array of all supported language extensions. The default\n * language does not have to be part of this list. See\n * <mxResources.isLanguageSupported>.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguages = ['de', 'it', 'fr'];\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * This is used to avoid unnecessary requests to language files, ie. if a 404\n * will be returned.\n */\nif (typeof(mxLanguages) != 'undefined' && mxLanguages != null)\n{\n\tmxClient.languages = mxLanguages;\n}\n\n// Adds required namespaces, stylesheets and memory handling for older IE browsers\nif (mxClient.IS_VML)\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tmxClient.IS_VML = false;\n\t}\n\telse\n\t{\n\t\t// Enables support for IE8 standards mode. Note that this requires all attributes for VML\n\t\t// elements to be set using direct notation, ie. node.attr = value. The use of setAttribute\n\t\t// is not possible.\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml', '#default#VML');\n\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office', '#default#VML');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml');\n\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office');\n\t\t}\n\n\t\t// Workaround for limited number of stylesheets in IE (does not work in standards mode)\n\t\tif (mxClient.IS_QUIRKS && document.styleSheets.length >= 30)\n\t\t{\n\t\t\t(function()\n\t\t\t{\n\t\t\t\tvar node = document.createElement('style');\n\t\t\t\tnode.type = 'text/css';\n\t\t\t\tnode.styleSheet.cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t        \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t        document.getElementsByTagName('head')[0].appendChild(node);\n\t\t\t})();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t    \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t}\n\t    \n\t    if (mxLoadStylesheets)\n\t    {\n\t    \tmxClient.link('stylesheet', mxClient.basePath + '/css/explorer.css');\n\t    }\n\t}\n}\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxLog =\n{\n\t/**\n\t * Class: mxLog\n\t * \n\t * A singleton class that implements a simple console.\n\t * \n\t * Variable: consoleName\n\t * \n\t * Specifies the name of the console window. Default is 'Console'.\n\t */\n\tconsoleName: 'Console',\n\t\n\t/**\n\t * Variable: TRACE\n\t * \n\t * Specified if the output for <enter> and <leave> should be visible in the\n\t * console. Default is false.\n\t */\n\tTRACE: false,\n\n\t/**\n\t * Variable: DEBUG\n\t * \n\t * Specifies if the output for <debug> should be visible in the console.\n\t * Default is true.\n\t */\n\tDEBUG: true,\n\n\t/**\n\t * Variable: WARN\n\t * \n\t * Specifies if the output for <warn> should be visible in the console.\n\t * Default is true.\n\t */\n\tWARN: true,\n\n\t/**\n\t * Variable: buffer\n\t * \n\t * Buffer for pre-initialized content.\n\t */\n\tbuffer: '',\n\t\n\t/**\n\t * Function: init\n\t *\n\t * Initializes the DOM node for the console. This requires document.body to\n\t * point to a non-null value. This is called from within <setVisible> if the\n\t * log has not yet been initialized.\n\t */\n\tinit: function()\n\t{\n\t\tif (mxLog.window == null && document.body != null)\n\t\t{\n\t\t\tvar title = mxLog.consoleName + ' - mxGraph ' + mxClient.VERSION;\n\n\t\t\t// Creates a table that maintains the layout\n\t\t\tvar table = document.createElement('table');\n\t\t\ttable.setAttribute('width', '100%');\n\t\t\ttable.setAttribute('height', '100%');\n\n\t\t\tvar tbody = document.createElement('tbody');\n\t\t\tvar tr = document.createElement('tr');\n\t\t\tvar td = document.createElement('td');\n\t\t\ttd.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t// Adds the actual console as a textarea\n\t\t\tmxLog.textarea = document.createElement('textarea');\n\t\t\tmxLog.textarea.setAttribute('wrap', 'off');\n\t\t\tmxLog.textarea.setAttribute('readOnly', 'true');\n\t\t\tmxLog.textarea.style.height = '100%';\n\t\t\tmxLog.textarea.style.resize = 'none';\n\t\t\tmxLog.textarea.value = mxLog.buffer;\n\n\t\t\t// Workaround for wrong width in standards mode\n\t\t\tif (mxClient.IS_NS && document.compatMode != 'BackCompat')\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '99%';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '100%';\n\t\t\t}\n\t\t\t\n\t\t\ttd.appendChild(mxLog.textarea);\n\t\t\ttr.appendChild(td);\n\t\t\ttbody.appendChild(tr);\n\n\t\t\t// Creates the container div\n\t\t\ttr = document.createElement('tr');\n\t\t\tmxLog.td = document.createElement('td');\n\t\t\tmxLog.td.style.verticalAlign = 'top';\n\t\t\tmxLog.td.setAttribute('height', '30px');\n\t\t\t\n\t\t\ttr.appendChild(mxLog.td);\n\t\t\ttbody.appendChild(tr);\n\t\t\ttable.appendChild(tbody);\n\n\t\t\t// Adds various debugging buttons\n\t\t\tmxLog.addButton('Info', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.info();\n\t\t\t});\n\t\t\n\t\t\tmxLog.addButton('DOM', function (evt)\n\t\t\t{\n\t\t\t\tvar content = mxUtils.getInnerHtml(document.body);\n\t\t\t\tmxLog.debug(content);\n\t\t\t});\n\t\n\t\t\tmxLog.addButton('Trace', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.TRACE = !mxLog.TRACE;\n\t\t\t\t\n\t\t\t\tif (mxLog.TRACE)\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing enabled');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing disabled');\n\t\t\t\t}\n\t\t\t});\t\n\n\t\t\tmxLog.addButton('Copy', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.copy(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\n\t\t\tmxLog.addButton('Show', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.popup(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\n\t\t\t\n\t\t\tmxLog.addButton('Clear', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.textarea.value = '';\n\t\t\t});\n\n\t\t\t// Cross-browser code to get window size\n\t\t\tvar h = 0;\n\t\t\tvar w = 0;\n\t\t\t\n\t\t\tif (typeof(window.innerWidth) === 'number')\n\t\t\t{\n\t\t\t\th = window.innerHeight;\n\t\t\t\tw = window.innerWidth;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\th = (document.documentElement.clientHeight || document.body.clientHeight);\n\t\t\t\tw = document.body.clientWidth;\n\t\t\t}\n\n\t\t\tmxLog.window = new mxWindow(title, table, Math.max(0, w - 320), Math.max(0, h - 210), 300, 160);\n\t\t\tmxLog.window.setMaximizable(true);\n\t\t\tmxLog.window.setScrollable(false);\n\t\t\tmxLog.window.setResizable(true);\n\t\t\tmxLog.window.setClosable(true);\n\t\t\tmxLog.window.destroyOnClose = false;\n\t\t\t\n\t\t\t// Workaround for ignored textarea height in various setups\n\t\t\tif (((mxClient.IS_NS || mxClient.IS_IE) && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_SF && document.compatMode != 'BackCompat') ||\n\t\t\t\tdocument.documentMode == 11)\n\t\t\t{\n\t\t\t\tvar elt = mxLog.window.getElement();\n\t\t\t\t\n\t\t\t\tvar resizeHandler = function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tmxLog.textarea.style.height = Math.max(0, elt.offsetHeight - 70) + 'px';\n\t\t\t\t}; \n\t\t\t\t\n\t\t\t\tmxLog.window.addListener(mxEvent.RESIZE_END, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.MAXIMIZE, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.NORMALIZE, resizeHandler);\n\n\t\t\t\tmxLog.textarea.style.height = '92px';\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: info\n\t * \n\t * Writes the current navigator information to the console.\n\t */\n\tinfo: function()\n\t{\n\t\tmxLog.writeln(mxUtils.toString(navigator));\n\t},\n\t\t\t\n\t/**\n\t * Function: addButton\n\t * \n\t * Adds a button to the console using the given label and function.\n\t */\n\taddButton: function(lab, funct)\n\t{\n\t\tvar button = document.createElement('button');\n\t\tmxUtils.write(button, lab);\n\t\tmxEvent.addListener(button, 'click', funct);\n\t\tmxLog.td.appendChild(button);\n\t},\n\t\t\t\t\n\t/**\n\t * Function: isVisible\n\t * \n\t * Returns true if the console is visible.\n\t */\n\tisVisible: function()\n\t{\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\treturn mxLog.window.isVisible();\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n\t\n\n\t/**\n\t * Function: show\n\t * \n\t * Shows the console.\n\t */\n\tshow: function()\n\t{\n\t\tmxLog.setVisible(true);\n\t},\n\n\t/**\n\t * Function: setVisible\n\t * \n\t * Shows or hides the console.\n\t */\n\tsetVisible: function(visible)\n\t{\n\t\tif (mxLog.window == null)\n\t\t{\n\t\t\tmxLog.init();\n\t\t}\n\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\tmxLog.window.setVisible(visible);\n\t\t}\n\t},\n\n\t/**\n\t * Function: enter\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and returns the current \n\t * time in milliseconds.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * var t0 = mxLog.enter('Hello');\n\t * // Do something\n\t * mxLog.leave('World!', t0);\n\t * (end)\n\t */\n\tenter: function(string)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tmxLog.writeln('Entering '+string);\n\t\t\t\n\t\t\treturn new Date().getTime();\n\t\t}\n\t},\n\n\t/**\n\t * Function: leave\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and computes the difference\n\t * between the current time and t0 in milliseconds.\n\t * See <enter> for an example.\n\t */\n\tleave: function(string, t0)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tvar dt = (t0 != 0) ? ' ('+(new Date().getTime() - t0)+' ms)' : '';\n\t\t\tmxLog.writeln('Leaving '+string+dt);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: debug\n\t * \n\t * Adds all arguments to the console if <DEBUG> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.debug('Hello, World!');\n\t * (end)\n\t */\n\tdebug: function()\n\t{\n\t\tif (mxLog.DEBUG)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: warn\n\t * \n\t * Adds all arguments to the console if <WARN> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.warn('Hello, World!');\n\t * (end)\n\t */\n\twarn: function()\n\t{\n\t\tif (mxLog.WARN)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\n\t/**\n\t * Function: write\n\t * \n\t * Adds the specified strings to the console.\n\t */\n\twrite: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (mxLog.textarea != null)\n\t\t{\n\t\t\tmxLog.textarea.value = mxLog.textarea.value + string;\n\n\t\t\t// Workaround for no update in Presto 2.5.22 (Opera 10.5)\n\t\t\tif (navigator.userAgent.indexOf('Presto/2.5') >= 0)\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.visibility = 'hidden';\n\t\t\t\tmxLog.textarea.style.visibility = 'visible';\n\t\t\t}\n\t\t\t\n\t\t\tmxLog.textarea.scrollTop = mxLog.textarea.scrollHeight;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxLog.buffer += string;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Adds the specified strings to the console, appending a linefeed at the\n\t * end of each string.\n\t */\n\twriteln: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\n\t\tmxLog.write(string + '\\n');\n\t}\n\t\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxObjectIdentity =\n{\n\t/**\n\t * Class: mxObjectIdentity\n\t * \n\t * Identity for JavaScript objects and functions. This is implemented using\n\t * a simple incrementing counter which is stored in each object under\n\t * <FIELD_NAME>.\n\t * \n\t * The identity for an object does not change during its lifecycle.\n\t * \n\t * Variable: FIELD_NAME\n\t * \n\t * Name of the field to be used to store the object ID. Default is\n\t * <code>mxObjectId</code>.\n\t */\n\tFIELD_NAME: 'mxObjectId',\n\n\t/**\n\t * Variable: counter\n\t * \n\t * Current counter.\n\t */\n\tcounter: 0,\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the ID for the given object or function or null if no object\n\t * is specified.\n\t */\n\tget: function(obj)\n\t{\n\t\tif (obj != null)\n\t\t{\n\t\t\tif (obj[mxObjectIdentity.FIELD_NAME] == null)\n\t\t\t{\n\t\t\t\tif (typeof obj === 'object')\n\t\t\t\t{\n\t\t\t\t\tvar ctor = mxUtils.getFunctionName(obj.constructor);\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = ctor + '#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t\telse if (typeof obj === 'function')\n\t\t\t\t{\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = 'Function#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: clear\n\t * \n\t * Deletes the ID from the given object or function.\n\t */\n\tclear: function(obj)\n\t{\n\t\tif (typeof(obj) === 'object' || typeof obj === 'function')\n\t\t{\n\t\t\tdelete obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDictionary\n *\n * A wrapper class for an associative array with object keys. Note: This\n * implementation uses <mxObjectIdentitiy> to turn object keys into strings.\n * \n * Constructor: mxEventSource\n *\n * Constructs a new dictionary which allows object to be used as keys.\n */\nfunction mxDictionary()\n{\n\tthis.clear();\n};\n\n/**\n * Function: map\n *\n * Stores the (key, value) pairs in this dictionary.\n */\nmxDictionary.prototype.map = null;\n\n/**\n * Function: clear\n *\n * Clears the dictionary.\n */\nmxDictionary.prototype.clear = function()\n{\n\tthis.map = {};\n};\n\n/**\n * Function: get\n *\n * Returns the value for the given key.\n */\nmxDictionary.prototype.get = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\t\n\treturn this.map[id];\n};\n\n/**\n * Function: put\n *\n * Stores the value under the given key and returns the previous\n * value for that key.\n */\nmxDictionary.prototype.put = function(key, value)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tthis.map[id] = value;\n\t\n\treturn previous;\n};\n\n/**\n * Function: remove\n *\n * Removes the value for the given key and returns the value that\n * has been removed.\n */\nmxDictionary.prototype.remove = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tdelete this.map[id];\n\t\n\treturn previous;\n};\n\n/**\n * Function: getKeys\n *\n * Returns all keys as an array.\n */\nmxDictionary.prototype.getKeys = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(key);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getValues\n *\n * Returns all values as an array.\n */\nmxDictionary.prototype.getValues = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(this.map[key]);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: visit\n *\n * Visits all entries in the dictionary using the given function with the\n * following signature: function(key, value) where key is a string and\n * value is an object.\n * \n * Parameters:\n * \n * visitor - A function that takes the key and value as arguments.\n */\nmxDictionary.prototype.visit = function(visitor)\n{\n\tfor (var key in this.map)\n\t{\n\t\tvisitor(key, this.map[key]);\n\t}\n};\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\nvar mxResources =\n{\n\t/**\n\t * Class: mxResources\n\t * \n\t * Implements internationalization. You can provide any number of \n\t * resource files on the server using the following format for the \n\t * filename: name[-en].properties. The en stands for any lowercase \n\t * 2-character language shortcut (eg. de for german, fr for french).\n\t *\n\t * If the optional language extension is omitted, then the file is used as a \n\t * default resource which is loaded in all cases. If a properties file for a \n\t * specific language exists, then it is used to override the settings in the \n\t * default resource. All entries in the file are of the form key=value. The\n\t * values may then be accessed in code via <get>. Lines without \n\t * equal signs in the properties files are ignored.\n\t *\n\t * Resource files may either be added programmatically using\n\t * <add> or via a resource tag in the UI section of the \n\t * editor configuration file, eg:\n\t * \n\t * (code)\n\t * <mxEditor>\n\t *   <ui>\n\t *     <resource basename=\"examples/resources/mxWorkflow\"/>\n\t * (end)\n\t * \n\t * The above element will load examples/resources/mxWorkflow.properties as well\n\t * as the language specific file for the current language, if it exists.\n\t * \n\t * Values may contain placeholders of the form {1}...{n} where each placeholder\n\t * is replaced with the value of the corresponding array element in the params\n\t * argument passed to <mxResources.get>. The placeholder {1} maps to the first\n\t * element in the array (at index 0).\n\t * \n\t * See <mxClient.language> for more information on specifying the default\n\t * language or disabling all loading of resources.\n\t * \n\t * Lines that start with a # sign will be ignored.\n\t * \n\t * Special characters\n\t * \n\t * To use unicode characters, use the standard notation (eg. \\u8fd1) or %u as a\n\t * prefix (eg. %u20AC will display a Euro sign). For normal hex encoded strings,\n\t * use % as a prefix, eg. %F6 will display a \"o umlaut\" (&ouml;).\n\t * \n\t * See <resourcesEncoded> to disable this. If you disable this, make sure that\n\t * your files are UTF-8 encoded.\n\t * \n\t * Asynchronous loading\n\t * \n\t * By default, the core adds two resource files synchronously at load time.\n\t * To load these files asynchronously, set <mxLoadResources> to false\n\t * before loading mxClient.js and use <mxResources.loadResources> instead.\n\t * \n\t * Variable: resources\n\t * \n\t * Object that maps from keys to values.\n\t */\n\tresources: {},\n\n\t/**\n\t * Variable: extension\n\t * \n\t * Specifies the extension used for language files. Default is <mxResourceExtension>.\n\t */\n\textension: mxResourceExtension,\n\n\t/**\n\t * Variable: resourcesEncoded\n\t * \n\t * Specifies whether or not values in resource files are encoded with \\u or\n\t * percentage. Default is false.\n\t */\n\tresourcesEncoded: false,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the default file for a given basename should be loaded.\n\t * Default is true.\n\t */\n\tloadDefaultBundle: true,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the specific language file file for a given basename should\n\t * be loaded. Default is true.\n\t */\n\tloadSpecialBundle: true,\n\n\t/**\n\t * Function: isLanguageSupported\n\t * \n\t * Hook for subclassers to disable support for a given language. This\n\t * implementation returns true if lan is in <mxClient.languages>.\n\t * \n\t * Parameters:\n\t *\n\t * lan - The current language.\n\t */\n\tisLanguageSupported: function(lan)\n\t{\n\t\tif (mxClient.languages != null)\n\t\t{\n\t\t\treturn mxUtils.indexOf(mxClient.languages, lan) >= 0;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getDefaultBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + <extension> or null if\n\t * <loadDefaultBundle> is false.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The current language.\n\t */\n\tgetDefaultBundle: function(basename, lan)\n\t{\n\t\tif (mxResources.loadDefaultBundle || !mxResources.isLanguageSupported(lan))\n\t\t{\n\t\t\treturn basename + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: getSpecialBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + '_' + lan + <extension> or null if\n\t * <loadSpecialBundle> is false or lan equals <mxClient.defaultLanguage>.\n\t * \n\t * If <mxResources.languages> is not null and <mxClient.language> contains\n\t * a dash, then this method checks if <isLanguageSupported> returns true\n\t * for the full language (including the dash). If that returns false the\n\t * first part of the language (up to the dash) will be tried as an extension.\n\t * \n\t * If <mxResources.language> is null then the first part of the language is\n\t * used to maintain backwards compatibility.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t */\n\tgetSpecialBundle: function(basename, lan)\n\t{\n\t\tif (mxClient.languages == null || !this.isLanguageSupported(lan))\n\t\t{\n\t\t\tvar dash = lan.indexOf('-');\n\t\t\t\n\t\t\tif (dash > 0)\n\t\t\t{\n\t\t\t\tlan = lan.substring(0, dash);\n\t\t\t}\n\t\t}\n\n\t\tif (mxResources.loadSpecialBundle && mxResources.isLanguageSupported(lan) && lan != mxClient.defaultLanguage)\n\t\t{\n\t\t\treturn basename + '_' + lan + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: add\n\t * \n\t * Adds the default and current language properties file for the specified\n\t * basename. Existing keys are overridden as new files are added. If no\n\t * callback is used then the request is synchronous.\n\t *\n\t * Example:\n\t * \n\t * At application startup, additional resources may be \n\t * added using the following code:\n\t * \n\t * (code)\n\t * mxResources.add('resources/editor');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t * callback - Optional callback for asynchronous loading.\n\t */\n\tadd: function(basename, lan, callback)\n\t{\n\t\tlan = (lan != null) ? lan : ((mxClient.language != null) ?\n\t\t\tmxClient.language.toLowerCase() : mxConstants.NONE);\n\t\t\n\t\tif (lan != mxConstants.NONE)\n\t\t{\n\t\t\tvar defaultBundle = mxResources.getDefaultBundle(basename, lan);\n\t\t\tvar specialBundle = mxResources.getSpecialBundle(basename, lan);\n\t\t\t\n\t\t\tvar loadSpecialBundle = function()\n\t\t\t{\n\t\t\t\tif (specialBundle != null)\n\t\t\t\t{\n\t\t\t\t\tif (callback)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxUtils.get(specialBundle, function(req)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t}, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t   \t\tvar req = mxUtils.load(specialBundle);\n\t\t\t\t\t   \t\t\n\t\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t\t   \t\t{\n\t\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t\t   \t\t}\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\tcatch (e)\n\t\t\t\t   \t\t{\n\t\t\t\t   \t\t\t// ignore\n\t\t\t\t\t   \t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (callback != null)\n\t\t\t\t{\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (defaultBundle != null)\n\t\t\t{\n\t\t\t\tif (callback)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.get(defaultBundle, function(req)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t}, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t   \t\tvar req = mxUtils.load(defaultBundle);\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t   \t\t{\n\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tloadSpecialBundle();\n\t\t\t\t  \t}\n\t\t\t\t  \tcatch (e)\n\t\t\t\t  \t{\n\t\t\t\t  \t\t// ignore\n\t\t\t\t  \t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Overlays the language specific file (_lan-extension)\n\t\t\t\tloadSpecialBundle();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: parse\n\t * \n\t * Parses the key, value pairs in the specified\n\t * text and stores them as local resources.\n\t */\n\tparse: function(text)\n\t{\n\t\tif (text != null)\n\t\t{\n\t\t\tvar lines = text.split('\\n');\n\t\t\t\n\t\t\tfor (var i = 0; i < lines.length; i++)\n\t\t\t{\n\t\t\t\tif (lines[i].charAt(0) != '#')\n\t\t\t\t{\n\t\t\t\t\tvar index = lines[i].indexOf('=');\n\t\t\t\t\t\n\t\t\t\t\tif (index > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar key = lines[i].substring(0, index);\n\t\t\t\t\t\tvar idx = lines[i].length;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (lines[i].charCodeAt(idx - 1) == 13)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tidx--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar value = lines[i].substring(index + 1, idx);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.resourcesEncoded)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue = value.replace(/\\\\(?=u[a-fA-F\\d]{4})/g,\"%\");\n\t\t\t\t\t\t\tmxResources.resources[key] = unescape(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.resources[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the value for the specified resource key.\n\t *\n\t * Example:\n\t * To read the value for 'welomeMessage', use the following:\n\t * (code)\n\t * var result = mxResources.get('welcomeMessage') || '';\n\t * (end)\n\t *\n\t * This would require an entry of the following form in\n\t * one of the English language resource files:\n\t * (code)\n\t * welcomeMessage=Welcome to mxGraph!\n\t * (end)\n\t * \n\t * The part behind the || is the string value to be used if the given\n\t * resource is not available.\n\t * \n\t * Parameters:\n\t * \n\t * key - String that represents the key of the resource to be returned.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t * defaultValue - Optional string that specifies the default return value.\n\t */\n\tget: function(key, params, defaultValue)\n\t{\n\t\tvar value = mxResources.resources[key];\n\t\t\n\t\t// Applies the default value if no resource was found\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\t\n\t\t// Replaces the placeholders with the values in the array\n\t\tif (value != null && params != null)\n\t\t{\n\t\t\tvalue = mxResources.replacePlaceholders(value, params);\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: replacePlaceholders\n\t * \n\t * Replaces the given placeholders with the given parameters.\n\t * \n\t * Parameters:\n\t * \n\t * value - String that contains the placeholders.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t */\n\treplacePlaceholders: function(value, params)\n\t{\n\t\tvar result = [];\n\t\tvar index = null;\n\t\t\n\t\tfor (var i = 0; i < value.length; i++)\n\t\t{\n\t\t\tvar c = value.charAt(i);\n\n\t\t\tif (c == '{')\n\t\t\t{\n\t\t\t\tindex = '';\n\t\t\t}\n\t\t\telse if (index != null && \tc == '}')\n\t\t\t{\n\t\t\t\tindex = parseInt(index)-1;\n\t\t\t\t\n\t\t\t\tif (index >= 0 && index < params.length)\n\t\t\t\t{\n\t\t\t\t\tresult.push(params[index]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tindex = null;\n\t\t\t}\n\t\t\telse if (index != null)\n\t\t\t{\n\t\t\t\tindex += c;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(c);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\n\t/**\n\t * Function: loadResources\n\t * \n\t * Loads all required resources asynchronously. Use this to load the graph and\n\t * editor resources if <mxLoadResources> is false.\n\t * \n\t * Parameters:\n\t * \n\t * callback - Callback function for asynchronous loading.\n\t */\n\tloadResources: function(callback)\n\t{\n\t\tmxResources.add(mxClient.basePath+'/resources/editor', null, function()\n\t\t{\n\t\t\tmxResources.add(mxClient.basePath+'/resources/graph', null, callback);\n\t\t});\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPoint\n *\n * Implements a 2-dimensional vector with double precision coordinates.\n * \n * Constructor: mxPoint\n *\n * Constructs a new point for the optional x and y coordinates. If no\n * coordinates are given, then the default values for <x> and <y> are used.\n */\nfunction mxPoint(x, y)\n{\n\tthis.x = (x != null) ? x : 0;\n\tthis.y = (y != null) ? y : 0;\n};\n\n/**\n * Variable: x\n *\n * Holds the x-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.x = null;\n\n/**\n * Variable: y\n *\n * Holds the y-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.y = null;\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this point.\n */\nmxPoint.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxPoint.prototype.clone = function()\n{\n\t// Handles subclasses as well\n\treturn mxUtils.clone(this);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangle\n *\n * Extends <mxPoint> to implement a 2-dimensional rectangle with double\n * precision coordinates.\n * \n * Constructor: mxRectangle\n *\n * Constructs a new rectangle for the optional parameters. If no parameters\n * are given then the respective default values are used.\n */\nfunction mxRectangle(x, y, width, height)\n{\n\tmxPoint.call(this, x, y);\n\n\tthis.width = (width != null) ? width : 0;\n\tthis.height = (height != null) ? height : 0;\n};\n\n/**\n * Extends mxPoint.\n */\nmxRectangle.prototype = new mxPoint();\nmxRectangle.prototype.constructor = mxRectangle;\n\n/**\n * Variable: width\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxRectangle.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxRectangle.prototype.height = null;\n\n/**\n * Function: setRect\n * \n * Sets this rectangle to the specified values\n */\nmxRectangle.prototype.setRect = function(x, y, w, h)\n{\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n};\n\n/**\n * Function: getCenterX\n * \n * Returns the x-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterX = function ()\n{\n\treturn this.x + this.width/2;\n};\n\n/**\n * Function: getCenterY\n * \n * Returns the y-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterY = function ()\n{\n\treturn this.y + this.height/2;\n};\n\n/**\n * Function: add\n *\n * Adds the given rectangle to this rectangle.\n */\nmxRectangle.prototype.add = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar minX = Math.min(this.x, rect.x);\n\t\tvar minY = Math.min(this.y, rect.y);\n\t\tvar maxX = Math.max(this.x + this.width, rect.x + rect.width);\n\t\tvar maxY = Math.max(this.y + this.height, rect.y + rect.height);\n\t\t\n\t\tthis.x = minX;\n\t\tthis.y = minY;\n\t\tthis.width = maxX - minX;\n\t\tthis.height = maxY - minY;\n\t}\n};\n\n/**\n * Function: intersect\n * \n * Changes this rectangle to where it overlaps with the given rectangle.\n */\nmxRectangle.prototype.intersect = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar r1 = this.x + this.width;\n\t\tvar r2 = rect.x + rect.width;\n\t\t\n\t\tvar b1 = this.y + this.height;\n\t\tvar b2 = rect.y + rect.height;\n\t\t\n\t\tthis.x = Math.max(this.x, rect.x);\n\t\tthis.y = Math.max(this.y, rect.y);\n\t\tthis.width = Math.min(r1, r2) - this.x;\n\t\tthis.height = Math.min(b1, b2) - this.y;\n\t}\n};\n\n/**\n * Function: grow\n *\n * Grows the rectangle by the given amount, that is, this method subtracts\n * the given amount from the x- and y-coordinates and adds twice the amount\n * to the width and height.\n */\nmxRectangle.prototype.grow = function(amount)\n{\n\tthis.x -= amount;\n\tthis.y -= amount;\n\tthis.width += 2 * amount;\n\tthis.height += 2 * amount;\n};\n\n/**\n * Function: getPoint\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxRectangle.prototype.getPoint = function()\n{\n\treturn new mxPoint(this.x, this.y);\n};\n\n/**\n * Function: rotate90\n * \n * Rotates this rectangle by 90 degree around its center point.\n */\nmxRectangle.prototype.rotate90 = function()\n{\n\tvar t = (this.width - this.height) / 2;\n\tthis.x += t;\n\tthis.y -= t;\n\tvar tmp = this.width;\n\tthis.width = this.height;\n\tthis.height = tmp;\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this rectangle.\n */\nmxRectangle.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y &&\n\t\tobj.width == this.width && obj.height == this.height;\n};\n\n/**\n * Function: fromRectangle\n * \n * Returns a new <mxRectangle> which is a copy of the given rectangle.\n */\nmxRectangle.fromRectangle = function(rect)\n{\n\treturn new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEffects =\n{\n\n\t/**\n\t * Class: mxEffects\n\t * \n\t * Provides animation effects.\n\t */\n\n\t/**\n\t * Function: animateChanges\n\t * \n\t * Asynchronous animated move operation. See also: <mxMorphing>.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n\t * {\n\t *   var changes = evt.getProperty('edit').changes;\n\t * \n\t *   if (changes.length < 10)\n\t *   {\n\t *     mxEffects.animateChanges(graph, changes);\n\t *   }\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that received the changes.\n\t * changes - Array of changes to be animated.\n\t * done - Optional function argument that is invoked after the\n\t * last step of the animation.\n\t */\n\tanimateChanges: function(graph, changes, done)\n\t{\n\t\tvar maxStep = 10;\n\t\tvar step = 0;\n\n\t\tvar animate = function() \n\t\t{\n\t\t\tvar isRequired = false;\n\t\t\t\n\t\t\tfor (var i = 0; i < changes.length; i++)\n\t\t\t{\n\t\t\t\tvar change = changes[i];\n\t\t\t\t\n\t\t\t\tif (change instanceof mxGeometryChange ||\n\t\t\t\t\tchange instanceof mxTerminalChange ||\n\t\t\t\t\tchange instanceof mxValueChange ||\n\t\t\t\t\tchange instanceof mxChildChange ||\n\t\t\t\t\tchange instanceof mxStyleChange)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.getView().getState(change.cell || change.child, false);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tisRequired = true;\n\t\t\t\t\t\n\t\t\t\t\t\tif (change.constructor != mxGeometryChange || graph.model.isEdge(change.cell))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxUtils.setOpacity(state.shape.node, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar scale = graph.getView().scale;\t\t\t\t\t\n\n\t\t\t\t\t\t\tvar dx = (change.geometry.x - change.previous.x) * scale;\n\t\t\t\t\t\t\tvar dy = (change.geometry.y - change.previous.y) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar sx = (change.geometry.width - change.previous.width) * scale;\n\t\t\t\t\t\t\tvar sy = (change.geometry.height - change.previous.height) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (step == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x -= dx;\n\t\t\t\t\t\t\t\tstate.y -= dy;\n\t\t\t\t\t\t\t\tstate.width -= sx;\n\t\t\t\t\t\t\t\tstate.height -= sy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x += dx / maxStep;\n\t\t\t\t\t\t\t\tstate.y += dy / maxStep;\n\t\t\t\t\t\t\t\tstate.width += sx / maxStep;\n\t\t\t\t\t\t\t\tstate.height += sy / maxStep;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tgraph.cellRenderer.redraw(state);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Fades all connected edges and children\n\t\t\t\t\t\t\tmxEffects.cascadeOpacity(graph, change.cell, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (step < maxStep && isRequired)\n\t\t\t{\n\t\t\t\tstep++;\n\t\t\t\twindow.setTimeout(animate, delay);\n\t\t\t}\n\t\t\telse if (done != null)\n\t\t\t{\n\t\t\t\tdone();\n\t\t\t}\n\t\t};\n\t\t\n\t\tvar delay = 30;\n\t\tanimate();\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * Sets the opacity on the given cell and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells.\n\t * cell - <mxCell> to set the opacity for.\n\t * opacity - New value for the opacity in %.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\t// Fades all children\n\t\tvar childCount = graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar child = graph.model.getChildAt(cell, i);\n\t\t\tvar childState = graph.getView().getState(child);\n\t\t\t\n\t\t\tif (childState != null)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(childState.shape.node, opacity);\n\t\t\t\tmxEffects.cascadeOpacity(graph, child, opacity);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Fades all connected edges\n\t\tvar edges = graph.model.getEdges(cell);\n\t\t\n\t\tif (edges != null)\n\t\t{\n\t\t\tfor (var i=0; i<edges.length; i++)\n\t\t\t{\n\t\t\t\tvar edgeState = graph.getView().getState(edges[i]);\n\t\t\t\t\n\t\t\t\tif (edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.setOpacity(edgeState.shape.node, opacity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * Asynchronous fade-out operation.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tstep = step || 40;\n\t\tdelay = delay || 30;\n\t\t\n\t\tvar opacity = from || 100;\n\t\t\n\t\tmxUtils.setOpacity(node, opacity);\n\t\t\n\t\tif (isEnabled || isEnabled == null)\n\t\t{\n\t\t\tvar f = function()\n\t\t\t{\n\t\t\t    opacity = Math.max(opacity-step, 0);\n\t\t\t\tmxUtils.setOpacity(node, opacity);\n\t\t\t\t\n\t\t\t\tif (opacity > 0)\n\t\t\t\t{\n\t\t\t\t\twindow.setTimeout(f, delay);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\t\t\n\t\t\t\t\tif (remove && node.parentNode)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\twindow.setTimeout(f, delay);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\n\t\t\tif (remove && node.parentNode)\n\t\t\t{\n\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t}\n\t\t}\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxUtils =\n{\n\t/**\n\t * Class: mxUtils\n\t * \n\t * A singleton class that provides cross-browser helper methods.\n\t * This is a global functionality. To access the functions in this\n\t * class, use the global classname appended by the functionname.\n\t * You may have to load chrome://global/content/contentAreaUtils.js\n\t * to disable certain security restrictions in Mozilla for the <open>,\n\t * <save>, <saveAs> and <copy> function.\n\t * \n\t * For example, the following code displays an error message:\n\t * \n\t * (code)\n\t * mxUtils.error('Browser is not supported!', 200, false);\n\t * (end)\n\t * \n\t * Variable: errorResource\n\t * \n\t * Specifies the resource key for the title of the error window. If the\n\t * resource for this key does not exist then the value is used as\n\t * the title. Default is 'error'.\n\t */\n\terrorResource: (mxClient.language != 'none') ? 'error' : '',\n\t\n\t/**\n\t * Variable: closeResource\n\t * \n\t * Specifies the resource key for the label of the close button. If the\n\t * resource for this key does not exist then the value is used as\n\t * the label. Default is 'close'.\n\t */\n\tcloseResource: (mxClient.language != 'none') ? 'close' : '',\n\n\t/**\n\t * Variable: errorImage\n\t * \n\t * Defines the image used for error dialogs.\n\t */\n\terrorImage: mxClient.imageBasePath + '/error.gif',\n\t\n\t/**\n\t * Function: removeCursors\n\t * \n\t * Removes the cursors from the style of the given DOM node and its\n\t * descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the cursor style from.\n\t */\n\tremoveCursors: function(element)\n\t{\n\t\tif (element.style != null)\n\t\t{\n\t\t\telement.style.cursor = '';\n\t\t}\n\t\t\n\t\tvar children = element.childNodes;\n\t\t\n\t\tif (children != null)\n\t\t{\n\t        var childCount = children.length;\n\t        \n\t        for (var i = 0; i < childCount; i += 1)\n\t        {\n\t            mxUtils.removeCursors(children[i]);\n\t        }\n\t    }\n\t},\n\n\t/**\n\t * Function: getCurrentStyle\n\t * \n\t * Returns the current style of the specified element.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node whose current style should be returned.\n\t */\n\tgetCurrentStyle: function()\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 9))\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ? element.currentStyle : null;\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ?\n\t\t\t\t\twindow.getComputedStyle(element, '') :\n\t\t\t\t\tnull;\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: parseCssNumber\n\t * \n\t * Parses the given CSS numeric value adding handling for the values thin,\n\t * medium and thick (2, 4 and 6).\n\t */\n\tparseCssNumber: function(value)\n\t{\n\t\tif (value == 'thin')\n\t\t{\n\t\t\tvalue = '2';\n\t\t}\n\t\telse if (value == 'medium')\n\t\t{\n\t\t\tvalue = '4';\n\t\t}\n\t\telse if (value == 'thick')\n\t\t{\n\t\t\tvalue = '6';\n\t\t}\n\t\t\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: setPrefixedStyle\n\t * \n\t * Adds the given style with the standard name and an optional vendor prefix for the current\n\t * browser.\n\t * \n\t * (code)\n\t * mxUtils.setPrefixedStyle(node.style, 'transformOrigin', '0% 0%');\n\t * (end)\n\t */\n\tsetPrefixedStyle: function()\n\t{\n\t\tvar prefix = null;\n\t\t\n\t\tif (mxClient.IS_OT)\n\t\t{\n\t\t\tprefix = 'O';\n\t\t}\n\t\telse if (mxClient.IS_SF || mxClient.IS_GC)\n\t\t{\n\t\t\tprefix = 'Webkit';\n\t\t}\n\t\telse if (mxClient.IS_MT)\n\t\t{\n\t\t\tprefix = 'Moz';\n\t\t}\n\t\telse if (mxClient.IS_IE && document.documentMode >= 9 && document.documentMode < 10)\n\t\t{\n\t\t\tprefix = 'ms';\n\t\t}\n\n\t\treturn function(style, name, value)\n\t\t{\n\t\t\tstyle[name] = value;\n\t\t\t\n\t\t\tif (prefix != null && name.length > 0)\n\t\t\t{\n\t\t\t\tname = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);\n\t\t\t\tstyle[name] = value;\n\t\t\t}\n\t\t};\n\t}(),\n\t\n\t/**\n\t * Function: hasScrollbars\n\t * \n\t * Returns true if the overflow CSS property of the given node is either\n\t * scroll or auto.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose style should be checked for scrollbars.\n\t */\n\thasScrollbars: function(node)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(node);\n\n\t\treturn style != null && (style.overflow == 'scroll' || style.overflow == 'auto');\n\t},\n\t\n\t/**\n\t * Function: bind\n\t * \n\t * Returns a wrapper function that locks the execution scope of the given\n\t * function to the specified scope. Inside funct, the \"this\" keyword\n\t * becomes a reference to that scope.\n\t */\n\tbind: function(scope, funct)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\treturn funct.apply(scope, arguments);\n\t\t};\n\t},\n\t\n\t/**\n\t * Function: eval\n\t * \n\t * Evaluates the given expression using eval and returns the JavaScript\n\t * object that represents the expression result. Supports evaluation of\n\t * expressions that define functions and returns the function object for\n\t * these expressions.\n\t * \n\t * Parameters:\n\t * \n\t * expr - A string that represents a JavaScript expression.\n\t */\n\teval: function(expr)\n\t{\n\t\tvar result = null;\n\n\t\tif (expr.indexOf('function') >= 0)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\teval('var _mxJavaScriptExpression='+expr);\n\t\t\t\tresult = _mxJavaScriptExpression;\n\t\t\t\t// TODO: Use delete here?\n\t\t\t\t_mxJavaScriptExpression = null;\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tresult = eval(expr);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNode\n\t * \n\t * Returns the first node where attr equals value.\n\t * This implementation does not use XPath.\n\t */\n\tfindNode: function(node, attr, value)\n\t{\n\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\tvar tmp = node.getAttribute(attr);\n\t\n\t\t\tif (tmp != null && tmp == value)\n\t\t\t{\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tvar result = mxUtils.findNode(node, attr, value);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: getFunctionName\n\t * \n\t * Returns the name for the given function.\n\t * \n\t * Parameters:\n\t * \n\t * f - JavaScript object that represents a function.\n\t */\n\tgetFunctionName: function(f)\n\t{\n\t\tvar str = null;\n\n\t\tif (f != null)\n\t\t{\n\t\t\tif (f.name != null)\n\t\t\t{\n\t\t\t\tstr = f.name;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstr = mxUtils.trim(f.toString());\n\t\t\t\t\n\t\t\t\tif (/^function\\s/.test(str))\n\t\t\t\t{\n\t\t\t\t\tstr = mxUtils.ltrim(str.substring(9));\n\t\t\t\t\tvar idx2 = str.indexOf('(');\n\t\t\t\t\t\n\t\t\t\t\tif (idx2 > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstr = str.substring(0, idx2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn str;\n\t},\n\n\t/**\n\t * Function: indexOf\n\t * \n\t * Returns the index of obj in array or -1 if the array does not contain\n\t * the given object.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array to check for the given obj.\n\t * obj - Object to find in the given array.\n\t */\n\tindexOf: function(array, obj)\n\t{\n\t\tif (array != null && obj != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tif (array[i] == obj)\n\t\t\t\t{\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn -1;\n\t},\n\n\t/**\n\t * Function: forEach\n\t * \n\t * Calls the given function for each element of the given array and returns\n\t * the array.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array that contains the elements.\n\t * fn - Function to be called for each object.\n\t */\n\tforEach: function(array, fn)\n\t{\n\t\tif (array != null && fn != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tfn(array[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn array;\n\t},\n\n\t/**\n\t * Function: remove\n\t * \n\t * Removes all occurrences of the given object in the given array or\n\t * object. If there are multiple occurrences of the object, be they\n\t * associative or as an array entry, all occurrences are removed from\n\t * the array or deleted from the object. By removing the object from\n\t * the array, all elements following the removed element are shifted\n\t * by one step towards the beginning of the array.\n\t * \n\t * The length of arrays is not modified inside this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to find in the given array.\n\t * array - Array to check for the given obj.\n\t */\n\tremove: function(obj, array)\n\t{\n\t\tvar result = null;\n\t\t\n\t\tif (typeof(array) == 'object')\n\t\t{\n\t\t\tvar index = mxUtils.indexOf(array, obj);\n\t\t\t\n\t\t\twhile (index >= 0)\n\t\t\t{\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\tresult = obj;\n\t\t\t\tindex = mxUtils.indexOf(array, obj);\n\t\t\t}\n\t\t}\n\n\t\tfor (var key in array)\n\t\t{\n\t\t\tif (array[key] == obj)\n\t\t\t{\n\t\t\t\tdelete array[key];\n\t\t\t\tresult = obj;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNode\n\t * \n\t * Returns true if the given value is an XML node with the node name\n\t * and if the optional attribute has the specified value.\n\t * \n\t * This implementation assumes that the given value is a DOM node if the\n\t * nodeType property is numeric, that is, if isNaN returns false for\n\t * value.nodeType.\n\t * \n\t * Parameters:\n\t * \n\t * value - Object that should be examined as a node.\n\t * nodeName - String that specifies the node name.\n\t * attributeName - Optional attribute name to check.\n\t * attributeValue - Optional attribute value to check.\n\t */\n\t isNode: function(value, nodeName, attributeName, attributeValue)\n\t {\n\t \tif (value != null && !isNaN(value.nodeType) && (nodeName == null ||\n\t \t\tvalue.nodeName.toLowerCase() == nodeName.toLowerCase()))\n \t\t{\n \t\t\treturn attributeName == null ||\n \t\t\t\tvalue.getAttribute(attributeName) == attributeValue;\n \t\t}\n\t \t\n\t \treturn false;\n\t },\n\t\n\t/**\n\t * Function: isAncestorNode\n\t * \n\t * Returns true if the given ancestor is an ancestor of the\n\t * given DOM node in the DOM. This also returns true if the\n\t * child is the ancestor.\n\t * \n\t * Parameters:\n\t * \n\t * ancestor - DOM node that represents the ancestor.\n\t * child - DOM node that represents the child.\n\t */\n\t isAncestorNode: function(ancestor, child)\n\t {\n\t \tvar parent = child;\n\t \t\n\t \twhile (parent != null)\n\t \t{\n\t \t\tif (parent == ancestor)\n\t \t\t{\n\t \t\t\treturn true;\n\t \t\t}\n\n\t \t\tparent = parent.parentNode;\n\t \t}\n\t \t\n\t \treturn false;\n\t },\n\n\t/**\n\t * Function: getChildNodes\n\t * \n\t * Returns an array of child nodes that are of the given node type.\n\t * \n\t * Parameters:\n\t * \n\t * node - Parent DOM node to return the children from.\n\t * nodeType - Optional node type to return. Default is\n\t * <mxConstants.NODETYPE_ELEMENT>.\n\t */\n\tgetChildNodes: function(node, nodeType)\n\t{\n\t\tnodeType = nodeType || mxConstants.NODETYPE_ELEMENT;\n\t\t\n\t\tvar children = [];\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == nodeType)\n\t\t\t{\n\t\t\t\tchildren.push(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t\t\n\t\treturn children;\n\t},\n\n\t/**\n\t * Function: importNode\n\t * \n\t * Cross browser implementation for document.importNode. Uses document.importNode\n\t * in all browsers but IE, where the node is cloned by creating a new node and\n\t * copying all attributes and children into it using importNode, recursively.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNode: function(doc, node, allChildren)\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 10))\n\t\t{\n\t\t\tswitch (node.nodeType)\n\t\t\t{\n\t\t\t\tcase 1: /* element */\n\t\t\t\t{\n\t\t\t\t\tvar newNode = doc.createElement(node.nodeName);\n\t\t\t\t\t\n\t\t\t\t\tif (node.attributes && node.attributes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var i = 0; i < node.attributes.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnewNode.setAttribute(node.attributes[i].nodeName,\n\t\t\t\t\t\t\t\tnode.getAttribute(node.attributes[i].nodeName));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (allChildren && node.childNodes && node.childNodes.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < node.childNodes.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tnewNode.appendChild(mxUtils.importNode(doc, node.childNodes[i], allChildren));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn newNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 3: /* text */\n\t\t\t    case 4: /* cdata-section */\n\t\t\t    case 8: /* comment */\n\t\t\t    {\n\t\t\t      return doc.createTextNode(node.value);\n\t\t\t      break;\n\t\t\t    }\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn doc.importNode(node, allChildren);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createXmlDocument\n\t * \n\t * Returns a new, empty XML document.\n\t */\n\tcreateXmlDocument: function()\n\t{\n\t\tvar doc = null;\n\t\t\n\t\tif (document.implementation && document.implementation.createDocument)\n\t\t{\n\t\t\tdoc = document.implementation.createDocument('', '', null);\n\t\t}\n\t\telse if (window.ActiveXObject)\n\t\t{\n\t\t\tdoc = new ActiveXObject('Microsoft.XMLDOM');\n\t \t}\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: parseXml\n\t * \n\t * Parses the specified XML string into a new XML document and returns the\n\t * new document.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var doc = mxUtils.parseXml(\n\t *   '<mxGraphModel><root><MyDiagram id=\"0\"><mxCell/></MyDiagram>'+\n\t *   '<MyLayer id=\"1\"><mxCell parent=\"0\" /></MyLayer><MyObject id=\"2\">'+\n\t *   '<mxCell style=\"strokeColor=blue;fillColor=red\" parent=\"1\" vertex=\"1\">'+\n\t *   '<mxGeometry x=\"10\" y=\"10\" width=\"80\" height=\"30\" as=\"geometry\"/>'+\n\t *   '</mxCell></MyObject></root></mxGraphModel>');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * xml - String that contains the XML data.\n\t */\n\tparseXml: function()\n\t{\n\t\tif (window.DOMParser)\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\n\t\t\t\treturn parser.parseFromString(xml, 'text/xml');\n\t\t\t};\n\t\t}\n\t\telse // IE<=9\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar result = mxUtils.createXmlDocument();\n\t\t\t\tresult.async = false;\n\t\t\t\t// Workaround for parsing errors with SVG DTD\n\t\t\t\tresult.validateOnParse = false;\n\t\t\t\tresult.resolveExternals = false;\n\t\t\t\tresult.loadXML(xml);\n\t\t\t\t\n\t\t\t\treturn result;\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: clearSelection\n\t * \n\t * Clears the current selection in the page.\n\t */\n\tclearSelection: function()\n\t{\n\t\tif (document.selection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tdocument.selection.empty();\n\t\t\t};\n\t\t}\n\t\telse if (window.getSelection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tif (window.getSelection().empty)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().empty();\n\t\t\t\t}\n\t\t\t\telse if (window.getSelection().removeAllRanges)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function() { };\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getPrettyXML\n\t * \n\t * Returns a pretty printed string that represents the XML tree for the\n\t * given node. This method should only be used to print XML for reading,\n\t * use <getXml> instead to obtain a string for processing.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * tab - Optional string that specifies the indentation for one level.\n\t * Default is two spaces.\n\t * indent - Optional string that represents the current indentation.\n\t * Default is an empty string.\n\t */\n\tgetPrettyXml: function(node, tab, indent)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (node != null)\n\t\t{\n\t\t\ttab = tab || '  ';\n\t\t\tindent = indent || '';\n\t\t\t\n\t\t\tif (node.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t\t{\n\t\t\t\tvar value =  mxUtils.trim(mxUtils.getTextContent(node));\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + mxUtils.htmlEntities(value) + '\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(indent + '<' + node.nodeName);\n\t\t\t\t\n\t\t\t\t// Creates the string with the node attributes\n\t\t\t\t// and converts all HTML entities in the values\n\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\n\t\t\t\tif (attrs != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar val = mxUtils.htmlEntities(attrs[i].value);\n\t\t\t\t\t\tresult.push(' ' + attrs[i].nodeName + '=\"' + val + '\"');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Recursively creates the XML string for each\n\t\t\t\t// child nodes and appends it here with an\n\t\t\t\t// indentation\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tresult.push('>\\n');\n\t\t\t\t\t\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent + tab));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresult.push(indent + '</'+node.nodeName + '>\\n');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult.push('/>\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\t\n\t/**\n\t * Function: removeWhitespace\n\t * \n\t * Removes the sibling text nodes for the given node that only consists\n\t * of tabs, newlines and spaces.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose siblings should be removed.\n\t * before - Optional boolean that specifies the direction of the traversal.\n\t */\n\tremoveWhitespace: function(node, before)\n\t{\n\t\tvar tmp = (before) ? node.previousSibling : node.nextSibling;\n\t\t\n\t\twhile (tmp != null && tmp.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tvar next = (before) ? tmp.previousSibling : tmp.nextSibling;\n\t\t\tvar text = mxUtils.getTextContent(tmp);\n\t\t\t\n\t\t\tif (mxUtils.trim(text).length == 0)\n\t\t\t{\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = next;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: htmlEntities\n\t * \n\t * Replaces characters (less than, greater than, newlines and quotes) with\n\t * their HTML entities in the given string and returns the result.\n\t * \n\t * Parameters:\n\t * \n\t * s - String that contains the characters to be converted.\n\t * newline - If newlines should be replaced. Default is true.\n\t */\n\thtmlEntities: function(s, newline)\n\t{\n\t\ts = String(s || '');\n\t\t\n\t\ts = s.replace(/&/g,'&amp;'); // 38 26\n\t\ts = s.replace(/\"/g,'&quot;'); // 34 22\n\t\ts = s.replace(/\\'/g,'&#39;'); // 39 27\n\t\ts = s.replace(/</g,'&lt;'); // 60 3C\n\t\ts = s.replace(/>/g,'&gt;'); // 62 3E\n\n\t\tif (newline == null || newline)\n\t\t{\n\t\t\ts = s.replace(/\\n/g, '&#xa;');\n\t\t}\n\t\t\n\t\treturn s;\n\t},\n\t\n\t/**\n\t * Function: isVml\n\t * \n\t * Returns true if the given node is in the VML namespace.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose tag urn should be checked.\n\t */\n\tisVml: function(node)\n\t{\n\t\treturn node != null && node.tagUrn == 'urn:schemas-microsoft-com:vml';\n\t},\n\n\t/**\n\t * Function: getXml\n\t * \n\t * Returns the XML content of the specified node. For Internet Explorer,\n\t * all \\r\\n\\t[\\t]* are removed from the XML string and the remaining \\r\\n\n\t * are replaced by \\n. All \\n are then replaced with linefeed, or &#xa; if\n\t * no linefeed is defined.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * linefeed - Optional string that linefeeds are converted into. Default is\n\t * &#xa;\n\t */\n\tgetXml: function(node, linefeed)\n\t{\n\t\tvar xml = '';\n\n\t\tif (window.XMLSerializer != null)\n\t\t{\n\t\t\tvar xmlSerializer = new XMLSerializer();\n\t\t\txml = xmlSerializer.serializeToString(node);     \n\t\t}\n\t\telse if (node.xml != null)\n\t\t{\n\t\t\txml = node.xml.replace(/\\r\\n\\t[\\t]*/g, '').\n\t\t\t\treplace(/>\\r\\n/g, '>').\n\t\t\t\treplace(/\\r\\n/g, '\\n');\n\t\t}\n\n\t\t// Replaces linefeeds with HTML Entities.\n\t\tlinefeed = linefeed || '&#xa;';\n\t\txml = xml.replace(/\\n/g, linefeed);\n\t\t  \n\t\treturn xml;\n\t},\n\t\n\t/**\n\t * Function: extractTextWithWhitespace\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * elems - DOM nodes to return the text for.\n\t */\n\textractTextWithWhitespace: function(elems)\n\t{\n\t    // Known block elements for handling linefeeds (list is not complete)\n\t\tvar blocks = ['BLOCKQUOTE', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'OL', 'P', 'PRE', 'TABLE', 'UL'];\n\t\tvar ret = [];\n\t\t\n\t\tfunction doExtract(elts)\n\t\t{\n\t\t\t// Single break should be ignored\n\t\t\tif (elts.length == 1 && (elts[0].nodeName == 'BR' ||\n\t\t\t\telts[0].innerHTML == '\\n'))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t    for (var i = 0; i < elts.length; i++)\n\t\t    {\n\t\t        var elem = elts[i];\n\n\t\t\t\t// DIV with a br or linefeed forces a linefeed\n\t\t\t\tif (elem.nodeName == 'BR' || elem.innerHTML == '\\n' ||\n\t\t\t\t\t((elts.length == 1 || i == 0) && (elem.nodeName == 'DIV' &&\n\t\t\t\t\telem.innerHTML.toLowerCase() == '<br>')))\n\t\t    \t{\n\t    \t\t\tret.push('\\n');\n\t\t    \t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t        if (elem.nodeType === 3 || elem.nodeType === 4)\n\t\t\t        {\n\t\t\t        \tif (elem.nodeValue.length > 0)\n\t\t\t        \t{\n\t\t\t        \t\tret.push(elem.nodeValue);\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        else if (elem.nodeType !== 8 && elem.childNodes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdoExtract(elem.childNodes);\n\t\t\t\t\t}\n\t\t\t        \n\t        \t\tif (i < elts.length - 1 && mxUtils.indexOf(blocks, elts[i + 1].nodeName) >= 0)\n\t        \t\t{\n\t        \t\t\tret.push('\\n');\t\t\n\t        \t\t}\n\t\t\t\t}\n\t\t    }\n\t\t};\n\t\t\n\t\tdoExtract(elems);\n\t    \n\t    return ret.join('');\n\t},\n\n\t/**\n\t * Function: replaceTrailingNewlines\n\t * \n\t * Replaces each trailing newline with the given pattern.\n\t */\n\treplaceTrailingNewlines: function(str, pattern)\n\t{\n\t\t// LATER: Check is this can be done with a regular expression\n\t\tvar postfix = '';\n\t\t\n\t\twhile (str.length > 0 && str.charAt(str.length - 1) == '\\n')\n\t\t{\n\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\tpostfix += pattern;\n\t\t}\n\t\t\n\t\treturn str + postfix;\n\t},\n\n\t/**\n\t * Function: getTextContent\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the text content for.\n\t */\n\tgetTextContent: function(node)\n\t{\n\t\t// Only IE10-\n\t\tif (mxClient.IS_IE && node.innerText !== undefined)\n\t\t{\n\t\t\treturn node.innerText;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (node != null) ? node[(node.textContent === undefined) ? 'text' : 'textContent'] : '';\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setTextContent\n\t * \n\t * Sets the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the text content for.\n\t * text - String that represents the text content.\n\t */\n\tsetTextContent: function(node, text)\n\t{\n\t\tif (node.innerText !== undefined)\n\t\t{\n\t\t\tnode.innerText = text;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode[(node.textContent === undefined) ? 'text' : 'textContent'] = text;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getInnerHtml\n\t * \n\t * Returns the inner HTML for the given node as a string or an empty string\n\t * if no node was specified. The inner HTML is the text representing all\n\t * children of the node, but not the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the inner HTML for.\n\t */\n\tgetInnerHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\treturn node.innerHTML;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getOuterHtml\n\t * \n\t * Returns the outer HTML for the given node as a string or an empty\n\t * string if no node was specified. The outer HTML is the text representing\n\t * all children of the node including the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the outer HTML for.\n\t */\n\tgetOuterHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tif (node.outerHTML != null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn node.outerHTML;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = [];\n\t\t\t\t\t\ttmp.push('<'+node.nodeName);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (attrs != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar value = attrs[i].value;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (value != null && value.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.push(' ');\n\t\t\t\t\t\t\t\t\ttmp.push(attrs[i].nodeName);\n\t\t\t\t\t\t\t\t\ttmp.push('=\"');\n\t\t\t\t\t\t\t\t\ttmp.push(value);\n\t\t\t\t\t\t\t\t\ttmp.push('\"');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (node.innerHTML.length == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('/>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('>');\n\t\t\t\t\t\t\ttmp.push(node.innerHTML);\n\t\t\t\t\t\t\ttmp.push('</'+node.nodeName+'>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn tmp.join('');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: write\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twrite: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent with an additional linefeed. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twriteln: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t\tparent.appendChild(document.createElement('br'));\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: br\n\t * \n\t * Appends a linebreak to the given parent and returns the linebreak.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the linebreak to.\n\t */\n\tbr: function(parent, count)\n\t{\n\t\tcount = count || 1;\n\t\tvar br = null;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tif (parent != null)\n\t\t\t{\n\t\t\t\tbr = parent.ownerDocument.createElement('br');\n\t\t\t\tparent.appendChild(br);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn br;\n\t},\n\t\t\n\t/**\n\t * Function: button\n\t * \n\t * Returns a new button with the given level and function as an onclick\n\t * event handler.\n\t * \n\t * (code)\n\t * document.body.appendChild(mxUtils.button('Test', function(evt)\n\t * {\n\t *   alert('Hello, World!');\n\t * }));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * label - String that represents the label of the button.\n\t * funct - Function to be called if the button is pressed.\n\t * doc - Optional document to be used for creating the button. Default is the\n\t * current document.\n\t */\n\tbutton: function(label, funct, doc)\n\t{\n\t\tdoc = (doc != null) ? doc : document;\n\t\t\n\t\tvar button = doc.createElement('button');\n\t\tmxUtils.write(button, label);\n\n\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t{\n\t\t\tfunct(evt);\n\t\t});\n\t\t\n\t\treturn button;\n\t},\n\t\n\t/**\n\t * Function: para\n\t * \n\t * Appends a new paragraph with the given text to the specified parent and\n\t * returns the paragraph.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text for the new paragraph.\n\t */\n\tpara: function(parent, text)\n\t{\n\t\tvar p = document.createElement('p');\n\t\tmxUtils.write(p, text);\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(p);\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: addTransparentBackgroundFilter\n\t * \n\t * Adds a transparent background to the filter of the given node. This\n\t * background can be used in IE8 standards mode (native IE8 only) to pass\n\t * events through the node.\n\t */\n\taddTransparentBackgroundFilter: function(node)\n\t{\n\t\tnode.style.filter += 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\\'' +\n\t\t\tmxClient.imageBasePath + '/transparent.gif\\', sizingMethod=\\'scale\\')';\n\t},\n\n\t/**\n\t * Function: linkAction\n\t * \n\t * Adds a hyperlink to the specified parent that invokes action on the\n\t * specified editor.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> that will execute the action.\n\t * action - String that defines the name of the action to be executed.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkAction: function(parent, text, editor, action, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor.execute(action);\n\t\t}, pad);\n\t},\n\n\t/**\n\t * Function: linkInvoke\n\t * \n\t * Adds a hyperlink to the specified parent that invokes the specified\n\t * function on the editor passing along the specified argument. The\n\t * function name is the name of a function of the editor instance,\n\t * not an action name.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> instance to execute the function on.\n\t * functName - String that represents the name of the function.\n\t * arg - Object that represents the argument to the function.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkInvoke: function(parent, text, editor, functName, arg, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor[functName](arg);\n\t\t}, pad);\n\t},\n\t\n\t/**\n\t * Function: link\n\t * \n\t * Adds a hyperlink to the specified parent and invokes the given function\n\t * when the link is clicked.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * funct - Function to execute when the link is clicked.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlink: function(parent, text, funct, pad)\n\t{\n\t\tvar a = document.createElement('span');\n\t\t\n\t\ta.style.color = 'blue';\n\t\ta.style.textDecoration = 'underline';\n\t\ta.style.cursor = 'pointer';\n\t\t\n\t\tif (pad != null)\n\t\t{\n\t\t\ta.style.paddingLeft = pad+'px';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(a, 'click', funct);\n\t\tmxUtils.write(a, text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(a);\n\t\t}\n\t\t\n\t\treturn a;\n\t},\n\n\t/**\n\t * Function: getDocumentSize\n\t * \n\t * Returns the client size for the current document as an <mxRectangle>.\n\t */\n\tgetDocumentSize: function()\n\t{\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\ttry\n\t\t{\n\t\t\treturn new mxRectangle(0, 0, b.clientWidth || d.clientWidth, Math.max(b.clientHeight || 0, d.clientHeight));\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\treturn new mxRectangle();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: fit\n\t * \n\t * Makes sure the given node is inside the visible area of the window. This\n\t * is done by setting the left and top in the style. \n\t */\n\tfit: function(node)\n\t{\n\t\tvar ds = mxUtils.getDocumentSize();\n\t\tvar left = parseInt(node.offsetLeft);\n\t\tvar width = parseInt(node.offsetWidth);\n\t\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(node.ownerDocument);\n\t\tvar sl = offset.x;\n\t\tvar st = offset.y;\n\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\tvar right = (sl) + ds.width;\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\tnode.style.left = Math.max(sl, right - width) + 'px';\n\t\t}\n\t\t\n\t\tvar top = parseInt(node.offsetTop);\n\t\tvar height = parseInt(node.offsetHeight);\n\t\t\n\t\tvar bottom = st + ds.height;\n\t\t\n\t\tif (top + height > bottom)\n\t\t{\n\t\t\tnode.style.top = Math.max(st, bottom - height) + 'px';\n\t\t}\n\t},\n\n\t/**\n\t * Function: load\n\t * \n\t * Loads the specified URL *synchronously* and returns the <mxXmlRequest>.\n\t * Throws an exception if the file cannot be loaded. See <mxUtils.get> for\n\t * an asynchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * try\n\t * {\n\t *   var req = mxUtils.load(filename);\n\t *   var root = req.getDocumentElement();\n\t *   // Process XML DOM...\n\t * }\n\t * catch (ex)\n\t * {\n\t *   mxUtils.alert('Cannot load '+filename+': '+ex);\n\t * }\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t */\n\tload: function(url)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET', false);\n\t\treq.send();\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Loads the specified URL *asynchronously* and invokes the given functions\n\t * depending on the request status. Returns the <mxXmlRequest> in use. Both\n\t * functions take the <mxXmlRequest> as the only parameter. See\n\t * <mxUtils.load> for a synchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *    var node = req.getDocumentElement();\n\t *    // Process XML DOM...\n\t * });\n\t * (end)\n\t * \n\t * So for example, to load a diagram into an existing graph model, the\n\t * following code is used.\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *   var node = req.getDocumentElement();\n\t *   var dec = new mxCodec(node.ownerDocument);\n\t *   dec.decode(node, graph.getModel());\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t * binary - Optional boolean parameter that specifies if the request is\n\t * binary.\n\t * timeout - Optional timeout in ms before calling ontimeout.\n\t * ontimeout - Optional function to execute on timeout.\n\t */\n\tget: function(url, onload, onerror, binary, timeout, ontimeout)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET');\n\t\t\n\t\tif (binary != null)\n\t\t{\n\t\t\treq.setBinary(binary);\n\t\t}\n\t\t\n\t\treq.send(onload, onerror, timeout, ontimeout);\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: getAll\n\t * \n\t * Loads the URLs in the given array *asynchronously* and invokes the given function\n\t * if all requests returned with a valid 2xx status. The error handler is invoked\n\t * once on the first error or invalid response.\n\t *\n\t * Parameters:\n\t * \n\t * urls - Array of URLs to be loaded.\n\t * onload - Callback with array of <mxXmlRequests>.\n\t * onerror - Optional function to execute on error.\n\t */\n\tgetAll: function(urls, onload, onerror)\n\t{\n\t\tvar remain = urls.length;\n\t\tvar result = [];\n\t\tvar errors = 0;\n\t\tvar err = function()\n\t\t{\n\t\t\tif (errors == 0 && onerror != null)\n\t\t\t{\n\t\t\t\tonerror();\n\t\t\t}\n\n\t\t\terrors++;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < urls.length; i++)\n\t\t{\n\t\t\t(function(url, index)\n\t\t\t{\n\t\t\t\tmxUtils.get(url, function(req)\n\t\t\t\t{\n\t\t\t\t\tvar status = req.getStatus();\n\t\t\t\t\t\n\t\t\t\t\tif (status < 200 || status > 299)\n\t\t\t\t\t{\n\t\t\t\t\t\terr();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult[index] = req;\n\t\t\t\t\t\tremain--;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (remain == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonload(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, err);\n\t\t\t})(urls[i], i);\n\t\t}\n\t\t\n\t\tif (remain == 0)\n\t\t{\n\t\t\tonload(result);\t\t\t\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: post\n\t * \n\t * Posts the specified params to the given URL *asynchronously* and invokes\n\t * the given functions depending on the request status. Returns the\n\t * <mxXmlRequest> in use. Both functions take the <mxXmlRequest> as the\n\t * only parameter. Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.post(url, 'key=value', function(req)\n\t * {\n\t * \tmxUtils.alert('Ready: '+req.isReady()+' Status: '+req.getStatus());\n\t *  // Process req.getDocumentElement() using DOM API if OK...\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the post request.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t */\n\tpost: function(url, params, onload, onerror)\n\t{\n\t\treturn new mxXmlRequest(url, params).send(onload, onerror);\n\t},\n\t\n\t/**\n\t * Function: submit\n\t * \n\t * Submits the given parameters to the specified URL using\n\t * <mxXmlRequest.simulate> and returns the <mxXmlRequest>.\n\t * Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the form.\n\t * doc - Document to create the form in.\n\t * target - Target to send the form result to.\n\t */\n\tsubmit: function(url, params, doc, target)\n\t{\n\t\treturn new mxXmlRequest(url, params).simulate(doc, target);\n\t},\n\t\n\t/**\n\t * Function: loadInto\n\t * \n\t * Loads the specified URL *asynchronously* into the specified document,\n\t * invoking onload after the document has been loaded. This implementation\n\t * does not use <mxXmlRequest>, but the document.load method.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * doc - The document to load the URL into.\n\t * onload - Function to execute when the URL has been loaded.\n\t */\n\tloadInto: function(url, doc, onload)\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tdoc.onreadystatechange = function ()\n\t\t\t{\n\t\t\t\tif (doc.readyState == 4)\n\t\t\t\t{\n\t\t\t\t\tonload();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.addEventListener('load', onload, false);\n\t\t}\n\t\t\n\t\tdoc.load(url);\n\t},\n\t\n\t/**\n\t * Function: getValue\n\t * \n\t * Returns the value for the given key in the given associative array or\n\t * the given default value if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null.\n\t */\n\tgetValue: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\t\t\t\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: getNumber\n\t * \n\t * Returns the numeric value for the given key in the given associative\n\t * array or the given default value (or 0) if the value is null. The value\n\t * is converted to a numeric value using the Number function.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is 0.\n\t */\n\tgetNumber: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue || 0;\t\t\t\n\t\t}\n\t\t\n\t\treturn Number(value);\n\t},\n\t\n\t/**\n\t * Function: getColor\n\t * \n\t * Returns the color value for the given key in the given associative\n\t * array or the given default value if the value is null. If the value\n\t * is <mxConstants.NONE> then null is returned.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is null.\n\t */\n\tgetColor: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\telse if (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: clone\n\t * \n\t * Recursively clones the specified object ignoring all fieldnames in the\n\t * given array of transient fields. <mxObjectIdentity.FIELD_NAME> is always\n\t * ignored by this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to be cloned.\n\t * transients - Optional array of strings representing the fieldname to be\n\t * ignored.\n\t * shallow - Optional boolean argument to specify if a shallow clone should\n\t * be created, that is, one where all object references are not cloned or,\n\t * in other words, one where only atomic (strings, numbers) values are\n\t * cloned. Default is false.\n\t */\n\tclone: function(obj, transients, shallow)\n\t{\n\t\tshallow = (shallow != null) ? shallow : false;\n\t\tvar clone = null;\n\t\t\n\t\tif (obj != null && typeof(obj.constructor) == 'function')\n\t\t{\n\t\t\tclone = new obj.constructor();\n\t\t\t\n\t\t    for (var i in obj)\n\t\t    {\n\t\t    \tif (i != mxObjectIdentity.FIELD_NAME && (transients == null ||\n\t\t    \t\tmxUtils.indexOf(transients, i) < 0))\n\t\t    \t{\n\t\t\t    \tif (!shallow && typeof(obj[i]) == 'object')\n\t\t\t    \t{\n\t\t\t            clone[i] = mxUtils.clone(obj[i]);\n\t\t\t        }\n\t\t\t        else\n\t\t\t        {\n\t\t\t            clone[i] = obj[i];\n\t\t\t        }\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t    return clone;\n\t},\n\n\t/**\n\t * Function: equalPoints\n\t * \n\t * Compares all mxPoints in the given lists.\n\t * \n\t * Parameters:\n\t * \n\t * a - Array of <mxPoints> to be compared.\n\t * b - Array of <mxPoints> to be compared.\n\t */\n\tequalPoints: function(a, b)\n\t{\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var i = 0; i < a.length; i++)\n\t\t\t{\n\t\t\t\tif (a[i] == b[i] || (a[i] != null && !a[i].equals(b[i])))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: equalEntries\n\t * \n\t * Returns true if all properties of the given objects are equal. Values\n\t * with NaN are equal to NaN and unequal to any other value.\n\t * \n\t * Parameters:\n\t * \n\t * a - First object to be compared.\n\t * b - Second object to be compared.\n\t */\n\tequalEntries: function(a, b)\n\t{\n\t\t// Counts keys in b to check if all values have been compared\n\t\tvar count = 0;\n\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var key in b)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tfor (var key in a)\n\t\t\t{\n\t\t\t\tcount--\n\t\t\t\t\n\t\t\t\tif ((!mxUtils.isNaN(a[key]) || !mxUtils.isNaN(b[key])) && a[key] != b[key])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn count == 0;\n\t},\n\t\n\t/**\n\t * Function: removeDuplicates\n\t * \n\t * Removes all duplicates from the given array.\n\t */\n\tremoveDuplicates: function(arr)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tif (!dict.get(arr[i]))\n\t\t\t{\n\t\t\t\tresult.push(arr[i]);\n\t\t\t\tdict.put(arr[i], true);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNaN\n\t *\n\t * Returns true if the given value is of type number and isNaN returns true.\n\t */\n\tisNaN: function(value)\n\t{\n\t\treturn typeof(value) == 'number' && isNaN(value);\n\t},\n\t\n\t/**\n\t * Function: extend\n\t *\n\t * Assigns a copy of the superclass prototype to the subclass prototype.\n\t * Note that this does not call the constructor of the superclass at this\n\t * point, the superclass constructor should be called explicitely in the\n\t * subclass constructor. Below is an example.\n\t * \n\t * (code)\n\t * MyGraph = function(container, model, renderHint, stylesheet)\n\t * {\n\t *   mxGraph.call(this, container, model, renderHint, stylesheet);\n\t * }\n\t * \n\t * mxUtils.extend(MyGraph, mxGraph);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * ctor - Constructor of the subclass.\n\t * superCtor - Constructor of the superclass.\n\t */\n\textend: function(ctor, superCtor)\n\t{\n\t\tvar f = function() {};\n\t\tf.prototype = superCtor.prototype;\n\t\t\n\t\tctor.prototype = new f();\n\t\tctor.prototype.constructor = ctor;\n\t},\n\n\t/**\n\t * Function: toString\n\t * \n\t * Returns a textual representation of the specified object.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to return the string representation for.\n\t */\n\ttoString: function(obj)\n\t{\n\t    var output = '';\n\t    \n\t    for (var i in obj)\n\t    {\n\t    \ttry\n\t    \t{\n\t\t\t    if (obj[i] == null)\n\t\t\t    {\n\t\t            output += i + ' = [null]\\n';\n\t\t\t    }\n\t\t\t    else if (typeof(obj[i]) == 'function')\n\t\t\t    {\n\t\t            output += i + ' => [Function]\\n';\n\t\t        }\n\t\t        else if (typeof(obj[i]) == 'object')\n\t\t        {\n\t\t        \tvar ctor = mxUtils.getFunctionName(obj[i].constructor); \n\t\t            output += i + ' => [' + ctor + ']\\n';\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            output += i + ' = ' + obj[i] + '\\n';\n\t\t        }\n\t    \t}\n\t    \tcatch (e)\n\t    \t{\n\t    \t\toutput += i + '=' + e.message;\n\t    \t}\n\t    }\n\t    \n\t    return output;\n\t},\n\n\t/**\n\t * Function: toRadians\n\t * \n\t * Converts the given degree to radians.\n\t */\n\ttoRadians: function(deg)\n\t{\n\t\treturn Math.PI * deg / 180;\n\t},\n\n\t/**\n\t * Function: toDegree\n\t * \n\t * Converts the given radians to degree.\n\t */\n\ttoDegree: function(rad)\n\t{\n\t\treturn rad * 180 / Math.PI;\n\t},\n\t\n\t/**\n\t * Function: arcToCurves\n\t * \n\t * Converts the given arc to a series of curves.\n\t */\n\tarcToCurves: function(x0, y0, r1, r2, angle, largeArcFlag, sweepFlag, x, y)\n\t{\n\t\tx -= x0;\n\t\ty -= y0;\n\t\t\n        if (r1 === 0 || r2 === 0) \n        {\n        \treturn result;\n        }\n        \n        var fS = sweepFlag;\n        var psai = angle;\n        r1 = Math.abs(r1);\n        r2 = Math.abs(r2);\n        var ctx = -x / 2;\n        var cty = -y / 2;\n        var cpsi = Math.cos(psai * Math.PI / 180);\n        var spsi = Math.sin(psai * Math.PI / 180);\n        var rxd = cpsi * ctx + spsi * cty;\n        var ryd = -1 * spsi * ctx + cpsi * cty;\n        var rxdd = rxd * rxd;\n        var rydd = ryd * ryd;\n        var r1x = r1 * r1;\n        var r2y = r2 * r2;\n        var lamda = rxdd / r1x + rydd / r2y;\n        var sds;\n        \n        if (lamda > 1) \n        {\n        \tr1 = Math.sqrt(lamda) * r1;\n        \tr2 = Math.sqrt(lamda) * r2;\n        \tsds = 0;\n        }  \n        else\n        {\n        \tvar seif = 1;\n            \n        \tif (largeArcFlag === fS) \n        \t{\n        \t\tseif = -1;\n        \t}\n            \n        \tsds = seif * Math.sqrt((r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd));\n        }\n        \n        var txd = sds * r1 * ryd / r2;\n        var tyd = -1 * sds * r2 * rxd / r1;\n        var tx = cpsi * txd - spsi * tyd + x / 2;\n        var ty = spsi * txd + cpsi * tyd + y / 2;\n        var rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);\n        var s1 = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        rad = Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) - Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);\n        var dr = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        \n        if (fS == 0 && dr > 0) \n        {\n        \tdr -= 2 * Math.PI;\n        }\n        else if (fS != 0 && dr < 0) \n        {\n        \tdr += 2 * Math.PI;\n        }\n        \n        var sse = dr * 2 / Math.PI;\n        var seg = Math.ceil(sse < 0 ? -1 * sse : sse);\n        var segr = dr / seg;\n        var t = 8/3 * Math.sin(segr / 4) * Math.sin(segr / 4) / Math.sin(segr / 2);\n        var cpsir1 = cpsi * r1;\n        var cpsir2 = cpsi * r2;\n        var spsir1 = spsi * r1;\n        var spsir2 = spsi * r2;\n        var mc = Math.cos(s1);\n        var ms = Math.sin(s1);\n        var x2 = -t * (cpsir1 * ms + spsir2 * mc);\n        var y2 = -t * (spsir1 * ms - cpsir2 * mc);\n        var x3 = 0;\n        var y3 = 0;\n\n\t\tvar result = [];\n        \n        for (var n = 0; n < seg; ++n) \n        {\n            s1 += segr;\n            mc = Math.cos(s1);\n            ms = Math.sin(s1);\n            \n            x3 = cpsir1 * mc - spsir2 * ms + tx;\n            y3 = spsir1 * mc + cpsir2 * ms + ty;\n            var dx = -t * (cpsir1 * ms + spsir2 * mc);\n            var dy = -t * (spsir1 * ms - cpsir2 * mc);\n            \n            // CurveTo updates x0, y0 so need to restore it\n            var index = n * 6;\n            result[index] = Number(x2 + x0);\n            result[index + 1] = Number(y2 + y0);\n            result[index + 2] = Number(x3 - dx + x0);\n            result[index + 3] = Number(y3 - dy + y0);\n            result[index + 4] = Number(x3 + x0);\n            result[index + 5] = Number(y3 + y0);\n            \n\t\t\tx2 = x3 + dx;\n            y2 = y3 + dy;\n        }\n        \n        return result;\n\t},\n\n\t/**\n\t * Function: getBoundingBox\n\t * \n\t * Returns the bounding box for the rotated rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * rect - <mxRectangle> to be rotated.\n\t * angle - Number that represents the angle (in degrees).\n\t * cx - Optional <mxPoint> that represents the rotation center. If no\n\t * rotation center is given then the center of rect is used.\n\t */\n\tgetBoundingBox: function(rect, rotation, cx)\n\t{\n        var result = null;\n\n        if (rect != null && rotation != null && rotation != 0)\n        {\n            var rad = mxUtils.toRadians(rotation);\n            var cos = Math.cos(rad);\n            var sin = Math.sin(rad);\n\n            cx = (cx != null) ? cx : new mxPoint(rect.x + rect.width / 2, rect.y  + rect.height / 2);\n\n            var p1 = new mxPoint(rect.x, rect.y);\n            var p2 = new mxPoint(rect.x + rect.width, rect.y);\n            var p3 = new mxPoint(p2.x, rect.y + rect.height);\n            var p4 = new mxPoint(rect.x, p3.y);\n\n            p1 = mxUtils.getRotatedPoint(p1, cos, sin, cx);\n            p2 = mxUtils.getRotatedPoint(p2, cos, sin, cx);\n            p3 = mxUtils.getRotatedPoint(p3, cos, sin, cx);\n            p4 = mxUtils.getRotatedPoint(p4, cos, sin, cx);\n\n            result = new mxRectangle(p1.x, p1.y, 0, 0);\n            result.add(new mxRectangle(p2.x, p2.y, 0, 0));\n            result.add(new mxRectangle(p3.x, p3.y, 0, 0));\n            result.add(new mxRectangle(p4.x, p4.y, 0, 0));\n        }\n\n        return result;\n\t},\n\n\t/**\n\t * Function: getRotatedPoint\n\t * \n\t * Rotates the given point by the given cos and sin.\n\t */\n\tgetRotatedPoint: function(pt, cos, sin, c)\n\t{\n\t\tc = (c != null) ? c : new mxPoint();\n\t\tvar x = pt.x - c.x;\n\t\tvar y = pt.y - c.y;\n\n\t\tvar x1 = x * cos - y * sin;\n\t\tvar y1 = y * cos + x * sin;\n\n\t\treturn new mxPoint(x1 + c.x, y1 + c.y);\n\t},\n\t\n\t/**\n\t * Returns an integer mask of the port constraints of the given map\n\t * @param dict the style map to determine the port constraints for\n\t * @param defaultValue Default value to return if the key is undefined.\n\t * @return the mask of port constraint directions\n\t * \n\t * Parameters:\n\t * \n\t * terminal - <mxCelState> that represents the terminal.\n\t * edge - <mxCellState> that represents the edge.\n\t * source - Boolean that specifies if the terminal is the source terminal.\n\t * defaultValue - Default value to be returned.\n\t */\n\tgetPortConstraints: function(terminal, edge, source, defaultValue)\n\t{\n\t\tvar value = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT,\n\t\t\tmxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_SOURCE_PORT_CONSTRAINT :\n\t\t\t\tmxConstants.STYLE_TARGET_PORT_CONSTRAINT, null));\n\t\t\n\t\tif (value == null)\n\t\t{\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar directions = value.toString();\n\t\t\tvar returnValue = mxConstants.DIRECTION_MASK_NONE;\n\t\t\tvar constraintRotationEnabled = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT_ROTATION, 0);\n\t\t\tvar rotation = 0;\n\t\t\t\n\t\t\tif (constraintRotationEnabled == 1)\n\t\t\t{\n\t\t\t\trotation = mxUtils.getValue(terminal.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tvar quad = 0;\n\n\t\t\tif (rotation > 45)\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t\t\n\t\t\t\tif (rotation >= 135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (rotation < -45)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\tif (rotation <= -135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_NORTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_WEST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_SOUTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_EAST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: reversePortConstraints\n\t * \n\t * Reverse the port constraint bitmask. For example, north | east\n\t * becomes south | west\n\t */\n\treversePortConstraints: function(constraint)\n\t{\n\t\tvar result = 0;\n\t\t\n\t\tresult = (constraint & mxConstants.DIRECTION_MASK_WEST) << 3;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_NORTH) << 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_SOUTH) >> 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_EAST) >> 3;\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNearestSegment\n\t * \n\t * Finds the index of the nearest segment on the given cell state for\n\t * the specified coordinate pair.\n\t */\n\tfindNearestSegment: function(state, x, y)\n\t{\n\t\tvar index = -1;\n\t\t\n\t\tif (state.absolutePoints.length > 0)\n\t\t{\n\t\t\tvar last = state.absolutePoints[0];\n\t\t\tvar min = null;\n\t\t\t\n\t\t\tfor (var i = 1; i < state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tvar current = state.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(last.x, last.y,\n\t\t\t\t\tcurrent.x, current.y, x, y);\n\t\t\t\t\n\t\t\t\tif (min == null || dist < min)\n\t\t\t\t{\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t}\n\n\t\t\t\tlast = current;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn index;\n\t},\n\n\t/**\n\t * Function: getDirectedBounds\n\t * \n\t * Adds the given margins to the given rectangle and rotates and flips the\n\t * rectangle according to the respective styles in style.\n\t */\n\tgetDirectedBounds: function (rect, m, style, flipH, flipV)\n\t{\n\t\tvar d = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\tflipH = (flipH != null) ? flipH : mxUtils.getValue(style, mxConstants.STYLE_FLIPH, false);\n\t\tflipV = (flipV != null) ? flipV : mxUtils.getValue(style, mxConstants.STYLE_FLIPV, false);\n\n\t\tm.x = Math.round(Math.max(0, Math.min(rect.width, m.x)));\n\t\tm.y = Math.round(Math.max(0, Math.min(rect.height, m.y)));\n\t\tm.width = Math.round(Math.max(0, Math.min(rect.width, m.width)));\n\t\tm.height = Math.round(Math.max(0, Math.min(rect.height, m.height)));\n\t\t\n\t\tif ((flipV && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipH && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.width;\n\t\t\tm.width = tmp;\n\t\t}\n\t\t\t\n\t\tif ((flipH && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipV && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.y;\n\t\t\tm.y = m.height;\n\t\t\tm.height = tmp;\n\t\t}\n\t\t\n\t\tvar m2 = mxRectangle.fromRectangle(m);\n\t\t\n\t\tif (d == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tm2.y = m.x;\n\t\t\tm2.x = m.height;\n\t\t\tm2.width = m.y;\n\t\t\tm2.height = m.width;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tm2.y = m.height;\n\t\t\tm2.x = m.width;\n\t\t\tm2.width = m.x;\n\t\t\tm2.height = m.y;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tm2.y = m.width;\n\t\t\tm2.x = m.y;\n\t\t\tm2.width = m.height;\n\t\t\tm2.height = m.x;\n\t\t}\n\t\t\n\t\treturn new mxRectangle(rect.x + m2.x, rect.y + m2.y, rect.width - m2.width - m2.x, rect.height - m2.height - m2.y);\n\t},\n\n\t/**\n\t * Function: getPerimeterPoint\n\t * \n\t * Returns the intersection between the polygon defined by the array of\n\t * points and the line between center and point.\n\t */\n\tgetPerimeterPoint: function (pts, center, point)\n\t{\n\t\tvar min = null;\n\t\t\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tvar pt = mxUtils.intersection(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y,\n\t\t\t\tcenter.x, center.y, point.x, point.y);\n\t\t\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar dx = point.x - pt.x;\n\t\t\t\tvar dy = point.y - pt.y;\n\t\t\t\tvar ip = {p: pt, distSq: dy * dy + dx * dx};\n\t\t\t\t\n\t\t\t\tif (ip != null && (min == null || min.distSq > ip.distSq))\n\t\t\t\t{\n\t\t\t\t\tmin = ip;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (min != null) ? min.p : null;\n\t},\n\n\t/**\n\t * Function: rectangleIntersectsSegment\n\t * \n\t * Returns true if the given rectangle intersects the given segment.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the rectangle.\n\t * p1 - <mxPoint> that represents the first point of the segment.\n\t * p2 - <mxPoint> that represents the second point of the segment.\n\t */\n\trectangleIntersectsSegment: function(bounds, p1, p2)\n\t{\n\t\tvar top = bounds.y;\n\t\tvar left = bounds.x;\n\t\tvar bottom = top + bounds.height;\n\t\tvar right = left + bounds.width;\n\t\t\t\n\t\t// Find min and max X for the segment\n\t\tvar minX = p1.x;\n\t\tvar maxX = p2.x;\n\t\t\n\t\tif (p1.x > p2.x)\n\t\t{\n\t\t  minX = p2.x;\n\t\t  maxX = p1.x;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's x-projections\n\t\tif (maxX > right)\n\t\t{\n\t\t  maxX = right;\n\t\t}\n\t\t\n\t\tif (minX < left)\n\t\t{\n\t\t  minX = left;\n\t\t}\n\t\t\n\t\tif (minX > maxX) // If their projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\t// Find corresponding min and max Y for min and max X we found before\n\t\tvar minY = p1.y;\n\t\tvar maxY = p2.y;\n\t\tvar dx = p2.x - p1.x;\n\t\t\n\t\tif (Math.abs(dx) > 0.0000001)\n\t\t{\n\t\t  var a = (p2.y - p1.y) / dx;\n\t\t  var b = p1.y - a * p1.x;\n\t\t  minY = a * minX + b;\n\t\t  maxY = a * maxX + b;\n\t\t}\n\t\t\n\t\tif (minY > maxY)\n\t\t{\n\t\t  var tmp = maxY;\n\t\t  maxY = minY;\n\t\t  minY = tmp;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's y-projections\n\t\tif (maxY > bottom)\n\t\t{\n\t\t  maxY = bottom;\n\t\t}\n\t\t\n\t\tif (minY < top)\n\t\t{\n\t\t  minY = top;\n\t\t}\n\t\t\n\t\tif (minY > maxY) // If Y-projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\t\n\t/**\n\t * Function: contains\n\t * \n\t * Returns true if the specified point (x, y) is contained in the given rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the area.\n\t * x - X-coordinate of the point.\n\t * y - Y-coordinate of the point.\n\t */\n\tcontains: function(bounds, x, y)\n\t{\n\t\treturn (bounds.x <= x && bounds.x + bounds.width >= x &&\n\t\t\t\tbounds.y <= y && bounds.y + bounds.height >= y);\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersects: function(a, b)\n\t{\n\t\tvar tw = a.width;\n\t\tvar th = a.height;\n\t\tvar rw = b.width;\n\t\tvar rh = b.height;\n\t\t\n\t\tif (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0)\n\t\t{\n\t\t    return false;\n\t\t}\n\t\t\n\t\tvar tx = a.x;\n\t\tvar ty = a.y;\n\t\tvar rx = b.x;\n\t\tvar ry = b.y;\n\t\t\n\t\trw += rx;\n\t\trh += ry;\n\t\ttw += tx;\n\t\tth += ty;\n\n\t\treturn ((rw < rx || rw > tx) &&\n\t\t\t(rh < ry || rh > ty) &&\n\t\t\t(tw < tx || tw > rx) &&\n\t\t\t(th < ty || th > ry));\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersectsHotspot: function(state, x, y, hotspot, min, max)\n\t{\n\t\thotspot = (hotspot != null) ? hotspot : 1;\n\t\tmin = (min != null) ? min : 0;\n\t\tmax = (max != null) ? max : 0;\n\t\t\n\t\tif (hotspot > 0)\n\t\t{\n\t\t\tvar cx = state.getCenterX();\n\t\t\tvar cy = state.getCenterY();\n\t\t\tvar w = state.width;\n\t\t\tvar h = state.height;\n\t\t\t\n\t\t\tvar start = mxUtils.getValue(state.style, mxConstants.STYLE_STARTSIZE) * state.view.scale;\n\n\t\t\tif (start > 0)\n\t\t\t{\n\t\t\t\tif (mxUtils.getValue(state.style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tcy = state.y + start / 2;\n\t\t\t\t\th = start;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcx = state.x + start / 2;\n\t\t\t\t\tw = start;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw = Math.max(min, w * hotspot);\n\t\t\th = Math.max(min, h * hotspot);\n\t\t\t\n\t\t\tif (max > 0)\n\t\t\t{\n\t\t\t\tw = Math.min(w, max);\n\t\t\t\th = Math.min(h, max);\n\t\t\t}\n\t\t\t\n\t\t\tvar rect = new mxRectangle(cx - w / 2, cy - h / 2, w, h);\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\treturn mxUtils.contains(rect, x, y);\t\t\t\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getOffset\n\t * \n\t * Returns the offset for the specified container as an <mxPoint>. The\n\t * offset is the distance from the top left corner of the container to the\n\t * top left corner of the document.\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to return the offset for.\n\t * scollOffset - Optional boolean to add the scroll offset of the document.\n\t * Default is false.\n\t */\n\tgetOffset: function(container, scrollOffset)\n\t{\n\t\tvar offsetLeft = 0;\n\t\tvar offsetTop = 0;\n\t\t\n\t\t// Ignores document scroll origin for fixed elements\n\t\tvar fixed = false;\n\t\tvar node = container;\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\n\t\twhile (node != null && node != b && node != d && !fixed)\n\t\t{\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tif (!scrollOffset && !fixed)\n\t\t{\n\t\t\tvar offset = mxUtils.getDocumentScrollOrigin(container.ownerDocument);\n\t\t\toffsetLeft += offset.x;\n\t\t\toffsetTop += offset.y;\n\t\t}\n\t\t\n\t\tvar r = container.getBoundingClientRect();\n\t\t\n\t\tif (r != null)\n\t\t{\n\t\t\toffsetLeft += r.left;\n\t\t\toffsetTop += r.top;\n\t\t}\n\t\t\n\t\treturn new mxPoint(offsetLeft, offsetTop);\n\t},\n\n\t/**\n\t * Function: getDocumentScrollOrigin\n\t * \n\t * Returns the scroll origin of the given document or the current document\n\t * if no document is given.\n\t */\n\tgetDocumentScrollOrigin: function(doc)\n\t{\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\treturn new mxPoint(doc.body.scrollLeft, doc.body.scrollTop);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar wnd = doc.defaultView || doc.parentWindow;\n\t\t\t\n\t\t\tvar x = (wnd != null && window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;\n\t\t\tvar y = (wnd != null && window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getScrollOrigin\n\t * \n\t * Returns the top, left corner of the viewrect as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose scroll origin should be returned.\n\t * includeAncestors - Whether the scroll origin of the ancestors should be\n\t * included. Default is false.\n\t * includeDocument - Whether the scroll origin of the document should be\n\t * included. Default is true.\n\t */\n\tgetScrollOrigin: function(node, includeAncestors, includeDocument)\n\t{\n\t\tincludeAncestors = (includeAncestors != null) ? includeAncestors : false;\n\t\tincludeDocument = (includeDocument != null) ? includeDocument : true;\n\t\t\n\t\tvar doc = (node != null) ? node.ownerDocument : document;\n\t\tvar b = doc.body;\n\t\tvar d = doc.documentElement;\n\t\tvar result = new mxPoint();\n\t\tvar fixed = false;\n\n\t\twhile (node != null && node != b && node != d)\n\t\t{\n\t\t\tif (!isNaN(node.scrollLeft) && !isNaN(node.scrollTop))\n\t\t\t{\n\t\t\t\tresult.x += node.scrollLeft;\n\t\t\t\tresult.y += node.scrollTop;\n\t\t\t}\n\t\t\t\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\n\t\t\tnode = (includeAncestors) ? node.parentNode : null;\n\t\t}\n\n\t\tif (!fixed && includeDocument)\n\t\t{\n\t\t\tvar origin = mxUtils.getDocumentScrollOrigin(doc);\n\n\t\t\tresult.x += origin.x;\n\t\t\tresult.y += origin.y;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: convertPoint\n\t * \n\t * Converts the specified point (x, y) using the offset of the specified\n\t * container and returns a new <mxPoint> with the result.\n\t * \n\t * (code)\n\t * var pt = mxUtils.convertPoint(graph.container,\n\t *   mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to use for the offset.\n\t * x - X-coordinate of the point to be converted.\n\t * y - Y-coordinate of the point to be converted.\n\t */\n\tconvertPoint: function(container, x, y)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(container, false);\n\t\tvar offset = mxUtils.getOffset(container);\n\n\t\toffset.x -= origin.x;\n\t\toffset.y -= origin.y;\n\t\t\n\t\treturn new mxPoint(x - offset.x, y - offset.y);\n\t},\n\t\n\t/**\n\t * Function: ltrim\n\t * \n\t * Strips all whitespaces from the beginning of the string. Without the\n\t * second parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\tltrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"^[\" + chars + \"]+\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: rtrim\n\t * \n\t * Strips all whitespaces from the end of the string. Without the second\n\t * parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\trtrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"[\" + chars + \"]+$\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: trim\n\t * \n\t * Strips all whitespaces from both end of the string.\n\t * Without the second parameter, Javascript function will trim these\n\t * characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\ttrim: function(str, chars)\n\t{\n\t\treturn mxUtils.ltrim(mxUtils.rtrim(str, chars), chars);\n\t},\n\t\n\t/**\n\t * Function: isNumeric\n\t * \n\t * Returns true if the specified value is numeric, that is, if it is not\n\t * null, not an empty string, not a HEX number and isNaN returns false.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisNumeric: function(n)\n\t{\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n) && (typeof(n) != 'string' || n.toLowerCase().indexOf('0x') < 0);\n\t},\n\n\t/**\n\t * Function: isInteger\n\t * \n\t * Returns true if the given value is an valid integer number.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisInteger: function(n)\n\t{\n\t\treturn String(parseInt(n)) === String(n);\n\t},\n\n\t/**\n\t * Function: mod\n\t * \n\t * Returns the remainder of division of n by m. You should use this instead\n\t * of the built-in operation as the built-in operation does not properly\n\t * handle negative numbers.\n\t */\n\tmod: function(n, m)\n\t{\n\t\treturn ((n % m) + m) % m;\n\t},\n\n\t/**\n\t * Function: intersection\n\t * \n\t * Returns the intersection of two lines as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * x0 - X-coordinate of the first line's startpoint.\n\t * y0 - X-coordinate of the first line's startpoint.\n\t * x1 - X-coordinate of the first line's endpoint.\n\t * y1 - Y-coordinate of the first line's endpoint.\n\t * x2 - X-coordinate of the second line's startpoint.\n\t * y2 - Y-coordinate of the second line's startpoint.\n\t * x3 - X-coordinate of the second line's endpoint.\n\t * y3 - Y-coordinate of the second line's endpoint.\n\t */\n\tintersection: function (x0, y0, x1, y1, x2, y2, x3, y3)\n\t{\n\t\tvar denom = ((y3 - y2) * (x1 - x0)) - ((x3 - x2) * (y1 - y0));\n\t\tvar nume_a = ((x3 - x2) * (y0 - y2)) - ((y3 - y2) * (x0 - x2));\n\t\tvar nume_b = ((x1 - x0) * (y0 - y2)) - ((y1 - y0) * (x0 - x2));\n\n\t\tvar ua = nume_a / denom;\n\t\tvar ub = nume_b / denom;\n\t\t\n\t\tif(ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0)\n\t\t{\n\t\t\t// Get the intersection point\n\t\t\tvar x = x0 + ua * (x1 - x0);\n\t\t\tvar y = y0 + ua * (y1 - y0);\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t\t\n\t\t// No intersection\n\t\treturn null;\n\t},\n\t\n\t/**\n\t * Function: ptSegDistSq\n\t * \n\t * Returns the square distance between a segment and a point. To get the\n\t * distance between a point and a line (with infinite length) use\n\t * <mxUtils.ptLineDist>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\tptSegDistSq: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\n\t\tpx -= x1;\n\t\tpy -= y1;\n\n\t\tvar dotprod = px * x2 + py * y2;\n\t\tvar projlenSq;\n\n\t\tif (dotprod <= 0.0)\n\t\t{\n\t\t    projlenSq = 0.0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    px = x2 - px;\n\t\t    py = y2 - py;\n\t\t    dotprod = px * x2 + py * y2;\n\n\t\t    if (dotprod <= 0.0)\n\t\t    {\n\t\t\t\tprojlenSq = 0.0;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\t\tprojlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);\n\t\t    }\n\t\t}\n\n\t\tvar lenSq = px * px + py * py - projlenSq;\n\t\t\n\t\tif (lenSq < 0)\n\t\t{\n\t\t    lenSq = 0;\n\t\t}\n\t\t\n\t\treturn lenSq;\n    },\n\t\n\t/**\n\t * Function: ptLineDist\n\t * \n\t * Returns the distance between a line defined by two points and a point.\n\t * To get the distance between a point and a segment (with a specific\n\t * length) use <mxUtils.ptSeqDistSq>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of point 1 of the line.\n\t * y1 - Y-coordinate of point 1 of the line.\n\t * x2 - X-coordinate of point 1 of the line.\n\t * y2 - Y-coordinate of point 1 of the line.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n    ptLineDist: function(x1, y1, x2, y2, px, py)\n    {\n\t\treturn Math.abs((y2 - y1) * px - (x2 - x1) * py + x2 * y1 - y2 * x1) /\n\t\t\tMath.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n    },\n    \t\n\t/**\n\t * Function: relativeCcw\n\t * \n\t * Returns 1 if the given point on the right side of the segment, 0 if its\n\t * on the segment, and -1 if the point is on the left side of the segment.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\trelativeCcw: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\t\tpx -= x1;\n\t\tpy -= y1;\n\t\tvar ccw = px * y2 - py * x2;\n\t\t\n\t\tif (ccw == 0.0)\n\t\t{\n\t\t    ccw = px * x2 + py * y2;\n\t\t    \n\t\t    if (ccw > 0.0)\n\t\t    {\n\t\t\t\tpx -= x2;\n\t\t\t\tpy -= y2;\n\t\t\t\tccw = px * x2 + py * y2;\n\t\t\t\t\n\t\t\t\tif (ccw < 0.0)\n\t\t\t\t{\n\t\t\t\t    ccw = 0.0;\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t\treturn (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);\n    },\n    \n\t/**\n\t * Function: animateChanges\n\t * \n\t * See <mxEffects.animateChanges>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tanimateChanges: function(graph, changes)\n\t{\n\t\t// LATER: Deprecated, remove this function\n    \tmxEffects.animateChanges.apply(this, arguments);\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * See <mxEffects.cascadeOpacity>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\tmxEffects.cascadeOpacity.apply(this, arguments);\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * See <mxEffects.fadeOut>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tmxEffects.fadeOut.apply(this, arguments);\n\t},\n\t\n\t/**\n\t * Function: setOpacity\n\t * \n\t * Sets the opacity of the specified DOM node to the given value in %.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the opacity for.\n\t * value - Opacity in %. Possible values are between 0 and 100.\n\t */\n\tsetOpacity: function(node, value)\n\t{\n\t\tif (mxUtils.isVml(node))\n\t\t{\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\t// TODO: Why is the division by 5 needed in VML?\n\t\t\t    node.style.filter = 'alpha(opacity=' + (value/5) + ')';\n\t    \t}\n\t\t}\n\t\telse if (mxClient.IS_IE && (typeof(document.documentMode) === 'undefined' || document.documentMode < 9))\n\t    {\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t\t\t    node.style.filter = 'alpha(opacity=' + value + ')';\n\t    \t}\n\t\t}\n\t\telse\n\t\t{\n\t\t    node.style.opacity = (value / 100);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createImage\n\t * \n\t * Creates and returns an image (IMG node) or VML image (v:image) in IE6 in\n\t * quirks mode.\n\t * \n\t * Parameters:\n\t * \n\t * src - URL that points to the image to be displayed.\n\t */\n\tcreateImage: function(src)\n\t{\n        var imageNode = null;\n        \n\t\tif (mxClient.IS_IE6 && document.compatMode != 'CSS1Compat')\n\t\t{\n        \timageNode = document.createElement(mxClient.VML_PREFIX + ':image');\n        \timageNode.setAttribute('src', src);\n        \timageNode.style.borderStyle = 'none';\n        }\n\t\telse\n\t\t{\n\t\t\timageNode = document.createElement('img');\n\t\t\timageNode.setAttribute('src', src);\n\t\t\timageNode.setAttribute('border', '0');\n\t\t}\n\t\t\n\t\treturn imageNode;\n\t},\n\n\t/**\n\t * Function: sortCells\n\t * \n\t * Sorts the given cells according to the order in the cell hierarchy.\n\t * Ascending is optional and defaults to true.\n\t */\n\tsortCells: function(cells, ascending)\n\t{\n\t\tascending = (ascending != null) ? ascending : true;\n\t\tvar lookup = new mxDictionary();\n\t\tcells.sort(function(o1, o2)\n\t\t{\n\t\t\tvar p1 = lookup.get(o1);\n\t\t\t\n\t\t\tif (p1 == null)\n\t\t\t{\n\t\t\t\tp1 = mxCellPath.create(o1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o1, p1);\n\t\t\t}\n\t\t\t\n\t\t\tvar p2 = lookup.get(o2);\n\t\t\t\n\t\t\tif (p2 == null)\n\t\t\t{\n\t\t\t\tp2 = mxCellPath.create(o2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o2, p2);\n\t\t\t}\n\t\t\t\n\t\t\tvar comp = mxCellPath.compare(p1, p2);\n\t\t\t\n\t\t\treturn (comp == 0) ? 0 : (((comp > 0) == ascending) ? 1 : -1);\n\t\t});\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: getStylename\n\t * \n\t * Returns the stylename in a style of the form [(stylename|key=value);] or\n\t * an empty string if the given style does not contain a stylename.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylename: function(style)\n\t{\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\tvar stylename = pairs[0];\n\t\t\t\n\t\t\tif (stylename.indexOf('=') < 0)\n\t\t\t{\n\t\t\t\treturn stylename;\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn '';\n\t},\n\n\t/**\n\t * Function: getStylenames\n\t * \n\t * Returns the stylenames in a style of the form [(stylename|key=value);]\n\t * or an empty array if the given style does not contain any stylenames.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < pairs.length; i++)\n\t\t\t{\n\t\t\t\tif (pairs[i].indexOf('=') < 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(pairs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: indexOfStylename\n\t * \n\t * Returns the index of the given stylename in the given style. This\n\t * returns -1 if the given stylename does not occur (as a stylename) in the\n\t * given style, otherwise it returns the index of the first character.\n\t */\n\tindexOfStylename: function(style, stylename)\n\t{\n\t\tif (style != null && stylename != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\tvar pos = 0;\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] == stylename)\n\t\t\t\t{\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpos += tokens[i].length + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\t\n\t/**\n\t * Function: addStylename\n\t * \n\t * Adds the specified stylename to the given style if it does not already\n\t * contain the stylename.\n\t */\n\taddStylename: function(style, stylename)\n\t{\n\t\tif (mxUtils.indexOfStylename(style, stylename) < 0)\n\t\t{\n\t\t\tif (style == null)\n\t\t\t{\n\t\t\t\tstyle = '';\n\t\t\t}\n\t\t\telse if (style.length > 0 && style.charAt(style.length - 1) != ';')\n\t\t\t{\n\t\t\t\tstyle += ';';\n\t\t\t}\n\t\t\t\n\t\t\tstyle += stylename;\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: removeStylename\n\t * \n\t * Removes all occurrences of the specified stylename in the given style\n\t * and returns the updated style. Trailing semicolons are not preserved.\n\t */\n\tremoveStylename: function(style, stylename)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] != stylename)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\t\n\t/**\n\t * Function: removeAllStylenames\n\t * \n\t * Removes all stylenames from the given style and returns the updated\n\t * style.\n\t */\n\tremoveAllStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\t// Keeps the key, value assignments\n\t\t\t\tif (tokens[i].indexOf('=') >= 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\n\t/**\n\t * Function: setCellStyles\n\t * \n\t * Assigns the value for the given key in the styles of the given cells, or\n\t * removes the key from the styles if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> to execute the transaction in.\n\t * cells - Array of <mxCells> to be updated.\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetCellStyles: function(model, cells, key, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyle(model.getStyle(cells[i]), key, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyle\n\t * \n\t * Adds or removes the given key, value pair to the style and returns the\n\t * new style. If value is null or zero length then the key is removed from\n\t * the style. This is for cell styles, not for CSS styles.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetStyle: function(style, key, value)\n\t{\n\t\tvar isValue = value != null && (typeof(value.length) == 'undefined' || value.length > 0);\n\t\t\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (isValue)\n\t\t\t{\n\t\t\t\tstyle = key + '=' + value + ';';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (style.substring(0, key.length + 1) == key + '=')\n\t\t\t{\n\t\t\t\tvar next = style.indexOf(';');\n\t\t\t\t\n\t\t\t\tif (isValue)\n\t\t\t\t{\n\t\t\t\t\tstyle = key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = (next < 0 || next == style.length - 1) ? '' : style.substring(next + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar index = style.indexOf(';' + key + '=');\n\t\t\t\t\n\t\t\t\tif (index < 0)\n\t\t\t\t{\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sep = (style.charAt(style.length - 1) == ';') ? '' : ';';\n\t\t\t\t\t\tstyle = style + sep + key + '=' + value + ';';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar next = style.indexOf(';', index + 1);\n\t\t\t\t\t\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index + 1) + key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index) + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\n\t/**\n\t * Function: setCellStyleFlags\n\t * \n\t * Sets or toggles the flag bit for the given key in the cell's styles.\n\t * If value is null then the flag is toggled.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var cells = graph.getSelectionCells();\n\t * mxUtils.setCellStyleFlags(graph.model,\n\t * \t\t\tcells,\n\t * \t\t\tmxConstants.STYLE_FONTSTYLE,\n\t * \t\t\tmxConstants.FONT_BOLD);\n\t * (end)\n\t * \n\t * Toggles the bold font style.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> that contains the cells.\n\t * cells - Array of <mxCells> to change the style for.\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the flag.\n\t */\n\tsetCellStyleFlags: function(model, cells, key, flag, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyleFlag(\n\t\t\t\t\t\t\tmodel.getStyle(cells[i]),\n\t\t\t\t\t\t\tkey, flag, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyleFlag\n\t * \n\t * Sets or removes the given key from the specified style and returns the\n\t * new style. If value is null then the flag is toggled.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the given flag.\n\t */\n\tsetStyleFlag: function(style, key, flag, value)\n\t{\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (value || value == null)\n\t\t\t{\n\t\t\t\tstyle = key+'='+flag;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle = key+'=0';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar index = style.indexOf(key+'=');\n\t\t\t\n\t\t\tif (index < 0)\n\t\t\t{\n\t\t\t\tvar sep = (style.charAt(style.length-1) == ';') ? '' : ';';\n\n\t\t\t\tif (value || value == null)\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=' + flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=0';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar cont = style.indexOf(';', index);\n\t\t\t\tvar tmp = '';\n\t\t\t\t\n\t\t\t\tif (cont < 0)\n\t\t\t\t{\n\t\t\t\t\ttmp  = style.substring(index+key.length+1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = style.substring(index+key.length+1, cont);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value == null)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) ^ flag;\n\t\t\t\t}\n\t\t\t\telse if (value)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) | flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) & ~flag;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstyle = style.substring(0, index) + key + '=' + tmp +\n\t\t\t\t\t((cont >= 0) ? style.substring(cont) : '');\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: getAlignmentAsPoint\n\t * \n\t * Returns an <mxPoint> that represents the horizontal and vertical alignment\n\t * for numeric computations. X is -0.5 for center, -1 for right and 0 for\n\t * left alignment. Y is -0.5 for middle, -1 for bottom and 0 for top\n\t * alignment. Default values for missing arguments is top, left.\n\t */\n\tgetAlignmentAsPoint: function(align, valign)\n\t{\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\t// Horizontal alignment\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tdx = -0.5;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx = -1;\n\t\t}\n\n\t\t// Vertical alignment\n\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tdy = -0.5;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy = -1;\n\t\t}\n\t\t\n\t\treturn new mxPoint(dx, dy);\n\t},\n\t\n\t/**\n\t * Function: getSizeForString\n\t * \n\t * Returns an <mxRectangle> with the size (width and height in pixels) of\n\t * the given string. The string may contain HTML markup. Newlines should be\n\t * converted to <br> before calling this method. The caller is responsible\n\t * for sanitizing the HTML markup.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var label = graph.getLabel(cell).replace(/\\n/g, \"<br>\");\n\t * var size = graph.getSizeForString(label);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * text - String whose size should be returned.\n\t * fontSize - Integer that specifies the font size in pixels. Default is\n\t * <mxConstants.DEFAULT_FONTSIZE>.\n\t * fontFamily - String that specifies the name of the font family. Default\n\t * is <mxConstants.DEFAULT_FONTFAMILY>.\n\t * textWidth - Optional width for text wrapping.\n\t */\n\tgetSizeForString: function(text, fontSize, fontFamily, textWidth)\n\t{\n\t\tfontSize = (fontSize != null) ? fontSize : mxConstants.DEFAULT_FONTSIZE;\n\t\tfontFamily = (fontFamily != null) ? fontFamily : mxConstants.DEFAULT_FONTFAMILY;\n\t\tvar div = document.createElement('div');\n\t\t\n\t\t// Sets the font size and family\n\t\tdiv.style.fontFamily = fontFamily;\n\t\tdiv.style.fontSize = Math.round(fontSize) + 'px';\n\t\tdiv.style.lineHeight = Math.round(fontSize * mxConstants.LINE_HEIGHT) + 'px';\n\t\t\n\t\t// Disables block layout and outside wrapping and hides the div\n\t\tdiv.style.position = 'absolute';\n\t\tdiv.style.visibility = 'hidden';\n\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tdiv.style.zoom = '1';\n\t\t\n\t\tif (textWidth != null)\n\t\t{\n\t\t\tdiv.style.width = textWidth + 'px';\n\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\t// Adds the text and inserts into DOM for updating of size\n\t\tdiv.innerHTML = text;\n\t\tdocument.body.appendChild(div);\n\t\t\n\t\t// Gets the size and removes from DOM\n\t\tvar size = new mxRectangle(0, 0, div.offsetWidth, div.offsetHeight);\n\t\tdocument.body.removeChild(div);\n\t\t\n\t\treturn size;\n\t},\n\t\n\t/**\n\t * Function: getViewXml\n\t */\n\tgetViewXml: function(graph, scale, cells, x0, y0)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\tscale = (scale != null) ? scale : 1;\n\n\t\tif (cells == null)\n\t\t{\n\t\t\tvar model = graph.getModel();\n\t\t\tcells = [model.getRoot()];\n\t\t}\n\t\t\n\t\tvar view = graph.getView();\n\t\tvar result = null;\n\n\t\t// Disables events on the view\n\t\tvar eventsEnabled = view.isEventsEnabled();\n\t\tview.setEventsEnabled(false);\n\n\t\t// Workaround for label bounds not taken into account for image export.\n\t\t// Creates a temporary draw pane which is used for rendering the text.\n\t\t// Text rendering is required for finding the bounds of the labels.\n\t\tvar drawPane = view.drawPane;\n\t\tvar overlayPane = view.overlayPane;\n\n\t\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tview.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.drawPane);\n\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tview.drawPane = view.drawPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.drawPane);\n\t\t\t\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = view.overlayPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\n\t\t// Resets the translation\n\t\tvar translate = view.getTranslate();\n\t\tview.translate = new mxPoint(x0, y0);\n\n\t\t// Creates the temporary cell states in the view\n\t\tvar temp = new mxTemporaryCellStates(graph.getView(), scale, cells);\n\n\t\ttry\n\t\t{\n\t\t\tvar enc = new mxCodec();\n\t\t\tresult = enc.encode(graph.getView());\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttemp.destroy();\n\t\t\tview.translate = translate;\n\t\t\tview.canvas.removeChild(view.drawPane);\n\t\t\tview.canvas.removeChild(view.overlayPane);\n\t\t\tview.drawPane = drawPane;\n\t\t\tview.overlayPane = overlayPane;\n\t\t\tview.setEventsEnabled(eventsEnabled);\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getScaleForPageCount\n\t * \n\t * Returns the scale to be used for printing the graph with the given\n\t * bounds across the specifies number of pages with the given format. The\n\t * scale is always computed such that it given the given amount or fewer\n\t * pages in the print output. See <mxPrintPreview> for an example.\n\t * \n\t * Parameters:\n\t * \n\t * pageCount - Specifies the number of pages in the print output.\n\t * graph - <mxGraph> that should be printed.\n\t * pageFormat - Optional <mxRectangle> that specifies the page format.\n\t * Default is <mxConstants.PAGE_FORMAT_A4_PORTRAIT>.\n\t * border - The border along each side of every page.\n\t */\n\tgetScaleForPageCount: function(pageCount, graph, pageFormat, border)\n\t{\n\t\tif (pageCount < 1)\n\t\t{\n\t\t\t// We can't work with less than 1 page, return no scale\n\t\t\t// change\n\t\t\treturn 1;\n\t\t}\n\t\t\n\t\tpageFormat = (pageFormat != null) ? pageFormat : mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\t\tborder = (border != null) ? border : 0;\n\t\t\n\t\tvar availablePageWidth = pageFormat.width - (border * 2);\n\t\tvar availablePageHeight = pageFormat.height - (border * 2);\n\n\t\t// Work out the number of pages required if the\n\t\t// graph is not scaled.\n\t\tvar graphBounds = graph.getGraphBounds().clone();\n\t\tvar sc = graph.getView().getScale();\n\t\tgraphBounds.width /= sc;\n\t\tgraphBounds.height /= sc;\n\t\tvar graphWidth = graphBounds.width;\n\t\tvar graphHeight = graphBounds.height;\n\n\t\tvar scale = 1;\n\t\t\n\t\t// The ratio of the width/height for each printer page\n\t\tvar pageFormatAspectRatio = availablePageWidth / availablePageHeight;\n\t\t// The ratio of the width/height for the graph to be printer\n\t\tvar graphAspectRatio = graphWidth / graphHeight;\n\t\t\n\t\t// The ratio of horizontal pages / vertical pages for this \n\t\t// graph to maintain its aspect ratio on this page format\n\t\tvar pagesAspectRatio = graphAspectRatio / pageFormatAspectRatio;\n\t\t\n\t\t// Factor the square root of the page count up and down \n\t\t// by the pages aspect ratio to obtain a horizontal and \n\t\t// vertical page count that adds up to the page count\n\t\t// and has the correct aspect ratio\n\t\tvar pageRoot = Math.sqrt(pageCount);\n\t\tvar pagesAspectRatioSqrt = Math.sqrt(pagesAspectRatio);\n\t\tvar numRowPages = pageRoot * pagesAspectRatioSqrt;\n\t\tvar numColumnPages = pageRoot / pagesAspectRatioSqrt;\n\n\t\t// These value are rarely more than 2 rounding downs away from\n\t\t// a total that meets the page count. In cases of one being less \n\t\t// than 1 page, the other value can be too high and take more iterations \n\t\t// In this case, just change that value to be the page count, since \n\t\t// we know the other value is 1\n\t\tif (numRowPages < 1 && numColumnPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numColumnPages / pageCount;\n\t\t\tnumColumnPages = pageCount;\n\t\t\tnumRowPages /= scaleChange;\n\t\t}\n\t\t\n\t\tif (numColumnPages < 1 && numRowPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numRowPages / pageCount;\n\t\t\tnumRowPages = pageCount;\n\t\t\tnumColumnPages /= scaleChange;\n\t\t}\t\t\n\n\t\tvar currentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\n\t\tvar numLoops = 0;\n\t\t\n\t\t// Iterate through while the rounded up number of pages comes to\n\t\t// a total greater than the required number\n\t\twhile (currentTotalPages > pageCount)\n\t\t{\n\t\t\t// Round down the page count (rows or columns) that is\n\t\t\t// closest to its next integer down in percentage terms.\n\t\t\t// i.e. Reduce the page total by reducing the total\n\t\t\t// page area by the least possible amount\n\n\t\t\tvar roundRowDownProportion = Math.floor(numRowPages) / numRowPages;\n\t\t\tvar roundColumnDownProportion = Math.floor(numColumnPages) / numColumnPages;\n\t\t\t\n\t\t\t// If the round down proportion is, work out the proportion to\n\t\t\t// round down to 1 page less\n\t\t\tif (roundRowDownProportion == 1)\n\t\t\t{\n\t\t\t\troundRowDownProportion = Math.floor(numRowPages-1) / numRowPages;\n\t\t\t}\n\t\t\tif (roundColumnDownProportion == 1)\n\t\t\t{\n\t\t\t\troundColumnDownProportion = Math.floor(numColumnPages-1) / numColumnPages;\n\t\t\t}\n\t\t\t\n\t\t\t// Check which rounding down is smaller, but in the case of very small roundings\n\t\t\t// try the other dimension instead\n\t\t\tvar scaleChange = 1;\n\t\t\t\n\t\t\t// Use the higher of the two values\n\t\t\tif (roundRowDownProportion > roundColumnDownProportion)\n\t\t\t{\n\t\t\t\tscaleChange = roundRowDownProportion;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tscaleChange = roundColumnDownProportion;\n\t\t\t}\n\n\t\t\tnumRowPages = numRowPages * scaleChange;\n\t\t\tnumColumnPages = numColumnPages * scaleChange;\n\t\t\tcurrentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\t\t\t\n\t\t\tnumLoops++;\n\t\t\t\n\t\t\tif (numLoops > 10)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Work out the scale from the number of row pages required\n\t\t// The column pages will give the same value\n\t\tvar posterWidth = availablePageWidth * numRowPages;\n\t\tscale = posterWidth / graphWidth;\n\t\t\n\t\t// Allow for rounding errors\n\t\treturn scale * 0.99999;\n\t},\n\t\n\t/**\n\t * Function: show\n\t * \n\t * Copies the styles and the markup from the graph's container into the\n\t * given document and removes all cursor styles. The document is returned.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * If you experience problems with missing stylesheets in IE then try adding\n\t * the domain to the trusted sites.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be copied.\n\t * doc - Document where the new graph is created.\n\t * x0 - X-coordinate of the graph view origin. Default is 0.\n\t * y0 - Y-coordinate of the graph view origin. Default is 0.\n\t * w - Optional width of the graph view.\n\t * h - Optional height of the graph view.\n\t */\n\tshow: function(graph, doc, x0, y0, w, h)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\t\n\t\tif (doc == null)\n\t\t{\n\t\t\tvar wnd = window.open();\n\t\t\tdoc = wnd.document;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.open();\n\t\t}\n\n\t\t// Workaround for missing print output in IE9 standards\n\t\tif (document.documentMode == 9)\n\t\t{\n\t\t\tdoc.writeln('<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"><![endif]-->');\n\t\t}\n\t\t\n\t\tvar bounds = graph.getGraphBounds();\n\t\tvar dx = Math.ceil(x0 - bounds.x);\n\t\tvar dy = Math.ceil(y0 - bounds.y);\n\t\t\n\t\tif (w == null)\n\t\t{\n\t\t\tw = Math.ceil(bounds.width + x0) + Math.ceil(Math.ceil(bounds.x) - bounds.x);\n\t\t}\n\t\t\n\t\tif (h == null)\n\t\t{\n\t\t\th = Math.ceil(bounds.height + y0) + Math.ceil(Math.ceil(bounds.y) - bounds.y);\n\t\t}\n\t\t\n\t\t// Needs a special way of creating the page so that no click is required\n\t\t// to refresh the contents after the external CSS styles have been loaded.\n\t\t// To avoid a click or programmatic refresh, the styleSheets[].cssText\n\t\t// property is copied over from the original document.\n\t\tif (mxClient.IS_IE || document.documentMode == 11)\n\t\t{\n\t\t\tvar html = '<html><head>';\n\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\thtml += base[i].outerHTML;\n\t\t\t}\n\n\t\t\thtml += '<style>';\n\n\t\t\t// Copies the stylesheets without having to load them again\n\t\t\tfor (var i = 0; i < document.styleSheets.length; i++)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\thtml += document.styleSheets[i].cssText;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore security exception\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thtml += '</style></head><body style=\"margin:0px;\">';\n\t\t\t\n\t\t\t// Copies the contents of the graph container\n\t\t\thtml += '<div style=\"position:absolute;overflow:hidden;width:' + w + 'px;height:' + h + 'px;\"><div style=\"position:relative;left:' + dx + 'px;top:' + dy + 'px;\">';\n\t\t\thtml += graph.container.innerHTML;\n\t\t\thtml += '</div></div></body><html>';\n\n\t\t\tdoc.writeln(html);\n\t\t\tdoc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.writeln('<html><head>');\n\t\t\t\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(base[i]));\n\t\t\t}\n\t\t\t\n\t\t\tvar links = document.getElementsByTagName('link');\n\t\t\t\n\t\t\tfor (var i = 0; i < links.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(links[i]));\n\t\t\t}\n\t\n\t\t\tvar styles = document.getElementsByTagName('style');\n\t\t\t\n\t\t\tfor (var i = 0; i < styles.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(styles[i]));\n\t\t\t}\n\n\t\t\tdoc.writeln('</head><body style=\"margin:0px;\"></body></html>');\n\t\t\tdoc.close();\n\n\t\t\tvar outer = doc.createElement('div');\n\t\t\touter.position = 'absolute';\n\t\t\touter.overflow = 'hidden';\n\t\t\touter.style.width = w + 'px';\n\t\t\touter.style.height = h + 'px';\n\n\t\t\t// Required for HTML labels if foreignObjects are disabled\n\t\t\tvar div = doc.createElement('div');\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.left = dx + 'px';\n\t\t\tdiv.style.top = dy + 'px';\n\n\t\t\tvar node = graph.container.firstChild;\n\t\t\tvar svg = null;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tvar clone = node.cloneNode(true);\n\t\t\t\t\n\t\t\t\tif (node == graph.view.drawPane.ownerSVGElement)\n\t\t\t\t{\n\t\t\t\t\touter.appendChild(clone);\n\t\t\t\t\tsvg = clone;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdiv.appendChild(clone);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\n\t\t\tdoc.body.appendChild(outer);\n\t\t\t\n\t\t\tif (div.firstChild != null)\n\t\t\t{\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif (svg != null)\n\t\t\t{\n\t\t\t\tsvg.style.minWidth = '';\n\t\t\t\tsvg.style.minHeight = '';\n\t\t\t\tsvg.firstChild.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t}\n\t\t}\n\t\t\n\t\tmxUtils.removeCursors(doc.body);\n\t\n\t\treturn doc;\n\t},\n\t\n\t/**\n\t * Function: printScreen\n\t * \n\t * Prints the specified graph using a new window and the built-in print\n\t * dialog.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be printed.\n\t */\n\tprintScreen: function(graph)\n\t{\n\t\tvar wnd = window.open();\n\t\tvar bounds = graph.getGraphBounds();\n\t\tmxUtils.show(graph, wnd.document);\n\t\t\n\t\tvar print = function()\n\t\t{\n\t\t\twnd.focus();\n\t\t\twnd.print();\n\t\t\twnd.close();\n\t\t};\n\t\t\n\t\t// Workaround for Google Chrome which needs a bit of a\n\t\t// delay in order to render the SVG contents\n\t\tif (mxClient.IS_GC)\n\t\t{\n\t\t\twnd.setTimeout(print, 500);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: popup\n\t * \n\t * Shows the specified text content in a new <mxWindow> or a new browser\n\t * window if isInternalWindow is false.\n\t * \n\t * Parameters:\n\t * \n\t * content - String that specifies the text to be displayed.\n\t * isInternalWindow - Optional boolean indicating if an mxWindow should be\n\t * used instead of a new browser window. Default is false.\n\t */\n\tpopup: function(content, isInternalWindow)\n\t{\n\t   \tif (isInternalWindow)\n\t   \t{\n\t\t\tvar div = document.createElement('div');\n\t\t\t\n\t\t\tdiv.style.overflow = 'scroll';\n\t\t\tdiv.style.width = '636px';\n\t\t\tdiv.style.height = '460px';\n\t\t\t\n\t\t\tvar pre = document.createElement('pre');\n\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t\n\t\t\tdiv.appendChild(pre);\n\t\t\t\n\t\t\tvar w = document.body.clientWidth;\n\t\t\tvar h = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight)\n\t\t\tvar wnd = new mxWindow('Popup Window', div,\n\t\t\t\tw/2-320, h/2-240, 640, 480, false, true);\n\n\t\t\twnd.setClosable(true);\n\t\t\twnd.setVisible(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Wraps up the XML content in a textarea\n\t\t\tif (mxClient.IS_NS)\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t\twnd.document.writeln('<pre>'+mxUtils.htmlEntities(content)+'</pre');\n\t\t\t   \twnd.document.close();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t    var pre = wnd.document.createElement('pre');\n\t\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t   \twnd.document.body.appendChild(pre);\n\t\t\t}\n\t   \t}\n\t},\n\t\n\t/**\n\t * Function: alert\n\t * \n\t * Displayss the given alert in a new dialog. This implementation uses the\n\t * built-in alert function. This is used to display validation errors when\n\t * connections cannot be changed or created.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\talert: function(message)\n\t{\n\t\talert(message);\n\t},\n\t\n\t/**\n\t * Function: prompt\n\t * \n\t * Displays the given message in a prompt dialog. This implementation uses\n\t * the built-in prompt function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * defaultValue - Optional string specifying the default value.\n\t */\n\tprompt: function(message, defaultValue)\n\t{\n\t\treturn prompt(message, (defaultValue != null) ? defaultValue : '');\n\t},\n\t\n\t/**\n\t * Function: confirm\n\t * \n\t * Displays the given message in a confirm dialog. This implementation uses\n\t * the built-in confirm function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\tconfirm: function(message)\n\t{\n\t\treturn confirm(message);\n\t},\n\n\t/**\n\t * Function: error\n\t * \n\t * Displays the given error message in a new <mxWindow> of the given width.\n\t * If close is true then an additional close button is added to the window.\n\t * The optional icon specifies the icon to be used for the window. Default\n\t * is <mxUtils.errorImage>.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * width - Integer specifying the width of the window.\n\t * close - Optional boolean indicating whether to add a close button.\n\t * icon - Optional icon for the window decoration.\n\t */\n\terror: function(message, width, close, icon)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '20px';\n\n\t\tvar img = document.createElement('img');\n\t\timg.setAttribute('src', icon || mxUtils.errorImage);\n\t\timg.setAttribute('valign', 'bottom');\n\t\timg.style.verticalAlign = 'middle';\n\t\tdiv.appendChild(img);\n\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tmxUtils.write(div, message);\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\tvar warn = new mxWindow(mxResources.get(mxUtils.errorResource) ||\n\t\t\tmxUtils.errorResource, div, (w-width)/2, h/4, width, null,\n\t\t\tfalse, true);\n\n\t\tif (close)\n\t\t{\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\tvar tmp = document.createElement('p');\n\t\t\tvar button = document.createElement('button');\n\n\t\t\tif (mxClient.IS_IE)\n\t\t\t{\n\t\t\t\tbutton.style.cssText = 'float:right';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbutton.setAttribute('style', 'float:right');\n\t\t\t}\n\n\t\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t\t{\n\t\t\t\twarn.destroy();\n\t\t\t});\n\n\t\t\tmxUtils.write(button, mxResources.get(mxUtils.closeResource) ||\n\t\t\t\tmxUtils.closeResource);\n\t\t\t\n\t\t\ttmp.appendChild(button);\n\t\t\tdiv.appendChild(tmp);\n\t\t\t\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\twarn.setClosable(true);\n\t\t}\n\t\t\n\t\twarn.setVisible(true);\n\t\t\n\t\treturn warn;\n\t},\n\n\t/**\n\t * Function: makeDraggable\n\t * \n\t * Configures the given DOM element to act as a drag source for the\n\t * specified graph. Returns a a new <mxDragSource>. If\n\t * <mxDragSource.guideEnabled> is enabled then the x and y arguments must\n\t * be used in funct to match the preview location.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var funct = function(graph, evt, cell, x, y)\n\t * {\n\t *   if (graph.canImportCell(cell))\n\t *   {\n\t *     var parent = graph.getDefaultParent();\n\t *     var vertex = null;\n\t *     \n\t *     graph.getModel().beginUpdate();\n\t *     try\n\t *     {\n\t * \t     vertex = graph.insertVertex(parent, null, 'Hello', x, y, 80, 30);\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.getModel().endUpdate();\n\t *     }\n\t *\n\t *     graph.setSelectionCell(vertex);\n\t *   }\n\t * }\n\t * \n\t * var img = document.createElement('img');\n\t * img.setAttribute('src', 'editors/images/rectangle.gif');\n\t * img.style.position = 'absolute';\n\t * img.style.left = '0px';\n\t * img.style.top = '0px';\n\t * img.style.width = '16px';\n\t * img.style.height = '16px';\n\t * \n\t * var dragImage = img.cloneNode(true);\n\t * dragImage.style.width = '32px';\n\t * dragImage.style.height = '32px';\n\t * mxUtils.makeDraggable(img, graph, funct, dragImage);\n\t * document.body.appendChild(img);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM element to make draggable.\n\t * graphF - <mxGraph> that acts as the drop target or a function that takes a\n\t * mouse event and returns the current <mxGraph>.\n\t * funct - Function to execute on a successful drop.\n\t * dragElement - Optional DOM node to be used for the drag preview.\n\t * dx - Optional horizontal offset between the cursor and the drag\n\t * preview.\n\t * dy - Optional vertical offset between the cursor and the drag\n\t * preview.\n\t * autoscroll - Optional boolean that specifies if autoscroll should be\n\t * used. Default is mxGraph.autoscroll.\n\t * scalePreview - Optional boolean that specifies if the preview element\n\t * should be scaled according to the graph scale. If this is true, then\n\t * the offsets will also be scaled. Default is false.\n\t * highlightDropTargets - Optional boolean that specifies if dropTargets\n\t * should be highlighted. Default is true.\n\t * getDropTarget - Optional function to return the drop target for a given\n\t * location (x, y). Default is mxGraph.getCellAt.\n\t */\n\tmakeDraggable: function(element, graphF, funct, dragElement, dx, dy, autoscroll,\n\t\t\tscalePreview, highlightDropTargets, getDropTarget)\n\t{\n\t\tvar dragSource = new mxDragSource(element, funct);\n\t\tdragSource.dragOffset = new mxPoint((dx != null) ? dx : 0,\n\t\t\t(dy != null) ? dy : mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\t\tdragSource.autoscroll = autoscroll;\n\t\t\n\t\t// Cannot enable this by default. This needs to be enabled in the caller\n\t\t// if the funct argument uses the new x- and y-arguments.\n\t\tdragSource.setGuidesEnabled(false);\n\t\t\n\t\tif (highlightDropTargets != null)\n\t\t{\n\t\t\tdragSource.highlightDropTargets = highlightDropTargets;\n\t\t}\n\t\t\n\t\t// Overrides function to find drop target cell\n\t\tif (getDropTarget != null)\n\t\t{\n\t\t\tdragSource.getDropTarget = getDropTarget;\n\t\t}\n\t\t\n\t\t// Overrides function to get current graph\n\t\tdragSource.getGraphForEvent = function(evt)\n\t\t{\n\t\t\treturn (typeof(graphF) == 'function') ? graphF(evt) : graphF;\n\t\t};\n\t\t\n\t\t// Translates switches into dragSource customizations\n\t\tif (dragElement != null)\n\t\t{\n\t\t\tdragSource.createDragElement = function()\n\t\t\t{\n\t\t\t\treturn dragElement.cloneNode(true);\n\t\t\t};\n\t\t\t\n\t\t\tif (scalePreview)\n\t\t\t{\n\t\t\t\tdragSource.createPreviewElement = function(graph)\n\t\t\t\t{\n\t\t\t\t\tvar elt = dragElement.cloneNode(true);\n\n\t\t\t\t\tvar w = parseInt(elt.style.width);\n\t\t\t\t\tvar h = parseInt(elt.style.height);\n\t\t\t\t\telt.style.width = Math.round(w * graph.view.scale) + 'px';\n\t\t\t\t\telt.style.height = Math.round(h * graph.view.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\treturn elt;\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dragSource;\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n var mxConstants =\n {\n\t/**\n\t * Class: mxConstants\n\t * \n\t * Defines various global constants.\n\t * \n\t * Variable: DEFAULT_HOTSPOT\n\t * \n\t * Defines the portion of the cell which is to be used as a connectable\n\t * region. Default is 0.3. Possible values are 0 < x <= 1. \n\t */\n\tDEFAULT_HOTSPOT: 0.3,\n\n\t/**\n\t * Variable: MIN_HOTSPOT_SIZE\n\t * \n\t * Defines the minimum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Default is 8.\n\t */\n\tMIN_HOTSPOT_SIZE: 8,\n\n\t/**\n\t * Variable: MAX_HOTSPOT_SIZE\n\t * \n\t * Defines the maximum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Use 0 for no maximum. Default is 0.\n\t */\n\tMAX_HOTSPOT_SIZE: 0,\n\n\t/**\n\t * Variable: RENDERING_HINT_EXACT\n\t * \n\t * Defines the exact rendering hint.\n\t */\n\tRENDERING_HINT_EXACT: 'exact',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTER\n\t * \n\t * Defines the faster rendering hint.\n\t */\n\tRENDERING_HINT_FASTER: 'faster',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTEST\n\t * \n\t * Defines the fastest rendering hint.\n\t */\n\tRENDERING_HINT_FASTEST: 'fastest',\n\n\t/**\n\t * Variable: DIALECT_SVG\n\t * \n\t * Defines the SVG display dialect name.\n\t */\n\tDIALECT_SVG: 'svg',\n\n\t/**\n\t * Variable: DIALECT_VML\n\t * \n\t * Defines the VML display dialect name.\n\t */\n\tDIALECT_VML: 'vml',\n\n\t/**\n\t * Variable: DIALECT_MIXEDHTML\n\t * \n\t * Defines the mixed HTML display dialect name.\n\t */\n\tDIALECT_MIXEDHTML: 'mixedHtml',\n\n\t/**\n\t * Variable: DIALECT_PREFERHTML\n\t * \n\t * Defines the preferred HTML display dialect name.\n\t */\n\tDIALECT_PREFERHTML: 'preferHtml',\n\n\t/**\n\t * Variable: DIALECT_STRICTHTML\n\t * \n\t * Defines the strict HTML display dialect.\n\t */\n\tDIALECT_STRICTHTML: 'strictHtml',\n\n\t/**\n\t * Variable: NS_SVG\n\t * \n\t * Defines the SVG namespace.\n\t */\n\tNS_SVG: 'http://www.w3.org/2000/svg',\n\n\t/**\n\t * Variable: NS_XHTML\n\t * \n\t * Defines the XHTML namespace.\n\t */\n\tNS_XHTML: 'http://www.w3.org/1999/xhtml',\n\n\t/**\n\t * Variable: NS_XLINK\n\t * \n\t * Defines the XLink namespace.\n\t */\n\tNS_XLINK: 'http://www.w3.org/1999/xlink',\n\n\t/**\n\t * Variable: SHADOWCOLOR\n\t * \n\t * Defines the color to be used to draw shadows in shapes and windows.\n\t * Default is gray.\n\t */\n\tSHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: VML_SHADOWCOLOR\n\t * \n\t * Used for shadow color in filters where transparency is not supported\n\t * (Microsoft Internet Explorer). Default is gray.\n\t */\n\tVML_SHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: SHADOW_OFFSET_X\n\t * \n\t * Specifies the x-offset of the shadow. Default is 2.\n\t */\n\tSHADOW_OFFSET_X: 2,\n\n\t/**\n\t * Variable: SHADOW_OFFSET_Y\n\t * \n\t * Specifies the y-offset of the shadow. Default is 3.\n\t */\n\tSHADOW_OFFSET_Y: 3,\n\t\n\t/**\n\t * Variable: SHADOW_OPACITY\n\t * \n\t * Defines the opacity for shadows. Default is 1.\n\t */\n\tSHADOW_OPACITY: 1,\n \n\t/**\n\t * Variable: NODETYPE_ELEMENT\n\t * \n\t * DOM node of type ELEMENT.\n\t */\n\tNODETYPE_ELEMENT: 1,\n\n\t/**\n\t * Variable: NODETYPE_ATTRIBUTE\n\t * \n\t * DOM node of type ATTRIBUTE.\n\t */\n\tNODETYPE_ATTRIBUTE: 2,\n\n\t/**\n\t * Variable: NODETYPE_TEXT\n\t * \n\t * DOM node of type TEXT.\n\t */\n\tNODETYPE_TEXT: 3,\n\n\t/**\n\t * Variable: NODETYPE_CDATA\n\t * \n\t * DOM node of type CDATA.\n\t */\n\tNODETYPE_CDATA: 4,\n\t\n\t/**\n\t * Variable: NODETYPE_ENTITY_REFERENCE\n\t * \n\t * DOM node of type ENTITY_REFERENCE.\n\t */\n\tNODETYPE_ENTITY_REFERENCE: 5,\n\n\t/**\n\t * Variable: NODETYPE_ENTITY\n\t * \n\t * DOM node of type ENTITY.\n\t */\n\tNODETYPE_ENTITY: 6,\n\n\t/**\n\t * Variable: NODETYPE_PROCESSING_INSTRUCTION\n\t * \n\t * DOM node of type PROCESSING_INSTRUCTION.\n\t */\n\tNODETYPE_PROCESSING_INSTRUCTION: 7,\n\n\t/**\n\t * Variable: NODETYPE_COMMENT\n\t * \n\t * DOM node of type COMMENT.\n\t */\n\tNODETYPE_COMMENT: 8,\n\t\t\n\t/**\n\t * Variable: NODETYPE_DOCUMENT\n\t * \n\t * DOM node of type DOCUMENT.\n\t */\n\tNODETYPE_DOCUMENT: 9,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENTTYPE\n\t * \n\t * DOM node of type DOCUMENTTYPE.\n\t */\n\tNODETYPE_DOCUMENTTYPE: 10,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENT_FRAGMENT\n\t * \n\t * DOM node of type DOCUMENT_FRAGMENT.\n\t */\n\tNODETYPE_DOCUMENT_FRAGMENT: 11,\n\n\t/**\n\t * Variable: NODETYPE_NOTATION\n\t * \n\t * DOM node of type NOTATION.\n\t */\n\tNODETYPE_NOTATION: 12,\n\t\n\t/**\n\t * Variable: TOOLTIP_VERTICAL_OFFSET\n\t * \n\t * Defines the vertical offset for the tooltip.\n\t * Default is 16.\n\t */\n\tTOOLTIP_VERTICAL_OFFSET: 16,\n\n\t/**\n\t * Variable: DEFAULT_VALID_COLOR\n\t * \n\t * Specifies the default valid color. Default is #0000FF.\n\t */\n\tDEFAULT_VALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: DEFAULT_INVALID_COLOR\n\t * \n\t * Specifies the default invalid color. Default is #FF0000.\n\t */\n\tDEFAULT_INVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Specifies the default highlight color for shape outlines.\n\t * Default is #0000FF. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Defines the strokewidth to be used for shape outlines.\n\t * Default is 5. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_STROKEWIDTH: 5,\n\n\t/**\n\t * Variable: HIGHLIGHT_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the highlights.\n\t * Default is 3.\n\t */\n\tHIGHLIGHT_STROKEWIDTH: 3,\n\n\t/**\n\t * Variable: CONSTRAINT_HIGHLIGHT_SIZE\n\t * \n\t * Size of the constraint highlight (in px). Default is 2.\n\t */\n\tHIGHLIGHT_SIZE: 2,\n\t\n\t/**\n\t * Variable: HIGHLIGHT_OPACITY\n\t * \n\t * Opacity (in %) used for the highlights (including outline).\n\t * Default is 100.\n\t */\n\tHIGHLIGHT_OPACITY: 100,\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_VERTEX\n\t * \n\t * Defines the cursor for a movable vertex. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_VERTEX: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_EDGE\n\t * \n\t * Defines the cursor for a movable edge. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_EDGE: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_LABEL_HANDLE\n\t * \n\t * Defines the cursor for a movable label. Default is 'default'.\n\t */\n\tCURSOR_LABEL_HANDLE: 'default',\n\t\n\t/**\n\t * Variable: CURSOR_TERMINAL_HANDLE\n\t * \n\t * Defines the cursor for a terminal handle. Default is 'pointer'.\n\t */\n\tCURSOR_TERMINAL_HANDLE: 'pointer',\n\t\n\t/**\n\t * Variable: CURSOR_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_BEND_HANDLE: 'crosshair',\n\n\t/**\n\t * Variable: CURSOR_VIRTUAL_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_VIRTUAL_BEND_HANDLE: 'crosshair',\n\t\n\t/**\n\t * Variable: CURSOR_CONNECT\n\t * \n\t * Defines the cursor for a connectable state. Default is 'pointer'.\n\t */\n\tCURSOR_CONNECT: 'pointer',\n\n\t/**\n\t * Variable: HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for the cell highlighting.\n\t * Use 'none' for no color. Default is #00FF00.\n\t */\n\tHIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: TARGET_HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for highlighting a target cell for a new\n\t * or changed connection. Note that this may be either a source or\n\t * target terminal in the graph. Use 'none' for no color.\n\t * Default is #0000FF.\n\t */\n\tCONNECT_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: INVALID_CONNECT_TARGET_COLOR\n\t * \n\t * Defines the color to be used for highlighting a invalid target cells\n\t * for a new or changed connections. Note that this may be either a source\n\t * or target terminal in the graph. Use 'none' for no color. Default is\n\t * #FF0000.\n\t */\n\tINVALID_CONNECT_TARGET_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: DROP_TARGET_COLOR\n\t * \n\t * Defines the color to be used for the highlighting target parent cells\n\t * (for drag and drop). Use 'none' for no color. Default is #0000FF.\n\t */\n\tDROP_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: VALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring valid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tVALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: INVALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring invalid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tINVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: EDGE_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of edges. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tEDGE_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of vertices. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tVERTEX_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for vertex selections.\n\t * Default is 1.\n\t */\n\tVERTEX_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: EDGE_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for edge selections.\n\t * Default is 1.\n\t */\n\tEDGE_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the vertex selection\n\t * border. Default is true.\n\t */\n\tVERTEX_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the edge selection\n\t * border. Default is true.\n\t */\n\tEDGE_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: GUIDE_COLOR\n\t * \n\t * Defines the color to be used for the guidelines in mxGraphHandler.\n\t * Default is #FF0000.\n\t */\n\tGUIDE_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: GUIDE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the guidelines in mxGraphHandler.\n\t * Default is 1.\n\t */\n\tGUIDE_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: OUTLINE_COLOR\n\t * \n\t * Defines the color to be used for the outline rectangle\n\t * border.  Use 'none' for no color. Default is #0099FF.\n\t */\n\tOUTLINE_COLOR: '#0099FF',\n\n\t/**\n\t * Variable: OUTLINE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the outline rectangle\n\t * stroke width. Default is 3.\n\t */\n\tOUTLINE_STROKEWIDTH: (mxClient.IS_IE) ? 2 : 3,\n\n\t/**\n\t * Variable: HANDLE_SIZE\n\t * \n\t * Defines the default size for handles. Default is 6.\n\t */\n\tHANDLE_SIZE: 6,\n\n\t/**\n\t * Variable: LABEL_HANDLE_SIZE\n\t * \n\t * Defines the default size for label handles. Default is 4.\n\t */\n\tLABEL_HANDLE_SIZE: 4,\n\n\t/**\n\t * Variable: HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the handle fill color. Use 'none' for\n\t * no color. Default is #00FF00 (green).\n\t */\n\tHANDLE_FILLCOLOR: '#00FF00',\n\n\t/**\n\t * Variable: HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the handle stroke color. Use 'none' for\n\t * no color. Default is black.\n\t */\n\tHANDLE_STROKECOLOR: 'black',\n\n\t/**\n\t * Variable: LABEL_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the label handle fill color. Use 'none'\n\t * for no color. Default is yellow.\n\t */\n\tLABEL_HANDLE_FILLCOLOR: 'yellow',\n\n\t/**\n\t * Variable: CONNECT_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the connect handle fill color. Use\n\t * 'none' for no color. Default is #0000FF (blue).\n\t */\n\tCONNECT_HANDLE_FILLCOLOR: '#0000FF',\n\n\t/**\n\t * Variable: LOCKED_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the locked handle fill color. Use\n\t * 'none' for no color. Default is #FF0000 (red).\n\t */\n\tLOCKED_HANDLE_FILLCOLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the outline sizer fill color. Use\n\t * 'none' for no color. Default is #00FFFF.\n\t */\n\tOUTLINE_HANDLE_FILLCOLOR: '#00FFFF',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the outline sizer stroke color. Use\n\t * 'none' for no color. Default is #0033FF.\n\t */\n\tOUTLINE_HANDLE_STROKECOLOR: '#0033FF',\n\n\t/**\n\t * Variable: DEFAULT_FONTFAMILY\n\t * \n\t * Defines the default family for all fonts. Default is Arial,Helvetica.\n\t */\n\tDEFAULT_FONTFAMILY: 'Arial,Helvetica',\n\n\t/**\n\t * Variable: DEFAULT_FONTSIZE\n\t * \n\t * Defines the default size (in px). Default is 11.\n\t */\n\tDEFAULT_FONTSIZE: 11,\n\n\t/**\n\t * Variable: DEFAULT_TEXT_DIRECTION\n\t * \n\t * Defines the default value for the <STYLE_TEXT_DIRECTION> if no value is\n\t * defined for it in the style. Default value is an empty string which means\n\t * the default system setting is used and no direction is set.\n\t */\n\tDEFAULT_TEXT_DIRECTION: '',\n\n\t/**\n\t * Variable: LINE_HEIGHT\n\t * \n\t * Defines the default line height for text labels. Default is 1.2.\n\t */\n\tLINE_HEIGHT: 1.2,\n\n\t/**\n\t * Variable: WORD_WRAP\n\t * \n\t * Defines the CSS value for the word-wrap property. Default is \"normal\".\n\t * Change this to \"break-word\" to allow long words to be able to be broken\n\t * and wrap onto the next line.\n\t */\n\tWORD_WRAP: 'normal',\n\n\t/**\n\t * Variable: ABSOLUTE_LINE_HEIGHT\n\t * \n\t * Specifies if absolute line heights should be used (px) in CSS. Default\n\t * is false. Set this to true for backwards compatibility.\n\t */\n\tABSOLUTE_LINE_HEIGHT: false,\n\n\t/**\n\t * Variable: DEFAULT_FONTSTYLE\n\t * \n\t * Defines the default style for all fonts. Default is 0. This can be set\n\t * to any combination of font styles as follows.\n\t * \n\t * (code)\n\t * mxConstants.DEFAULT_FONTSTYLE = mxConstants.FONT_BOLD | mxConstants.FONT_ITALIC;\n\t * (end)\n\t */\n\tDEFAULT_FONTSTYLE: 0,\n\n\t/**\n\t * Variable: DEFAULT_STARTSIZE\n\t * \n\t * Defines the default start size for swimlanes. Default is 40.\n\t */\n\tDEFAULT_STARTSIZE: 40,\n\n\t/**\n\t * Variable: DEFAULT_MARKERSIZE\n\t * \n\t * Defines the default size for all markers. Default is 6.\n\t */\n\tDEFAULT_MARKERSIZE: 6,\n\n\t/**\n\t * Variable: DEFAULT_IMAGESIZE\n\t * \n\t * Defines the default width and height for images used in the\n\t * label shape. Default is 24.\n\t */\n\tDEFAULT_IMAGESIZE: 24,\n\n\t/**\n\t * Variable: ENTITY_SEGMENT\n\t * \n\t * Defines the length of the horizontal segment of an Entity Relation.\n\t * This can be overridden using <mxConstants.STYLE_SEGMENT> style.\n\t * Default is 30.\n\t */\n\tENTITY_SEGMENT: 30,\n\n\t/**\n\t * Variable: RECTANGLE_ROUNDING_FACTOR\n\t * \n\t * Defines the rounding factor for rounded rectangles in percent between\n\t * 0 and 1. Values should be smaller than 0.5. Default is 0.15.\n\t */\n\tRECTANGLE_ROUNDING_FACTOR: 0.15,\n\n\t/**\n\t * Variable: LINE_ARCSIZE\n\t * \n\t * Defines the size of the arcs for rounded edges. Default is 20.\n\t */\n\tLINE_ARCSIZE: 20,\n\n\t/**\n\t * Variable: ARROW_SPACING\n\t * \n\t * Defines the spacing between the arrow shape and its terminals. Default is 0.\n\t */\n\tARROW_SPACING: 0,\n\n\t/**\n\t * Variable: ARROW_WIDTH\n\t * \n\t * Defines the width of the arrow shape. Default is 30.\n\t */\n\tARROW_WIDTH: 30,\n\n\t/**\n\t * Variable: ARROW_SIZE\n\t * \n\t * Defines the size of the arrowhead in the arrow shape. Default is 30.\n\t */\n\tARROW_SIZE: 30,\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_PORTRAIT: new mxRectangle(0, 0, 827, 1169),\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_LANDSCAPE: new mxRectangle(0, 0, 1169, 827),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The\n\t * dimensions of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_PORTRAIT: new mxRectangle(0, 0, 850, 1100),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The dimensions\n\t * of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_LANDSCAPE: new mxRectangle(0, 0, 1100, 850),\n\n\t/**\n\t * Variable: NONE\n\t * \n\t * Defines the value for none. Default is \"none\".\n\t */\n\tNONE: 'none',\n\n\t/**\n\t * Variable: STYLE_PERIMETER\n\t * \n\t * Defines the key for the perimeter style. This is a function that defines\n\t * the perimeter around a particular shape. Possible values are the\n\t * functions defined in <mxPerimeter>. Alternatively, the constants in this\n\t * class that start with \"PERIMETER_\" may be used to access\n\t * perimeter styles in <mxStyleRegistry>. Value is \"perimeter\".\n\t */\n\tSTYLE_PERIMETER: 'perimeter',\n\t\n\t/**\n\t * Variable: STYLE_SOURCE_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the source for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"sourcePort\".\n\t */\n\tSTYLE_SOURCE_PORT: 'sourcePort',\n\t\n\t/**\n\t * Variable: STYLE_TARGET_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the target for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"targetPort\".\n\t */\n\tSTYLE_TARGET_PORT: 'targetPort',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to cells in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, \n\t * DIRECTION_EAST\" and \"DIRECTION_WEST\". Value is\n\t * \"portConstraint\".\n\t */\n\tSTYLE_PORT_CONSTRAINT: 'portConstraint',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT_ROTATION\n\t * \n\t * Define whether port constraint directions are rotated with vertex\n\t * rotation. 0 (default) causes port constraints to remain absolute, \n\t * relative to the graph, 1 causes the constraints to rotate with\n\t * the vertex. Value is \"portConstraintRotation\".\n\t */\n\tSTYLE_PORT_CONSTRAINT_ROTATION: 'portConstraintRotation',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to sources in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"sourcePortConstraint\".\n\t */\n\tSTYLE_SOURCE_PORT_CONSTRAINT: 'sourcePortConstraint',\n\n\t/**\n\t * Variable: STYLE_TARGET_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to targets in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"targetPortConstraint\".\n\t */\n\tSTYLE_TARGET_PORT_CONSTRAINT: 'targetPortConstraint',\n\n\t/**\n\t * Variable: STYLE_OPACITY\n\t * \n\t * Defines the key for the opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"opacity\".\n\t */\n\tSTYLE_OPACITY: 'opacity',\n\n\t/**\n\t * Variable: STYLE_FILL_OPACITY\n\t * \n\t * Defines the key for the fill opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"fillOpacity\".\n\t */\n\tSTYLE_FILL_OPACITY: 'fillOpacity',\n\n\t/**\n\t * Variable: STYLE_STROKE_OPACITY\n\t * \n\t * Defines the key for the stroke opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"strokeOpacity\".\n\t */\n\tSTYLE_STROKE_OPACITY: 'strokeOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_OPACITY\n\t * \n\t * Defines the key for the text opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"textOpacity\".\n\t */\n\tSTYLE_TEXT_OPACITY: 'textOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_DIRECTION\n\t * \n\t * Defines the key for the text direction style. Possible values are\n\t * \"TEXT_DIRECTION_DEFAULT, TEXT_DIRECTION_AUTO, TEXT_DIRECTION_LTR\"\n\t * and \"TEXT_DIRECTION_RTL\". Value is \"textDirection\".\n\t * The default value for the style is defined in <DEFAULT_TEXT_DIRECTION>.\n\t * It is used is no value is defined for this key in a given style. This is\n\t * an experimental style that is currently ignored in the backends.\n\t */\n\tSTYLE_TEXT_DIRECTION: 'textDirection',\n\n\t/**\n\t * Variable: STYLE_OVERFLOW\n\t * \n\t * Defines the key for the overflow style. Possible values are 'visible',\n\t * 'hidden', 'fill' and 'width'. The default value is 'visible'. This value\n\t * specifies how overlapping vertex labels are handled. A value of\n\t * 'visible' will show the complete label. A value of 'hidden' will clip\n\t * the label so that it does not overlap the vertex bounds. A value of\n\t * 'fill' will use the vertex bounds and a value of 'width' will use the\n\t * the vertex width for the label. See <mxGraph.isLabelClipped>. Note that\n\t * the vertical alignment is ignored for overflow fill and for horizontal\n\t * alignment, left should be used to avoid pixel offsets in Internet Explorer\n\t * 11 and earlier or if foreignObjects are disabled. Value is \"overflow\".\n\t */\n\tSTYLE_OVERFLOW: 'overflow',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL\n\t * \n\t * Defines if the connection points on either end of the edge should be\n\t * computed so that the edge is vertical or horizontal if possible and\n\t * if the point is not at a fixed location. Default is false. This is\n\t * used in <mxGraph.isOrthogonal>, which also returns true if the edgeStyle\n\t * of the edge is an elbow or entity. Value is \"orthogonal\".\n\t */\n\tSTYLE_ORTHOGONAL: 'orthogonal',\n\n\t/**\n\t * Variable: STYLE_EXIT_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitX\".\n\t */\n\tSTYLE_EXIT_X: 'exitX',\n\n\t/**\n\t * Variable: STYLE_EXIT_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitY\".\n\t */\n\tSTYLE_EXIT_Y: 'exitY',\n\n\t\n\t/**\n\t* Variable: STYLE_EXIT_DX\n\t* \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDx\".\n\t*/\n\tSTYLE_EXIT_DX: 'exitDx',\n\n\t/**\n\t* Variable: STYLE_EXIT_DY\n\t* \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its source terminal. Value is \"exitDy\".\n\t*/\n\tSTYLE_EXIT_DY: 'exitDy',\n\t\n\t/**\n\t * Variable: STYLE_EXIT_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the source. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"exitPerimeter\".\n\t */\n\tSTYLE_EXIT_PERIMETER: 'exitPerimeter',\n\n\t/**\n\t * Variable: STYLE_ENTRY_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryX\".\n\t */\n\tSTYLE_ENTRY_X: 'entryX',\n\n\t/**\n\t * Variable: STYLE_ENTRY_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryY\".\n\t */\n\tSTYLE_ENTRY_Y: 'entryY',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DX\n\t * \n\t* Defines the key for the horizontal offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDx\".\n\t*/\n\tSTYLE_ENTRY_DX: 'entryDx',\n\n\t/**\n\t * Variable: STYLE_ENTRY_DY\n\t * \n\t* Defines the key for the vertical offset of the connection point\n\t* of an edge with its target terminal. Value is \"entryDy\".\n\t*/\n\tSTYLE_ENTRY_DY: 'entryDy',\n\n\t/**\n\t * Variable: STYLE_ENTRY_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the target. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"entryPerimeter\".\n\t */\n\tSTYLE_ENTRY_PERIMETER: 'entryPerimeter',\n\n\t/**\n\t * Variable: STYLE_WHITE_SPACE\n\t * \n\t * Defines the key for the white-space style. Possible values are 'nowrap'\n\t * and 'wrap'. The default value is 'nowrap'. This value specifies how\n\t * white-space inside a HTML vertex label should be handled. A value of\n\t * 'nowrap' means the text will never wrap to the next line until a\n\t * linefeed is encountered. A value of 'wrap' means text will wrap when\n\t * necessary. This style is only used for HTML labels.\n\t * See <mxGraph.isWrapping>. Value is \"whiteSpace\".\n\t */\n\tSTYLE_WHITE_SPACE: 'whiteSpace',\n\n\t/**\n\t * Variable: STYLE_ROTATION\n\t * \n\t * Defines the key for the rotation style. The type of the value is \n\t * numeric and the possible range is 0-360. Value is \"rotation\".\n\t */\n\tSTYLE_ROTATION: 'rotation',\n\n\t/**\n\t * Variable: STYLE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. Value is \"fillColor\".\n\t */\n\tSTYLE_FILLCOLOR: 'fillColor',\n\n\t/**\n\t * Variable: STYLE_POINTER_EVENTS\n\t * \n\t * Specifies if pointer events should be fired on transparent backgrounds.\n\t * This style is currently only supported in <mxRectangleShape>. Default\n\t * is true. Value is \"pointerEvents\". This is typically set to\n\t * false in groups where the transparent part should allow any underlying\n\t * cells to be clickable.\n\t */\n\tSTYLE_POINTER_EVENTS: 'pointerEvents',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color of the swimlane background. Possible\n\t * values are all HTML color names or HEX codes. Default is no background.\n\t * Value is \"swimlaneFillColor\".\n\t */\n\tSTYLE_SWIMLANE_FILLCOLOR: 'swimlaneFillColor',\n\n\t/**\n\t * Variable: STYLE_MARGIN\n\t * \n\t * Defines the key for the margin between the ellipses in the double ellipse shape.\n\t * Possible values are all positive numbers. Value is \"margin\".\n\t */\n\tSTYLE_MARGIN: 'margin',\n\n\t/**\n\t * Variable: STYLE_GRADIENTCOLOR\n\t * \n\t * Defines the key for the gradient color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. This is ignored if no fill color is defined. Value is\n\t * \"gradientColor\".\n\t */\n\tSTYLE_GRADIENTCOLOR: 'gradientColor',\n\n\t/**\n\t * Variable: STYLE_GRADIENT_DIRECTION\n\t * \n\t * Defines the key for the gradient direction. Possible values are\n\t * <DIRECTION_EAST>, <DIRECTION_WEST>, <DIRECTION_NORTH> and\n\t * <DIRECTION_SOUTH>. Default is <DIRECTION_SOUTH>. Generally, and by\n\t * default in mxGraph, gradient painting is done from the value of\n\t * <STYLE_FILLCOLOR> to the value of <STYLE_GRADIENTCOLOR>. Taking the\n\t * example of <DIRECTION_NORTH>, this means <STYLE_FILLCOLOR> color at the \n\t * bottom of paint pattern and <STYLE_GRADIENTCOLOR> at top, with a\n\t * gradient in-between. Value is \"gradientDirection\".\n\t */\n\tSTYLE_GRADIENT_DIRECTION: 'gradientDirection',\n\n\t/**\n\t * Variable: STYLE_STROKECOLOR\n\t * \n\t * Defines the key for the strokeColor style. Possible values are all HTML\n\t * color names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit', 'indicated' to use the color code of a related cell or the\n\t * indicator shape or 'none' for no color. Value is \"strokeColor\".\n\t */\n\tSTYLE_STROKECOLOR: 'strokeColor',\n\n\t/**\n\t * Variable: STYLE_SEPARATORCOLOR\n\t * \n\t * Defines the key for the separatorColor style. Possible values are all\n\t * HTML color names or HEX codes. This style is only used for\n\t * <SHAPE_SWIMLANE> shapes. Value is \"separatorColor\".\n\t */\n\tSTYLE_SEPARATORCOLOR: 'separatorColor',\n\n\t/**\n\t * Variable: STYLE_STROKEWIDTH\n\t * \n\t * Defines the key for the strokeWidth style. The type of the value is \n\t * numeric and the possible range is any non-negative value larger or equal\n\t * to 1. The value defines the stroke width in pixels. Note: To hide a\n\t * stroke use strokeColor none. Value is \"strokeWidth\".\n\t */\n\tSTYLE_STROKEWIDTH: 'strokeWidth',\n\n\t/**\n\t * Variable: STYLE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. This value defines how the lines of\n\t * the label are horizontally aligned. <ALIGN_LEFT> mean label text lines\n\t * are aligned to left of the label bounds, <ALIGN_RIGHT> to the right of\n\t * the label bounds and <ALIGN_CENTER> means the center of the text lines\n\t * are aligned in the center of the label bounds. Note this value doesn't\n\t * affect the positioning of the overall label bounds relative to the\n\t * vertex, to move the label bounds horizontally, use\n\t * <STYLE_LABEL_POSITION>. Value is \"align\".\n\t */\n\tSTYLE_ALIGN: 'align',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. This value defines how\n\t * the lines of the label are vertically aligned. <ALIGN_TOP> means the\n\t * topmost label text line is aligned against the top of the label bounds,\n\t * <ALIGN_BOTTOM> means the bottom-most label text line is aligned against\n\t * the bottom of the label bounds and <ALIGN_MIDDLE> means there is equal\n\t * spacing between the topmost text label line and the top of the label\n\t * bounds and the bottom-most text label line and the bottom of the label\n\t * bounds. Note this value doesn't affect the positioning of the overall\n\t * label bounds relative to the vertex, to move the label bounds\n\t * vertically, use <STYLE_VERTICAL_LABEL_POSITION>. Value is \"verticalAlign\".\n\t */\n\tSTYLE_VERTICAL_ALIGN: 'verticalAlign',\n\n\t/**\n\t * Variable: STYLE_LABEL_WIDTH\n\t * \n\t * Defines the key for the width of the label if the label position is not\n\t * center. Value is \"labelWidth\".\n\t */\n\tSTYLE_LABEL_WIDTH: 'labelWidth',\n\n\t/**\n\t * Variable: STYLE_LABEL_POSITION\n\t * \n\t * Defines the key for the horizontal label position of vertices. Possible\n\t * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>. Default is\n\t * <ALIGN_CENTER>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_LEFT> means the entire label bounds is\n\t * placed completely just to the left of the vertex, <ALIGN_RIGHT> means\n\t * adjust to the right and <ALIGN_CENTER> means the label bounds are\n\t * vertically aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label horizontally within the label bounds, use <STYLE_ALIGN>.\n\t * Value is \"labelPosition\".\n\t */\n\tSTYLE_LABEL_POSITION: 'labelPosition',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_LABEL_POSITION\n\t * \n\t * Defines the key for the vertical label position of vertices. Possible\n\t * values are <ALIGN_TOP>, <ALIGN_BOTTOM> and <ALIGN_MIDDLE>. Default is\n\t * <ALIGN_MIDDLE>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_TOP> means the entire label bounds is\n\t * placed completely just on the top of the vertex, <ALIGN_BOTTOM> means\n\t * adjust on the bottom and <ALIGN_MIDDLE> means the label bounds are\n\t * horizontally aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label vertically within the label bounds, use\n\t * <STYLE_VERTICAL_ALIGN>. Value is \"verticalLabelPosition\".\n\t */\n\tSTYLE_VERTICAL_LABEL_POSITION: 'verticalLabelPosition',\n\t\n\t/**\n\t * Variable: STYLE_IMAGE_ASPECT\n\t * \n\t * Defines the key for the image aspect style. Possible values are 0 (do\n\t * not preserve aspect) or 1 (keep aspect). This is only used in\n\t * <mxImageShape>. Default is 1. Value is \"imageAspect\".\n\t */\n\tSTYLE_IMAGE_ASPECT: 'imageAspect',\n\n\t/**\n\t * Variable: STYLE_IMAGE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. The value defines how any image in the\n\t * vertex label is aligned horizontally within the label bounds of a\n\t * <SHAPE_LABEL> shape. Value is \"imageAlign\".\n\t */\n\tSTYLE_IMAGE_ALIGN: 'imageAlign',\n\n\t/**\n\t * Variable: STYLE_IMAGE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. The value defines how\n\t * any image in the vertex label is aligned vertically within the label\n\t * bounds of a <SHAPE_LABEL> shape. Value is \"imageVerticalAlign\".\n\t */\n\tSTYLE_IMAGE_VERTICAL_ALIGN: 'imageVerticalAlign',\n\n\t/**\n\t * Variable: STYLE_GLASS\n\t * \n\t * Defines the key for the glass style. Possible values are 0 (disabled) and\n\t * 1(enabled). The default value is 0. This is used in <mxLabel>. Value is\n\t * \"glass\".\n\t */\n\tSTYLE_GLASS: 'glass',\n\n\t/**\n\t * Variable: STYLE_IMAGE\n\t * \n\t * Defines the key for the image style. Possible values are any image URL,\n\t * the type of the value is String. This is the path to the image that is\n\t * to be displayed within the label of a vertex. Data URLs should use the\n\t * following format: data:image/png,xyz where xyz is the base64 encoded\n\t * data (without the \"base64\"-prefix). Note that Data URLs are only\n\t * supported in modern browsers. Value is \"image\".\n\t */\n\tSTYLE_IMAGE: 'image',\n\n\t/**\n\t * Variable: STYLE_IMAGE_WIDTH\n\t * \n\t * Defines the key for the imageWidth style. The type of this value is\n\t * int, the value is the image width in pixels and must be greater than 0.\n\t * Value is \"imageWidth\".\n\t */\n\tSTYLE_IMAGE_WIDTH: 'imageWidth',\n\n\t/**\n\t * Variable: STYLE_IMAGE_HEIGHT\n\t * \n\t * Defines the key for the imageHeight style. The type of this value is\n\t * int, the value is the image height in pixels and must be greater than 0.\n\t * Value is \"imageHeight\".\n\t */\n\tSTYLE_IMAGE_HEIGHT: 'imageHeight',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BACKGROUND\n\t * \n\t * Defines the key for the image background color. This style is only used\n\t * in <mxImageShape>. Possible values are all HTML color names or HEX\n\t * codes. Value is \"imageBackground\".\n\t */\n\tSTYLE_IMAGE_BACKGROUND: 'imageBackground',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BORDER\n\t * \n\t * Defines the key for the image border color. This style is only used in\n\t * <mxImageShape>. Possible values are all HTML color names or HEX codes.\n\t * Value is \"imageBorder\".\n\t */\n\tSTYLE_IMAGE_BORDER: 'imageBorder',\n\n\t/**\n\t * Variable: STYLE_FLIPH\n\t * \n\t * Defines the key for the horizontal image flip. This style is only used\n\t * in <mxImageShape>. Possible values are 0 and 1. Default is 0. Value is\n\t * \"flipH\".\n\t */\n\tSTYLE_FLIPH: 'flipH',\n\n\t/**\n\t * Variable: STYLE_FLIPV\n\t * \n\t * Defines the key for the vertical flip. Possible values are 0 and 1.\n\t * Default is 0. Value is \"flipV\".\n\t */\n\tSTYLE_FLIPV: 'flipV',\n\n\t/**\n\t * Variable: STYLE_NOLABEL\n\t * \n\t * Defines the key for the noLabel style. If this is true then no label is\n\t * visible for a given cell. Possible values are true or false (1 or 0).\n\t * Default is false. Value is \"noLabel\".\n\t */\n\tSTYLE_NOLABEL: 'noLabel',\n\n\t/**\n\t * Variable: STYLE_NOEDGESTYLE\n\t * \n\t * Defines the key for the noEdgeStyle style. If this is true then no edge\n\t * style is applied for a given edge. Possible values are true or false\n\t * (1 or 0). Default is false. Value is \"noEdgeStyle\".\n\t */\n\tSTYLE_NOEDGESTYLE: 'noEdgeStyle',\n\n\t/**\n\t * Variable: STYLE_LABEL_BACKGROUNDCOLOR\n\t * \n\t * Defines the key for the label background color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBackgroundColor\".\n\t */\n\tSTYLE_LABEL_BACKGROUNDCOLOR: 'labelBackgroundColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_BORDERCOLOR\n\t * \n\t * Defines the key for the label border color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBorderColor\".\n\t */\n\tSTYLE_LABEL_BORDERCOLOR: 'labelBorderColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_PADDING\n\t * \n\t * Defines the key for the label padding, ie. the space between the label\n\t * border and the label. Value is \"labelPadding\".\n\t */\n\tSTYLE_LABEL_PADDING: 'labelPadding',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SHAPE\n\t * \n\t * Defines the key for the indicator shape used within an <mxLabel>.\n\t * Possible values are all SHAPE_* constants or the names of any new\n\t * shapes. The indicatorShape has precedence over the indicatorImage.\n\t * Value is \"indicatorShape\".\n\t */\n\tSTYLE_INDICATOR_SHAPE: 'indicatorShape',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_IMAGE\n\t * \n\t * Defines the key for the indicator image used within an <mxLabel>.\n\t * Possible values are all image URLs. The indicatorShape has\n\t * precedence over the indicatorImage. Value is \"indicatorImage\".\n\t */\n\tSTYLE_INDICATOR_IMAGE: 'indicatorImage',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_COLOR\n\t * \n\t * Defines the key for the indicatorColor style. Possible values are all\n\t * HTML color names or HEX codes, as well as the special 'swimlane' keyword\n\t * to refer to the color of the parent swimlane if one exists. Value is\n\t * \"indicatorColor\".\n\t */\n\tSTYLE_INDICATOR_COLOR: 'indicatorColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_STROKECOLOR\n\t * \n\t * Defines the key for the indicator stroke color in <mxLabel>.\n\t * Possible values are all color codes. Value is \"indicatorStrokeColor\".\n\t */\n\tSTYLE_INDICATOR_STROKECOLOR: 'indicatorStrokeColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_GRADIENTCOLOR\n\t * \n\t * Defines the key for the indicatorGradientColor style. Possible values\n\t * are all HTML color names or HEX codes. This style is only supported in\n\t * <SHAPE_LABEL> shapes. Value is \"indicatorGradientColor\".\n\t */\n\tSTYLE_INDICATOR_GRADIENTCOLOR: 'indicatorGradientColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SPACING\n\t * \n\t * The defines the key for the spacing between the label and the\n\t * indicator in <mxLabel>. Possible values are in pixels. Value is\n\t * \"indicatorSpacing\".\n\t */\n\tSTYLE_INDICATOR_SPACING: 'indicatorSpacing',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_WIDTH\n\t * \n\t * Defines the key for the indicator width. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorWidth\".\n\t */\n\tSTYLE_INDICATOR_WIDTH: 'indicatorWidth',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_HEIGHT\n\t * \n\t * Defines the key for the indicator height. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorHeight\".\n\t */\n\tSTYLE_INDICATOR_HEIGHT: 'indicatorHeight',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_DIRECTION\n\t * \n\t * Defines the key for the indicatorDirection style. The direction style is\n\t * used to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"indicatorDirection\".\n\t */\n\tSTYLE_INDICATOR_DIRECTION: 'indicatorDirection',\n\n\t/**\n\t * Variable: STYLE_SHADOW\n\t * \n\t * Defines the key for the shadow style. The type of the value is Boolean.\n\t * Value is \"shadow\".\n\t */\n\tSTYLE_SHADOW: 'shadow',\n\t\n\t/**\n\t * Variable: STYLE_SEGMENT\n\t * \n\t * Defines the key for the segment style. The type of this value is float\n\t * and the value represents the size of the horizontal segment of the\n\t * entity relation style. Default is ENTITY_SEGMENT. Value is \"segment\".\n\t */\n\tSTYLE_SEGMENT: 'segment',\n\t\n\t/**\n\t * Variable: STYLE_ENDARROW\n\t *\n\t * Defines the key for the end arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * Value is \"endArrow\".\n\t *\n\t * Example:\n\t * (code)\n\t * style[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\t * (end)\n\t */\n\tSTYLE_ENDARROW: 'endArrow',\n\n\t/**\n\t * Variable: STYLE_STARTARROW\n\t * \n\t * Defines the key for the start arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * See <STYLE_ENDARROW>. Value is \"startArrow\".\n\t */\n\tSTYLE_STARTARROW: 'startArrow',\n\n\t/**\n\t * Variable: STYLE_ENDSIZE\n\t * \n\t * Defines the key for the endSize style. The type of this value is numeric\n\t * and the value represents the size of the end marker in pixels. Value is\n\t * \"endSize\".\n\t */\n\tSTYLE_ENDSIZE: 'endSize',\n\n\t/**\n\t * Variable: STYLE_STARTSIZE\n\t * \n\t * Defines the key for the startSize style. The type of this value is\n\t * numeric and the value represents the size of the start marker or the\n\t * size of the swimlane title region depending on the shape it is used for.\n\t * Value is \"startSize\".\n\t */\n\tSTYLE_STARTSIZE: 'startSize',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_LINE\n\t * \n\t * Defines the key for the swimlaneLine style. This style specifies whether\n\t * the line between the title regio of a swimlane should be visible. Use 0\n\t * for hidden or 1 (default) for visible. Value is \"swimlaneLine\".\n\t */\n\tSTYLE_SWIMLANE_LINE: 'swimlaneLine',\n\n\t/**\n\t * Variable: STYLE_ENDFILL\n\t * \n\t * Defines the key for the endFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"endFill\".\n\t */\n\tSTYLE_ENDFILL: 'endFill',\n\n\t/**\n\t * Variable: STYLE_STARTFILL\n\t * \n\t * Defines the key for the startFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"startFill\".\n\t */\n\tSTYLE_STARTFILL: 'startFill',\n\n\t/**\n\t * Variable: STYLE_DASHED\n\t * \n\t * Defines the key for the dashed style. Use 0 (default) for non-dashed or 1\n\t * for dashed. Value is \"dashed\".\n\t */\n\tSTYLE_DASHED: 'dashed',\n\n\t/**\n\t * Defines the key for the dashed pattern style in SVG and image exports.\n\t * The type of this value is a space separated list of numbers that specify\n\t * a custom-defined dash pattern. Dash styles are defined in terms of the\n\t * length of the dash (the drawn part of the stroke) and the length of the\n\t * space between the dashes. The lengths are relative to the line width: a\n\t * length of \"1\" is equal to the line width. VML ignores this style and\n\t * uses dashStyle instead as defined in the VML specification. This style\n\t * is only used in the <mxConnector> shape. Value is \"dashPattern\".\n\t */\n\tSTYLE_DASH_PATTERN: 'dashPattern',\n\n\t/**\n\t * Variable: STYLE_FIX_DASH\n\t * \n\t * Defines the key for the fixDash style. Use 0 (default) for dash patterns\n\t * that depend on the linewidth and 1 for dash patterns that ignore the\n\t * line width. Value is \"fixDash\".\n\t */\n\tSTYLE_FIX_DASH: 'fixDash',\n\n\t/**\n\t * Variable: STYLE_ROUNDED\n\t * \n\t * Defines the key for the rounded style. The type of this value is\n\t * Boolean. For edges this determines whether or not joins between edges\n\t * segments are smoothed to a rounded finish. For vertices that have the\n\t * rectangle shape, this determines whether or not the rectangle is\n\t * rounded. Use 0 (default) for non-rounded or 1 for rounded. Value is\n\t * \"rounded\".\n\t */\n\tSTYLE_ROUNDED: 'rounded',\n\n\t/**\n\t * Variable: STYLE_CURVED\n\t * \n\t * Defines the key for the curved style. The type of this value is\n\t * Boolean. It is only applicable for connector shapes. Use 0 (default)\n\t * for non-curved or 1 for curved. Value is \"curved\".\n\t */\n\tSTYLE_CURVED: 'curved',\n\n\t/**\n\t * Variable: STYLE_ARCSIZE\n\t * \n\t * Defines the rounding factor for a rounded rectangle in percent (without\n\t * the percent sign). Possible values are between 0 and 100. If this value\n\t * is not specified then RECTANGLE_ROUNDING_FACTOR * 100 is used. For\n\t * edges, this defines the absolute size of rounded corners in pixels. If\n\t * this values is not specified then LINE_ARCSIZE is used.\n\t * (This style is only exported via <mxImageExport>.) Value is \"arcSize\".\n\t */\n\tSTYLE_ARCSIZE: 'arcSize',\n\n\t/**\n\t * Variable: STYLE_ABSOLUTE_ARCSIZE\n\t * \n\t * Defines the key for the absolute arc size style. This specifies if\n\t * arcSize for rectangles is abolute or relative. Possible values are 1\n\t * and 0 (default). Value is \"absoluteArcSize\".\n\t */\n\tSTYLE_ABSOLUTE_ARCSIZE: 'absoluteArcSize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the source perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the source connection point of\n\t * an edge and the perimeter of the source vertex in pixels. This style\n\t * only applies to edges. Value is \"sourcePerimeterSpacing\".\n\t */\n\tSTYLE_SOURCE_PERIMETER_SPACING: 'sourcePerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_TARGET_PERIMETER_SPACING\n\t * \n\t * Defines the key for the target perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the target connection point of\n\t * an edge and the perimeter of the target vertex in pixels. This style\n\t * only applies to edges. Value is \"targetPerimeterSpacing\".\n\t */\n\tSTYLE_TARGET_PERIMETER_SPACING: 'targetPerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the perimeter spacing. This is the distance between\n\t * the connection point and the perimeter in pixels. When used in a vertex\n\t * style, this applies to all incoming edges to floating ports (edges that\n\t * terminate on the perimeter of the vertex). When used in an edge style,\n\t * this spacing applies to the source and target separately, if they\n\t * terminate in floating ports (on the perimeter of the vertex). Value is\n\t * \"perimeterSpacing\".\n\t */\n\tSTYLE_PERIMETER_SPACING: 'perimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_SPACING\n\t * \n\t * Defines the key for the spacing. The value represents the spacing, in\n\t * pixels, added to each side of a label in a vertex (style applies to\n\t * vertices only). Value is \"spacing\".\n\t */\n\tSTYLE_SPACING: 'spacing',\n\n\t/**\n\t * Variable: STYLE_SPACING_TOP\n\t * \n\t * Defines the key for the spacingTop style. The value represents the\n\t * spacing, in pixels, added to the top side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingTop\".\n\t */\n\tSTYLE_SPACING_TOP: 'spacingTop',\n\n\t/**\n\t * Variable: STYLE_SPACING_LEFT\n\t * \n\t * Defines the key for the spacingLeft style. The value represents the\n\t * spacing, in pixels, added to the left side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingLeft\".\n\t */\n\tSTYLE_SPACING_LEFT: 'spacingLeft',\n\n\t/**\n\t * Variable: STYLE_SPACING_BOTTOM\n\t * \n\t * Defines the key for the spacingBottom style The value represents the\n\t * spacing, in pixels, added to the bottom side of a label in a vertex\n\t * (style applies to vertices only). Value is \"spacingBottom\".\n\t */\n\tSTYLE_SPACING_BOTTOM: 'spacingBottom',\n\n\t/**\n\t * Variable: STYLE_SPACING_RIGHT\n\t * \n\t * Defines the key for the spacingRight style The value represents the\n\t * spacing, in pixels, added to the right side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingRight\".\n\t */\n\tSTYLE_SPACING_RIGHT: 'spacingRight',\n\n\t/**\n\t * Variable: STYLE_HORIZONTAL\n\t * \n\t * Defines the key for the horizontal style. Possible values are\n\t * true or false. This value only applies to vertices. If the <STYLE_SHAPE>\n\t * is \"SHAPE_SWIMLANE\" a value of false indicates that the\n\t * swimlane should be drawn vertically, true indicates to draw it\n\t * horizontally. If the shape style does not indicate that this vertex is a\n\t * swimlane, this value affects only whether the label is drawn\n\t * horizontally or vertically. Value is \"horizontal\".\n\t */\n\tSTYLE_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: STYLE_DIRECTION\n\t * \n\t * Defines the key for the direction style. The direction style is used\n\t * to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"direction\".\n\t */\n\tSTYLE_DIRECTION: 'direction',\n\n\t/**\n\t * Variable: STYLE_ANCHOR_POINT_DIRECTION\n\t * \n\t * Defines the key for the anchorPointDirection style. The defines if the\n\t * direction style should be taken into account when computing the fixed\n\t * point location for connected edges. Default is 1 (yes). Set this to 0\n\t * to ignore the direction style for fixed connection points. Value is\n\t * \"anchorPointDirection\".\n\t */\n\tSTYLE_ANCHOR_POINT_DIRECTION: 'anchorPointDirection',\n\n\t/**\n\t * Variable: STYLE_ELBOW\n\t * \n\t * Defines the key for the elbow style. Possible values are\n\t * <ELBOW_HORIZONTAL> and <ELBOW_VERTICAL>. Default is <ELBOW_HORIZONTAL>.\n\t * This defines how the three segment orthogonal edge style leaves its\n\t * terminal vertices. The vertical style leaves the terminal vertices at\n\t * the top and bottom sides. Value is \"elbow\".\n\t */\n\tSTYLE_ELBOW: 'elbow',\n\n\t/**\n\t * Variable: STYLE_FONTCOLOR\n\t * \n\t * Defines the key for the fontColor style. Possible values are all HTML\n\t * color names or HEX codes. Value is \"fontColor\".\n\t */\n\tSTYLE_FONTCOLOR: 'fontColor',\n\n\t/**\n\t * Variable: STYLE_FONTFAMILY\n\t * \n\t * Defines the key for the fontFamily style. Possible values are names such\n\t * as Arial; Dialog; Verdana; Times New Roman. The value is of type String.\n\t * Value is fontFamily.\n\t */\n\tSTYLE_FONTFAMILY: 'fontFamily',\n\n\t/**\n\t * Variable: STYLE_FONTSIZE\n\t * \n\t * Defines the key for the fontSize style (in px). The type of the value\n\t * is int. Value is \"fontSize\".\n\t */\n\tSTYLE_FONTSIZE: 'fontSize',\n\n\t/**\n\t * Variable: STYLE_FONTSTYLE\n\t * \n\t * Defines the key for the fontStyle style. Values may be any logical AND\n\t * (sum) of <FONT_BOLD>, <FONT_ITALIC> and <FONT_UNDERLINE>.\n\t * The type of the value is int. Value is \"fontStyle\".\n\t */\n\tSTYLE_FONTSTYLE: 'fontStyle',\n\t\n\t/**\n\t * Variable: STYLE_ASPECT\n\t * \n\t * Defines the key for the aspect style. Possible values are empty or fixed.\n\t * If fixed is used then the aspect ratio of the cell will be maintained\n\t * when resizing. Default is empty. Value is \"aspect\".\n\t */\n\tSTYLE_ASPECT: 'aspect',\n\n\t/**\n\t * Variable: STYLE_AUTOSIZE\n\t * \n\t * Defines the key for the autosize style. This specifies if a cell should be\n\t * resized automatically if the value has changed. Possible values are 0 or 1.\n\t * Default is 0. See <mxGraph.isAutoSizeCell>. This is normally combined with\n\t * <STYLE_RESIZABLE> to disable manual sizing. Value is \"autosize\".\n\t */\n\tSTYLE_AUTOSIZE: 'autosize',\n\n\t/**\n\t * Variable: STYLE_FOLDABLE\n\t * \n\t * Defines the key for the foldable style. This specifies if a cell is foldable\n\t * using a folding icon. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellFoldable>. Value is \"foldable\".\n\t */\n\tSTYLE_FOLDABLE: 'foldable',\n\n\t/**\n\t * Variable: STYLE_EDITABLE\n\t * \n\t * Defines the key for the editable style. This specifies if the value of\n\t * a cell can be edited using the in-place editor. Possible values are 0 or\n\t * 1. Default is 1. See <mxGraph.isCellEditable>. Value is \"editable\".\n\t */\n\tSTYLE_EDITABLE: 'editable',\n\n\t/**\n\t * Variable: STYLE_BACKGROUND_OUTLINE\n\t * \n\t * Defines the key for the backgroundOutline style. This specifies if a\n\t * only the background of a cell should be painted when it is highlighted.\n\t * Possible values are 0 or 1. Default is 0. Value is \"backgroundOutline\".\n\t */\n\tSTYLE_BACKGROUND_OUTLINE: 'backgroundOutline',\n\n\t/**\n\t * Variable: STYLE_BENDABLE\n\t * \n\t * Defines the key for the bendable style. This specifies if the control\n\t * points of an edge can be moved. Possible values are 0 or 1. Default is\n\t * 1. See <mxGraph.isCellBendable>. Value is \"bendable\".\n\t */\n\tSTYLE_BENDABLE: 'bendable',\n\n\t/**\n\t * Variable: STYLE_MOVABLE\n\t * \n\t * Defines the key for the movable style. This specifies if a cell can\n\t * be moved. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellMovable>. Value is \"movable\".\n\t */\n\tSTYLE_MOVABLE: 'movable',\n\n\t/**\n\t * Variable: STYLE_RESIZABLE\n\t * \n\t * Defines the key for the resizable style. This specifies if a cell can\n\t * be resized. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellResizable>. Value is \"resizable\".\n\t */\n\tSTYLE_RESIZABLE: 'resizable',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeWidth style. This specifies if a cell's\n\t * width is resized if the parent is resized. If this is 1 then the width\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's width will not be resized. Default is not defined. Value\n\t * is \"resizeWidth\".\n\t */\n\tSTYLE_RESIZE_WIDTH: 'resizeWidth',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeHeight style. This specifies if a cell's\n\t * height if resize if the parent is resized. If this is 1 then the height\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's height will not be resized. Default is not defined. Value\n\t * is \"resizeHeight\".\n\t */\n\tSTYLE_RESIZE_HEIGHT: 'resizeHeight',\n\n\t/**\n\t * Variable: STYLE_ROTATABLE\n\t * \n\t * Defines the key for the rotatable style. This specifies if a cell can\n\t * be rotated. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellRotatable>. Value is \"rotatable\".\n\t */\n\tSTYLE_ROTATABLE: 'rotatable',\n\n\t/**\n\t * Variable: STYLE_CLONEABLE\n\t * \n\t * Defines the key for the cloneable style. This specifies if a cell can\n\t * be cloned. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellCloneable>. Value is \"cloneable\".\n\t */\n\tSTYLE_CLONEABLE: 'cloneable',\n\n\t/**\n\t * Variable: STYLE_DELETABLE\n\t * \n\t * Defines the key for the deletable style. This specifies if a cell can be\n\t * deleted. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellDeletable>. Value is \"deletable\".\n\t */\n\tSTYLE_DELETABLE: 'deletable',\n\n\t/**\n\t * Variable: STYLE_SHAPE\n\t * \n\t * Defines the key for the shape. Possible values are all constants with\n\t * a SHAPE-prefix or any newly defined shape names. Value is \"shape\".\n\t */\n\tSTYLE_SHAPE: 'shape',\n\n\t/**\n\t * Variable: STYLE_EDGE\n\t * \n\t * Defines the key for the edge style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"edgeStyle\".\n\t */\n\tSTYLE_EDGE: 'edgeStyle',\n\n\t/**\n\t * Variable: STYLE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are all numeric values or \"auto\".\n\t * Jetty size is the minimum length of the orthogonal segment before\n\t * it attaches to a shape.\n\t * Value is \"jettySize\".\n\t */\n\tSTYLE_JETTY_SIZE: 'jettySize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"sourceJettySize\".\n\t */\n\tSTYLE_SOURCE_JETTY_SIZE: 'sourceJettySize',\n\n\t/**\n\t * Variable: targetJettySize\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"targetJettySize\".\n\t */\n\tSTYLE_TARGET_JETTY_SIZE: 'targetJettySize',\n\n\t/**\n\t * Variable: STYLE_LOOP\n\t * \n\t * Defines the key for the loop style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"loopStyle\". Default is\n\t * <mxGraph.defaultLoopStylean>.\n\t */\n\tSTYLE_LOOP: 'loopStyle',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL_LOOP\n\t * \n\t * Defines the key for the orthogonal loop style. Possible values are 0 and\n\t * 1. Default is 0. Value is \"orthogonalLoop\". Use this style to specify\n\t * if loops with no waypoints and defined anchor points should be routed\n\t * using <STYLE_LOOP> or not routed.\n\t */\n\tSTYLE_ORTHOGONAL_LOOP: 'orthogonalLoop',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_X\n\t * \n\t * Defines the key for the horizontal routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterX\".\n\t */\n\tSTYLE_ROUTING_CENTER_X: 'routingCenterX',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_Y\n\t * \n\t * Defines the key for the vertical routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterY\".\n\t */\n\tSTYLE_ROUTING_CENTER_Y: 'routingCenterY',\n\n\t/**\n\t * Variable: FONT_BOLD\n\t * \n\t * Constant for bold fonts. Default is 1.\n\t */\n\tFONT_BOLD: 1,\n\n\t/**\n\t * Variable: FONT_ITALIC\n\t * \n\t * Constant for italic fonts. Default is 2.\n\t */\n\tFONT_ITALIC: 2,\n\n\t/**\n\t * Variable: FONT_UNDERLINE\n\t * \n\t * Constant for underlined fonts. Default is 4.\n\t */\n\tFONT_UNDERLINE: 4,\n\n\t/**\n\t * Variable: SHAPE_RECTANGLE\n\t * \n\t * Name under which <mxRectangleShape> is registered in <mxCellRenderer>.\n\t * Default is rectangle.\n\t */\n\tSHAPE_RECTANGLE: 'rectangle',\n\n\t/**\n\t * Variable: SHAPE_ELLIPSE\n\t * \n\t * Name under which <mxEllipse> is registered in <mxCellRenderer>.\n\t * Default is ellipse.\n\t */\n\tSHAPE_ELLIPSE: 'ellipse',\n\n\t/**\n\t * Variable: SHAPE_DOUBLE_ELLIPSE\n\t * \n\t * Name under which <mxDoubleEllipse> is registered in <mxCellRenderer>.\n\t * Default is doubleEllipse.\n\t */\n\tSHAPE_DOUBLE_ELLIPSE: 'doubleEllipse',\n\n\t/**\n\t * Variable: SHAPE_RHOMBUS\n\t * \n\t * Name under which <mxRhombus> is registered in <mxCellRenderer>.\n\t * Default is rhombus.\n\t */\n\tSHAPE_RHOMBUS: 'rhombus',\n\n\t/**\n\t * Variable: SHAPE_LINE\n\t * \n\t * Name under which <mxLine> is registered in <mxCellRenderer>.\n\t * Default is line.\n\t */\n\tSHAPE_LINE: 'line',\n\n\t/**\n\t * Variable: SHAPE_IMAGE\n\t * \n\t * Name under which <mxImageShape> is registered in <mxCellRenderer>.\n\t * Default is image.\n\t */\n\tSHAPE_IMAGE: 'image',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW\n\t * \n\t * Name under which <mxArrow> is registered in <mxCellRenderer>.\n\t * Default is arrow.\n\t */\n\tSHAPE_ARROW: 'arrow',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW_CONNECTOR\n\t * \n\t * Name under which <mxArrowConnector> is registered in <mxCellRenderer>.\n\t * Default is arrowConnector.\n\t */\n\tSHAPE_ARROW_CONNECTOR: 'arrowConnector',\n\t\n\t/**\n\t * Variable: SHAPE_LABEL\n\t * \n\t * Name under which <mxLabel> is registered in <mxCellRenderer>.\n\t * Default is label.\n\t */\n\tSHAPE_LABEL: 'label',\n\t\n\t/**\n\t * Variable: SHAPE_CYLINDER\n\t * \n\t * Name under which <mxCylinder> is registered in <mxCellRenderer>.\n\t * Default is cylinder.\n\t */\n\tSHAPE_CYLINDER: 'cylinder',\n\t\n\t/**\n\t * Variable: SHAPE_SWIMLANE\n\t * \n\t * Name under which <mxSwimlane> is registered in <mxCellRenderer>.\n\t * Default is swimlane.\n\t */\n\tSHAPE_SWIMLANE: 'swimlane',\n\t\t\n\t/**\n\t * Variable: SHAPE_CONNECTOR\n\t * \n\t * Name under which <mxConnector> is registered in <mxCellRenderer>.\n\t * Default is connector.\n\t */\n\tSHAPE_CONNECTOR: 'connector',\n\n\t/**\n\t * Variable: SHAPE_ACTOR\n\t * \n\t * Name under which <mxActor> is registered in <mxCellRenderer>.\n\t * Default is actor.\n\t */\n\tSHAPE_ACTOR: 'actor',\n\t\t\n\t/**\n\t * Variable: SHAPE_CLOUD\n\t * \n\t * Name under which <mxCloud> is registered in <mxCellRenderer>.\n\t * Default is cloud.\n\t */\n\tSHAPE_CLOUD: 'cloud',\n\t\t\n\t/**\n\t * Variable: SHAPE_TRIANGLE\n\t * \n\t * Name under which <mxTriangle> is registered in <mxCellRenderer>.\n\t * Default is triangle.\n\t */\n\tSHAPE_TRIANGLE: 'triangle',\n\t\t\n\t/**\n\t * Variable: SHAPE_HEXAGON\n\t * \n\t * Name under which <mxHexagon> is registered in <mxCellRenderer>.\n\t * Default is hexagon.\n\t */\n\tSHAPE_HEXAGON: 'hexagon',\n\n\t/**\n\t * Variable: ARROW_CLASSIC\n\t * \n\t * Constant for classic arrow markers.\n\t */\n\tARROW_CLASSIC: 'classic',\n\n\t/**\n\t * Variable: ARROW_CLASSIC_THIN\n\t * \n\t * Constant for thin classic arrow markers.\n\t */\n\tARROW_CLASSIC_THIN: 'classicThin',\n\n\t/**\n\t * Variable: ARROW_BLOCK\n\t * \n\t * Constant for block arrow markers.\n\t */\n\tARROW_BLOCK: 'block',\n\n\t/**\n\t * Variable: ARROW_BLOCK_THIN\n\t * \n\t * Constant for thin block arrow markers.\n\t */\n\tARROW_BLOCK_THIN: 'blockThin',\n\n\t/**\n\t * Variable: ARROW_OPEN\n\t * \n\t * Constant for open arrow markers.\n\t */\n\tARROW_OPEN: 'open',\n\n\t/**\n\t * Variable: ARROW_OPEN_THIN\n\t * \n\t * Constant for thin open arrow markers.\n\t */\n\tARROW_OPEN_THIN: 'openThin',\n\n\t/**\n\t * Variable: ARROW_OVAL\n\t * \n\t * Constant for oval arrow markers.\n\t */\n\tARROW_OVAL: 'oval',\n\n\t/**\n\t * Variable: ARROW_DIAMOND\n\t * \n\t * Constant for diamond arrow markers.\n\t */\n\tARROW_DIAMOND: 'diamond',\n\n\t/**\n\t * Variable: ARROW_DIAMOND_THIN\n\t * \n\t * Constant for thin diamond arrow markers.\n\t */\n\tARROW_DIAMOND_THIN: 'diamondThin',\n\n\t/**\n\t * Variable: ALIGN_LEFT\n\t * \n\t * Constant for left horizontal alignment. Default is left.\n\t */\n\tALIGN_LEFT: 'left',\n\n\t/**\n\t * Variable: ALIGN_CENTER\n\t * \n\t * Constant for center horizontal alignment. Default is center.\n\t */\n\tALIGN_CENTER: 'center',\n\n\t/**\n\t * Variable: ALIGN_RIGHT\n\t * \n\t * Constant for right horizontal alignment. Default is right.\n\t */\n\tALIGN_RIGHT: 'right',\n\n\t/**\n\t * Variable: ALIGN_TOP\n\t * \n\t * Constant for top vertical alignment. Default is top.\n\t */\n\tALIGN_TOP: 'top',\n\n\t/**\n\t * Variable: ALIGN_MIDDLE\n\t * \n\t * Constant for middle vertical alignment. Default is middle.\n\t */\n\tALIGN_MIDDLE: 'middle',\n\n\t/**\n\t * Variable: ALIGN_BOTTOM\n\t * \n\t * Constant for bottom vertical alignment. Default is bottom.\n\t */\n\tALIGN_BOTTOM: 'bottom',\n\n\t/**\n\t * Variable: DIRECTION_NORTH\n\t * \n\t * Constant for direction north. Default is north.\n\t */\n\tDIRECTION_NORTH: 'north',\n\n\t/**\n\t * Variable: DIRECTION_SOUTH\n\t * \n\t * Constant for direction south. Default is south.\n\t */\n\tDIRECTION_SOUTH: 'south',\n\n\t/**\n\t * Variable: DIRECTION_EAST\n\t * \n\t * Constant for direction east. Default is east.\n\t */\n\tDIRECTION_EAST: 'east',\n\n\t/**\n\t * Variable: DIRECTION_WEST\n\t * \n\t * Constant for direction west. Default is west.\n\t */\n\tDIRECTION_WEST: 'west',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_DEFAULT\n\t * \n\t * Constant for text direction default. Default is an empty string. Use\n\t * this value to use the default text direction of the operating system. \n\t */\n\tTEXT_DIRECTION_DEFAULT: '',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_AUTO\n\t * \n\t * Constant for text direction automatic. Default is auto. Use this value\n\t * to find the direction for a given text with <mxText.getAutoDirection>. \n\t */\n\tTEXT_DIRECTION_AUTO: 'auto',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_LTR\n\t * \n\t * Constant for text direction left to right. Default is ltr. Use this\n\t * value for left to right text direction.\n\t */\n\tTEXT_DIRECTION_LTR: 'ltr',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_RTL\n\t * \n\t * Constant for text direction right to left. Default is rtl. Use this\n\t * value for right to left text direction.\n\t */\n\tTEXT_DIRECTION_RTL: 'rtl',\n\n\t/**\n\t * Variable: DIRECTION_MASK_NONE\n\t * \n\t * Constant for no direction.\n\t */\n\tDIRECTION_MASK_NONE: 0,\n\n\t/**\n\t * Variable: DIRECTION_MASK_WEST\n\t * \n\t * Bitwise mask for west direction.\n\t */\n\tDIRECTION_MASK_WEST: 1,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_NORTH\n\t * \n\t * Bitwise mask for north direction.\n\t */\n\tDIRECTION_MASK_NORTH: 2,\n\n\t/**\n\t * Variable: DIRECTION_MASK_SOUTH\n\t * \n\t * Bitwise mask for south direction.\n\t */\n\tDIRECTION_MASK_SOUTH: 4,\n\n\t/**\n\t * Variable: DIRECTION_MASK_EAST\n\t * \n\t * Bitwise mask for east direction.\n\t */\n\tDIRECTION_MASK_EAST: 8,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_ALL\n\t * \n\t * Bitwise mask for all directions.\n\t */\n\tDIRECTION_MASK_ALL: 15,\n\n\t/**\n\t * Variable: ELBOW_VERTICAL\n\t * \n\t * Constant for elbow vertical. Default is horizontal.\n\t */\n\tELBOW_VERTICAL: 'vertical',\n\n\t/**\n\t * Variable: ELBOW_HORIZONTAL\n\t * \n\t * Constant for elbow horizontal. Default is horizontal.\n\t */\n\tELBOW_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: EDGESTYLE_ELBOW\n\t * \n\t * Name of the elbow edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ELBOW: 'elbowEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ENTITY_RELATION\n\t * \n\t * Name of the entity relation edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ENTITY_RELATION: 'entityRelationEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_LOOP\n\t * \n\t * Name of the loop edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_LOOP: 'loopEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SIDETOSIDE\n\t * \n\t * Name of the side to side edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SIDETOSIDE: 'sideToSideEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_TOPTOBOTTOM\n\t * \n\t * Name of the top to bottom edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_TOPTOBOTTOM: 'topToBottomEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ORTHOGONAL\n\t * \n\t * Name of the generic orthogonal edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ORTHOGONAL: 'orthogonalEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SEGMENT\n\t * \n\t * Name of the generic segment edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SEGMENT: 'segmentEdgeStyle',\n \n\t/**\n\t * Variable: PERIMETER_ELLIPSE\n\t * \n\t * Name of the ellipse perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_ELLIPSE: 'ellipsePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RECTANGLE\n\t *\n\t * Name of the rectangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RECTANGLE: 'rectanglePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RHOMBUS\n\t * \n\t * Name of the rhombus perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RHOMBUS: 'rhombusPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_HEXAGON\n\t * \n\t * Name of the hexagon perimeter. Can be used as a string value \n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_HEXAGON: 'hexagonPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_TRIANGLE\n\t * \n\t * Name of the triangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_TRIANGLE: 'trianglePerimeter'\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventObject\n * \n * The mxEventObject is a wrapper for all properties of a single event.\n * Additionally, it also offers functions to consume the event and check if it\n * was consumed as follows:\n * \n * (code)\n * evt.consume();\n * INV: evt.isConsumed() == true\n * (end)\n * \n * Constructor: mxEventObject\n *\n * Constructs a new event object with the specified name. An optional\n * sequence of key, value pairs can be appended to define properties.\n * \n * Example:\n *\n * (code)\n * new mxEventObject(\"eventName\", key1, val1, .., keyN, valN)\n * (end)\n */\nfunction mxEventObject(name)\n{\n\tthis.name = name;\n\tthis.properties = [];\n\t\n\tfor (var i = 1; i < arguments.length; i += 2)\n\t{\n\t\tif (arguments[i + 1] != null)\n\t\t{\n\t\t\tthis.properties[arguments[i]] = arguments[i + 1];\n\t\t}\n\t}\n};\n\n/**\n * Variable: name\n *\n * Holds the name.\n */\nmxEventObject.prototype.name = null;\n\n/**\n * Variable: properties\n *\n * Holds the properties as an associative array.\n */\nmxEventObject.prototype.properties = null;\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state. Default is false.\n */\nmxEventObject.prototype.consumed = false;\n\n/**\n * Function: getName\n * \n * Returns <name>.\n */\nmxEventObject.prototype.getName = function()\n{\n\treturn this.name;\n};\n\n/**\n * Function: getProperties\n * \n * Returns <properties>.\n */\nmxEventObject.prototype.getProperties = function()\n{\n\treturn this.properties;\n};\n\n/**\n * Function: getProperty\n * \n * Returns the property for the given key.\n */\nmxEventObject.prototype.getProperty = function(key)\n{\n\treturn this.properties[key];\n};\n\n/**\n * Function: isConsumed\n *\n * Returns true if the event has been consumed.\n */\nmxEventObject.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Consumes the event.\n */\nmxEventObject.prototype.consume = function()\n{\n\tthis.consumed = true;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMouseEvent\n * \n * Base class for all mouse events in mxGraph. A listener for this event should\n * implement the following methods:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   mouseDown: function(sender, evt)\n *   {\n *     mxLog.debug('mouseDown');\n *   },\n *   mouseMove: function(sender, evt)\n *   {\n *     mxLog.debug('mouseMove');\n *   },\n *   mouseUp: function(sender, evt)\n *   {\n *     mxLog.debug('mouseUp');\n *   }\n * });\n * (end)\n * \n * Constructor: mxMouseEvent\n *\n * Constructs a new event object for the given arguments.\n * \n * Parameters:\n * \n * evt - Native mouse event.\n * state - Optional <mxCellState> under the mouse.\n * \n */\nfunction mxMouseEvent(evt, state)\n{\n\tthis.evt = evt;\n\tthis.state = state;\n\tthis.sourceState = state;\n};\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state of this event.\n */\nmxMouseEvent.prototype.consumed = false;\n\n/**\n * Variable: evt\n *\n * Holds the inner event object.\n */\nmxMouseEvent.prototype.evt = null;\n\n/**\n * Variable: graphX\n *\n * Holds the x-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphX = null;\n\n/**\n * Variable: graphY\n *\n * Holds the y-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphY = null;\n\n/**\n * Variable: state\n *\n * Holds the optional <mxCellState> associated with this event.\n */\nmxMouseEvent.prototype.state = null;\n\n/**\n * Variable: sourceState\n * \n * Holds the <mxCellState> that was passed to the constructor. This can be\n * different from <state> depending on the result of <mxGraph.getEventState>.\n */\nmxMouseEvent.prototype.sourceState = null;\n\n/**\n * Function: getEvent\n * \n * Returns <evt>.\n */\nmxMouseEvent.prototype.getEvent = function()\n{\n\treturn this.evt;\n};\n\n/**\n * Function: getSource\n * \n * Returns the target DOM element using <mxEvent.getSource> for <evt>.\n */\nmxMouseEvent.prototype.getSource = function()\n{\n\treturn mxEvent.getSource(this.evt);\n};\n\n/**\n * Function: isSource\n * \n * Returns true if the given <mxShape> is the source of <evt>.\n */\nmxMouseEvent.prototype.isSource = function(shape)\n{\n\tif (shape != null)\n\t{\n\t\treturn mxUtils.isAncestorNode(shape.node, this.getSource());\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getX\n * \n * Returns <evt.clientX>.\n */\nmxMouseEvent.prototype.getX = function()\n{\n\treturn mxEvent.getClientX(this.getEvent());\n};\n\n/**\n * Function: getY\n * \n * Returns <evt.clientY>.\n */\nmxMouseEvent.prototype.getY = function()\n{\n\treturn mxEvent.getClientY(this.getEvent());\n};\n\n/**\n * Function: getGraphX\n * \n * Returns <graphX>.\n */\nmxMouseEvent.prototype.getGraphX = function()\n{\n\treturn this.graphX;\n};\n\n/**\n * Function: getGraphY\n * \n * Returns <graphY>.\n */\nmxMouseEvent.prototype.getGraphY = function()\n{\n\treturn this.graphY;\n};\n\n/**\n * Function: getState\n * \n * Returns <state>.\n */\nmxMouseEvent.prototype.getState = function()\n{\n\treturn this.state;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> in <state> is not null.\n */\nmxMouseEvent.prototype.getCell = function()\n{\n\tvar state = this.getState();\n\t\n\tif (state != null)\n\t{\n\t\treturn state.cell;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isPopupTrigger\n *\n * Returns true if the event is a popup trigger.\n */\nmxMouseEvent.prototype.isPopupTrigger = function()\n{\n\treturn mxEvent.isPopupTrigger(this.getEvent());\n};\n\n/**\n * Function: isConsumed\n *\n * Returns <consumed>.\n */\nmxMouseEvent.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Sets <consumed> to true and invokes preventDefault on the native event\n * if such a method is defined. This is used mainly to avoid the cursor from\n * being changed to a text cursor in Webkit. You can use the preventDefault\n * flag to disable this functionality.\n * \n * Parameters:\n * \n * preventDefault - Specifies if the native event should be canceled. Default\n * is true.\n */\nmxMouseEvent.prototype.consume = function(preventDefault)\n{\n\tpreventDefault = (preventDefault != null) ? preventDefault :\n\t\t(this.evt.touches != null || mxEvent.isMouseEvent(this.evt));\n\t\n\tif (preventDefault && this.evt.preventDefault)\n\t{\n\t\tthis.evt.preventDefault();\n\t}\n\n\t// Workaround for images being dragged in IE\n\t// Does not change returnValue in Opera\n\tif (mxClient.IS_IE)\n\t{\n\t\tthis.evt.returnValue = true;\n\t}\n\n\t// Sets local consumed state\n\tthis.consumed = true;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventSource\n *\n * Base class for objects that dispatch named events. To create a subclass that\n * inherits from mxEventSource, the following code is used.\n *\n * (code)\n * function MyClass() { };\n *\n * MyClass.prototype = new mxEventSource();\n * MyClass.prototype.constructor = MyClass;\n * (end)\n *\n * Known Subclasses:\n *\n * <mxGraphModel>, <mxGraph>, <mxGraphView>, <mxEditor>, <mxCellOverlay>,\n * <mxToolbar>, <mxWindow>\n * \n * Constructor: mxEventSource\n *\n * Constructs a new event source.\n */\nfunction mxEventSource(eventSource)\n{\n\tthis.setEventSource(eventSource);\n};\n\n/**\n * Variable: eventListeners\n *\n * Holds the event names and associated listeners in an array. The array\n * contains the event name followed by the respective listener for each\n * registered listener.\n */\nmxEventSource.prototype.eventListeners = null;\n\n/**\n * Variable: eventsEnabled\n *\n * Specifies if events can be fired. Default is true.\n */\nmxEventSource.prototype.eventsEnabled = true;\n\n/**\n * Variable: eventSource\n *\n * Optional source for events. Default is null.\n */\nmxEventSource.prototype.eventSource = null;\n\n/**\n * Function: isEventsEnabled\n * \n * Returns <eventsEnabled>.\n */\nmxEventSource.prototype.isEventsEnabled = function()\n{\n\treturn this.eventsEnabled;\n};\n\n/**\n * Function: setEventsEnabled\n * \n * Sets <eventsEnabled>.\n */\nmxEventSource.prototype.setEventsEnabled = function(value)\n{\n\tthis.eventsEnabled = value;\n};\n\n/**\n * Function: getEventSource\n * \n * Returns <eventSource>.\n */\nmxEventSource.prototype.getEventSource = function()\n{\n\treturn this.eventSource;\n};\n\n/**\n * Function: setEventSource\n * \n * Sets <eventSource>.\n */\nmxEventSource.prototype.setEventSource = function(value)\n{\n\tthis.eventSource = value;\n};\n\n/**\n * Function: addListener\n *\n * Binds the specified function to the given event name. If no event name\n * is given, then the listener is registered for all events.\n * \n * The parameters of the listener are the sender and an <mxEventObject>.\n */\nmxEventSource.prototype.addListener = function(name, funct)\n{\n\tif (this.eventListeners == null)\n\t{\n\t\tthis.eventListeners = [];\n\t}\n\t\n\tthis.eventListeners.push(name);\n\tthis.eventListeners.push(funct);\n};\n\n/**\n * Function: removeListener\n *\n * Removes all occurrences of the given listener from <eventListeners>.\n */\nmxEventSource.prototype.removeListener = function(funct)\n{\n\tif (this.eventListeners != null)\n\t{\n\t\tvar i = 0;\n\t\t\n\t\twhile (i < this.eventListeners.length)\n\t\t{\n\t\t\tif (this.eventListeners[i+1] == funct)\n\t\t\t{\n\t\t\t\tthis.eventListeners.splice(i, 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fireEvent\n *\n * Dispatches the given event to the listeners which are registered for\n * the event. The sender argument is optional. The current execution scope\n * (\"this\") is used for the listener invocation (see <mxUtils.bind>).\n *\n * Example:\n *\n * (code)\n * fireEvent(new mxEventObject(\"eventName\", key1, val1, .., keyN, valN))\n * (end)\n * \n * Parameters:\n *\n * evt - <mxEventObject> that represents the event.\n * sender - Optional sender to be passed to the listener. Default value is\n * the return value of <getEventSource>.\n */\nmxEventSource.prototype.fireEvent = function(evt, sender)\n{\n\tif (this.eventListeners != null && this.isEventsEnabled())\n\t{\n\t\tif (evt == null)\n\t\t{\n\t\t\tevt = new mxEventObject();\n\t\t}\n\t\t\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this.getEventSource();\n\t\t}\n\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this;\n\t\t}\n\n\t\tvar args = [sender, evt];\n\t\t\n\t\tfor (var i = 0; i < this.eventListeners.length; i += 2)\n\t\t{\n\t\t\tvar listen = this.eventListeners[i];\n\t\t\t\n\t\t\tif (listen == null || listen == evt.getName())\n\t\t\t{\n\t\t\t\tthis.eventListeners[i+1].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEvent =\n{\n\n\t/**\n\t * Class: mxEvent\n\t * \n\t * Cross-browser DOM event support. For internal event handling,\n\t * <mxEventSource> and the graph event dispatch loop in <mxGraph> are used.\n\t * \n\t * Memory Leaks:\n\t * \n\t * Use this class for adding and removing listeners to/from DOM nodes. The\n\t * <removeAllListeners> function is provided to remove all listeners that\n\t * have been added using <addListener>. The function should be invoked when\n\t * the last reference is removed in the JavaScript code, typically when the\n\t * referenced DOM node is removed from the DOM.\n\t *\n\t * Function: addListener\n\t * \n\t * Binds the function to the specified event on the given element. Use\n\t * <mxUtils.bind> in order to bind the \"this\" keyword inside the function\n\t * to a given execution scope.\n\t */\n\taddListener: function()\n\t{\n\t\tvar updateListenerList = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList == null)\n\t\t\t{\n\t\t\t\telement.mxListenerList = [];\n\t\t\t}\n\t\t\t\n\t\t\tvar entry = {name: eventName, f: funct};\n\t\t\telement.mxListenerList.push(entry);\n\t\t};\n\t\t\n\t\tif (window.addEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.addEventListener(eventName, funct, false);\n\t\t\t\tupdateListenerList(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.attachEvent('on' + eventName, funct);\n\t\t\t\tupdateListenerList(element, eventName, funct);\t\t\t\t\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeListener\n\t *\n\t * Removes the specified listener from the given element.\n\t */\n\tremoveListener: function()\n\t{\n\t\tvar updateListener = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList != null)\n\t\t\t{\n\t\t\t\tvar listenerCount = element.mxListenerList.length;\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < listenerCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar entry = element.mxListenerList[i];\n\t\t\t\t\t\n\t\t\t\t\tif (entry.f == funct)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.mxListenerList.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (element.mxListenerList.length == 0)\n\t\t\t\t{\n\t\t\t\t\telement.mxListenerList = null;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tif (window.removeEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.removeEventListener(eventName, funct, false);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.detachEvent('on' + eventName, funct);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeAllListeners\n\t * \n\t * Removes all listeners from the given element.\n\t */\n\tremoveAllListeners: function(element)\n\t{\n\t\tvar list = element.mxListenerList;\n\n\t\tif (list != null)\n\t\t{\n\t\t\twhile (list.length > 0)\n\t\t\t{\n\t\t\t\tvar entry = list[0];\n\t\t\t\tmxEvent.removeListener(element, entry.name, entry.f);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: addGestureListeners\n\t * \n\t * Adds the given listeners for touch, mouse and/or pointer events. If\n\t * <mxClient.IS_POINTER> is true then pointer events will be registered,\n\t * else the respective mouse events will be registered. If <mxClient.IS_POINTER>\n\t * is false and <mxClient.IS_TOUCH> is true then the respective touch events\n\t * will be registered as well as the mouse events.\n\t */\n\taddGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: removeGestureListeners\n\t * \n\t * Removes the given listeners from mousedown, mousemove, mouseup and the\n\t * respective touch events if <mxClient.IS_TOUCH> is true.\n\t */\n\tremoveGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: redirectMouseEvents\n\t *\n\t * Redirects the mouse events from the given DOM node to the graph dispatch\n\t * loop using the event and given state as event arguments. State can\n\t * either be an instance of <mxCellState> or a function that returns an\n\t * <mxCellState>. The down, move, up and dblClick arguments are optional\n\t * functions that take the trigger event as arguments and replace the\n\t * default behaviour.\n\t */\n\tredirectMouseEvents: function(node, graph, state, down, move, up, dblClick)\n\t{\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\treturn (typeof(state) == 'function') ? state(evt) : state;\n\t\t};\n\t\t\n\t\tmxEvent.addGestureListeners(node, function (evt)\n\t\t{\n\t\t\tif (down != null)\n\t\t\t{\n\t\t\t\tdown(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (move != null)\n\t\t\t{\n\t\t\t\tmove(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (up != null)\n\t\t\t{\n\t\t\t\tup(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.addListener(node, 'dblclick', function (evt)\n\t\t{\n\t\t\tif (dblClick != null)\n\t\t\t{\n\t\t\t\tdblClick(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tvar tmp = getState(evt);\n\t\t\t\tgraph.dblClick(evt, (tmp != null) ? tmp.cell : null);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Function: release\n\t * \n\t * Removes the known listeners from the given DOM node and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the listeners from.\n\t */\n\trelease: function(element)\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (element != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeAllListeners(element);\n\t\t\t\t\n\t\t\t\tvar children = element.childNodes;\n\t\t\t\t\n\t\t\t\tif (children != null)\n\t\t\t\t{\n\t\t\t        var childCount = children.length;\n\t\t\t        \n\t\t\t        for (var i = 0; i < childCount; i += 1)\n\t\t\t        {\n\t\t\t        \tmxEvent.release(children[i]);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignores errors as this is typically called in cleanup code\n\t\t}\n\t},\n\n\t/**\n\t * Function: addMouseWheelListener\n\t * \n\t * Installs the given function as a handler for mouse wheel events. The\n\t * function has two arguments: the mouse event and a boolean that specifies\n\t * if the wheel was moved up or down.\n\t * \n\t * This has been tested with IE 6 and 7, Firefox (all versions), Opera and\n\t * Safari. It does currently not work on Safari for Mac.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * mxEvent.addMouseWheelListener(function (evt, up)\n\t * {\n\t *   mxLog.show();\n\t *   mxLog.debug('mouseWheel: up='+up);\n\t * });\n\t *(end)\n\t * \n\t * Parameters:\n\t * \n\t * funct - Handler function that takes the event argument and a boolean up\n\t * argument for the mousewheel direction.\n\t * target - Target for installing the listener in Google Chrome. See \n\t * https://www.chromestatus.com/features/6662647093133312.\n\t */\n\taddMouseWheelListener: function(funct, target)\n\t{\n\t\tif (funct != null)\n\t\t{\n\t\t\tvar wheelHandler = function(evt)\n\t\t\t{\n\t\t\t\t// IE does not give an event object but the\n\t\t\t\t// global event object is the mousewheel event\n\t\t\t\t// at this point in time.\n\t\t\t\tif (evt == null)\n\t\t\t\t{\n\t\t\t\t\tevt = window.event;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar delta = 0;\n\t\t\t\t\n\t\t\t\tif (mxClient.IS_FF)\n\t\t\t\t{\n\t\t\t\t\tdelta = -evt.detail / 2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelta = evt.wheelDelta / 120;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Handles the event using the given function\n\t\t\t\tif (delta != 0)\n\t\t\t\t{\n\t\t\t\t\tfunct(evt, delta > 0);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\t// Webkit has NS event API, but IE event name and details \n\t\t\tif (mxClient.IS_NS && document.documentMode == null)\n\t\t\t{\n\t\t\t\tvar eventName = (mxClient.IS_SF || mxClient.IS_GC) ? 'mousewheel' : 'DOMMouseScroll';\n\t\t\t\tmxEvent.addListener((mxClient.IS_GC && target != null) ? target : window,\n\t\t\t\t\teventName, wheelHandler);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.addListener(document, 'mousewheel', wheelHandler);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: disableContextMenu\n\t *\n\t * Disables the context menu for the given element.\n\t */\n\tdisableContextMenu: function(element)\n\t{\n\t\tmxEvent.addListener(element, 'contextmenu', function(evt)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t},\n\t\n\t/**\n\t * Function: getSource\n\t * \n\t * Returns the event's target or srcElement depending on the browser.\n\t */\n\tgetSource: function(evt)\n\t{\n\t\treturn (evt.srcElement != null) ? evt.srcElement : evt.target;\n\t},\n\n\t/**\n\t * Function: isConsumed\n\t * \n\t * Returns true if the event has been consumed using <consume>.\n\t */\n\tisConsumed: function(evt)\n\t{\n\t\treturn evt.isConsumed != null && evt.isConsumed;\n\t},\n\n\t/**\n\t * Function: isTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisTouchEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'touch' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_TOUCH) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 5 : evt.type.indexOf('touch') == 0);\n\t},\n\n\t/**\n\t * Function: isPenEvent\n\t * \n\t * Returns true if the event was generated using a pen (not a touch device or mouse).\n\t */\n\tisPenEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'pen' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_PEN) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 2 : evt.type.indexOf('pen') == 0);\n\t},\n\n\t/**\n\t * Function: isMultiTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisMultiTouchEvent: function(evt)\n\t{\n\t\treturn (evt.type != null && evt.type.indexOf('touch') == 0 && evt.touches != null && evt.touches.length > 1);\n\t},\n\n\t/**\n\t * Function: isMouseEvent\n\t * \n\t * Returns true if the event was generated using a mouse (not a pen or touch device).\n\t */\n\tisMouseEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'mouse' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?\n\t\t\t\tevt.mozInputSource == 1 : evt.type.indexOf('mouse') == 0);\n\t},\n\t\n\t/**\n\t * Function: isLeftMouseButton\n\t * \n\t * Returns true if the left mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property. Note that this returns true in Firefox\n\t * for control+left-click on the Mac.\n\t */\n\tisLeftMouseButton: function(evt)\n\t{\n\t\t// Special case for mousemove and mousedown we check the buttons\n\t\t// if it exists because which is 0 even if no button is pressed\n\t\tif ('buttons' in evt && (evt.type == 'mousedown' || evt.type == 'mousemove'))\n\t\t{\n\t\t\treturn evt.buttons == 1;\n\t\t}\n\t\telse if ('which' in evt)\n\t\t{\n\t        return evt.which === 1;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 1;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isMiddleMouseButton\n\t * \n\t * Returns true if the middle mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property.\n\t */\n\tisMiddleMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 2;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 4;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isRightMouseButton\n\t * \n\t * Returns true if the right mouse button was pressed. Note that this\n\t * button might not be available on some systems. For handling a popup\n\t * trigger <isPopupTrigger> should be used.\n\t */\n\tisRightMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 3;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 2;\n\t    }\n\t},\n\n\t/**\n\t * Function: isPopupTrigger\n\t * \n\t * Returns true if the event is a popup trigger. This implementation\n\t * returns true if the right button or the left button and control was\n\t * pressed on a Mac.\n\t */\n\tisPopupTrigger: function(evt)\n\t{\n\t\treturn mxEvent.isRightMouseButton(evt) || (mxClient.IS_MAC && mxEvent.isControlDown(evt) &&\n\t\t\t!mxEvent.isShiftDown(evt) && !mxEvent.isMetaDown(evt) && !mxEvent.isAltDown(evt));\n\t},\n\n\t/**\n\t * Function: isShiftDown\n\t * \n\t * Returns true if the shift key is pressed for the given event.\n\t */\n\tisShiftDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.shiftKey : false;\n\t},\n\n\t/**\n\t * Function: isAltDown\n\t * \n\t * Returns true if the alt key is pressed for the given event.\n\t */\n\tisAltDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.altKey : false;\n\t},\n\n\t/**\n\t * Function: isControlDown\n\t * \n\t * Returns true if the control key is pressed for the given event.\n\t */\n\tisControlDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.ctrlKey : false;\n\t},\n\n\t/**\n\t * Function: isMetaDown\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tisMetaDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.metaKey : false;\n\t},\n\n\t/**\n\t * Function: getMainEvent\n\t * \n\t * Returns the touch or mouse event that contains the mouse coordinates.\n\t */\n\tgetMainEvent: function(e)\n\t{\n\t\tif ((e.type == 'touchstart' || e.type == 'touchmove') && e.touches != null && e.touches[0] != null)\n\t\t{\n\t\t\te = e.touches[0];\n\t\t}\n\t\telse if (e.type == 'touchend' && e.changedTouches != null && e.changedTouches[0] != null)\n\t\t{\n\t\t\te = e.changedTouches[0];\n\t\t}\n\t\t\n\t\treturn e;\n\t},\n\t\n\t/**\n\t * Function: getClientX\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientX: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientX;\n\t},\n\n\t/**\n\t * Function: getClientY\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientY: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientY;\n\t},\n\n\t/**\n\t * Function: consume\n\t * \n\t * Consumes the given event.\n\t * \n\t * Parameters:\n\t * \n\t * evt - Native event to be consumed.\n\t * preventDefault - Optional boolean to prevent the default for the event.\n\t * Default is true.\n\t * stopPropagation - Option boolean to stop event propagation. Default is\n\t * true.\n\t */\n\tconsume: function(evt, preventDefault, stopPropagation)\n\t{\n\t\tpreventDefault = (preventDefault != null) ? preventDefault : true;\n\t\tstopPropagation = (stopPropagation != null) ? stopPropagation : true;\n\t\t\n\t\tif (preventDefault)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tif (stopPropagation)\n\t\t\t\t{\n\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\telse if (stopPropagation)\n\t\t\t{\n\t\t\t\tevt.cancelBubble = true;\n\t\t\t}\n\t\t}\n\n\t\t// Opera\n\t\tevt.isConsumed = true;\n\n\t\t// Other browsers\n\t\tif (!evt.preventDefault)\n\t\t{\n\t\t\tevt.returnValue = false;\n\t\t}\n\t},\n\t\n\t//\n\t// Special handles in mouse events\n\t//\n\t\n\t/**\n\t * Variable: LABEL_HANDLE\n\t * \n\t * Index for the label handle in an mxMouseEvent. This should be a negative\n\t * value that does not interfere with any possible handle indices. Default\n\t * is -1.\n\t */\n\tLABEL_HANDLE: -1,\n\t\n\t/**\n\t * Variable: ROTATION_HANDLE\n\t * \n\t * Index for the rotation handle in an mxMouseEvent. This should be a\n\t * negative value that does not interfere with any possible handle indices.\n\t * Default is -2.\n\t */\n\tROTATION_HANDLE: -2,\n\t\n\t/**\n\t * Variable: CUSTOM_HANDLE\n\t * \n\t * Start index for the custom handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * custom handle. Default is -100.\n\t */\n\tCUSTOM_HANDLE: -100,\n\t\n\t/**\n\t * Variable: VIRTUAL_HANDLE\n\t * \n\t * Start index for the virtual handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * virtual handle. Default is -100000. This assumes that there are no more\n\t * than VIRTUAL_HANDLE - CUSTOM_HANDLE custom handles.\n\t * \n\t */\n\tVIRTUAL_HANDLE: -100000,\n\t\n\t//\n\t// Event names\n\t//\n\t\n\t/**\n\t * Variable: MOUSE_DOWN\n\t *\n\t * Specifies the event name for mouseDown.\n\t */\n\tMOUSE_DOWN: 'mouseDown',\n\t\n\t/**\n\t * Variable: MOUSE_MOVE\n\t *\n\t * Specifies the event name for mouseMove. \n\t */\n\tMOUSE_MOVE: 'mouseMove',\n\t\n\t/**\n\t * Variable: MOUSE_UP\n\t *\n\t * Specifies the event name for mouseUp. \n\t */\n\tMOUSE_UP: 'mouseUp',\n\n\t/**\n\t * Variable: ACTIVATE\n\t *\n\t * Specifies the event name for activate.\n\t */\n\tACTIVATE: 'activate',\n\n\t/**\n\t * Variable: RESIZE_START\n\t *\n\t * Specifies the event name for resizeStart.\n\t */\n\tRESIZE_START: 'resizeStart',\n\n\t/**\n\t * Variable: RESIZE\n\t *\n\t * Specifies the event name for resize.\n\t */\n\tRESIZE: 'resize',\n\n\t/**\n\t * Variable: RESIZE_END\n\t *\n\t * Specifies the event name for resizeEnd.\n\t */\n\tRESIZE_END: 'resizeEnd',\n\n\t/**\n\t * Variable: MOVE_START\n\t *\n\t * Specifies the event name for moveStart.\n\t */\n\tMOVE_START: 'moveStart',\n\n\t/**\n\t * Variable: MOVE\n\t *\n\t * Specifies the event name for move.\n\t */\n\tMOVE: 'move',\n\n\t/**\n\t * Variable: MOVE_END\n\t *\n\t * Specifies the event name for moveEnd.\n\t */\n\tMOVE_END: 'moveEnd',\n\n\t/**\n\t * Variable: PAN_START\n\t *\n\t * Specifies the event name for panStart.\n\t */\n\tPAN_START: 'panStart',\n\n\t/**\n\t * Variable: PAN\n\t *\n\t * Specifies the event name for pan.\n\t */\n\tPAN: 'pan',\n\n\t/**\n\t * Variable: PAN_END\n\t *\n\t * Specifies the event name for panEnd.\n\t */\n\tPAN_END: 'panEnd',\n\n\t/**\n\t * Variable: MINIMIZE\n\t *\n\t * Specifies the event name for minimize.\n\t */\n\tMINIMIZE: 'minimize',\n\n\t/**\n\t * Variable: NORMALIZE\n\t *\n\t * Specifies the event name for normalize.\n\t */\n\tNORMALIZE: 'normalize',\n\n\t/**\n\t * Variable: MAXIMIZE\n\t *\n\t * Specifies the event name for maximize.\n\t */\n\tMAXIMIZE: 'maximize',\n\n\t/**\n\t * Variable: HIDE\n\t *\n\t * Specifies the event name for hide.\n\t */\n\tHIDE: 'hide',\n\n\t/**\n\t * Variable: SHOW\n\t *\n\t * Specifies the event name for show.\n\t */\n\tSHOW: 'show',\n\n\t/**\n\t * Variable: CLOSE\n\t *\n\t * Specifies the event name for close.\n\t */\n\tCLOSE: 'close',\n\n\t/**\n\t * Variable: DESTROY\n\t *\n\t * Specifies the event name for destroy.\n\t */\n\tDESTROY: 'destroy',\n\n\t/**\n\t * Variable: REFRESH\n\t *\n\t * Specifies the event name for refresh.\n\t */\n\tREFRESH: 'refresh',\n\n\t/**\n\t * Variable: SIZE\n\t *\n\t * Specifies the event name for size.\n\t */\n\tSIZE: 'size',\n\t\n\t/**\n\t * Variable: SELECT\n\t *\n\t * Specifies the event name for select.\n\t */\n\tSELECT: 'select',\n\n\t/**\n\t * Variable: FIRED\n\t *\n\t * Specifies the event name for fired.\n\t */\n\tFIRED: 'fired',\n\n\t/**\n\t * Variable: FIRE_MOUSE_EVENT\n\t *\n\t * Specifies the event name for fireMouseEvent.\n\t */\n\tFIRE_MOUSE_EVENT: 'fireMouseEvent',\n\n\t/**\n\t * Variable: GESTURE\n\t *\n\t * Specifies the event name for gesture.\n\t */\n\tGESTURE: 'gesture',\n\n\t/**\n\t * Variable: TAP_AND_HOLD\n\t *\n\t * Specifies the event name for tapAndHold.\n\t */\n\tTAP_AND_HOLD: 'tapAndHold',\n\n\t/**\n\t * Variable: GET\n\t *\n\t * Specifies the event name for get.\n\t */\n\tGET: 'get',\n\n\t/**\n\t * Variable: RECEIVE\n\t *\n\t * Specifies the event name for receive.\n\t */\n\tRECEIVE: 'receive',\n\n\t/**\n\t * Variable: CONNECT\n\t *\n\t * Specifies the event name for connect.\n\t */\n\tCONNECT: 'connect',\n\n\t/**\n\t * Variable: DISCONNECT\n\t *\n\t * Specifies the event name for disconnect.\n\t */\n\tDISCONNECT: 'disconnect',\n\n\t/**\n\t * Variable: SUSPEND\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tSUSPEND: 'suspend',\n\n\t/**\n\t * Variable: RESUME\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tRESUME: 'resume',\n\n\t/**\n\t * Variable: MARK\n\t *\n\t * Specifies the event name for mark.\n\t */\n\tMARK: 'mark',\n\n\t/**\n\t * Variable: ROOT\n\t *\n\t * Specifies the event name for root.\n\t */\n\tROOT: 'root',\n\n\t/**\n\t * Variable: POST\n\t *\n\t * Specifies the event name for post.\n\t */\n\tPOST: 'post',\n\n\t/**\n\t * Variable: OPEN\n\t *\n\t * Specifies the event name for open.\n\t */\n\tOPEN: 'open',\n\n\t/**\n\t * Variable: SAVE\n\t *\n\t * Specifies the event name for open.\n\t */\n\tSAVE: 'save',\n\n\t/**\n\t * Variable: BEFORE_ADD_VERTEX\n\t *\n\t * Specifies the event name for beforeAddVertex.\n\t */\n\tBEFORE_ADD_VERTEX: 'beforeAddVertex',\n\n\t/**\n\t * Variable: ADD_VERTEX\n\t *\n\t * Specifies the event name for addVertex.\n\t */\n\tADD_VERTEX: 'addVertex',\n\n\t/**\n\t * Variable: AFTER_ADD_VERTEX\n\t *\n\t * Specifies the event name for afterAddVertex.\n\t */\n\tAFTER_ADD_VERTEX: 'afterAddVertex',\n\n\t/**\n\t * Variable: DONE\n\t *\n\t * Specifies the event name for done.\n\t */\n\tDONE: 'done',\n\n\t/**\n\t * Variable: EXECUTE\n\t *\n\t * Specifies the event name for execute.\n\t */\n\tEXECUTE: 'execute',\n\n\t/**\n\t * Variable: EXECUTED\n\t *\n\t * Specifies the event name for executed.\n\t */\n\tEXECUTED: 'executed',\n\n\t/**\n\t * Variable: BEGIN_UPDATE\n\t *\n\t * Specifies the event name for beginUpdate.\n\t */\n\tBEGIN_UPDATE: 'beginUpdate',\n\n\t/**\n\t * Variable: START_EDIT\n\t *\n\t * Specifies the event name for startEdit.\n\t */\n\tSTART_EDIT: 'startEdit',\n\n\t/**\n\t * Variable: END_UPDATE\n\t *\n\t * Specifies the event name for endUpdate.\n\t */\n\tEND_UPDATE: 'endUpdate',\n\n\t/**\n\t * Variable: END_EDIT\n\t *\n\t * Specifies the event name for endEdit.\n\t */\n\tEND_EDIT: 'endEdit',\n\n\t/**\n\t * Variable: BEFORE_UNDO\n\t *\n\t * Specifies the event name for beforeUndo.\n\t */\n\tBEFORE_UNDO: 'beforeUndo',\n\n\t/**\n\t * Variable: UNDO\n\t *\n\t * Specifies the event name for undo.\n\t */\n\tUNDO: 'undo',\n\n\t/**\n\t * Variable: REDO\n\t *\n\t * Specifies the event name for redo.\n\t */\n\tREDO: 'redo',\n\n\t/**\n\t * Variable: CHANGE\n\t *\n\t * Specifies the event name for change.\n\t */\n\tCHANGE: 'change',\n\n\t/**\n\t * Variable: NOTIFY\n\t *\n\t * Specifies the event name for notify.\n\t */\n\tNOTIFY: 'notify',\n\n\t/**\n\t * Variable: LAYOUT_CELLS\n\t *\n\t * Specifies the event name for layoutCells.\n\t */\n\tLAYOUT_CELLS: 'layoutCells',\n\n\t/**\n\t * Variable: CLICK\n\t *\n\t * Specifies the event name for click.\n\t */\n\tCLICK: 'click',\n\n\t/**\n\t * Variable: SCALE\n\t *\n\t * Specifies the event name for scale.\n\t */\n\tSCALE: 'scale',\n\n\t/**\n\t * Variable: TRANSLATE\n\t *\n\t * Specifies the event name for translate.\n\t */\n\tTRANSLATE: 'translate',\n\n\t/**\n\t * Variable: SCALE_AND_TRANSLATE\n\t *\n\t * Specifies the event name for scaleAndTranslate.\n\t */\n\tSCALE_AND_TRANSLATE: 'scaleAndTranslate',\n\n\t/**\n\t * Variable: UP\n\t *\n\t * Specifies the event name for up.\n\t */\n\tUP: 'up',\n\n\t/**\n\t * Variable: DOWN\n\t *\n\t * Specifies the event name for down.\n\t */\n\tDOWN: 'down',\n\n\t/**\n\t * Variable: ADD\n\t *\n\t * Specifies the event name for add.\n\t */\n\tADD: 'add',\n\n\t/**\n\t * Variable: REMOVE\n\t *\n\t * Specifies the event name for remove.\n\t */\n\tREMOVE: 'remove',\n\t\n\t/**\n\t * Variable: CLEAR\n\t *\n\t * Specifies the event name for clear.\n\t */\n\tCLEAR: 'clear',\n\n\t/**\n\t * Variable: ADD_CELLS\n\t *\n\t * Specifies the event name for addCells.\n\t */\n\tADD_CELLS: 'addCells',\n\n\t/**\n\t * Variable: CELLS_ADDED\n\t *\n\t * Specifies the event name for cellsAdded.\n\t */\n\tCELLS_ADDED: 'cellsAdded',\n\n\t/**\n\t * Variable: MOVE_CELLS\n\t *\n\t * Specifies the event name for moveCells.\n\t */\n\tMOVE_CELLS: 'moveCells',\n\n\t/**\n\t * Variable: CELLS_MOVED\n\t *\n\t * Specifies the event name for cellsMoved.\n\t */\n\tCELLS_MOVED: 'cellsMoved',\n\n\t/**\n\t * Variable: RESIZE_CELLS\n\t *\n\t * Specifies the event name for resizeCells.\n\t */\n\tRESIZE_CELLS: 'resizeCells',\n\n\t/**\n\t * Variable: CELLS_RESIZED\n\t *\n\t * Specifies the event name for cellsResized.\n\t */\n\tCELLS_RESIZED: 'cellsResized',\n\n\t/**\n\t * Variable: TOGGLE_CELLS\n\t *\n\t * Specifies the event name for toggleCells.\n\t */\n\tTOGGLE_CELLS: 'toggleCells',\n\n\t/**\n\t * Variable: CELLS_TOGGLED\n\t *\n\t * Specifies the event name for cellsToggled.\n\t */\n\tCELLS_TOGGLED: 'cellsToggled',\n\n\t/**\n\t * Variable: ORDER_CELLS\n\t *\n\t * Specifies the event name for orderCells.\n\t */\n\tORDER_CELLS: 'orderCells',\n\n\t/**\n\t * Variable: CELLS_ORDERED\n\t *\n\t * Specifies the event name for cellsOrdered.\n\t */\n\tCELLS_ORDERED: 'cellsOrdered',\n\n\t/**\n\t * Variable: REMOVE_CELLS\n\t *\n\t * Specifies the event name for removeCells.\n\t */\n\tREMOVE_CELLS: 'removeCells',\n\n\t/**\n\t * Variable: CELLS_REMOVED\n\t *\n\t * Specifies the event name for cellsRemoved.\n\t */\n\tCELLS_REMOVED: 'cellsRemoved',\n\n\t/**\n\t * Variable: GROUP_CELLS\n\t *\n\t * Specifies the event name for groupCells.\n\t */\n\tGROUP_CELLS: 'groupCells',\n\n\t/**\n\t * Variable: UNGROUP_CELLS\n\t *\n\t * Specifies the event name for ungroupCells.\n\t */\n\tUNGROUP_CELLS: 'ungroupCells',\n\n\t/**\n\t * Variable: REMOVE_CELLS_FROM_PARENT\n\t *\n\t * Specifies the event name for removeCellsFromParent.\n\t */\n\tREMOVE_CELLS_FROM_PARENT: 'removeCellsFromParent',\n\n\t/**\n\t * Variable: FOLD_CELLS\n\t *\n\t * Specifies the event name for foldCells.\n\t */\n\tFOLD_CELLS: 'foldCells',\n\n\t/**\n\t * Variable: CELLS_FOLDED\n\t *\n\t * Specifies the event name for cellsFolded.\n\t */\n\tCELLS_FOLDED: 'cellsFolded',\n\n\t/**\n\t * Variable: ALIGN_CELLS\n\t *\n\t * Specifies the event name for alignCells.\n\t */\n\tALIGN_CELLS: 'alignCells',\n\n\t/**\n\t * Variable: LABEL_CHANGED\n\t *\n\t * Specifies the event name for labelChanged.\n\t */\n\tLABEL_CHANGED: 'labelChanged',\n\n\t/**\n\t * Variable: CONNECT_CELL\n\t *\n\t * Specifies the event name for connectCell.\n\t */\n\tCONNECT_CELL: 'connectCell',\n\n\t/**\n\t * Variable: CELL_CONNECTED\n\t *\n\t * Specifies the event name for cellConnected.\n\t */\n\tCELL_CONNECTED: 'cellConnected',\n\n\t/**\n\t * Variable: SPLIT_EDGE\n\t *\n\t * Specifies the event name for splitEdge.\n\t */\n\tSPLIT_EDGE: 'splitEdge',\n\n\t/**\n\t * Variable: FLIP_EDGE\n\t *\n\t * Specifies the event name for flipEdge.\n\t */\n\tFLIP_EDGE: 'flipEdge',\n\n\t/**\n\t * Variable: START_EDITING\n\t *\n\t * Specifies the event name for startEditing.\n\t */\n\tSTART_EDITING: 'startEditing',\n\n\t/**\n\t * Variable: EDITING_STARTED\n\t *\n\t * Specifies the event name for editingStarted.\n\t */\n\tEDITING_STARTED: 'editingStarted',\n\n\t/**\n\t * Variable: EDITING_STOPPED\n\t *\n\t * Specifies the event name for editingStopped.\n\t */\n\tEDITING_STOPPED: 'editingStopped',\n\n\t/**\n\t * Variable: ADD_OVERLAY\n\t *\n\t * Specifies the event name for addOverlay.\n\t */\n\tADD_OVERLAY: 'addOverlay',\n\n\t/**\n\t * Variable: REMOVE_OVERLAY\n\t *\n\t * Specifies the event name for removeOverlay.\n\t */\n\tREMOVE_OVERLAY: 'removeOverlay',\n\n\t/**\n\t * Variable: UPDATE_CELL_SIZE\n\t *\n\t * Specifies the event name for updateCellSize.\n\t */\n\tUPDATE_CELL_SIZE: 'updateCellSize',\n\n\t/**\n\t * Variable: ESCAPE\n\t *\n\t * Specifies the event name for escape.\n\t */\n\tESCAPE: 'escape',\n\n\t/**\n\t * Variable: DOUBLE_CLICK\n\t *\n\t * Specifies the event name for doubleClick.\n\t */\n\tDOUBLE_CLICK: 'doubleClick',\n\n\t/**\n\t * Variable: START\n\t *\n\t * Specifies the event name for start.\n\t */\n\tSTART: 'start',\n\n\t/**\n\t * Variable: RESET\n\t *\n\t * Specifies the event name for reset.\n\t */\n\tRESET: 'reset'\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlRequest\n * \n * XML HTTP request wrapper. See also: <mxUtils.get>, <mxUtils.post> and\n * <mxUtils.load>. This class provides a cross-browser abstraction for Ajax\n * requests.\n * \n * Encoding:\n * \n * For encoding parameter values, the built-in encodeURIComponent JavaScript\n * method must be used. For automatic encoding of post data in <mxEditor> the\n * <mxEditor.escapePostData> switch can be set to true (default). The encoding\n * will be carried out using the conte type of the page. That is, the page\n * containting the editor should contain a meta tag in the header, eg.\n * <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n * \n * Example:\n * \n * (code)\n * var onload = function(req)\n * {\n *   mxUtils.alert(req.getDocumentElement());\n * }\n * \n * var onerror = function(req)\n * {\n *   mxUtils.alert('Error');\n * }\n * new mxXmlRequest(url, 'key=value').send(onload, onerror);\n * (end)\n * \n * Sends an asynchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var req = new mxXmlRequest(url, 'key=value', 'POST', false);\n * req.send();\n * mxUtils.alert(req.getDocumentElement());\n * (end)\n * \n * Sends a synchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = encodeURIComponent(mxUtils.getXml(result));\n * new mxXmlRequest(url, 'xml='+xml).send();\n * (end)\n * \n * Sends an encoded graph model to the specified URL using xml as the\n * parameter name. The parameter can then be retrieved in C# as follows:\n * \n * (code)\n * string xml = HttpUtility.UrlDecode(context.Request.Params[\"xml\"]);\n * (end)\n * \n * Or in Java as follows:\n * \n * (code)\n * String xml = URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\");\n * (end)\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image.\n * \n * Constructor: mxXmlRequest\n * \n * Constructs an XML HTTP request.\n * \n * Parameters:\n * \n * url - Target URL of the request.\n * params - Form encoded parameters to send with a POST request.\n * method - String that specifies the request method. Possible values are\n * POST and GET. Default is POST.\n * async - Boolean specifying if an asynchronous request should be used.\n * Default is true.\n * username - String specifying the username to be used for the request.\n * password - String specifying the password to be used for the request.\n */\nfunction mxXmlRequest(url, params, method, async, username, password)\n{\n\tthis.url = url;\n\tthis.params = params;\n\tthis.method = method || 'POST';\n\tthis.async = (async != null) ? async : true;\n\tthis.username = username;\n\tthis.password = password;\n};\n\n/**\n * Variable: url\n * \n * Holds the target URL of the request.\n */\nmxXmlRequest.prototype.url = null;\n\n/**\n * Variable: params\n * \n * Holds the form encoded data for the POST request.\n */\nmxXmlRequest.prototype.params = null;\n\n/**\n * Variable: method\n * \n * Specifies the request method. Possible values are POST and GET. Default\n * is POST.\n */\nmxXmlRequest.prototype.method = null;\n\n/**\n * Variable: async\n * \n * Boolean indicating if the request is asynchronous.\n */\nmxXmlRequest.prototype.async = null;\n\n/**\n * Variable: binary\n * \n * Boolean indicating if the request is binary. This option is ignored in IE.\n * In all other browsers the requested mime type is set to\n * text/plain; charset=x-user-defined. Default is false.\n */\nmxXmlRequest.prototype.binary = false;\n\n/**\n * Variable: withCredentials\n * \n * Specifies if withCredentials should be used in HTML5-compliant browsers. Default is\n * false.\n */\nmxXmlRequest.prototype.withCredentials = false;\n\n/**\n * Variable: username\n * \n * Specifies the username to be used for authentication.\n */\nmxXmlRequest.prototype.username = null;\n\n/**\n * Variable: password\n * \n * Specifies the password to be used for authentication.\n */\nmxXmlRequest.prototype.password = null;\n\n/**\n * Variable: request\n * \n * Holds the inner, browser-specific request object.\n */\nmxXmlRequest.prototype.request = null;\n\n/**\n * Variable: decodeSimulateValues\n * \n * Specifies if request values should be decoded as URIs before setting the\n * textarea value in <simulate>. Defaults to false for backwards compatibility,\n * to avoid another decode on the server this should be set to true.\n */\nmxXmlRequest.prototype.decodeSimulateValues = false;\n\n/**\n * Function: isBinary\n * \n * Returns <binary>.\n */\nmxXmlRequest.prototype.isBinary = function()\n{\n\treturn this.binary;\n};\n\n/**\n * Function: setBinary\n * \n * Sets <binary>.\n */\nmxXmlRequest.prototype.setBinary = function(value)\n{\n\tthis.binary = value;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: isReady\n * \n * Returns true if the response is ready.\n */\nmxXmlRequest.prototype.isReady = function()\n{\n\treturn this.request.readyState == 4;\n};\n\n/**\n * Function: getDocumentElement\n * \n * Returns the document element of the response XML document.\n */\nmxXmlRequest.prototype.getDocumentElement = function()\n{\n\tvar doc = this.getXml();\n\t\n\tif (doc != null)\n\t{\n\t\treturn doc.documentElement;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getXml\n * \n * Returns the response as an XML document. Use <getDocumentElement> to get\n * the document element of the XML document.\n */\nmxXmlRequest.prototype.getXml = function()\n{\n\tvar xml = this.request.responseXML;\n\t\n\t// Handles missing response headers in IE, the first condition handles\n\t// the case where responseXML is there, but using its nodes leads to\n\t// type errors in the mxCellCodec when putting the nodes into a new\n\t// document. This happens in IE9 standards mode and with XML user\n\t// objects only, as they are used directly as values in cells.\n\tif (document.documentMode >= 9 || xml == null || xml.documentElement == null)\n\t{\n\t\txml = mxUtils.parseXml(this.request.responseText);\n\t}\n\t\n\treturn xml;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: getStatus\n * \n * Returns the status as a number, eg. 404 for \"Not found\" or 200 for \"OK\".\n * Note: The NS_ERROR_NOT_AVAILABLE for invalid responses cannot be cought.\n */\nmxXmlRequest.prototype.getStatus = function()\n{\n\treturn this.request.status;\n};\n\n/**\n * Function: create\n * \n * Creates and returns the inner <request> object.\n */\nmxXmlRequest.prototype.create = function()\n{\n\tif (window.XMLHttpRequest)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\tvar req = new XMLHttpRequest();\n\t\t\t\n\t\t\t// TODO: Check for overrideMimeType required here?\n\t\t\tif (this.isBinary() && req.overrideMimeType)\n\t\t\t{\n\t\t\t\treq.overrideMimeType('text/plain; charset=x-user-defined');\n\t\t\t}\n\n\t\t\treturn req;\n\t\t};\n\t}\n\telse if (typeof(ActiveXObject) != 'undefined')\n\t{\n\t\treturn function()\n\t\t{\n\t\t\t// TODO: Implement binary option\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\n\t\t};\n\t}\n}();\n\n/**\n * Function: send\n * \n * Send the <request> to the target URL using the specified functions to\n * process the response asychronously.\n * \n * Note: Due to technical limitations, onerror is currently ignored.\n * \n * Parameters:\n * \n * onload - Function to be invoked if a successful response was received.\n * onerror - Function to be called on any error.\n * timeout - Optional timeout in ms before calling ontimeout.\n * ontimeout - Optional function to execute on timeout.\n */\nmxXmlRequest.prototype.send = function(onload, onerror, timeout, ontimeout)\n{\n\tthis.request = this.create();\n\t\n\tif (this.request != null)\n\t{\n\t\tif (onload != null)\n\t\t{\n\t\t\tthis.request.onreadystatechange = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (this.isReady())\n\t\t\t\t{\n\t\t\t\t\tonload(this);\n\t\t\t\t\tthis.request.onreadystatechaange = null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.request.open(this.method, this.url, this.async,\n\t\t\tthis.username, this.password);\n\t\tthis.setRequestHeaders(this.request, this.params);\n\t\t\n\t\tif (window.XMLHttpRequest && this.withCredentials)\n\t\t{\n\t\t\tthis.request.withCredentials = 'true';\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_QUIRKS && (document.documentMode == null || document.documentMode > 9) &&\n\t\t\twindow.XMLHttpRequest && timeout != null && ontimeout != null)\n\t\t{\n\t\t\tthis.request.timeout = timeout;\n\t\t\tthis.request.ontimeout = ontimeout;\n\t\t}\n\t\t\t\t\n\t\tthis.request.send(this.params);\n\t}\n};\n\n/**\n * Function: setRequestHeaders\n * \n * Sets the headers for the given request and parameters. This sets the\n * content-type to application/x-www-form-urlencoded if any params exist.\n * \n * Example:\n * \n * (code)\n * request.setRequestHeaders = function(request, params)\n * {\n *   if (params != null)\n *   {\n *     request.setRequestHeader('Content-Type',\n *             'multipart/form-data');\n *     request.setRequestHeader('Content-Length',\n *             params.length);\n *   }\n * };\n * (end)\n * \n * Use the code above before calling <send> if you require a\n * multipart/form-data request.   \n */\nmxXmlRequest.prototype.setRequestHeaders = function(request, params)\n{\n\tif (params != null)\n\t{\n\t\trequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t}\n};\n\n/**\n * Function: simulate\n * \n * Creates and posts a request to the given target URL using a dynamically\n * created form inside the given document.\n * \n * Parameters:\n * \n * docs - Document that contains the form element.\n * target - Target to send the form result to.\n */\nmxXmlRequest.prototype.simulate = function(doc, target)\n{\n\tdoc = doc || document;\n\tvar old = null;\n\n\tif (doc == document)\n\t{\n\t\told = window.onbeforeunload;\t\t\n\t\twindow.onbeforeunload = null;\n\t}\n\t\t\t\n\tvar form = doc.createElement('form');\n\tform.setAttribute('method', this.method);\n\tform.setAttribute('action', this.url);\n\n\tif (target != null)\n\t{\n\t\tform.setAttribute('target', target);\n\t}\n\n\tform.style.display = 'none';\n\tform.style.visibility = 'hidden';\n\t\n\tvar pars = (this.params.indexOf('&') > 0) ?\n\t\tthis.params.split('&') :\n\t\tthis.params.split();\n\n\t// Adds the parameters as textareas to the form\n\tfor (var i=0; i<pars.length; i++)\n\t{\n\t\tvar pos = pars[i].indexOf('=');\n\t\t\n\t\tif (pos > 0)\n\t\t{\n\t\t\tvar name = pars[i].substring(0, pos);\n\t\t\tvar value = pars[i].substring(pos+1);\n\t\t\t\n\t\t\tif (this.decodeSimulateValues)\n\t\t\t{\n\t\t\t\tvalue = decodeURIComponent(value);\n\t\t\t}\n\t\t\t\n\t\t\tvar textarea = doc.createElement('textarea');\n\t\t\ttextarea.setAttribute('wrap', 'off');\n\t\t\ttextarea.setAttribute('name', name);\n\t\t\tmxUtils.write(textarea, value);\n\t\t\tform.appendChild(textarea);\n\t\t}\n\t}\n\t\n\tdoc.body.appendChild(form);\n\tform.submit();\n\t\n\tif (form.parentNode != null)\n\t{\n\t\tform.parentNode.removeChild(form);\n\t}\n\n\tif (old != null)\n\t{\t\t\n\t\twindow.onbeforeunload = old;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxClipboard =\n{\n\t/**\n\t * Class: mxClipboard\n\t * \n\t * Singleton that implements a clipboard for graph cells.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxClipboard.copy(graph);\n\t * mxClipboard.paste(graph2);\n\t * (end)\n\t *\n\t * This copies the selection cells from the graph to the clipboard and\n\t * pastes them into graph2.\n\t * \n\t * For fine-grained control of the clipboard data the <mxGraph.canExportCell>\n\t * and <mxGraph.canImportCell> functions can be overridden.\n\t * \n\t * To restore previous parents for pasted cells, the implementation for\n\t * <copy> and <paste> can be changed as follows.\n\t * \n\t * (code)\n\t * mxClipboard.copy = function(graph, cells)\n\t * {\n\t *   cells = cells || graph.getSelectionCells();\n\t *   var result = graph.getExportableCells(cells);\n\t *   \n\t *   mxClipboard.parents = new Object();\n\t *   \n\t *   for (var i = 0; i < result.length; i++)\n\t *   {\n\t *     mxClipboard.parents[i] = graph.model.getParent(cells[i]);\n\t *   }\n\t *   \n\t *   mxClipboard.insertCount = 1;\n\t *   mxClipboard.setCells(graph.cloneCells(result));\n\t *   \n\t *   return result;\n\t * };\n\t * \n\t * mxClipboard.paste = function(graph)\n\t * {\n\t *   if (!mxClipboard.isEmpty())\n\t *   {\n\t *     var cells = graph.getImportableCells(mxClipboard.getCells());\n\t *     var delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t *     var parent = graph.getDefaultParent();\n\t *     \n\t *     graph.model.beginUpdate();\n\t *     try\n\t *     {\n\t *       for (var i = 0; i < cells.length; i++)\n\t *       {\n\t *         var tmp = (mxClipboard.parents != null && graph.model.contains(mxClipboard.parents[i])) ?\n\t *              mxClipboard.parents[i] : parent;\n\t *         cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n\t *       }\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.model.endUpdate();\n\t *     }\n\t *     \n\t *     // Increments the counter and selects the inserted cells\n\t *     mxClipboard.insertCount++;\n\t *     graph.setSelectionCells(cells);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * Variable: STEPSIZE\n\t * \n\t * Defines the step size to offset the cells after each paste operation.\n\t * Default is 10.\n\t */\n\tSTEPSIZE: 10,\n\n\t/**\n\t * Variable: insertCount\n\t * \n\t * Counts the number of times the clipboard data has been inserted.\n\t */\n\tinsertCount: 1,\n\n\t/**\n\t * Variable: cells\n\t * \n\t * Holds the array of <mxCells> currently in the clipboard.\n\t */\n\tcells: null,\n\n\t/**\n\t * Function: setCells\n\t * \n\t * Sets the cells in the clipboard. Fires a <mxEvent.CHANGE> event.\n\t */\n\tsetCells: function(cells)\n\t{\n\t\tmxClipboard.cells = cells;\n\t},\n\n\t/**\n\t * Function: getCells\n\t * \n\t * Returns  the cells in the clipboard.\n\t */\n\tgetCells: function()\n\t{\n\t\treturn mxClipboard.cells;\n\t},\n\t\n\t/**\n\t * Function: isEmpty\n\t * \n\t * Returns true if the clipboard currently has not data stored.\n\t */\n\tisEmpty: function()\n\t{\n\t\treturn mxClipboard.getCells() == null;\n\t},\n\t\n\t/**\n\t * Function: cut\n\t * \n\t * Cuts the given array of <mxCells> from the specified graph.\n\t * If cells is null then the selection cells of the graph will\n\t * be used. Returns the cells that have been cut from the graph.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Optional array of <mxCells> to be cut.\n\t */\n\tcut: function(graph, cells)\n\t{\n\t\tcells = mxClipboard.copy(graph, cells);\n\t\tmxClipboard.insertCount = 0;\n\t\tmxClipboard.removeCells(graph, cells);\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: removeCells\n\t * \n\t * Hook to remove the given cells from the given graph after\n\t * a cut operation.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Array of <mxCells> to be cut.\n\t */\n\tremoveCells: function(graph, cells)\n\t{\n\t\tgraph.removeCells(cells);\n\t},\n\n\t/**\n\t * Function: copy\n\t * \n\t * Copies the given array of <mxCells> from the specified\n\t * graph to <cells>. Returns the original array of cells that has\n\t * been cloned. Descendants of cells in the array are ignored.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be copied.\n\t * cells - Optional array of <mxCells> to be copied.\n\t */\n\tcopy: function(graph, cells)\n\t{\n\t\tcells = cells || graph.getSelectionCells();\n\t\tvar result = graph.getExportableCells(graph.model.getTopmostCells(cells));\n\t\tmxClipboard.insertCount = 1;\n\t\tmxClipboard.setCells(graph.cloneCells(result));\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: paste\n\t * \n\t * Pastes the <cells> into the specified graph restoring\n\t * the relation to <parents>, if possible. If the parents\n\t * are no longer in the graph or invisible then the\n\t * cells are added to the graph's default or into the\n\t * swimlane under the cell's new location if one exists.\n\t * The cells are added to the graph using <mxGraph.importCells>\n\t * and returned.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to paste the <cells> into.\n\t */\n\tpaste: function(graph)\n\t{\n\t\tvar cells = null;\n\t\t\n\t\tif (!mxClipboard.isEmpty())\n\t\t{\n\t\t\tcells = graph.getImportableCells(mxClipboard.getCells());\n\t\t\tvar delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t\t\tvar parent = graph.getDefaultParent();\n\t\t\tcells = graph.importCells(cells, delta, delta, parent);\n\t\t\t\n\t\t\t// Increments the counter and selects the inserted cells\n\t\t\tmxClipboard.insertCount++;\n\t\t\tgraph.setSelectionCells(cells);\n\t\t}\n\t\t\n\t\treturn cells;\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxWindow\n * \n * Basic window inside a document.\n * \n * Examples:\n * \n * Creating a simple window.\n *\n * (code)\n * var tb = document.createElement('div');\n * var wnd = new mxWindow('Title', tb, 100, 100, 200, 200, true, true);\n * wnd.setVisible(true); \n * (end)\n *\n * Creating a window that contains an iframe. \n * \n * (code)\n * var frame = document.createElement('iframe');\n * frame.setAttribute('width', '192px');\n * frame.setAttribute('height', '172px');\n * frame.setAttribute('src', 'http://www.example.com/');\n * frame.style.backgroundColor = 'white';\n * \n * var w = document.body.clientWidth;\n * var h = (document.body.clientHeight || document.documentElement.clientHeight);\n * var wnd = new mxWindow('Title', frame, (w-200)/2, (h-200)/3, 200, 200);\n * wnd.setVisible(true);\n * (end)\n * \n * To limit the movement of a window, eg. to keep it from being moved beyond\n * the top, left corner the following method can be overridden (recommended):\n * \n * (code)\n * wnd.setLocation = function(x, y)\n * {\n *   x = Math.max(0, x);\n *   y = Math.max(0, y);\n *   mxWindow.prototype.setLocation.apply(this, arguments);\n * };\n * (end)\n * \n * Or the following event handler can be used:\n * \n * (code)\n * wnd.addListener(mxEvent.MOVE, function(e)\n * {\n *   wnd.setLocation(Math.max(0, wnd.getX()), Math.max(0, wnd.getY()));\n * });\n * (end)\n * \n * To keep a window inside the current window:\n * \n * (code)\n * mxEvent.addListener(window, 'resize', mxUtils.bind(this, function()\n * {\n *   var iw = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n *   var ih = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n *   \n *   var x = this.window.getX();\n *   var y = this.window.getY();\n *   \n *   if (x + this.window.table.clientWidth > iw)\n *   {\n *     x = Math.max(0, iw - this.window.table.clientWidth);\n *   }\n *   \n *   if (y + this.window.table.clientHeight > ih)\n *   {\n *     y = Math.max(0, ih - this.window.table.clientHeight);\n *   }\n *   \n *   if (this.window.getX() != x || this.window.getY() != y)\n *   {\n *     this.window.setLocation(x, y);\n *   }\n * }));\n * (end)\n *\n * Event: mxEvent.MOVE_START\n *\n * Fires before the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MOVE\n *\n * Fires while the window is being moved. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.MOVE_END\n *\n * Fires after the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_START\n *\n * Fires before the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE\n *\n * Fires while the window is being resized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_END\n *\n * Fires after the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MAXIMIZE\n * \n * Fires after the window is maximized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.MINIMIZE\n * \n * Fires after the window is minimized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.NORMALIZE\n * \n * Fires after the window is normalized, that is, it returned from\n * maximized or minimized state. The <code>event</code> property contains the\n * corresponding mouse event.\n *  \n * Event: mxEvent.ACTIVATE\n * \n * Fires after a window is activated. The <code>previousWindow</code> property\n * contains the previous window. The event sender is the active window.\n * \n * Event: mxEvent.SHOW\n * \n * Fires after the window is shown. This event has no properties.\n * \n * Event: mxEvent.HIDE\n * \n * Fires after the window is hidden. This event has no properties.\n * \n * Event: mxEvent.CLOSE\n * \n * Fires before the window is closed. The <code>event</code> property contains\n * the corresponding mouse event.\n * \n * Event: mxEvent.DESTROY\n * \n * Fires before the window is destroyed. This event has no properties.\n * \n * Constructor: mxWindow\n * \n * Constructs a new window with the given dimension and title to display\n * the specified content. The window elements use the given style as a\n * prefix for the classnames of the respective window elements, namely,\n * the window title and window pane. The respective postfixes are appended\n * to the given stylename as follows:\n * \n *   style - Base style for the window.\n *   style+Title - Style for the window title.\n *   style+Pane - Style for the window pane.\n * \n * The default value for style is mxWindow, resulting in the following\n * classnames for the window elements: mxWindow, mxWindowTitle and\n * mxWindowPane.\n * \n * If replaceNode is given then the window replaces the given DOM node in\n * the document.\n * \n * Parameters:\n * \n * title - String that represents the title of the new window.\n * content - DOM node that is used as the window content.\n * x - X-coordinate of the window location.\n * y - Y-coordinate of the window location.\n * width - Width of the window.\n * height - Optional height of the window. Default is to match the height\n * of the content at the specified width.\n * minimizable - Optional boolean indicating if the window is minimizable.\n * Default is true.\n * movable - Optional boolean indicating if the window is movable. Default\n * is true.\n * replaceNode - Optional DOM node that the window should replace.\n * style - Optional base classname for the window elements. Default is\n * mxWindow.\n */\nfunction mxWindow(title, content, x, y, width, height, minimizable, movable, replaceNode, style)\n{\n\tif (content != null)\n\t{\n\t\tminimizable = (minimizable != null) ? minimizable : true;\n\t\tthis.content = content;\n\t\tthis.init(x, y, width, height, style);\n\t\t\n\t\tthis.installMaximizeHandler();\n\t\tthis.installMinimizeHandler();\n\t\tthis.installCloseHandler();\n\t\tthis.setMinimizable(minimizable);\n\t\tthis.setTitle(title);\n\t\t\n\t\tif (movable == null || movable)\n\t\t{\n\t\t\tthis.installMoveHandler();\n\t\t}\n\n\t\tif (replaceNode != null && replaceNode.parentNode != null)\n\t\t{\n\t\t\treplaceNode.parentNode.replaceChild(this.div, replaceNode);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.body.appendChild(this.div);\n\t\t}\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxWindow.prototype = new mxEventSource();\nmxWindow.prototype.constructor = mxWindow;\n\n/**\n * Variable: closeImage\n * \n * URL of the image to be used for the close icon in the titlebar.\n */\nmxWindow.prototype.closeImage = mxClient.imageBasePath + '/close.gif';\n\n/**\n * Variable: minimizeImage\n * \n * URL of the image to be used for the minimize icon in the titlebar.\n */\nmxWindow.prototype.minimizeImage = mxClient.imageBasePath + '/minimize.gif';\n\t\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the normalize icon in the titlebar.\n */\nmxWindow.prototype.normalizeImage = mxClient.imageBasePath + '/normalize.gif';\n\t\n/**\n * Variable: maximizeImage\n * \n * URL of the image to be used for the maximize icon in the titlebar.\n */\nmxWindow.prototype.maximizeImage = mxClient.imageBasePath + '/maximize.gif';\n\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the resize icon.\n */\nmxWindow.prototype.resizeImage = mxClient.imageBasePath + '/resize.gif';\n\n/**\n * Variable: visible\n * \n * Boolean flag that represents the visible state of the window.\n */\nmxWindow.prototype.visible = false;\n\n/**\n * Variable: minimumSize\n * \n * <mxRectangle> that specifies the minimum width and height of the window.\n * Default is (50, 40).\n */\nmxWindow.prototype.minimumSize = new mxRectangle(0, 0, 50, 40);\n\n/**\n * Variable: destroyOnClose\n * \n * Specifies if the window should be destroyed when it is closed. If this\n * is false then the window is hidden using <setVisible>. Default is true.\n */\nmxWindow.prototype.destroyOnClose = true;\n\n/**\n * Variable: contentHeightCorrection\n * \n * Defines the correction factor for computing the height of the contentWrapper.\n * Default is 6 for IE 7/8 standards mode and 2 for all other browsers and modes.\n */\nmxWindow.prototype.contentHeightCorrection = (document.documentMode == 8 || document.documentMode == 7) ? 6 : 2;\n\n/**\n * Variable: title\n * \n * Reference to the DOM node (TD) that contains the title.\n */\nmxWindow.prototype.title = null;\n\n/**\n * Variable: content\n * \n * Reference to the DOM node that represents the window content.\n */\nmxWindow.prototype.content = null;\n\n/**\n * Function: init\n * \n * Initializes the DOM tree that represents the window.\n */\nmxWindow.prototype.init = function(x, y, width, height, style)\n{\n\tstyle = (style != null) ? style : 'mxWindow';\n\t\n\tthis.div = document.createElement('div');\n\tthis.div.className = style;\n\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n\tthis.table = document.createElement('table');\n\tthis.table.className = style;\n\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.div.style.touchAction = 'none';\n\t}\n\t\n\t// Workaround for table size problems in FF\n\tif (width != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.width = width + 'px'; \n\t\t}\n\t\t\n\t\tthis.table.style.width = width + 'px';\n\t} \n\t\n\tif (height != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.height = height + 'px';\n\t\t}\n\t\t\n\t\tthis.table.style.height = height + 'px';\n\t}\t\t\n\t\n\t// Creates title row\n\tvar tbody = document.createElement('tbody');\n\tvar tr = document.createElement('tr');\n\t\n\tthis.title = document.createElement('td');\n\tthis.title.className = style + 'Title';\n\t\n\tthis.buttons = document.createElement('div');\n\tthis.buttons.style.position = 'absolute';\n\tthis.buttons.style.display = 'inline-block';\n\tthis.buttons.style.right = '4px';\n\tthis.buttons.style.top = '5px';\n\tthis.title.appendChild(this.buttons);\n\t\n\ttr.appendChild(this.title);\n\ttbody.appendChild(tr);\n\t\n\t// Creates content row and table cell\n\ttr = document.createElement('tr');\n\tthis.td = document.createElement('td');\n\tthis.td.className = style + 'Pane';\n\t\n\tif (document.documentMode == 7)\n\t{\n\t\tthis.td.style.height = '100%';\n\t}\n\n\tthis.contentWrapper = document.createElement('div');\n\tthis.contentWrapper.className = style + 'Pane';\n\tthis.contentWrapper.style.width = '100%';\n\tthis.contentWrapper.appendChild(this.content);\n\n\t// Workaround for div around div restricts height\n\t// of inner div if outerdiv has hidden overflow\n\tif (mxClient.IS_QUIRKS || this.content.nodeName.toUpperCase() != 'DIV')\n\t{\n\t\tthis.contentWrapper.style.height = '100%';\n\t}\n\n\t// Puts all content into the DOM\n\tthis.td.appendChild(this.contentWrapper);\n\ttr.appendChild(this.td);\n\ttbody.appendChild(tr);\n\tthis.table.appendChild(tbody);\n\tthis.div.appendChild(this.table);\n\t\n\t// Puts the window on top of other windows when clicked\n\tvar activator = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t});\n\t\n\tmxEvent.addGestureListeners(this.title, activator);\n\tmxEvent.addGestureListeners(this.table, activator);\n\n\tthis.hide();\n};\n\n/**\n * Function: setTitle\n * \n * Sets the window title to the given string. HTML markup inside the title\n * will be escaped.\n */\nmxWindow.prototype.setTitle = function(title)\n{\n\t// Removes all text content nodes (normally just one)\n\tvar child = this.title.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar next = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tchild.parentNode.removeChild(child);\n\t\t}\n\t\t\n\t\tchild = next;\n\t}\n\t\n\tmxUtils.write(this.title, title || '');\n\tthis.title.appendChild(this.buttons);\n};\n\n/**\n * Function: setScrollable\n * \n * Sets if the window contents should be scrollable.\n */\nmxWindow.prototype.setScrollable = function(scrollable)\n{\n\t// Workaround for hang in Presto 2.5.22 (Opera 10.5)\n\tif (navigator.userAgent.indexOf('Presto/2.5') < 0)\n\t{\n\t\tif (scrollable)\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'auto';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: activate\n * \n * Puts the window on top of all other windows.\n */\nmxWindow.prototype.activate = function()\n{\n\tif (mxWindow.activeWindow != this)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(this.getElement());\n\t\tvar index = (style != null) ? style.zIndex : 3;\n\n\t\tif (mxWindow.activeWindow)\n\t\t{\n\t\t\tvar elt = mxWindow.activeWindow.getElement();\n\t\t\t\n\t\t\tif (elt != null && elt.style != null)\n\t\t\t{\n\t\t\t\telt.style.zIndex = index;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar previousWindow = mxWindow.activeWindow;\n\t\tthis.getElement().style.zIndex = parseInt(index) + 1;\n\t\tmxWindow.activeWindow = this;\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ACTIVATE, 'previousWindow', previousWindow));\n\t}\n};\n\n/**\n * Function: getElement\n * \n * Returuns the outermost DOM node that makes up the window.\n */\nmxWindow.prototype.getElement = function()\n{\n\treturn this.div;\n};\n\n/**\n * Function: fit\n * \n * Makes sure the window is inside the client area of the window.\n */\nmxWindow.prototype.fit = function()\n{\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: isResizable\n * \n * Returns true if the window is resizable.\n */\nmxWindow.prototype.isResizable = function()\n{\n\tif (this.resize != null)\n\t{\n\t\treturn this.resize.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setResizable\n * \n * Sets if the window should be resizable. To avoid interference with some\n * built-in features of IE10 and later, the use of the following code is\n * recommended if there are resizable <mxWindow>s in the page:\n * \n * (code)\n * if (mxClient.IS_POINTER)\n * {\n *   document.body.style.msTouchAction = 'none';\n * }\n * (end)\n */\nmxWindow.prototype.setResizable = function(resizable)\n{\n\tif (resizable)\n\t{\n\t\tif (this.resize == null)\n\t\t{\n\t\t\tthis.resize = document.createElement('img');\n\t\t\tthis.resize.style.position = 'absolute';\n\t\t\tthis.resize.style.bottom = '2px';\n\t\t\tthis.resize.style.right = '2px';\n\n\t\t\tthis.resize.setAttribute('src', this.resizeImage);\n\t\t\tthis.resize.style.cursor = 'nw-resize';\n\t\t\t\n\t\t\tvar startX = null;\n\t\t\tvar startY = null;\n\t\t\tvar width = null;\n\t\t\tvar height = null;\n\t\t\t\n\t\t\tvar start = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// LATER: pointerdown starting on border of resize does start\n\t\t\t\t// the drag operation but does not fire consecutive events via\n\t\t\t\t// one of the listeners below (does pan instead).\n\t\t\t\t// Workaround: document.body.style.msTouchAction = 'none'\n\t\t\t\tthis.activate();\n\t\t\t\tstartX = mxEvent.getClientX(evt);\n\t\t\t\tstartY = mxEvent.getClientY(evt);\n\t\t\t\twidth = this.div.offsetWidth;\n\t\t\t\theight = this.div.offsetHeight;\n\t\t\t\t\n\t\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_START, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\n\t\t\t\t\tthis.setSize(width + dx, height + dy);\n\t\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tstartX = null;\n\t\t\t\t\tstartY = null;\n\t\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_END, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(this.resize, start, dragHandler, dropHandler);\n\t\t\tthis.div.appendChild(this.resize);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tthis.resize.style.display = 'inline';\n\t\t}\n\t}\n\telse if (this.resize != null)\n\t{\n\t\tthis.resize.style.display = 'none';\n\t}\n};\n\t\n/**\n * Function: setSize\n * \n * Sets the size of the window.\n */\nmxWindow.prototype.setSize = function(width, height)\n{\n\twidth = Math.max(this.minimumSize.width, width);\n\theight = Math.max(this.minimumSize.height, height);\n\n\t// Workaround for table size problems in FF\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.div.style.width =  width + 'px';\n\t\tthis.div.style.height = height + 'px';\n\t}\n\t\n\tthis.table.style.width =  width + 'px';\n\tthis.table.style.height = height + 'px';\n\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n};\n\t\n/**\n * Function: setMinimizable\n * \n * Sets if the window is minimizable.\n */\nmxWindow.prototype.setMinimizable = function(minimizable)\n{\n\tthis.minimize.style.display = (minimizable) ? '' : 'none';\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns an <mxRectangle> that specifies the size for the minimized window.\n * A width or height of 0 means keep the existing width or height. This\n * implementation returns the height of the window title and keeps the width.\n */\nmxWindow.prototype.getMinimumSize = function()\n{\n\treturn new mxRectangle(0, 0, 0, this.title.offsetHeight);\n};\n\n/**\n * Function: installMinimizeHandler\n * \n * Installs the event listeners required for minimizing the window.\n */\nmxWindow.prototype.installMinimizeHandler = function()\n{\n\tthis.minimize = document.createElement('img');\n\t\n\tthis.minimize.setAttribute('src', this.minimizeImage);\n\tthis.minimize.setAttribute('title', 'Minimize');\n\tthis.minimize.style.cursor = 'pointer';\n\tthis.minimize.style.marginLeft = '2px';\n\tthis.minimize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.minimize);\n\t\n\tvar minimized = false;\n\tvar maxDisplay = null;\n\tvar height = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (!minimized)\n\t\t{\n\t\t\tminimized = true;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.normalizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Normalize');\n\t\t\tthis.contentWrapper.style.display = 'none';\n\t\t\tmaxDisplay = this.maximize.style.display;\n\t\t\t\n\t\t\tthis.maximize.style.display = 'none';\n\t\t\theight = this.table.style.height;\n\t\t\t\n\t\t\tvar minSize = this.getMinimumSize();\n\t\t\t\n\t\t\tif (minSize.height > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = minSize.height + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = minSize.height + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (minSize.width > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = minSize.width + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.width = minSize.width + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MINIMIZE, 'event', evt));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tminimized = false;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.minimizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Minimize');\n\t\t\tthis.contentWrapper.style.display = ''; // default\n\t\t\tthis.maximize.style.display = maxDisplay;\n\t\t\t\n\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.div.style.height = height;\n\t\t\t}\n\t\t\t\n\t\t\tthis.table.style.height = height;\n\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t}\n\t\t\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tmxEvent.addGestureListeners(this.minimize, funct);\n};\n\t\n/**\n * Function: setMaximizable\n * \n * Sets if the window is maximizable.\n */\nmxWindow.prototype.setMaximizable = function(maximizable)\n{\n\tthis.maximize.style.display = (maximizable) ? '' : 'none';\n};\n\n/**\n * Function: installMaximizeHandler\n * \n * Installs the event listeners required for maximizing the window.\n */\nmxWindow.prototype.installMaximizeHandler = function()\n{\n\tthis.maximize = document.createElement('img');\n\t\n\tthis.maximize.setAttribute('src', this.maximizeImage);\n\tthis.maximize.setAttribute('title', 'Maximize');\n\tthis.maximize.style.cursor = 'default';\n\tthis.maximize.style.marginLeft = '2px';\n\tthis.maximize.style.cursor = 'pointer';\n\tthis.maximize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.maximize);\n\t\n\tvar maximized = false;\n\tvar x = null;\n\tvar y = null;\n\tvar height = null;\n\tvar width = null;\n\tvar minDisplay = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (this.maximize.style.display != 'none')\n\t\t{\n\t\t\tif (!maximized)\n\t\t\t{\n\t\t\t\tmaximized = true;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.normalizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Normalize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tminDisplay = this.minimize.style.display;\n\t\t\t\tthis.minimize.style.display = 'none';\n\t\t\t\t\n\t\t\t\t// Saves window state\n\t\t\t\tx = parseInt(this.div.style.left);\n\t\t\t\ty = parseInt(this.div.style.top);\n\t\t\t\theight = this.table.style.height;\n\t\t\t\twidth = this.table.style.width;\n\n\t\t\t\tthis.div.style.left = '0px';\n\t\t\t\tthis.div.style.top = '0px';\n\t\t\t\tvar docHeight = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight || 0);\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\t\tthis.div.style.height = (docHeight - 2) + 'px';\n\t\t\t\t}\n\n\t\t\t\tthis.table.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\tthis.table.style.height = (docHeight - 2) + 'px';\n\t\t\t\t\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MAXIMIZE, 'event', evt));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmaximized = false;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.maximizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Maximize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tthis.minimize.style.display = minDisplay;\n\n\t\t\t\t// Restores window state\n\t\t\t\tthis.div.style.left = x+'px';\n\t\t\t\tthis.div.style.top = y+'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = height;\n\t\t\t\t\tthis.div.style.width = width;\n\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = height;\n\t\t\t\tthis.table.style.width = width;\n\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n\t\n\tmxEvent.addGestureListeners(this.maximize, funct);\n\tmxEvent.addListener(this.title, 'dblclick', funct);\n};\n\t\n/**\n * Function: installMoveHandler\n * \n * Installs the event listeners required for moving the window.\n */\nmxWindow.prototype.installMoveHandler = function()\n{\n\tthis.title.style.cursor = 'move';\n\t\n\tmxEvent.addGestureListeners(this.title,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar startX = mxEvent.getClientX(evt);\n\t\t\tvar startY = mxEvent.getClientY(evt);\n\t\t\tvar x = this.getX();\n\t\t\tvar y = this.getY();\n\t\t\t\t\t\t\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\t\t\tthis.setLocation(x + dx, y + dy);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_END, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_START, 'event', evt));\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.title.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: setLocation\n * \n * Sets the upper, left corner of the window.\n */\n mxWindow.prototype.setLocation = function(x, y)\n {\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n };\n\n/**\n * Function: getX\n *\n * Returns the current position on the x-axis.\n */\nmxWindow.prototype.getX = function()\n{\n\treturn parseInt(this.div.style.left);\n};\n\n/**\n * Function: getY\n *\n * Returns the current position on the y-axis.\n */\nmxWindow.prototype.getY = function()\n{\n\treturn parseInt(this.div.style.top);\n};\n\n/**\n * Function: installCloseHandler\n *\n * Adds the <closeImage> as a new image node in <closeImg> and installs the\n * <close> event.\n */\nmxWindow.prototype.installCloseHandler = function()\n{\n\tthis.closeImg = document.createElement('img');\n\t\n\tthis.closeImg.setAttribute('src', this.closeImage);\n\tthis.closeImg.setAttribute('title', 'Close');\n\tthis.closeImg.style.marginLeft = '2px';\n\tthis.closeImg.style.cursor = 'pointer';\n\tthis.closeImg.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.closeImg);\n\n\tmxEvent.addGestureListeners(this.closeImg,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CLOSE, 'event', evt));\n\t\t\t\n\t\t\tif (this.destroyOnClose)\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.setVisible(false);\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n};\n\n/**\n * Function: setImage\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * image - URL of the image to be used.\n */\nmxWindow.prototype.setImage = function(image)\n{\n\tthis.image = document.createElement('img');\n\tthis.image.setAttribute('src', image);\n\tthis.image.setAttribute('align', 'left');\n\tthis.image.style.marginRight = '4px';\n\tthis.image.style.marginLeft = '0px';\n\tthis.image.style.marginTop = '-2px';\n\t\n\tthis.title.insertBefore(this.image, this.title.firstChild);\n};\n\n/**\n * Function: setClosable\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * closable - Boolean specifying if the window should be closable.\n */\nmxWindow.prototype.setClosable = function(closable)\n{\n\tthis.closeImg.style.display = (closable) ? '' : 'none';\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the window is visible.\n */\nmxWindow.prototype.isVisible = function()\n{\n\tif (this.div != null)\n\t{\n\t\treturn this.div.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setVisible\n *\n * Shows or hides the window depending on the given flag.\n * \n * Parameters:\n * \n * visible - Boolean indicating if the window should be made visible.\n */\nmxWindow.prototype.setVisible = function(visible)\n{\n\tif (this.div != null && this.isVisible() != visible)\n\t{\n\t\tif (visible)\n\t\t{\n\t\t\tthis.show();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.hide();\n\t\t}\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the window.\n */\nmxWindow.prototype.show = function()\n{\n\tthis.div.style.display = '';\n\tthis.activate();\n\t\n\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\n\tif (!mxClient.IS_QUIRKS && (style.overflow == 'auto' || this.resize != null) &&\n\t\tthis.contentWrapper.style.display != 'none')\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n};\n\n/**\n * Function: hide\n *\n * Hides the window.\n */\nmxWindow.prototype.hide = function()\n{\n\tthis.div.style.display = 'none';\n\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n};\n\n/**\n * Function: destroy\n *\n * Destroys the window and removes all associated resources. Fires a\n * <destroy> event prior to destroying the window.\n */\nmxWindow.prototype.destroy = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.DESTROY));\n\t\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\tthis.div.parentNode.removeChild(this.div);\n\t\tthis.div = null;\n\t}\n\t\n\tthis.title = null;\n\tthis.content = null;\n\tthis.contentWrapper = null;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxForm\n * \n * A simple class for creating HTML forms.\n * \n * Constructor: mxForm\n * \n * Creates a HTML table using the specified classname.\n */\nfunction mxForm(className)\n{\n\tthis.table = document.createElement('table');\n\tthis.table.className = className;\n\tthis.body = document.createElement('tbody');\n\t\n\tthis.table.appendChild(this.body);\n};\n\n/**\n * Variable: table\n * \n * Holds the DOM node that represents the table.\n */\nmxForm.prototype.table = null;\n\n/**\n * Variable: body\n * \n * Holds the DOM node that represents the tbody (table body). New rows\n * can be added to this object using DOM API.\n */\nmxForm.prototype.body = false;\n\n/**\n * Function: getTable\n * \n * Returns the table that contains this form.\n */\nmxForm.prototype.getTable = function()\n{\n\treturn this.table;\n};\n\n/**\n * Function: addButtons\n * \n * Helper method to add an OK and Cancel button using the respective\n * functions.\n */\nmxForm.prototype.addButtons = function(okFunct, cancelFunct)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\ttr.appendChild(td);\n\ttd = document.createElement('td');\n\n\t// Adds the ok button\n\tvar button = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('ok') || 'OK');\n\ttd.appendChild(button);\n\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tokFunct();\n\t});\n\t\n\t// Adds the cancel button\n\tbutton = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('cancel') || 'Cancel');\n\ttd.appendChild(button);\n\t\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tcancelFunct();\n\t});\n\t\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n};\n\n/**\n * Function: addText\n * \n * Adds an input for the given name, type and value and returns it.\n */\nmxForm.prototype.addText = function(name, value, type)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', type || 'text');\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCheckbox\n * \n * Adds a checkbox for the given name and value and returns the textfield.\n */\nmxForm.prototype.addCheckbox = function(name, value)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', 'checkbox');\n\tthis.addField(name, input);\n\n\t// IE can only change the checked value if the input is inside the DOM\n\tif (value)\n\t{\n\t\tinput.checked = true;\n\t}\n\n\treturn input;\n};\n\n/**\n * Function: addTextarea\n * \n * Adds a textarea for the given name and value and returns the textarea.\n */\nmxForm.prototype.addTextarea = function(name, value, rows)\n{\n\tvar input = document.createElement('textarea');\n\t\n\tif (mxClient.IS_NS)\n\t{\n\t\trows--;\n\t}\n\t\n\tinput.setAttribute('rows', rows || 2);\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCombo\n * \n * Adds a combo for the given name and returns the combo.\n */\nmxForm.prototype.addCombo = function(name, isMultiSelect, size)\n{\n\tvar select = document.createElement('select');\n\t\n\tif (size != null)\n\t{\n\t\tselect.setAttribute('size', size);\n\t}\n\t\n\tif (isMultiSelect)\n\t{\n\t\tselect.setAttribute('multiple', 'true');\n\t}\n\t\n\treturn this.addField(name, select);\n};\n\n/**\n * Function: addOption\n * \n * Adds an option for the given label to the specified combo.\n */\nmxForm.prototype.addOption = function(combo, label, value, isSelected)\n{\n\tvar option = document.createElement('option');\n\t\n\tmxUtils.writeln(option, label);\n\toption.setAttribute('value', value);\n\t\n\tif (isSelected)\n\t{\n\t\toption.setAttribute('selected', isSelected);\n\t}\n\t\n\tcombo.appendChild(option);\n};\n\n/**\n * Function: addField\n * \n * Adds a new row with the name and the input field in two columns and\n * returns the given input.\n */\nmxForm.prototype.addField = function(name, input)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\tmxUtils.write(td, name);\n\ttr.appendChild(td);\n\t\n\ttd = document.createElement('td');\n\ttd.appendChild(input);\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n\t\n\treturn input;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImage\n *\n * Encapsulates the URL, width and height of an image.\n * \n * Constructor: mxImage\n * \n * Constructs a new image.\n */\nfunction mxImage(src, width, height)\n{\n\tthis.src = src;\n\tthis.width = width;\n\tthis.height = height;\n};\n\n/**\n * Variable: src\n *\n * String that specifies the URL of the image.\n */\nmxImage.prototype.src = null;\n\n/**\n * Variable: width\n *\n * Integer that specifies the width of the image.\n */\nmxImage.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Integer that specifies the height of the image.\n */\nmxImage.prototype.height = null;\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDivResizer\n * \n * Maintains the size of a div element in Internet Explorer. This is a\n * workaround for the right and bottom style being ignored in IE.\n * \n * If you need a div to cover the scrollwidth and -height of a document,\n * then you can use this class as follows:\n * \n * (code)\n * var resizer = new mxDivResizer(background);\n * resizer.getDocumentHeight = function()\n * {\n *   return document.body.scrollHeight;\n * }\n * resizer.getDocumentWidth = function()\n * {\n *   return document.body.scrollWidth;\n * }\n * resizer.resize();\n * (end)\n * \n * Constructor: mxDivResizer\n * \n * Constructs an object that maintains the size of a div\n * element when the window is being resized. This is only\n * required for Internet Explorer as it ignores the respective\n * stylesheet information for DIV elements.\n * \n * Parameters:\n * \n * div - Reference to the DOM node whose size should be maintained.\n * container - Optional Container that contains the div. Default is the\n * window.\n */\nfunction mxDivResizer(div, container)\n{\n\tif (div.nodeName.toLowerCase() == 'div')\n\t{\n\t\tif (container == null)\n\t\t{\n\t\t\tcontainer = window;\n\t\t}\n\n\t\tthis.div = div;\n\t\tvar style = mxUtils.getCurrentStyle(div);\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tthis.resizeWidth = style.width == 'auto';\n\t\t\tthis.resizeHeight = style.height == 'auto';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(container, 'resize',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (!this.handlingResize)\n\t\t\t\t{\n\t\t\t\t\tthis.handlingResize = true;\n\t\t\t\t\tthis.resize();\n\t\t\t\t\tthis.handlingResize = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tthis.resize();\n\t}\n};\n\n/**\n * Function: resizeWidth\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.resizeWidth = true;\n\n/**\n * Function: resizeHeight\n * \n * Boolean specifying if the height should be updated.\n */\nmxDivResizer.prototype.resizeHeight = true;\n\n/**\n * Function: handlingResize\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.handlingResize = false;\n\n/**\n * Function: resize\n * \n * Updates the style of the DIV after the window has been resized.\n */\nmxDivResizer.prototype.resize = function()\n{\n\tvar w = this.getDocumentWidth();\n\tvar h = this.getDocumentHeight();\n\n\tvar l = parseInt(this.div.style.left);\n\tvar r = parseInt(this.div.style.right);\n\tvar t = parseInt(this.div.style.top);\n\tvar b = parseInt(this.div.style.bottom);\n\t\n\tif (this.resizeWidth &&\n\t\t!isNaN(l) &&\n\t\t!isNaN(r) &&\n\t\tl >= 0 &&\n\t\tr >= 0 &&\n\t\tw - r - l > 0)\n\t{\n\t\tthis.div.style.width = (w - r - l)+'px';\n\t}\n\t\n\tif (this.resizeHeight &&\n\t\t!isNaN(t) &&\n\t\t!isNaN(b) &&\n\t\tt >= 0 &&\n\t\tb >= 0 &&\n\t\th - t - b > 0)\n\t{\n\t\tthis.div.style.height = (h - t - b)+'px';\n\t}\n};\n\n/**\n * Function: getDocumentWidth\n * \n * Hook for subclassers to return the width of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentWidth = function()\n{\n\treturn document.body.clientWidth;\n};\n\n/**\n * Function: getDocumentHeight\n * \n * Hook for subclassers to return the height of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentHeight = function()\n{\n\treturn document.body.clientHeight;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDragSource\n * \n * Wrapper to create a drag source from a DOM element so that the element can\n * be dragged over a graph and dropped into the graph as a new cell.\n * \n * Problem is that in the dropHandler the current preview location is not\n * available, so the preview and the dropHandler must match.\n * \n * Constructor: mxDragSource\n * \n * Constructs a new drag source for the given element.\n */\nfunction mxDragSource(element, dropHandler)\n{\n\tthis.element = element;\n\tthis.dropHandler = dropHandler;\n\t\n\t// Handles a drag gesture on the element\n\tmxEvent.addGestureListeners(element, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseDown(evt);\n\t}));\n\t\n\t// Prevents native drag and drop\n\tmxEvent.addListener(element, 'dragstart', function(evt)\n\t{\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tthis.eventConsumer = function(sender, evt)\n\t{\n\t\tvar evtName = evt.getProperty('eventName');\n\t\tvar me = evt.getProperty('event');\n\t\t\n\t\tif (evtName != mxEvent.MOUSE_DOWN)\n\t\t{\n\t\t\tme.consume();\n\t\t}\n\t};\n};\n\n/**\n * Variable: element\n *\n * Reference to the DOM node which was made draggable.\n */\nmxDragSource.prototype.element = null;\n\n/**\n * Variable: dropHandler\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dropHandler = null;\n\n/**\n * Variable: dragOffset\n *\n * <mxPoint> that specifies the offset of the <dragElement>. Default is null.\n */\nmxDragSource.prototype.dragOffset = null;\n\n/**\n * Variable: dragElement\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dragElement = null;\n\n/**\n * Variable: previewElement\n *\n * Optional <mxRectangle> that specifies the unscaled size of the preview.\n */\nmxDragSource.prototype.previewElement = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if this drag source is enabled. Default is true.\n */\nmxDragSource.prototype.enabled = true;\n\n/**\n * Variable: currentGraph\n *\n * Reference to the <mxGraph> that is the current drop target.\n */\nmxDragSource.prototype.currentGraph = null;\n\n/**\n * Variable: currentDropTarget\n *\n * Holds the current drop target under the mouse.\n */\nmxDragSource.prototype.currentDropTarget = null;\n\n/**\n * Variable: currentPoint\n *\n * Holds the current drop location.\n */\nmxDragSource.prototype.currentPoint = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentGuide = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentHighlight = null;\n\n/**\n * Variable: autoscroll\n *\n * Specifies if the graph should scroll automatically. Default is true.\n */\nmxDragSource.prototype.autoscroll = true;\n\n/**\n * Variable: guidesEnabled\n *\n * Specifies if <mxGuide> should be enabled. Default is true.\n */\nmxDragSource.prototype.guidesEnabled = true;\n\n/**\n * Variable: gridEnabled\n *\n * Specifies if the grid should be allowed. Default is true.\n */\nmxDragSource.prototype.gridEnabled = true;\n\n/**\n * Variable: highlightDropTargets\n *\n * Specifies if drop targets should be highlighted. Default is true.\n */\nmxDragSource.prototype.highlightDropTargets = true;\n\n/**\n * Variable: dragElementZIndex\n * \n * ZIndex for the drag element. Default is 100.\n */\nmxDragSource.prototype.dragElementZIndex = 100;\n\n/**\n * Variable: dragElementOpacity\n * \n * Opacity of the drag element in %. Default is 70.\n */\nmxDragSource.prototype.dragElementOpacity = 70;\n\n/**\n * Variable: checkEventSource\n * \n * Whether the event source should be checked in <graphContainerEvent>. Default\n * is true.\n */\nmxDragSource.prototype.checkEventSource = true;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxDragSource.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxDragSource.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isGuidesEnabled\n * \n * Returns <guidesEnabled>.\n */\nmxDragSource.prototype.isGuidesEnabled = function()\n{\n\treturn this.guidesEnabled;\n};\n\n/**\n * Function: setGuidesEnabled\n * \n * Sets <guidesEnabled>.\n */\nmxDragSource.prototype.setGuidesEnabled = function(value)\n{\n\tthis.guidesEnabled = value;\n};\n\n/**\n * Function: isGridEnabled\n * \n * Returns <gridEnabled>.\n */\nmxDragSource.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Sets <gridEnabled>.\n */\nmxDragSource.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: getGraphForEvent\n * \n * Returns the graph for the given mouse event. This implementation returns\n * null.\n */\nmxDragSource.prototype.getGraphForEvent = function(evt)\n{\n\treturn null;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.getDropTarget = function(graph, x, y, evt)\n{\n\treturn graph.getCellAt(x, y);\n};\n\n/**\n * Function: createDragElement\n * \n * Creates and returns a clone of the <dragElementPrototype> or the <element>\n * if the former is not defined.\n */\nmxDragSource.prototype.createDragElement = function(evt)\n{\n\treturn this.element.cloneNode(true);\n};\n\n/**\n * Function: createPreviewElement\n * \n * Creates and returns an element which can be used as a preview in the given\n * graph.\n */\nmxDragSource.prototype.createPreviewElement = function(graph)\n{\n\treturn null;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this drag source is active.\n */\nmxDragSource.prototype.isActive = function()\n{\n\treturn this.mouseMoveHandler != null;\n};\n\n/**\n * Function: reset\n * \n * Stops and removes everything and restores the state of the object.\n */\nmxDragSource.prototype.reset = function()\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\t\n\tthis.removeDragElement();\n\tthis.removeListeners();\n\tthis.stopDrag();\n};\n\n/**\n * Function: mouseDown\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n * \n * To ignore popup menu events for a drag source, this function can be\n * overridden as follows.\n * \n * (code)\n * var mouseDown = dragSource.mouseDown;\n * \n * dragSource.mouseDown = function(evt)\n * {\n *   if (!mxEvent.isPopupTrigger(evt))\n *   {\n *     mouseDown.apply(this, arguments);\n *   }\n * };\n * (end)\n */\nmxDragSource.prototype.mouseDown = function(evt)\n{\n\tif (this.enabled && !mxEvent.isConsumed(evt) && this.mouseMoveHandler == null)\n\t{\n\t\tthis.startDrag(evt);\n\t\tthis.mouseMoveHandler = mxUtils.bind(this, this.mouseMove);\n\t\tthis.mouseUpHandler = mxUtils.bind(this, this.mouseUp);\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t\n\t\tif (mxClient.IS_TOUCH && !mxEvent.isMouseEvent(evt))\n\t\t{\n\t\t\tthis.eventSource = mxEvent.getSource(evt);\n\t\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t}\n\t}\n};\n\n/**\n * Function: startDrag\n * \n * Creates the <dragElement> using <createDragElement>.\n */\nmxDragSource.prototype.startDrag = function(evt)\n{\n\tthis.dragElement = this.createDragElement(evt);\n\tthis.dragElement.style.position = 'absolute';\n\tthis.dragElement.style.zIndex = this.dragElementZIndex;\n\tmxUtils.setOpacity(this.dragElement, this.dragElementOpacity);\n\n\tif (this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.dragElement.style.pointerEvents = 'none';\n\t}\n};\n\n/**\n * Function: stopDrag\n * \n * Invokes <removeDragElement>.\n */\nmxDragSource.prototype.stopDrag = function()\n{\n\t// LATER: This used to have a mouse event. If that is still needed we need to add another\n\t// final call to the DnD protocol to add a cleanup step in the case of escape press, which\n\t// is not associated with a mouse event and which currently calles this method.\n\tthis.removeDragElement();\n};\n\n/**\n * Function: removeDragElement\n * \n * Removes and destroys the <dragElement>.\n */\nmxDragSource.prototype.removeDragElement = function()\n{\n\tif (this.dragElement != null)\n\t{\n\t\tif (this.dragElement.parentNode != null)\n\t\t{\n\t\t\tthis.dragElement.parentNode.removeChild(this.dragElement);\n\t\t}\n\t\t\n\t\tthis.dragElement = null;\n\t}\n};\n\n/**\n * Function: getElementForEvent\n * \n * Returns the topmost element under the given event.\n */\nmxDragSource.prototype.getElementForEvent = function(evt)\n{\n\treturn ((mxEvent.isTouchEvent(evt) || mxEvent.isPenEvent(evt)) ?\n\t\t\tdocument.elementFromPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt)) :\n\t\t\t\tmxEvent.getSource(evt));\n};\n\n/**\n * Function: graphContainsEvent\n * \n * Returns true if the given graph contains the given event.\n */\nmxDragSource.prototype.graphContainsEvent = function(graph, evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin();\n\tvar elt = this.getElementForEvent(evt);\n\t\n\tif (this.checkEventSource)\n\t{\n\t\twhile (elt != null && elt != graph.container)\n\t\t{\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\n\t// Checks if event is inside the bounds of the graph container\n\treturn elt != null && x >= offset.x - origin.x && y >= offset.y - origin.y &&\n\t\tx <= offset.x - origin.x + graph.container.offsetWidth &&\n\t\ty <= offset.y - origin.y + graph.container.offsetHeight;\n};\n\n/**\n * Function: mouseMove\n * \n * Gets the graph for the given event using <getGraphForEvent>, updates the\n * <currentGraph>, calling <dragEnter> and <dragExit> on the new and old graph,\n * respectively, and invokes <dragOver> if <currentGraph> is not null.\n */\nmxDragSource.prototype.mouseMove = function(evt)\n{\n\tvar graph = this.getGraphForEvent(evt);\n\t\n\t// Checks if event is inside the bounds of the graph container\n\tif (graph != null && !this.graphContainsEvent(graph, evt))\n\t{\n\t\tgraph = null;\n\t}\n\n\tif (graph != this.currentGraph)\n\t{\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragExit(this.currentGraph, evt);\n\t\t}\n\t\t\n\t\tthis.currentGraph = graph;\n\t\t\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragEnter(this.currentGraph, evt);\n\t\t}\n\t}\n\t\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragOver(this.currentGraph, evt);\n\t}\n\n\tif (this.dragElement != null && (this.previewElement == null || this.previewElement.style.visibility != 'visible'))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\t\n\t\tif (this.dragElement.parentNode == null)\n\t\t{\n\t\t\tdocument.body.appendChild(this.dragElement);\n\t\t}\n\n\t\tthis.dragElement.style.visibility = 'visible';\n\t\t\n\t\tif (this.dragOffset != null)\n\t\t{\n\t\t\tx += this.dragOffset.x;\n\t\t\ty += this.dragOffset.y;\n\t\t}\n\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tthis.dragElement.style.left = (x + offset.x) + 'px';\n\t\tthis.dragElement.style.top = (y + offset.y) + 'px';\n\t}\n\telse if (this.dragElement != null)\n\t{\n\t\tthis.dragElement.style.visibility = 'hidden';\n\t}\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: mouseUp\n * \n * Processes the mouse up event and invokes <drop>, <dragExit> and <stopDrag>\n * as required.\n */\nmxDragSource.prototype.mouseUp = function(evt)\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tif (this.currentPoint != null && (this.previewElement == null ||\n\t\t\tthis.previewElement.style.visibility != 'hidden'))\n\t\t{\n\t\t\tvar scale = this.currentGraph.view.scale;\n\t\t\tvar tr = this.currentGraph.view.translate;\n\t\t\tvar x = this.currentPoint.x / scale - tr.x;\n\t\t\tvar y = this.currentPoint.y / scale - tr.y;\n\t\t\t\n\t\t\tthis.drop(this.currentGraph, evt, this.currentDropTarget, x, y);\n\t\t}\n\t\t\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\n\tthis.stopDrag();\n\tthis.removeListeners();\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: removeListeners\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.removeListeners = function()\n{\n\tif (this.eventSource != null)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\tthis.eventSource = null;\n\t}\n\t\n\tmxEvent.removeGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\tthis.mouseMoveHandler = null;\n\tthis.mouseUpHandler = null;\n};\n\n/**\n * Function: dragEnter\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.dragEnter = function(graph, evt)\n{\n\tgraph.isMouseDown = true;\n\tgraph.isMouseTrigger = mxEvent.isMouseEvent(evt);\n\tthis.previewElement = this.createPreviewElement(graph);\n\t\n\tif (this.previewElement != null && this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.previewElement.style.pointerEvents = 'none';\n\t}\n\t\n\t// Guide is only needed if preview element is used\n\tif (this.isGuidesEnabled() && this.previewElement != null)\n\t{\n\t\tthis.currentGuide = new mxGuide(graph, graph.graphHandler.getGuideStates());\n\t}\n\t\n\tif (this.highlightDropTargets)\n\t{\n\t\tthis.currentHighlight = new mxCellHighlight(graph, mxConstants.DROP_TARGET_COLOR);\n\t}\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.eventConsumer);\n};\n\n/**\n * Function: dragExit\n * \n * Deactivates the given graph as a drop target.\n */\nmxDragSource.prototype.dragExit = function(graph, evt)\n{\n\tthis.currentDropTarget = null;\n\tthis.currentPoint = null;\n\tgraph.isMouseDown = false;\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.removeListener(this.eventConsumer);\n\t\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode != null)\n\t\t{\n\t\t\tthis.previewElement.parentNode.removeChild(this.previewElement);\n\t\t}\n\t\t\n\t\tthis.previewElement = null;\n\t}\n\t\n\tif (this.currentGuide != null)\n\t{\n\t\tthis.currentGuide.destroy();\n\t\tthis.currentGuide = null;\n\t}\n\t\n\tif (this.currentHighlight != null)\n\t{\n\t\tthis.currentHighlight.destroy();\n\t\tthis.currentHighlight = null;\n\t}\n};\n\n/**\n * Function: dragOver\n * \n * Implements autoscroll, updates the <currentPoint>, highlights any drop\n * targets and updates the preview.\n */\nmxDragSource.prototype.dragOver = function(graph, evt)\n{\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin(graph.container);\n\tvar x = mxEvent.getClientX(evt) - offset.x + origin.x - graph.panDx;\n\tvar y = mxEvent.getClientY(evt) - offset.y + origin.y - graph.panDy;\n\n\tif (graph.autoScroll && (this.autoscroll == null || this.autoscroll))\n\t{\n\t\tgraph.scrollPointToVisible(x, y, graph.autoExtend);\n\t}\n\n\t// Highlights the drop target under the mouse\n\tif (this.currentHighlight != null && graph.isDropEnabled())\n\t{\n\t\tthis.currentDropTarget = this.getDropTarget(graph, x, y, evt);\n\t\tvar state = graph.getView().getState(this.currentDropTarget);\n\t\tthis.currentHighlight.highlight(state);\n\t}\n\n\t// Updates the location of the preview\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode == null)\n\t\t{\n\t\t\tgraph.container.appendChild(this.previewElement);\n\t\t\t\n\t\t\tthis.previewElement.style.zIndex = '3';\n\t\t\tthis.previewElement.style.position = 'absolute';\n\t\t}\n\t\t\n\t\tvar gridEnabled = this.isGridEnabled() && graph.isGridEnabledEvent(evt);\n\t\tvar hideGuide = true;\n\n\t\t// Grid and guides\n\t\tif (this.currentGuide != null && this.currentGuide.isEnabledForEvent(evt))\n\t\t{\n\t\t\t// LATER: HTML preview appears smaller than SVG preview\n\t\t\tvar w = parseInt(this.previewElement.style.width);\n\t\t\tvar h = parseInt(this.previewElement.style.height);\n\t\t\tvar bounds = new mxRectangle(0, 0, w, h);\n\t\t\tvar delta = new mxPoint(x, y);\n\t\t\tdelta = this.currentGuide.move(bounds, delta, gridEnabled, true);\n\t\t\thideGuide = false;\n\t\t\tx = delta.x;\n\t\t\ty = delta.y;\n\t\t}\n\t\telse if (gridEnabled)\n\t\t{\n\t\t\tvar scale = graph.view.scale;\n\t\t\tvar tr = graph.view.translate;\n\t\t\tvar off = graph.gridSize / 2;\n\t\t\tx = (graph.snap(x / scale - tr.x - off) + tr.x) * scale;\n\t\t\ty = (graph.snap(y / scale - tr.y - off) + tr.y) * scale;\n\t\t}\n\t\t\n\t\tif (this.currentGuide != null && hideGuide)\n\t\t{\n\t\t\tthis.currentGuide.hide();\n\t\t}\n\t\t\n\t\tif (this.previewOffset != null)\n\t\t{\n\t\t\tx += this.previewOffset.x;\n\t\t\ty += this.previewOffset.y;\n\t\t}\n\n\t\tthis.previewElement.style.left = Math.round(x) + 'px';\n\t\tthis.previewElement.style.top = Math.round(y) + 'px';\n\t\tthis.previewElement.style.visibility = 'visible';\n\t}\n\t\n\tthis.currentPoint = new mxPoint(x, y);\n};\n\n/**\n * Function: drop\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.drop = function(graph, evt, dropTarget, x, y)\n{\n\tthis.dropHandler.apply(this, arguments);\n\t\n\t// Had to move this to after the insert because it will\n\t// affect the scrollbars of the window in IE to try and\n\t// make the complete container visible.\n\t// LATER: Should be made optional.\n\tif (graph.container.style.visibility != 'hidden')\n\t{\n\t\tgraph.container.focus();\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxToolbar\n * \n * Creates a toolbar inside a given DOM node. The toolbar may contain icons,\n * buttons and combo boxes.\n * \n * Event: mxEvent.SELECT\n * \n * Fires when an item was selected in the toolbar. The <code>function</code>\n * property contains the function that was selected in <selectMode>.\n * \n * Constructor: mxToolbar\n * \n * Constructs a toolbar in the specified container.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nfunction mxToolbar(container)\n{\n\tthis.container = container;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxToolbar.prototype = new mxEventSource();\nmxToolbar.prototype.constructor = mxToolbar;\n\n/**\n * Variable: container\n * \n * Reference to the DOM nodes that contains the toolbar.\n */\nmxToolbar.prototype.container = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxToolbar.prototype.enabled = true;\n\n/**\n * Variable: noReset\n * \n * Specifies if <resetMode> requires a forced flag of true for resetting\n * the current mode in the toolbar. Default is false. This is set to true\n * if the toolbar item is double clicked to avoid a reset after a single\n * use of the item.\n */\nmxToolbar.prototype.noReset = false;\n\n/**\n * Variable: updateDefaultMode\n * \n * Boolean indicating if the default mode should be the last selected\n * switch mode or the first inserted switch mode. Default is true, that\n * is the last selected switch mode is the default mode. The default mode\n * is the mode to be selected after a reset of the toolbar. If this is\n * false, then the default mode is the first inserted mode item regardless\n * of what was last selected. Otherwise, the selected item after a reset is\n * the previously selected item.\n */\nmxToolbar.prototype.updateDefaultMode = true;\n\n/**\n * Function: addItem\n * \n * Adds the given function as an image with the specified title and icon\n * and returns the new image node.\n * \n * Parameters:\n * \n * title - Optional string that is used as the tooltip.\n * icon - Optional URL of the image to be used. If no URL is given, then a\n * button is created.\n * funct - Function to execute on a mouse click.\n * pressedIcon - Optional URL of the pressed image. Default is a gray\n * background.\n * style - Optional style classname. Default is mxToolbarItem.\n * factoryMethod - Optional factory method for popup menu, eg.\n * function(menu, evt, cell) { menu.addItem('Hello, World!'); }\n */\nmxToolbar.prototype.addItem = function(title, icon, funct, pressedIcon, style, factoryMethod)\n{\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\tvar initialClassName = style || ((factoryMethod != null) ?\n\t\t\t'mxToolbarMode' : 'mxToolbarItem');\n\timg.className = initialClassName;\n\timg.setAttribute('src', icon);\n\t\n\tif (title != null)\n\t{\n\t\tif (icon != null)\n\t\t{\n\t\t\timg.setAttribute('title', title);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.write(img, title);\n\t\t}\n\t}\n\t\n\tthis.container.appendChild(img);\n\n\t// Invokes the function on a click on the toolbar item\n\tif (funct != null)\n\t{\n\t\tmxEvent.addListener(img, 'click', funct);\n\t\t\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(img, 'touchend', funct);\n\t\t}\n\t}\n\n\tvar mouseHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', icon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = '';\n\t\t}\n\t});\n\n\t// Highlights the toolbar item with a gray background\n\t// while it is being clicked with the mouse\n\tmxEvent.addGestureListeners(img, mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', pressedIcon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = 'gray';\n\t\t}\n\t\t\n\t\t// Popup Menu\n\t\tif (factoryMethod != null)\n\t\t{\n\t\t\tif (this.menu == null)\n\t\t\t{\n\t\t\t\tthis.menu = new mxPopupMenu();\n\t\t\t\tthis.menu.init();\n\t\t\t}\n\t\t\t\n\t\t\tvar last = this.currentImg;\n\t\t\t\n\t\t\tif (this.menu.isMenuShowing())\n\t\t\t{\n\t\t\t\tthis.menu.hideMenu();\n\t\t\t}\n\t\t\t\n\t\t\tif (last != img)\n\t\t\t{\n\t\t\t\t// Redirects factory method to local factory method\n\t\t\t\tthis.currentImg = img;\n\t\t\t\tthis.menu.factoryMethod = factoryMethod;\n\t\t\t\t\n\t\t\t\tvar point = new mxPoint(\n\t\t\t\t\timg.offsetLeft,\n\t\t\t\t\timg.offsetTop + img.offsetHeight);\n\t\t\t\tthis.menu.popup(point.x, point.y, null, evt);\n\n\t\t\t\t// Sets and overrides to restore classname\n\t\t\t\tif (this.menu.isMenuShowing())\n\t\t\t\t{\n\t\t\t\t\timg.className = initialClassName + 'Selected';\n\t\t\t\t\t\n\t\t\t\t\tthis.menu.hideMenu = function()\n\t\t\t\t\t{\n\t\t\t\t\t\tmxPopupMenu.prototype.hideMenu.apply(this);\n\t\t\t\t\t\timg.className = initialClassName;\n\t\t\t\t\t\tthis.currentImg = null;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}), null, mouseHandler);\n\n\tmxEvent.addListener(img, 'mouseout', mouseHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given style. The element\n * is placed inside a DIV with the mxToolbarComboContainer style classname.\n * \n * Parameters:\n * \n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addCombo = function(style)\n{\n\tvar div = document.createElement('div');\n\tdiv.style.display = 'inline';\n\tdiv.className = 'mxToolbarComboContainer';\n\t\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tdiv.appendChild(select);\n\t\n\tthis.container.appendChild(div);\n\t\n\treturn select;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given title as the\n * default element. The selection is reset to this element after each\n * change.\n * \n * Parameters:\n * \n * title - String that specifies the title of the default element.\n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addActionCombo = function(title, style)\n{\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tthis.addOption(select, title, null);\n\t\n\tmxEvent.addListener(select, 'change', function(evt)\n\t{\n\t\tvar value = select.options[select.selectedIndex];\n\t\tselect.selectedIndex = 0;\n\t\t\n\t\tif (value.funct != null)\n\t\t{\n\t\t\tvalue.funct(evt);\n\t\t}\n\t});\n\t\n\tthis.container.appendChild(select);\n\t\n\treturn select;\n};\n\n/**\n * Function: addOption\n * \n * Adds and returns a new OPTION element inside the given SELECT element.\n * If the given value is a function then it is stored in the option's funct\n * field.\n * \n * Parameters:\n * \n * combo - SELECT element that will contain the new entry.\n * title - String that specifies the title of the option.\n * value - Specifies the value associated with this option.\n */\nmxToolbar.prototype.addOption = function(combo, title, value)\n{\n\tvar option = document.createElement('option');\n\tmxUtils.writeln(option, title);\n\t\n\tif (typeof(value) == 'function')\n\t{\n\t\toption.funct = value;\n\t}\n\telse\n\t{\n\t\toption.setAttribute('value', value);\n\t}\n\t\n\tcombo.appendChild(option);\n\t\n\treturn option;\n};\n\n/**\n * Function: addSwitchMode\n * \n * Adds a new selectable item to the toolbar. Only one switch mode item may\n * be selected at a time. The currently selected item is the default item\n * after a reset of the toolbar.\n */\nmxToolbar.prototype.addSwitchMode = function(title, icon, funct, pressedIcon, style)\n{\n\tvar img = document.createElement('img');\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\t\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t{\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t}\n\t\t\n\t\tif (this.updateDefaultMode)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t}\n\t\t\n\t\tthis.selectedMode = img;\n\t\t\n\t\tvar tmp = img.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\timg.altIcon = img.getAttribute('src');\n\t\t\timg.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.className = img.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT));\n\t\tfunct();\n\t}));\n\t\n\tthis.container.appendChild(img);\n\t\n\tif (this.defaultMode == null)\n\t{\n\t\tthis.defaultMode = img;\n\t\t\n\t\t// Function should fire only once so\n\t\t// do not pass it with the select event\n\t\tthis.selectMode(img);\n\t\tfunct();\n\t}\n\t\n\treturn img;\n};\n\n/**\n * Function: addMode\n * \n * Adds a new item to the toolbar. The selection is typically reset after\n * the item has been consumed, for example by adding a new vertex to the\n * graph. The reset is not carried out if the item is double clicked.\n * \n * The function argument uses the following signature: funct(evt, cell) where\n * evt is the native mouse event and cell is the cell under the mouse.\n */\nmxToolbar.prototype.addMode = function(title, icon, funct, pressedIcon, style, toggle)\n{\n\ttoggle = (toggle != null) ? toggle : true;\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\t\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tif (this.enabled && toggle)\n\t{\n\t\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = false;\n\t\t}));\n\t\t\n\t\tmxEvent.addListener(img, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = true;\n\t\t}));\n\t\t\n\t\tif (this.defaultMode == null)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t\tthis.defaultFunction = funct;\n\t\t\tthis.selectMode(img, funct);\n\t\t}\n\t}\n\n\tthis.container.appendChild(img);\t\t\t\t\t\n\n\treturn img;\n};\n\n/**\n * Function: selectMode\n * \n * Resets the state of the previously selected mode and displays the given\n * DOM node as selected. This function fires a select event with the given\n * function as a parameter.\n */\nmxToolbar.prototype.selectMode = function(domNode, funct)\n{\n\tif (this.selectedMode != domNode)\n\t{\n\t\tif (this.selectedMode != null)\n\t\t{\n\t\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.selectedMode = domNode;\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT, \"function\", funct));\n\t}\n};\n\n/**\n * Function: resetMode\n * \n * Selects the default mode and resets the state of the previously selected\n * mode.\n */\nmxToolbar.prototype.resetMode = function(forced)\n{\n\tif ((forced || !this.noReset) && this.selectedMode != this.defaultMode)\n\t{\n\t\t// The last selected switch mode will be activated\n\t\t// so the function was already executed and is\n\t\t// no longer required here\n\t\tthis.selectMode(this.defaultMode, this.defaultFunction);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds the specifies image as a separator.\n * \n * Parameters:\n * \n * icon - URL of the separator icon.\n */\nmxToolbar.prototype.addSeparator = function(icon)\n{\n\treturn this.addItem(null, icon, null);\n};\n\n/**\n * Function: addBreak\n * \n * Adds a break to the container.\n */\nmxToolbar.prototype.addBreak = function()\n{\n\tmxUtils.br(this.container);\n};\n\n/**\n * Function: addLine\n * \n * Adds a horizontal line to the container.\n */\nmxToolbar.prototype.addLine = function()\n{\n\tvar hr = document.createElement('hr');\n\t\n\thr.style.marginRight = '6px';\n\thr.setAttribute('size', '1');\n\t\n\tthis.container.appendChild(hr);\n};\n\n/**\n * Function: destroy\n * \n * Removes the toolbar and all its associated resources.\n */\nmxToolbar.prototype.destroy = function ()\n{\n\tmxEvent.release(this.container);\n\tthis.container = null;\n\tthis.defaultMode = null;\n\tthis.defaultFunction = null;\n\tthis.selectedMode = null;\n\t\n\tif (this.menu != null)\n\t{\n\t\tthis.menu.destroy();\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoableEdit\n * \n * Implements a composite undoable edit. Here is an example for a custom change\n * which gets executed via the model:\n * \n * (code)\n * function CustomChange(model, name)\n * {\n *   this.model = model;\n *   this.name = name;\n *   this.previous = name;\n * };\n * \n * CustomChange.prototype.execute = function()\n * {\n *   var tmp = this.model.name;\n *   this.model.name = this.previous;\n *   this.previous = tmp;\n * };\n * \n * var name = prompt('Enter name');\n * graph.model.execute(new CustomChange(graph.model, name));\n * (end)\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n * \n * Event: mxEvent.START_EDIT\n * \n * Fires before a set of changes will be executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after a set of changeswas executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Constructor: mxUndoableEdit\n * \n * Constructs a new undoable edit for the given source.\n */\nfunction mxUndoableEdit(source, significant)\n{\n\tthis.source = source;\n\tthis.changes = [];\n\tthis.significant = (significant != null) ? significant : true;\n};\n\n/**\n * Variable: source\n * \n * Specifies the source of the edit.\n */\nmxUndoableEdit.prototype.source = null;\n\n/**\n * Variable: changes\n * \n * Array that contains the changes that make up this edit. The changes are\n * expected to either have an undo and redo function, or an execute\n * function. Default is an empty array.\n */\nmxUndoableEdit.prototype.changes = null;\n\n/**\n * Variable: significant\n * \n * Specifies if the undoable change is significant.\n * Default is true.\n */\nmxUndoableEdit.prototype.significant = null;\n\n/**\n * Variable: undone\n * \n * Specifies if this edit has been undone. Default is false.\n */\nmxUndoableEdit.prototype.undone = false;\n\n/**\n * Variable: redone\n * \n * Specifies if this edit has been redone. Default is false.\n */\nmxUndoableEdit.prototype.redone = false;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the this edit contains no changes.\n */\nmxUndoableEdit.prototype.isEmpty = function()\n{\n\treturn this.changes.length == 0;\n};\n\n/**\n * Function: isSignificant\n * \n * Returns <significant>.\n */\nmxUndoableEdit.prototype.isSignificant = function()\n{\n\treturn this.significant;\n};\n\n/**\n * Function: add\n * \n * Adds the specified change to this edit. The change is an object that is\n * expected to either have an undo and redo, or an execute function.\n */\nmxUndoableEdit.prototype.add = function(change)\n{\n\tthis.changes.push(change);\n};\n\n/**\n * Function: notify\n * \n * Hook to notify any listeners of the changes after an <undo> or <redo>\n * has been carried out. This implementation is empty.\n */\nmxUndoableEdit.prototype.notify = function() { };\n\n/**\n * Function: die\n * \n * Hook to free resources after the edit has been removed from the command\n * history. This implementation is empty.\n */\nmxUndoableEdit.prototype.die = function() { };\n\n/**\n * Function: undo\n * \n * Undoes all changes in this edit.\n */\nmxUndoableEdit.prototype.undo = function()\n{\n\tif (!this.undone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = count - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.undo != null)\n\t\t\t{\n\t\t\t\tchange.undo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = true;\n\t\tthis.redone = false;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n/**\n * Function: redo\n * \n * Redoes all changes in this edit.\n */\nmxUndoableEdit.prototype.redo = function()\n{\n\tif (!this.redone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.redo != null)\n\t\t\t{\n\t\t\t\tchange.redo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = false;\n\t\tthis.redone = true;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoManager\n *\n * Implements a command history. When changing the graph model, an\n * <mxUndoableChange> object is created at the start of the transaction (when\n * model.beginUpdate is called). All atomic changes are then added to this\n * object until the last model.endUpdate call, at which point the\n * <mxUndoableEdit> is dispatched in an event, and added to the history inside\n * <mxUndoManager>. This is done by an event listener in\n * <mxEditor.installUndoHandler>.\n * \n * Each atomic change of the model is represented by an object (eg.\n * <mxRootChange>, <mxChildChange>, <mxTerminalChange> etc) which contains the\n * complete undo information. The <mxUndoManager> also listens to the\n * <mxGraphView> and stores it's changes to the current root as insignificant\n * undoable changes, so that drilling (step into, step up) is undone.\n * \n * This means when you execute an atomic change on the model, then change the\n * current root on the view and click undo, the change of the root will be\n * undone together with the change of the model so that the display represents\n * the state at which the model was changed. However, these changes are not\n * transmitted for sharing as they do not represent a state change.\n *\n * Example:\n * \n * When adding an undo manager to a graph, make sure to add it\n * to the model and the view as well to maintain a consistent\n * display across multiple undo/redo steps.\n *\n * (code)\n * var undoManager = new mxUndoManager();\n * var listener = function(sender, evt)\n * {\n *   undoManager.undoableEditHappened(evt.getProperty('edit'));\n * };\n * graph.getModel().addListener(mxEvent.UNDO, listener);\n * graph.getView().addListener(mxEvent.UNDO, listener);\n * (end)\n * \n * The code creates a function that informs the undoManager\n * of an undoable edit and binds it to the undo event of\n * <mxGraphModel> and <mxGraphView> using\n * <mxEventSource.addListener>.\n * \n * Event: mxEvent.CLEAR\n * \n * Fires after <clear> was invoked. This event has no properties.\n * \n * Event: mxEvent.UNDO\n * \n * Fires afer a significant edit was undone in <undo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was undone.\n * \n * Event: mxEvent.REDO\n * \n * Fires afer a significant edit was redone in <redo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was redone.\n * \n * Event: mxEvent.ADD\n * \n * Fires after an undoable edit was added to the history. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was added.\n * \n * Constructor: mxUndoManager\n *\n * Constructs a new undo manager with the given history size. If no history\n * size is given, then a default size of 100 steps is used.\n */\nfunction mxUndoManager(size)\n{\n\tthis.size = (size != null) ? size : 100;\n\tthis.clear();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUndoManager.prototype = new mxEventSource();\nmxUndoManager.prototype.constructor = mxUndoManager;\n\n/**\n * Variable: size\n * \n * Maximum command history size. 0 means unlimited history. Default is\n * 100.\n */\nmxUndoManager.prototype.size = null;\n\n/**\n * Variable: history\n * \n * Array that contains the steps of the command history.\n */\nmxUndoManager.prototype.history = null;\n\n/**\n * Variable: indexOfNextAdd\n * \n * Index of the element to be added next.\n */\nmxUndoManager.prototype.indexOfNextAdd = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the history is empty.\n */\nmxUndoManager.prototype.isEmpty = function()\n{\n\treturn this.history.length == 0;\n};\n\n/**\n * Function: clear\n * \n * Clears the command history.\n */\nmxUndoManager.prototype.clear = function()\n{\n\tthis.history = [];\n\tthis.indexOfNextAdd = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.CLEAR));\n};\n\n/**\n * Function: canUndo\n * \n * Returns true if an undo is possible.\n */\nmxUndoManager.prototype.canUndo = function()\n{\n\treturn this.indexOfNextAdd > 0;\n};\n\n/**\n * Function: undo\n * \n * Undoes the last change.\n */\nmxUndoManager.prototype.undo = function()\n{\n    while (this.indexOfNextAdd > 0)\n    {\n        var edit = this.history[--this.indexOfNextAdd];\n        edit.undo();\n\n\t\tif (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: canRedo\n * \n * Returns true if a redo is possible.\n */\nmxUndoManager.prototype.canRedo = function()\n{\n\treturn this.indexOfNextAdd < this.history.length;\n};\n\n/**\n * Function: redo\n * \n * Redoes the last change.\n */\nmxUndoManager.prototype.redo = function()\n{\n    var n = this.history.length;\n    \n    while (this.indexOfNextAdd < n)\n    {\n        var edit =  this.history[this.indexOfNextAdd++];\n        edit.redo();\n        \n        if (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.REDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: undoableEditHappened\n * \n * Method to be called to add new undoable edits to the <history>.\n */\nmxUndoManager.prototype.undoableEditHappened = function(undoableEdit)\n{\n\tthis.trim();\n\t\n\tif (this.size > 0 &&\n\t\tthis.size == this.history.length)\n\t{\n\t\tthis.history.shift();\n\t}\n\t\n\tthis.history.push(undoableEdit);\n\tthis.indexOfNextAdd = this.history.length;\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'edit', undoableEdit));\n};\n\n/**\n * Function: trim\n * \n * Removes all pending steps after <indexOfNextAdd> from the history,\n * invoking die on each edit. This is called from <undoableEditHappened>.\n */\nmxUndoManager.prototype.trim = function()\n{\n\tif (this.history.length > this.indexOfNextAdd)\n\t{\n\t\tvar edits = this.history.splice(this.indexOfNextAdd,\n\t\t\tthis.history.length - this.indexOfNextAdd);\n\t\t\t\n\t\tfor (var i = 0; i < edits.length; i++)\n\t\t{\n\t\t\tedits[i].die();\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxUrlConverter\n * \n * Converts relative and absolute URLs to absolute URLs with protocol and domain.\n */\nvar mxUrlConverter = function()\n{\n\t// Empty constructor\n};\n\n/**\n * Variable: enabled\n * \n * Specifies if the converter is enabled. Default is true.\n */\nmxUrlConverter.prototype.enabled = true;\n\n/**\n * Variable: baseUrl\n * \n * Specifies the base URL to be used as a prefix for relative URLs.\n */\nmxUrlConverter.prototype.baseUrl = null;\n\n/**\n * Variable: baseDomain\n * \n * Specifies the base domain to be used as a prefix for absolute URLs.\n */\nmxUrlConverter.prototype.baseDomain = null;\n\n/**\n * Function: updateBaseUrl\n * \n * Private helper function to update the base URL.\n */\nmxUrlConverter.prototype.updateBaseUrl = function()\n{\n\tthis.baseDomain = location.protocol + '//' + location.host;\n\tthis.baseUrl = this.baseDomain + location.pathname;\n\tvar tmp = this.baseUrl.lastIndexOf('/');\n\t\n\t// Strips filename etc\n\tif (tmp > 0)\n\t{\n\t\tthis.baseUrl = this.baseUrl.substring(0, tmp + 1);\n\t}\n};\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxUrlConverter.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxUrlConverter.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns <baseUrl>.\n */\nmxUrlConverter.prototype.getBaseUrl = function()\n{\n\treturn this.baseUrl;\n};\n\n/**\n * Function: setBaseUrl\n * \n * Sets <baseUrl>.\n */\nmxUrlConverter.prototype.setBaseUrl = function(value)\n{\n\tthis.baseUrl = value;\n};\n\n/**\n * Function: getBaseDomain\n * \n * Returns <baseDomain>.\n */\nmxUrlConverter.prototype.getBaseDomain = function()\n{\n\treturn this.baseDomain;\n},\n\n/**\n * Function: setBaseDomain\n * \n * Sets <baseDomain>.\n */\nmxUrlConverter.prototype.setBaseDomain = function(value)\n{\n\tthis.baseDomain = value;\n},\n\n/**\n * Function: isRelativeUrl\n * \n * Returns true if the given URL is relative.\n */\nmxUrlConverter.prototype.isRelativeUrl = function(url)\n{\n\treturn url.substring(0, 2) != '//' && url.substring(0, 7) != 'http://' &&\n\t\turl.substring(0, 8) != 'https://' && url.substring(0, 10) != 'data:image' &&\n\t\turl.substring(0, 7) != 'file://';\n};\n\n/**\n * Function: convert\n * \n * Converts the given URL to an absolute URL with protol and domain.\n * Relative URLs are first converted to absolute URLs.\n */\nmxUrlConverter.prototype.convert = function(url)\n{\n\tif (this.isEnabled() && this.isRelativeUrl(url))\n\t{\n\t\tif (this.getBaseUrl() == null)\n\t\t{\n\t\t\tthis.updateBaseUrl();\n\t\t}\n\t\t\n\t\tif (url.charAt(0) == '/')\n\t\t{\n\t\t\turl = this.getBaseDomain() + url;\n\t\t}\n\t\telse\n\t\t{\n\t\t\turl = this.getBaseUrl() + url;\n\t\t}\n\t}\n\t\n\treturn url;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningManager\n *\n * Implements a handler for panning.\n */\nfunction mxPanningManager(graph)\n{\n\tthis.thread = null;\n\tthis.active = false;\n\tthis.tdx = 0;\n\tthis.tdy = 0;\n\tthis.t0x = 0;\n\tthis.t0y = 0;\n\tthis.dx = 0;\n\tthis.dy = 0;\n\tthis.scrollbars = false;\n\tthis.scrollLeft = 0;\n\tthis.scrollTop = 0;\n\t\n\tthis.mouseListener =\n\t{\n\t    mouseDown: function(sender, me) { },\n\t    mouseMove: function(sender, me) { },\n\t    mouseUp: mxUtils.bind(this, function(sender, me)\n\t    {\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t    })\n\t};\n\t\n\tgraph.addMouseListener(this.mouseListener);\n\t\n\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t});\n\t\n\t// Stops scrolling on every mouseup anywhere in the document\n\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t\n\tvar createThread = mxUtils.bind(this, function()\n\t{\n\t    \tthis.scrollbars = mxUtils.hasScrollbars(graph.container);\n\t    \tthis.scrollLeft = graph.container.scrollLeft;\n\t    \tthis.scrollTop = graph.container.scrollTop;\n\t\n\t    \treturn window.setInterval(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.tdx -= this.dx;\n\t\t\tthis.tdy -= this.dy;\n\n\t\t\tif (this.scrollbars)\n\t\t\t{\n\t\t\t\tvar left = -graph.container.scrollLeft - Math.ceil(this.dx);\n\t\t\t\tvar top = -graph.container.scrollTop - Math.ceil(this.dy);\n\t\t\t\tgraph.panGraph(left, top);\n\t\t\t\tgraph.panDx = this.scrollLeft - graph.container.scrollLeft;\n\t\t\t\tgraph.panDy = this.scrollTop - graph.container.scrollTop;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t\t// TODO: Implement graph.autoExtend\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panGraph(this.getDx(), this.getDy());\n\t\t\t}\n\t\t}), this.delay);\n\t});\n\t\n\tthis.isActive = function()\n\t{\n\t\treturn active;\n\t};\n\t\n\tthis.getDx = function()\n\t{\n\t\treturn Math.round(this.tdx);\n\t};\n\t\n\tthis.getDy = function()\n\t{\n\t\treturn Math.round(this.tdy);\n\t};\n\t\n\tthis.start = function()\n\t{\n\t\tthis.t0x = graph.view.translate.x;\n\t\tthis.t0y = graph.view.translate.y;\n\t\tthis.active = true;\n\t};\n\t\n\tthis.panTo = function(x, y, w, h)\n\t{\n\t\tif (!this.active)\n\t\t{\n\t\t\tthis.start();\n\t\t}\n\t\t\n    \tthis.scrollLeft = graph.container.scrollLeft;\n    \tthis.scrollTop = graph.container.scrollTop;\n\t\t\n\t\tw = (w != null) ? w : 0;\n\t\th = (h != null) ? h : 0;\n\t\t\n\t\tvar c = graph.container;\n\t\tthis.dx = x + w - c.scrollLeft - c.clientWidth;\n\t\t\n\t\tif (this.dx < 0 && Math.abs(this.dx) < this.border)\n\t\t{\n\t\t\tthis.dx = this.border + this.dx;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dx = Math.max(this.dx, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx = 0;\n\t\t}\n\t\t\n\t\tif (this.dx == 0)\n\t\t{\n\t\t\tthis.dx = x - c.scrollLeft;\n\t\t\t\n\t\t\tif (this.dx > 0 && this.dx < this.border)\n\t\t\t{\n\t\t\t\tthis.dx = this.dx - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dx = Math.min(0, this.dx);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dx = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.dy = y + h - c.scrollTop - c.clientHeight;\n\n\t\tif (this.dy < 0 && Math.abs(this.dy) < this.border)\n\t\t{\n\t\t\tthis.dy = this.border + this.dy;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dy = Math.max(this.dy, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dy = 0;\n\t\t}\n\t\t\n\t\tif (this.dy == 0)\n\t\t{\n\t\t\tthis.dy = y - c.scrollTop;\n\t\t\t\n\t\t\tif (this.dy > 0 && this.dy < this.border)\n\t\t\t{\n\t\t\t\tthis.dy = this.dy - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dy = Math.min(0, this.dy);\n\t\t\t} \n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dy = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.dx != 0 || this.dy != 0)\n\t\t{\n\t\t\tthis.dx *= this.damper;\n\t\t\tthis.dy *= this.damper;\n\t\t\t\n\t\t\tif (this.thread == null)\n\t\t\t{\n\t\t\t\tthis.thread = createThread();\n\t\t\t}\n\t\t}\n\t\telse if (this.thread != null)\n\t\t{\n\t\t\twindow.clearInterval(this.thread);\n\t\t\tthis.thread = null;\n\t\t}\n\t};\n\t\n\tthis.stop = function()\n\t{\n\t\tif (this.active)\n\t\t{\n\t\t\tthis.active = false;\n\t\t\n\t\t\tif (this.thread != null)\n\t    \t{\n\t\t\t\twindow.clearInterval(this.thread);\n\t\t\t\tthis.thread = null;\n\t    \t}\n\t\t\t\n\t\t\tthis.tdx = 0;\n\t\t\tthis.tdy = 0;\n\t\t\t\n\t\t\tif (!this.scrollbars)\n\t\t\t{\n\t\t\t\tvar px = graph.panDx;\n\t\t\t\tvar py = graph.panDy;\n\t\t    \t\n\t\t    \tif (px != 0 || py != 0)\n\t\t    \t{\n\t\t    \t\tgraph.panGraph(0, 0);\n\t\t\t    \tgraph.view.setTranslate(this.t0x + px / graph.view.scale, this.t0y + py / graph.view.scale);\n\t\t    \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panDx = 0;\n\t\t\t\tgraph.panDy = 0;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t}\n\t\t}\n\t};\n\t\n\tthis.destroy = function()\n\t{\n\t\tgraph.removeMouseListener(this.mouseListener);\n\t\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n\t};\n};\n\n/**\n * Variable: damper\n * \n * Damper value for the panning. Default is 1/6.\n */\nmxPanningManager.prototype.damper = 1/6;\n\n/**\n * Variable: delay\n * \n * Delay in milliseconds for the panning. Default is 10.\n */\nmxPanningManager.prototype.delay = 10;\n\n/**\n * Variable: handleMouseOut\n * \n * Specifies if mouse events outside of the component should be handled. Default is true. \n */\nmxPanningManager.prototype.handleMouseOut = true;\n\n/**\n * Variable: border\n * \n * Border to handle automatic panning inside the component. Default is 0 (disabled).\n */\nmxPanningManager.prototype.border = 0;\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenu\n * \n * Basic popup menu. To add a vertical scrollbar to a given submenu, the\n * following code can be used.\n * \n * (code)\n * var mxPopupMenuShowMenu = mxPopupMenu.prototype.showMenu;\n * mxPopupMenu.prototype.showMenu = function()\n * {\n *   mxPopupMenuShowMenu.apply(this, arguments);\n *   \n *   this.div.style.overflowY = 'auto';\n *   this.div.style.overflowX = 'hidden';\n *   this.div.style.maxHeight = '160px';\n * };\n * (end)\n * \n * Constructor: mxPopupMenu\n * \n * Constructs a popupmenu.\n * \n * Event: mxEvent.SHOW\n *\n * Fires after the menu has been shown in <popup>.\n */\nfunction mxPopupMenu(factoryMethod)\n{\n\tthis.factoryMethod = factoryMethod;\n\t\n\tif (factoryMethod != null)\n\t{\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPopupMenu.prototype = new mxEventSource();\nmxPopupMenu.prototype.constructor = mxPopupMenu;\n\n/**\n * Variable: submenuImage\n * \n * URL of the image to be used for the submenu icon.\n */\nmxPopupMenu.prototype.submenuImage = mxClient.imageBasePath + '/submenu.gif';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the popupmenu and its shadow. Default is 10006.\n */\nmxPopupMenu.prototype.zIndex = 10006;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used to create the popup menu. The function takes the\n * current panning handler, the <mxCell> under the mouse and the mouse\n * event that triggered the call as arguments.\n */\nmxPopupMenu.prototype.factoryMethod = null;\n\n/**\n * Variable: useLeftButtonForPopup\n * \n * Specifies if popupmenus should be activated by clicking the left mouse\n * button. Default is false.\n */\nmxPopupMenu.prototype.useLeftButtonForPopup = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxPopupMenu.prototype.enabled = true;\n\n/**\n * Variable: itemCount\n * \n * Contains the number of times <addItem> has been called for a new menu.\n */\nmxPopupMenu.prototype.itemCount = 0;\n\n/**\n * Variable: autoExpand\n * \n * Specifies if submenus should be expanded on mouseover. Default is false.\n */\nmxPopupMenu.prototype.autoExpand = false;\n\n/**\n * Variable: smartSeparators\n * \n * Specifies if separators should only be added if a menu item follows them.\n * Default is false.\n */\nmxPopupMenu.prototype.smartSeparators = false;\n\n/**\n * Variable: labels\n * \n * Specifies if any labels should be visible. Default is true.\n */\nmxPopupMenu.prototype.labels = true;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenu.prototype.init = function()\n{\n\t// Adds the inner table\n\tthis.table = document.createElement('table');\n\tthis.table.className = 'mxPopupMenu';\n\t\n\tthis.tbody = document.createElement('tbody');\n\tthis.table.appendChild(this.tbody);\n\n\t// Adds the outer div\n\tthis.div = document.createElement('div');\n\tthis.div.className = 'mxPopupMenu';\n\tthis.div.style.display = 'inline';\n\tthis.div.style.zIndex = this.zIndex;\n\tthis.div.appendChild(this.table);\n\n\t// Disables the context menu on the outer div\n\tmxEvent.disableContextMenu(this.div);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxPopupMenu.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxPopupMenu.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isPopupTrigger\n * \n * Returns true if the given event is a popupmenu trigger for the optional\n * given cell.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the mouse event.\n */\nmxPopupMenu.prototype.isPopupTrigger = function(me)\n{\n\treturn me.isPopupTrigger() || (this.useLeftButtonForPopup && mxEvent.isLeftMouseButton(me.getEvent()));\n};\n\n/**\n * Function: addItem\n * \n * Adds the given item to the given parent item. If no parent item is specified\n * then the item is added to the top-level menu. The return value may be used\n * as the parent argument, ie. as a submenu item. The return value is the table\n * row that represents the item.\n * \n * Paramters:\n * \n * title - String that represents the title of the menu item.\n * image - Optional URL for the image icon.\n * funct - Function associated that takes a mouseup or touchend event.\n * parent - Optional item returned by <addItem>.\n * iconCls - Optional string that represents the CSS class for the image icon.\n * IconsCls is ignored if image is given.\n * enabled - Optional boolean indicating if the item is enabled. Default is true.\n * active - Optional boolean indicating if the menu should implement any event handling.\n * Default is true.\n */\nmxPopupMenu.prototype.addItem = function(title, image, funct, parent, iconCls, enabled, active)\n{\n\tparent = parent || this;\n\tthis.itemCount++;\n\t\n\t// Smart separators only added if element contains items\n\tif (parent.willAddSeparator)\n\t{\n\t\tif (parent.containsItems)\n\t\t{\n\t\t\tthis.addSeparator(parent, true);\n\t\t}\n\n\t\tparent.willAddSeparator = false;\n\t}\n\n\tparent.containsItems = true;\n\tvar tr = document.createElement('tr');\n\ttr.className = 'mxPopupMenuItem';\n\tvar col1 = document.createElement('td');\n\tcol1.className = 'mxPopupMenuIcon';\n\n\t// Adds the given image into the first column\n\tif (image != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.src = image;\n\t\tcol1.appendChild(img);\n\t}\n\telse if (iconCls != null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.className = iconCls;\n\t\tcol1.appendChild(div);\n\t}\n\t\n\ttr.appendChild(col1);\n\t\n\tif (this.labels)\n\t{\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\t\n\t\tmxUtils.write(col2, title);\n\t\tcol2.align = 'left';\n\t\ttr.appendChild(col2);\n\t\n\t\tvar col3 = document.createElement('td');\n\t\tcol3.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\tcol3.style.paddingRight = '6px';\n\t\tcol3.style.textAlign = 'right';\n\t\t\n\t\ttr.appendChild(col3);\n\t\t\n\t\tif (parent.div == null)\n\t\t{\n\t\t\tthis.createSubmenu(parent);\n\t\t}\n\t}\n\t\n\tparent.tbody.appendChild(tr);\n\n\tif (active != false && enabled != false)\n\t{\n\t\tvar currentSelection = null;\n\t\t\n\t\tmxEvent.addGestureListeners(tr,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tthis.eventReceiver = tr;\n\t\t\t\t\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\tif (document.selection != null && (mxClient.IS_QUIRKS || document.documentMode == 8))\n\t\t\t\t{\n\t\t\t\t\tcurrentSelection = document.selection.createRange();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoExpand && tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// Sets hover style because TR in IE doesn't have hover\n\t\t\t\ttr.className = 'mxPopupMenuItemHover';\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// EventReceiver avoids clicks on a submenu item\n\t\t\t\t// which has just been shown in the mousedown\n\t\t\t\tif (this.eventReceiver == tr)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != tr)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideMenu();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\t\tif (currentSelection != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Workaround for \"unspecified error\" in IE8 standards\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentSelection.select();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentSelection = null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (funct != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.eventReceiver = null;\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t})\n\t\t);\n\t\n\t\t// Resets hover style because TR in IE doesn't have hover\n\t\tmxEvent.addListener(tr, 'mouseout',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\ttr.className = 'mxPopupMenuItem';\n\t\t\t})\n\t\t);\n\t}\n\t\n\treturn tr;\n};\n\n/**\n * Adds a checkmark to the given menuitem.\n */\nmxPopupMenu.prototype.addCheckmark = function(item, img)\n{\n\tvar td = item.firstChild.nextSibling;\n\ttd.style.backgroundImage = 'url(\\'' + img + '\\')';\n\ttd.style.backgroundRepeat = 'no-repeat';\n\ttd.style.backgroundPosition = '2px 50%';\n};\n\n/**\n * Function: createSubmenu\n * \n * Creates the nodes required to add submenu items inside the given parent\n * item. This is called in <addItem> if a parent item is used for the first\n * time. This adds various DOM nodes and a <submenuImage> to the parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.createSubmenu = function(parent)\n{\n\tparent.table = document.createElement('table');\n\tparent.table.className = 'mxPopupMenu';\n\n\tparent.tbody = document.createElement('tbody');\n\tparent.table.appendChild(parent.tbody);\n\n\tparent.div = document.createElement('div');\n\tparent.div.className = 'mxPopupMenu';\n\n\tparent.div.style.position = 'absolute';\n\tparent.div.style.display = 'inline';\n\tparent.div.style.zIndex = this.zIndex;\n\t\n\tparent.div.appendChild(parent.table);\n\t\n\tvar img = document.createElement('img');\n\timg.setAttribute('src', this.submenuImage);\n\t\n\t// Last column of the submenu item in the parent menu\n\ttd = parent.firstChild.nextSibling.nextSibling;\n\ttd.appendChild(img);\n};\n\n/**\n * Function: showSubmenu\n * \n * Shows the submenu inside the given parent row.\n */\nmxPopupMenu.prototype.showSubmenu = function(parent, row)\n{\n\tif (row.div != null)\n\t{\n\t\trow.div.style.left = (parent.div.offsetLeft +\n\t\t\trow.offsetLeft+row.offsetWidth - 1) + 'px';\n\t\trow.div.style.top = (parent.div.offsetTop+row.offsetTop) + 'px';\n\t\tdocument.body.appendChild(row.div);\n\t\t\n\t\t// Moves the submenu to the left side if there is no space\n\t\tvar left = parseInt(row.div.offsetLeft);\n\t\tvar width = parseInt(row.div.offsetWidth);\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\tvar right = offset.x + (b.clientWidth || d.clientWidth);\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\trow.div.style.left = Math.max(0, (parent.div.offsetLeft - width + ((mxClient.IS_IE) ? 6 : -6))) + 'px';\n\t\t}\n\t\t\n\t\tmxUtils.fit(row.div);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds a horizontal separator in the given parent item or the top-level menu\n * if no parent is specified.\n * \n * Parameters:\n * \n * parent - Optional item returned by <addItem>.\n * force - Optional boolean to ignore <smartSeparators>. Default is false.\n */\nmxPopupMenu.prototype.addSeparator = function(parent, force)\n{\n\tparent = parent || this;\n\t\n\tif (this.smartSeparators && !force)\n\t{\n\t\tparent.willAddSeparator = true;\n\t}\n\telse if (parent.tbody != null)\n\t{\n\t\tparent.willAddSeparator = false;\n\t\tvar tr = document.createElement('tr');\n\t\t\n\t\tvar col1 = document.createElement('td');\n\t\tcol1.className = 'mxPopupMenuIcon';\n\t\tcol1.style.padding = '0 0 0 0px';\n\t\t\n\t\ttr.appendChild(col1);\n\t\t\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.style.padding = '0 0 0 0px';\n\t\tcol2.setAttribute('colSpan', '2');\n\t\n\t\tvar hr = document.createElement('hr');\n\t\thr.setAttribute('size', '1');\n\t\tcol2.appendChild(hr);\n\t\t\n\t\ttr.appendChild(col2);\n\t\t\n\t\tparent.tbody.appendChild(tr);\n\t}\n};\n\n/**\n * Function: popup\n * \n * Shows the popup menu for the given event and cell.\n * \n * Example:\n * \n * (code)\n * graph.panningHandler.popup = function(x, y, cell, evt)\n * {\n *   mxUtils.alert('Hello, World!');\n * }\n * (end)\n */\nmxPopupMenu.prototype.popup = function(x, y, cell, evt)\n{\n\tif (this.div != null && this.tbody != null && this.factoryMethod != null)\n\t{\n\t\tthis.div.style.left = x + 'px';\n\t\tthis.div.style.top = y + 'px';\n\t\t\n\t\t// Removes all child nodes from the existing menu\n\t\twhile (this.tbody.firstChild != null)\n\t\t{\n\t\t\tmxEvent.release(this.tbody.firstChild);\n\t\t\tthis.tbody.removeChild(this.tbody.firstChild);\n\t\t}\n\t\t\n\t\tthis.itemCount = 0;\n\t\tthis.factoryMethod(this, cell, evt);\n\t\t\n\t\tif (this.itemCount > 0)\n\t\t{\n\t\t\tthis.showMenu();\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n\t\t}\n\t}\n};\n\n/**\n * Function: isMenuShowing\n * \n * Returns true if the menu is showing.\n */\nmxPopupMenu.prototype.isMenuShowing = function()\n{\n\treturn this.div != null && this.div.parentNode == document.body;\n};\n\n/**\n * Function: showMenu\n * \n * Shows the menu.\n */\nmxPopupMenu.prototype.showMenu = function()\n{\n\t// Disables filter-based shadow in IE9 standards mode\n\tif (document.documentMode >= 9)\n\t{\n\t\tthis.div.style.filter = 'none';\n\t}\n\t\n\t// Fits the div inside the viewport\n\tdocument.body.appendChild(this.div);\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: hideMenu\n * \n * Removes the menu and all submenus.\n */\nmxPopupMenu.prototype.hideMenu = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.hideSubmenu(this);\n\t\tthis.containsItems = false;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n\t}\n};\n\n/**\n * Function: hideSubmenu\n * \n * Removes all submenus inside the given parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.hideSubmenu = function(parent)\n{\n\tif (parent.activeRow != null)\n\t{\n\t\tthis.hideSubmenu(parent.activeRow);\n\t\t\n\t\tif (parent.activeRow.div.parentNode != null)\n\t\t{\n\t\t\tparent.activeRow.div.parentNode.removeChild(parent.activeRow.div);\n\t\t}\n\t\t\n\t\tparent.activeRow = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenu.prototype.destroy = function()\n{\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.div = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAutoSaveManager\n * \n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n * \n * Example:\n * \n * (code)\n * var mgr = new mxAutoSaveManager(editor.graph);\n * mgr.save = function()\n * {\n *   mxLog.show();\n *   mxLog.debug('save');\n * };\n * (end)\n * \n * Constructor: mxAutoSaveManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxAutoSaveManager(graph)\n{\n\t// Notifies the manager of a change\n\tthis.changeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t\t}\n\t});\n\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAutoSaveManager.prototype = new mxEventSource();\nmxAutoSaveManager.prototype.constructor = mxAutoSaveManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxAutoSaveManager.prototype.graph = null;\n\n/**\n * Variable: autoSaveDelay\n * \n * Minimum amount of seconds between two consecutive autosaves. Eg. a\n * value of 1 (s) means the graph is not stored more than once per second.\n * Default is 10.\n */\nmxAutoSaveManager.prototype.autoSaveDelay = 10;\n\n/**\n * Variable: autoSaveThrottle\n * \n * Minimum amount of seconds between two consecutive autosaves triggered by\n * more than <autoSaveThreshhold> changes within a timespan of less than\n * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n * stored more than once per second even if there are more than\n * <autoSaveThreshold> changes within that timespan. Default is 2.\n */\nmxAutoSaveManager.prototype.autoSaveThrottle = 2;\n\n/**\n * Variable: autoSaveThreshold\n * \n * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n * means after 2 change of the graph model the autosave will trigger if the\n * condition below is true. Default is 5.\n */\nmxAutoSaveManager.prototype.autoSaveThreshold = 5;\n\n/**\n * Variable: ignoredChanges\n * \n * Counter for ignored changes in autosave.\n */\nmxAutoSaveManager.prototype.ignoredChanges = 0;\n\n/**\n * Variable: lastSnapshot\n * \n * Used for autosaving. See <autosave>.\n */\nmxAutoSaveManager.prototype.lastSnapshot = 0;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxAutoSaveManager.prototype.enabled = true;\n\n/**\n * Variable: changeHandler\n * \n * Holds the function that handles graph model changes.\n */\nmxAutoSaveManager.prototype.changeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxAutoSaveManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxAutoSaveManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxAutoSaveManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\t}\n};\n\n/**\n * Function: save\n * \n * Empty hook that is called if the graph should be saved.\n */\nmxAutoSaveManager.prototype.save = function()\n{\n\t// empty\n};\n\n/**\n * Function: graphModelChanged\n * \n * Invoked when the graph model has changed.\n */\nmxAutoSaveManager.prototype.graphModelChanged = function(changes)\n{\n\tvar now = new Date().getTime();\n\tvar dt = (now - this.lastSnapshot) / 1000;\n\t\n\tif (dt > this.autoSaveDelay ||\n\t\t(this.ignoredChanges >= this.autoSaveThreshold &&\n\t\t dt > this.autoSaveThrottle))\n\t{\n\t\tthis.save();\n\t\tthis.reset();\n\t}\n\telse\n\t{\n\t\t// Increments the number of ignored changes\n\t\tthis.ignoredChanges++;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets all counters.\n */\nmxAutoSaveManager.prototype.reset = function()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.ignoredChanges = 0;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxAutoSaveManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxAnimation\n * \n * Implements a basic animation in JavaScript.\n * \n * Constructor: mxAnimation\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxAnimation(delay)\n{\n\tthis.delay = (delay != null) ? delay : 20;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAnimation.prototype = new mxEventSource();\nmxAnimation.prototype.constructor = mxAnimation;\n\n/**\n * Variable: delay\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxAnimation.prototype.delay = null;\n\n/**\n * Variable: thread\n * \n * Reference to the thread while the animation is running.\n */\nmxAnimation.prototype.thread = null;\n\n/**\n * Function: isRunning\n * \n * Returns true if the animation is running.\n */\nmxAnimation.prototype.isRunning = function()\n{\n\treturn this.thread != null;\n};\n\n/**\n * Function: startAnimation\n *\n * Starts the animation by repeatedly invoking updateAnimation.\n */\nmxAnimation.prototype.startAnimation = function()\n{\n\tif (this.thread == null)\n\t{\n\t\tthis.thread = window.setInterval(mxUtils.bind(this, this.updateAnimation), this.delay);\n\t}\n};\n\n/**\n * Function: updateAnimation\n *\n * Hook for subclassers to implement the animation. Invoke stopAnimation\n * when finished, startAnimation to resume. This is called whenever the\n * timer fires and fires an mxEvent.EXECUTE event with no properties.\n */\nmxAnimation.prototype.updateAnimation = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE));\n};\n\n/**\n * Function: stopAnimation\n *\n * Stops the animation by deleting the timer and fires an <mxEvent.DONE>.\n */\nmxAnimation.prototype.stopAnimation = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearInterval(this.thread);\n\t\tthis.thread = null;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.DONE));\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxMorphing\n * \n * Implements animation for morphing cells. Here is an example of\n * using this class for animating the result of a layout algorithm:\n * \n * (code)\n * graph.getModel().beginUpdate();\n * try\n * {\n *   var circleLayout = new mxCircleLayout(graph);\n *   circleLayout.execute(graph.getDefaultParent());\n * }\n * finally\n * {\n *   var morph = new mxMorphing(graph);\n *   morph.addListener(mxEvent.DONE, function()\n *   {\n *     graph.getModel().endUpdate();\n *   });\n *   \n *   morph.startAnimation();\n * }\n * (end)\n * \n * Constructor: mxMorphing\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * steps - Optional number of steps in the morphing animation. Default is 6.\n * ease - Optional easing constant for the animation. Default is 1.5.\n * delay - Optional delay between the animation steps. Passed to <mxAnimation>.\n */\nfunction mxMorphing(graph, steps, ease, delay)\n{\n\tmxAnimation.call(this, delay);\n\tthis.graph = graph;\n\tthis.steps = (steps != null) ? steps : 6;\n\tthis.ease = (ease != null) ? ease : 1.5;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxMorphing.prototype = new mxAnimation();\nmxMorphing.prototype.constructor = mxMorphing;\n\n/**\n * Variable: graph\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxMorphing.prototype.graph = null;\n\n/**\n * Variable: steps\n * \n * Specifies the maximum number of steps for the morphing.\n */\nmxMorphing.prototype.steps = null;\n\n/**\n * Variable: step\n * \n * Contains the current step.\n */\nmxMorphing.prototype.step = 0;\n\n/**\n * Variable: ease\n * \n * Ease-off for movement towards the given vector. Larger values are\n * slower and smoother. Default is 4.\n */\nmxMorphing.prototype.ease = null;\n\n/**\n * Variable: cells\n * \n * Optional array of cells to be animated. If this is not specified\n * then all cells are checked and animated if they have been moved\n * in the current transaction.\n */\nmxMorphing.prototype.cells = null;\n\n/**\n * Function: updateAnimation\n *\n * Animation step.\n */\nmxMorphing.prototype.updateAnimation = function()\n{\n\tmxAnimation.prototype.updateAnimation.apply(this, arguments);\n\tvar move = new mxCellStatePreview(this.graph);\n\n\tif (this.cells != null)\n\t{\n\t\t// Animates the given cells individually without recursion\n\t\tfor (var i = 0; i < this.cells.length; i++)\n\t\t{\n\t\t\tthis.animateCell(this.cells[i], move, false);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Animates all changed cells by using recursion to find\n\t\t// the changed cells but not for the animation itself\n\t\tthis.animateCell(this.graph.getModel().getRoot(), move, true);\n\t}\n\t\n\tthis.show(move);\n\t\n\tif (move.isEmpty() || this.step++ >= this.steps)\n\t{\n\t\tthis.stopAnimation();\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the changes in the given <mxCellStatePreview>.\n */\nmxMorphing.prototype.show = function(move)\n{\n\tmove.show();\n};\n\n/**\n * Function: animateCell\n *\n * Animates the given cell state using <mxCellStatePreview.moveState>.\n */\nmxMorphing.prototype.animateCell = function(cell, move, recurse)\n{\n\tvar state = this.graph.getView().getState(cell);\n\tvar delta = null;\n\n\tif (state != null)\n\t{\n\t\t// Moves the animated state from where it will be after the model\n\t\t// change by subtracting the given delta vector from that location\n\t\tdelta = this.getDelta(state);\n\n\t\tif (this.graph.getModel().isVertex(cell) && (delta.x != 0 || delta.y != 0))\n\t\t{\n\t\t\tvar translate = this.graph.view.getTranslate();\n\t\t\tvar scale = this.graph.view.getScale();\n\t\t\t\n\t\t\tdelta.x += translate.x * scale;\n\t\t\tdelta.y += translate.y * scale;\n\t\t\t\n\t\t\tmove.moveState(state, -delta.x / this.ease, -delta.y / this.ease);\n\t\t}\n\t}\n\t\n\tif (recurse && !this.stopRecursion(state, delta))\n\t{\n\t\tvar childCount = this.graph.getModel().getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.animateCell(this.graph.getModel().getChildAt(cell, i), move, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: stopRecursion\n *\n * Returns true if the animation should not recursively find more\n * deltas for children if the given parent state has been animated.\n */\nmxMorphing.prototype.stopRecursion = function(state, delta)\n{\n\treturn delta != null && (delta.x != 0 || delta.y != 0);\n};\n\n/**\n * Function: getDelta\n *\n * Returns the vector between the current rendered state and the future\n * location of the state after the display will be updated.\n */\nmxMorphing.prototype.getDelta = function(state)\n{\n\tvar origin = this.getOriginForCell(state.cell);\n\tvar translate = this.graph.getView().getTranslate();\n\tvar scale = this.graph.getView().getScale();\n\tvar x = state.x / scale - translate.x;\n\tvar y = state.y / scale - translate.y;\n\n\treturn new mxPoint((origin.x - x) * scale, (origin.y - y) * scale);\n};\n\n/**\n * Function: getOriginForCell\n *\n * Returns the top, left corner of the given cell. TODO: Improve performance\n * by using caching inside this method as the result per cell never changes\n * during the lifecycle of this object.\n */\nmxMorphing.prototype.getOriginForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\tresult = this.getOriginForCell(parent);\n\t\t\n\t\t// TODO: Handle offsets\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (geo.relative)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null)\n\t\t\t\t{\n\t\t\t\t\tresult.x += geo.x * pgeo.width;\n\t\t\t\t\tresult.y += geo.y * pgeo.height;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (result == null)\n\t{\n\t\tvar t = this.graph.view.getTranslate();\n\t\tresult = new mxPoint(-t.x, -t.y);\n\t}\n\t\n\treturn result;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageBundle\n *\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n * \n * To add a new image bundle to an existing graph, the following code is used:\n * \n * (code)\n * var bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * (end);\n * \n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n * \n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n * \n * The keys for images are resolved in <mxGraph.postProcessCellStyle> and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n * \n * A typical value for the fallback is a MTHML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n * \n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nfunction mxImageBundle(alt)\n{\n\tthis.images = [];\n\tthis.alt = (alt != null) ? alt : false;\n};\n\n/**\n * Variable: images\n * \n * Maps from keys to images.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Variable: alt\n * \n * Specifies if the fallback representation should be returned.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Function: putImage\n * \n * Adds the specified entry to the map. The entry is an object with a value and\n * fallback property as specified in the arguments.\n */\nmxImageBundle.prototype.putImage = function(key, value, fallback)\n{\n\tthis.images[key] = {value: value, fallback: fallback};\n};\n\n/**\n * Function: getImage\n * \n * Returns the value for the given key. This returns the value\n * or fallback, depending on <alt>. The fallback is returned if\n * <alt> is true, the value is returned otherwise.\n */\nmxImageBundle.prototype.getImage = function(key)\n{\n\tvar result = null;\n\t\n\tif (key != null)\n\t{\n\t\tvar img = this.images[key];\n\t\t\n\t\tif (img != null)\n\t\t{\n\t\t\tresult = (this.alt) ? img.fallback : img.value;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageExport\n * \n * Creates a new image export instance to be used with an export canvas. Here\n * is an example that uses this class to create an image via a backend using\n * <mxXmlExportCanvas>.\n * \n * (code)\n * var xmlDoc = mxUtils.createXmlDocument();\n * var root = xmlDoc.createElement('output');\n * xmlDoc.appendChild(root);\n * \n * var xmlCanvas = new mxXmlCanvas2D(root);\n * var imgExport = new mxImageExport();\n * imgExport.drawState(graph.getView().getState(graph.model.root), xmlCanvas);\n * \n * var bounds = graph.getGraphBounds();\n * var w = Math.ceil(bounds.x + bounds.width);\n * var h = Math.ceil(bounds.y + bounds.height);\n * \n * var xml = mxUtils.getXml(root);\n * new mxXmlRequest('export', 'format=png&w=' + w +\n * \t\t'&h=' + h + '&bg=#F9F7ED&xml=' + encodeURIComponent(xml))\n * \t\t.simulate(document, '_blank');\n * (end)\n * \n * Constructor: mxImageExport\n * \n * Constructs a new image export.\n */\nfunction mxImageExport() { };\n\n/**\n * Variable: includeOverlays\n * \n * Specifies if overlays should be included in the export. Default is false.\n */\nmxImageExport.prototype.includeOverlays = false;\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.drawState = function(state, canvas)\n{\n\tif (state != null)\n\t{\n\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.drawCellState.apply(this, arguments);\n\t\t}));\n\t\t\t\t\n\t\t// Paints the overlays\n\t\tif (this.includeOverlays)\n\t\t{\n\t\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.drawOverlays.apply(this, arguments);\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.visitStatesRecursive = function(state, canvas, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvisitor(state, canvas);\n\t\t\n\t\tvar graph = state.view.graph;\n\t\tvar childCount = graph.model.getChildCount(state.cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar childState = graph.view.getState(graph.model.getChildAt(state.cell, i));\n\t\t\tthis.visitStatesRecursive(childState, canvas, visitor);\n\t\t}\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state and canvas. This returns null.\n */\nmxImageExport.prototype.getLinkForCellState = function(state, canvas)\n{\n\treturn null;\n};\n\n/**\n * Function: drawCellState\n * \n * Draws the given state to the given canvas.\n */\nmxImageExport.prototype.drawCellState = function(state, canvas)\n{\n\t// Experimental feature\n\tvar link = this.getLinkForCellState(state, canvas);\n\t\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(link);\n\t}\n\t\n\t// Paints the shape and text\n\tthis.drawShape(state, canvas);\n\tthis.drawText(state, canvas);\n\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(null);\n\t}\n};\n\n/**\n * Function: drawShape\n * \n * Draws the shape of the given state.\n */\nmxImageExport.prototype.drawShape = function(state, canvas)\n{\n\tif (state.shape instanceof mxShape && state.shape.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.shape.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawText\n * \n * Draws the text of the given state.\n */\nmxImageExport.prototype.drawText = function(state, canvas)\n{\n\tif (state.text != null && state.text.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.text.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawOverlays\n * \n * Draws the overlays for the given state. This is called if <includeOverlays>\n * is true.\n */\nmxImageExport.prototype.drawOverlays = function(state, canvas)\n{\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tif (shape instanceof mxShape)\n\t\t\t{\n\t\t\t\tshape.paint(canvas);\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAbstractCanvas2D\n *\n * Base class for all canvases. A description of the public API is available in <mxXmlCanvas2D>.\n * All color values of <mxConstants.NONE> will be converted to null in the state.\n * \n * Constructor: mxAbstractCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxAbstractCanvas2D()\n{\n\t/**\n\t * Variable: converter\n\t * \n\t * Holds the <mxUrlConverter> to convert image URLs.\n\t */\n\tthis.converter = this.createUrlConverter();\n\t\n\tthis.reset();\n};\n\n/**\n * Variable: state\n * \n * Holds the current state.\n */\nmxAbstractCanvas2D.prototype.state = null;\n\n/**\n * Variable: states\n * \n * Stack of states.\n */\nmxAbstractCanvas2D.prototype.states = null;\n\n/**\n * Variable: path\n * \n * Holds the current path as an array.\n */\nmxAbstractCanvas2D.prototype.path = null;\n\n/**\n * Variable: rotateHtml\n * \n * Switch for rotation of HTML. Default is false.\n */\nmxAbstractCanvas2D.prototype.rotateHtml = true;\n\n/**\n * Variable: lastX\n * \n * Holds the last x coordinate.\n */\nmxAbstractCanvas2D.prototype.lastX = 0;\n\n/**\n * Variable: lastY\n * \n * Holds the last y coordinate.\n */\nmxAbstractCanvas2D.prototype.lastY = 0;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'M'.\n */\nmxAbstractCanvas2D.prototype.moveOp = 'M';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'L'.\n */\nmxAbstractCanvas2D.prototype.lineOp = 'L';\n\n/**\n * Variable: quadOp\n * \n * Contains the string used for quadratic paths. Default is 'Q'.\n */\nmxAbstractCanvas2D.prototype.quadOp = 'Q';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'C'.\n */\nmxAbstractCanvas2D.prototype.curveOp = 'C';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'Z'.\n */\nmxAbstractCanvas2D.prototype.closeOp = 'Z';\n\n/**\n * Variable: pointerEvents\n * \n * Boolean value that specifies if events should be handled. Default is false.\n */\nmxAbstractCanvas2D.prototype.pointerEvents = false;\n\n/**\n * Function: createUrlConverter\n * \n * Create a new <mxUrlConverter> and returns it.\n */\nmxAbstractCanvas2D.prototype.createUrlConverter = function()\n{\n\treturn new mxUrlConverter();\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this canvas.\n */\nmxAbstractCanvas2D.prototype.reset = function()\n{\n\tthis.state = this.createState();\n\tthis.states = [];\n};\n\n/**\n * Function: createState\n * \n * Creates the state of the this canvas.\n */\nmxAbstractCanvas2D.prototype.createState = function()\n{\n\treturn {\n\t\tdx: 0,\n\t\tdy: 0,\n\t\tscale: 1,\n\t\talpha: 1,\n\t\tfillAlpha: 1,\n\t\tstrokeAlpha: 1,\n\t\tfillColor: null,\n\t\tgradientFillAlpha: 1,\n\t\tgradientColor: null,\n\t\tgradientAlpha: 1,\n\t\tgradientDirection: null,\n\t\tstrokeColor: null,\n\t\tstrokeWidth: 1,\n\t\tdashed: false,\n\t\tdashPattern: '3 3',\n\t\tfixDash: false,\n\t\tlineCap: 'flat',\n\t\tlineJoin: 'miter',\n\t\tmiterLimit: 10,\n\t\tfontColor: '#000000',\n\t\tfontBackgroundColor: null,\n\t\tfontBorderColor: null,\n\t\tfontSize: mxConstants.DEFAULT_FONTSIZE,\n\t\tfontFamily: mxConstants.DEFAULT_FONTFAMILY,\n\t\tfontStyle: 0,\n\t\tshadow: false,\n\t\tshadowColor: mxConstants.SHADOWCOLOR,\n\t\tshadowAlpha: mxConstants.SHADOW_OPACITY,\n\t\tshadowDx: mxConstants.SHADOW_OFFSET_X,\n\t\tshadowDy: mxConstants.SHADOW_OFFSET_Y,\n\t\trotation: 0,\n\t\trotationCx: 0,\n\t\trotationCy: 0\n\t};\n};\n\n/**\n * Function: format\n * \n * Rounds all numbers to integers.\n */\nmxAbstractCanvas2D.prototype.format = function(value)\n{\n\treturn Math.round(parseFloat(value));\n};\n\n/**\n * Function: addOp\n * \n * Adds the given operation to the path.\n */\nmxAbstractCanvas2D.prototype.addOp = function()\n{\n\tif (this.path != null)\n\t{\n\t\tthis.path.push(arguments[0]);\n\t\t\n\t\tif (arguments.length > 2)\n\t\t{\n\t\t\tvar s = this.state;\n\n\t\t\tfor (var i = 2; i < arguments.length; i += 2)\n\t\t\t{\n\t\t\t\tthis.lastX = arguments[i - 1];\n\t\t\t\tthis.lastY = arguments[i];\n\t\t\t\t\n\t\t\t\tthis.path.push(this.format((this.lastX + s.dx) * s.scale));\n\t\t\t\tthis.path.push(this.format((this.lastY + s.dy) * s.scale));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the given point and returns the result as an <mxPoint>.\n */\nmxAbstractCanvas2D.prototype.rotatePoint = function(x, y, theta, cx, cy)\n{\n\tvar rad = theta * (Math.PI / 180);\n\t\n\treturn mxUtils.getRotatedPoint(new mxPoint(x, y), Math.cos(rad),\n\t\tMath.sin(rad), new mxPoint(cx, cy));\n};\n\n/**\n * Function: save\n * \n * Saves the current state.\n */\nmxAbstractCanvas2D.prototype.save = function()\n{\n\tthis.states.push(this.state);\n\tthis.state = mxUtils.clone(this.state);\n};\n\n/**\n * Function: restore\n * \n * Restores the current state.\n */\nmxAbstractCanvas2D.prototype.restore = function()\n{\n\tif (this.states.length > 0)\n\t{\n\t\tthis.state = this.states.pop();\n\t}\n};\n\n/**\n * Function: setLink\n * \n * Sets the current link. Hook for subclassers.\n */\nmxAbstractCanvas2D.prototype.setLink = function(link)\n{\n\t// nop\n};\n\n/**\n * Function: scale\n * \n * Scales the current state.\n */\nmxAbstractCanvas2D.prototype.scale = function(value)\n{\n\tthis.state.scale *= value;\n\tthis.state.strokeWidth *= value;\n};\n\n/**\n * Function: translate\n * \n * Translates the current state.\n */\nmxAbstractCanvas2D.prototype.translate = function(dx, dy)\n{\n\tthis.state.dx += dx;\n\tthis.state.dy += dy;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the current state.\n */\nmxAbstractCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\t// nop\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n */\nmxAbstractCanvas2D.prototype.setAlpha = function(value)\n{\n\tthis.state.alpha = value;\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current solid fill alpha.\n */\nmxAbstractCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tthis.state.fillAlpha = value;\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n */\nmxAbstractCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tthis.state.strokeAlpha = value;\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n */\nmxAbstractCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fillColor = value;\n\tthis.state.gradientColor = null;\n};\n\n/**\n * Function: setGradient\n * \n * Sets the current gradient.\n */\nmxAbstractCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tvar s = this.state;\n\ts.fillColor = color1;\n\ts.gradientFillAlpha = (alpha1 != null) ? alpha1 : 1;\n\ts.gradientColor = color2;\n\ts.gradientAlpha = (alpha2 != null) ? alpha2 : 1;\n\ts.gradientDirection = direction;\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n */\nmxAbstractCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.strokeColor = value;\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n */\nmxAbstractCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tthis.state.strokeWidth = value;\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n */\nmxAbstractCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tthis.state.dashed = value;\n\tthis.state.fixDash = fixDash;\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern.\n */\nmxAbstractCanvas2D.prototype.setDashPattern = function(value)\n{\n\tthis.state.dashPattern = value;\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the current line cap.\n */\nmxAbstractCanvas2D.prototype.setLineCap = function(value)\n{\n\tthis.state.lineCap = value;\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the current line join.\n */\nmxAbstractCanvas2D.prototype.setLineJoin = function(value)\n{\n\tthis.state.lineJoin = value;\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the current miter limit.\n */\nmxAbstractCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tthis.state.miterLimit = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontColor = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBackgroundColor = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBorderColor = value;\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size.\n */\nmxAbstractCanvas2D.prototype.setFontSize = function(value)\n{\n\tthis.state.fontSize = parseFloat(value);\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family.\n */\nmxAbstractCanvas2D.prototype.setFontFamily = function(value)\n{\n\tthis.state.fontFamily = value;\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n */\nmxAbstractCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (value == null)\n\t{\n\t\tvalue = 0;\n\t}\n\t\n\tthis.state.fontStyle = value;\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadow = function(enabled)\n{\n\tthis.state.shadow = enabled;\n};\n\n/**\n * Function: setShadowColor\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.shadowColor = value;\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tthis.state.shadowAlpha = value;\n};\n\n/**\n * Function: setShadowOffset\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tthis.state.shadowDx = dx;\n\tthis.state.shadowDy = dy;\n};\n\n/**\n * Function: begin\n * \n * Starts a new path.\n */\nmxAbstractCanvas2D.prototype.begin = function()\n{\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n\tthis.path = [];\n};\n\n/**\n * Function: moveTo\n * \n *  Moves the current path the given coordinates.\n */\nmxAbstractCanvas2D.prototype.moveTo = function(x, y)\n{\n\tthis.addOp(this.moveOp, x, y);\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates. Uses moveTo with the op argument.\n */\nmxAbstractCanvas2D.prototype.lineTo = function(x, y)\n{\n\tthis.addOp(this.lineOp, x, y);\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n */\nmxAbstractCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tthis.addOp(this.quadOp, x1, y1, x2, y2);\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n */\nmxAbstractCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);\n};\n\n/**\n * Function: arcTo\n * \n * Adds the given arc to the current path. This is a synthetic operation that\n * is broken down into curves.\n */\nmxAbstractCanvas2D.prototype.arcTo = function(rx, ry, angle, largeArcFlag, sweepFlag, x, y)\n{\n\tvar curves = mxUtils.arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);\n\t\n\tif (curves != null)\n\t{\n\t\tfor (var i = 0; i < curves.length; i += 6) \n\t\t{\n\t\t\tthis.curveTo(curves[i], curves[i + 1], curves[i + 2],\n\t\t\t\tcurves[i + 3], curves[i + 4], curves[i + 5]);\n\t\t}\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxAbstractCanvas2D.prototype.close = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.closeOp);\n};\n\n/**\n * Function: end\n * \n * Empty implementation for backwards compatibility. This will be removed.\n */\nmxAbstractCanvas2D.prototype.end = function() { };\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlCanvas2D\n *\n * Base class for all canvases. The following methods make up the public\n * interface of the canvas 2D for all painting in mxGraph:\n * \n * - <save>, <restore>\n * - <scale>, <translate>, <rotate>\n * - <setAlpha>, <setFillAlpha>, <setStrokeAlpha>, <setFillColor>, <setGradient>,\n *   <setStrokeColor>, <setStrokeWidth>, <setDashed>, <setDashPattern>, <setLineCap>, \n *   <setLineJoin>, <setMiterLimit>\n * - <setFontColor>, <setFontBackgroundColor>, <setFontBorderColor>, <setFontSize>,\n *   <setFontFamily>, <setFontStyle>\n * - <setShadow>, <setShadowColor>, <setShadowAlpha>, <setShadowOffset>\n * - <rect>, <roundrect>, <ellipse>, <image>, <text>\n * - <begin>, <moveTo>, <lineTo>, <quadTo>, <curveTo>\n * - <stroke>, <fill>, <fillAndStroke>\n * \n * <mxAbstractCanvas2D.arcTo> is an additional method for drawing paths. This is\n * a synthetic method, meaning that it is turned into a sequence of curves by\n * default. Subclassers may add native support for arcs.\n * \n * Constructor: mxXmlCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxXmlCanvas2D(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t// Writes default settings;\n\tthis.writeDefaults();\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxXmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxXmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: compressed\n * \n * Specifies if the output should be compressed by removing redundant calls.\n * Default is true.\n */\nmxXmlCanvas2D.prototype.compressed = true;\n\n/**\n * Function: writeDefaults\n * \n * Writes the rendering defaults to <root>:\n */\nmxXmlCanvas2D.prototype.writeDefaults = function()\n{\n\tvar elem;\n\t\n\t// Writes font defaults\n\telem = this.createElement('fontfamily');\n\telem.setAttribute('family', mxConstants.DEFAULT_FONTFAMILY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('fontsize');\n\telem.setAttribute('size', mxConstants.DEFAULT_FONTSIZE);\n\tthis.root.appendChild(elem);\n\t\n\t// Writes shadow defaults\n\telem = this.createElement('shadowcolor');\n\telem.setAttribute('color', mxConstants.SHADOWCOLOR);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', mxConstants.SHADOW_OPACITY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', mxConstants.SHADOW_OFFSET_X);\n\telem.setAttribute('dy', mxConstants.SHADOW_OFFSET_Y);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: format\n * \n * Returns a formatted number with 2 decimal places.\n */\nmxXmlCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: createElement\n * \n * Creates the given element using the owner document of <root>.\n */\nmxXmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn this.root.ownerDocument.createElement(name);\n};\n\n/**\n * Function: save\n * \n * Saves the drawing state.\n */\nmxXmlCanvas2D.prototype.save = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.save.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('save'));\n};\n\n/**\n * Function: restore\n * \n * Restores the drawing state.\n */\nmxXmlCanvas2D.prototype.restore = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.restore.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('restore'));\n};\n\n/**\n * Function: scale\n * \n * Scales the output.\n * \n * Parameters:\n * \n * scale - Number that represents the scale where 1 is equal to 100%.\n */\nmxXmlCanvas2D.prototype.scale = function(value)\n{\n        var elem = this.createElement('scale');\n        elem.setAttribute('scale', value);\n        this.root.appendChild(elem);\n};\n\n/**\n * Function: translate\n * \n * Translates the output.\n * \n * Parameters:\n * \n * dx - Number that specifies the horizontal translation.\n * dy - Number that specifies the vertical translation.\n */\nmxXmlCanvas2D.prototype.translate = function(dx, dy)\n{\n\tvar elem = this.createElement('translate');\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: rotate\n * \n * Rotates and/or flips the output around a given center. (Note: Due to\n * limitations in VML, the rotation cannot be concatenated.)\n * \n * Parameters:\n * \n * theta - Number that represents the angle of the rotation (in degrees).\n * flipH - Boolean indicating if the output should be flipped horizontally.\n * flipV - Boolean indicating if the output should be flipped vertically.\n * cx - Number that represents the x-coordinate of the rotation center.\n * cy - Number that represents the y-coordinate of the rotation center.\n */\nmxXmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tvar elem = this.createElement('rotate');\n\t\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\telem.setAttribute('theta', this.format(theta));\n\t\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\t\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\t\telem.setAttribute('cx', this.format(cx));\n\t\telem.setAttribute('cy', this.format(cy));\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.alpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('alpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current fill alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new fill alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillalpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new stroke alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokealpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setGradient\n * \n * Sets the gradient. Note that the coordinates may be ignored by some implementations.\n * \n * Parameters:\n * \n * color1 - Hexadecimal representation of the start color.\n * color2 - Hexadecimal representation of the end color.\n * x - X-coordinate of the gradient region.\n * y - y-coordinate of the gradient region.\n * w - Width of the gradient region.\n * h - Height of the gradient region.\n * direction - One of <mxConstants.DIRECTION_NORTH>, <mxConstants.DIRECTION_EAST>,\n * <mxConstants.DIRECTION_SOUTH> or <mxConstants.DIRECTION_WEST>.\n * alpha1 - Optional alpha of the start color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n * alpha2 - Optional alpha of the end color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tif (color1 != null && color2 != null)\n\t{\n\t\tmxAbstractCanvas2D.prototype.setGradient.apply(this, arguments);\n\t\t\n\t\tvar elem = this.createElement('gradient');\n\t\telem.setAttribute('c1', color1);\n\t\telem.setAttribute('c2', color2);\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\t\n\t\t// Default direction is south\n\t\tif (direction != null)\n\t\t{\n\t\t\telem.setAttribute('direction', direction);\n\t\t}\n\t\t\n\t\tif (alpha1 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha1', alpha1);\n\t\t}\n\t\t\n\t\tif (alpha2 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha2', alpha2);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokecolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n * \n * Parameters:\n * \n * value - Numeric representation of the stroke width.\n */\nmxXmlCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeWidth == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeWidth.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokewidth');\n\telem.setAttribute('width', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n * \n * Parameters:\n * \n * value - Boolean that specifies if dashed lines should be enabled.\n * value - Boolean that specifies if the stroke width should be ignored\n * for the dash pattern. Default is false.\n */\nmxXmlCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashed == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashed.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashed');\n\telem.setAttribute('dashed', (value) ? '1' : '0');\n\t\n\tif (fixDash != null)\n\t{\n\t\telem.setAttribute('fixDash', (fixDash) ? '1' : '0');\n\t}\n\t\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern. Default is '3 3'.\n * \n * Parameters:\n * \n * value - String that represents the dash pattern, which is a sequence of\n * numbers defining the length of the dashes and the length of the spaces\n * between the dashes. The lengths are relative to the line width - a length\n * of 1 is equals to the line width.\n */\nmxXmlCanvas2D.prototype.setDashPattern = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashPattern == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashPattern.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashpattern');\n\telem.setAttribute('pattern', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the line cap. Default is 'flat' which corresponds to 'butt' in SVG.\n * \n * Parameters:\n * \n * value - String that represents the line cap. Possible values are flat, round\n * and square.\n */\nmxXmlCanvas2D.prototype.setLineCap = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineCap == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineCap.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linecap');\n\telem.setAttribute('cap', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the line join. Default is 'miter'.\n * \n * Parameters:\n * \n * value - String that represents the line join. Possible values are miter,\n * round and bevel.\n */\nmxXmlCanvas2D.prototype.setLineJoin = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineJoin == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineJoin.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linejoin');\n\telem.setAttribute('join', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the miter limit. Default is 10.\n * \n * Parameters:\n * \n * value - Number that represents the miter limit.\n */\nmxXmlCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.miterLimit == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setMiterLimit.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('miterlimit');\n\telem.setAttribute('limit', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color. Default is '#000000'.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBackgroundColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBackgroundColor.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontbackgroundcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBorderColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBorderColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontbordercolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size. Default is <mxConstants.DEFAULT_FONTSIZE>.\n * \n * Parameters:\n * \n * value - Numeric representation of the font size.\n */\nmxXmlCanvas2D.prototype.setFontSize = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontSize == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontSize.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontsize');\n\t\telem.setAttribute('size', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family. Default is <mxConstants.DEFAULT_FONTFAMILY>.\n * \n * Parameters:\n * \n * value - String representation of the font family. This handles the same\n * values as the CSS font-family property.\n */\nmxXmlCanvas2D.prototype.setFontFamily = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontFamily == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontFamily.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontfamily');\n\t\telem.setAttribute('family', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n * \n * Parameters:\n * \n * value - Numeric representation of the font family. This is the sum of the\n * font styles from <mxConstants>.\n */\nmxXmlCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontStyle == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontStyle.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontstyle');\n\t\telem.setAttribute('style', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables shadows.\n * \n * Parameters:\n * \n * value - Boolean that specifies if shadows should be enabled.\n */\nmxXmlCanvas2D.prototype.setShadow = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadow == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadow.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadow');\n\telem.setAttribute('enabled', (value) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowColor\n * \n * Sets the current shadow color. Default is <mxConstants.SHADOWCOLOR>.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.state.shadowColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Sets the current shadows alpha. Default is <mxConstants.SHADOW_OPACITY>.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', value);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: setShadowOffset\n * \n * Sets the current shadow offset.\n * \n * Parameters:\n * \n * dx - Number that represents the horizontal offset of the shadow.\n * dy - Number that represents the vertical offset of the shadow.\n */\nmxXmlCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowDx == dx && this.state.shadowDy == dy)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowOffset.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', dx);\n\telem.setAttribute('dy', dy);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: rect\n * \n * Puts a rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n */\nmxXmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar elem = this.createElement('rect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: roundrect\n * \n * Puts a rounded rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n * dx - Number that represents the horizontal rounding.\n * dy - Number that represents the vertical rounding.\n */\nmxXmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tvar elem = this.createElement('roundrect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: ellipse\n * \n * Puts an ellipse into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the ellipse.\n * y - Number that represents the y-coordinate of the ellipse.\n * w - Number that represents the width of the ellipse.\n * h - Number that represents the height of the ellipse.\n */\nmxXmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar elem = this.createElement('ellipse');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the image.\n * y - Number that represents the y-coordinate of the image.\n * w - Number that represents the width of the image.\n * h - Number that represents the height of the image.\n * src - String that specifies the URL of the image.\n * aspect - Boolean indicating if the aspect of the image should be preserved.\n * flipH - Boolean indicating if the image should be flipped horizontally.\n * flipV - Boolean indicating if the image should be flipped vertically.\n */\nmxXmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\tvar elem = this.createElement('image');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('src', src);\n\telem.setAttribute('aspect', (aspect) ? '1' : '0');\n\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: begin\n * \n * Starts a new path and puts it into the drawing buffer.\n */\nmxXmlCanvas2D.prototype.begin = function()\n{\n\tthis.root.appendChild(this.createElement('begin'));\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n};\n\n/**\n * Function: moveTo\n * \n * Moves the current path the given point.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the point.\n * y - Number that represents the y-coordinate of the point.\n */\nmxXmlCanvas2D.prototype.moveTo = function(x, y)\n{\n\tvar elem = this.createElement('move');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the endpoint.\n * y - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.lineTo = function(x, y)\n{\n\tvar elem = this.createElement('line');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the control point.\n * y1 - Number that represents the y-coordinate of the control point.\n * x2 - Number that represents the x-coordinate of the endpoint.\n * y2 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar elem = this.createElement('quad');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x2;\n\tthis.lastY = y2;\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the first control point.\n * y1 - Number that represents the y-coordinate of the first control point.\n * x2 - Number that represents the x-coordinate of the second control point.\n * y2 - Number that represents the y-coordinate of the second control point.\n * x3 - Number that represents the x-coordinate of the endpoint.\n * y3 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tvar elem = this.createElement('curve');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\telem.setAttribute('x3', this.format(x3));\n\telem.setAttribute('y3', this.format(y3));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x3;\n\tthis.lastY = y3;\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxXmlCanvas2D.prototype.close = function()\n{\n\tthis.root.appendChild(this.createElement('close'));\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup. Background and border color as well\n * as clipping is not available in plain text labels for VML. HTML labels\n * are not available as part of shapes with no foreignObject support in SVG\n * (eg. IE9, IE10).\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the text.\n * y - Number that represents the y-coordinate of the text.\n * w - Number that represents the available width for the text or 0 for automatic width.\n * h - Number that represents the available height for the text or 0 for automatic height.\n * str - String that specifies the text to be painted.\n * align - String that represents the horizontal alignment.\n * valign - String that represents the vertical alignment.\n * wrap - Boolean that specifies if word-wrapping is enabled. Requires w > 0.\n * format - Empty string for plain text or 'html' for HTML markup.\n * overflow - Specifies the overflow behaviour of the label. Requires w > 0 and/or h > 0.\n * clip - Boolean that specifies if the label should be clipped. Requires w > 0 and/or h > 0.\n * rotation - Number that specifies the angle of the rotation around the anchor point of the text.\n * dir - Optional string that specifies the text direction. Possible values are rtl and lrt.\n */\nmxXmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tif (mxUtils.isNode(str))\n\t\t{\n\t\t\tstr = mxUtils.getOuterHtml(str);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('text');\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\telem.setAttribute('str', str);\n\t\t\n\t\tif (align != null)\n\t\t{\n\t\t\telem.setAttribute('align', align);\n\t\t}\n\t\t\n\t\tif (valign != null)\n\t\t{\n\t\t\telem.setAttribute('valign', valign);\n\t\t}\n\t\t\n\t\telem.setAttribute('wrap', (wrap) ? '1' : '0');\n\t\t\n\t\tif (format == null)\n\t\t{\n\t\t\tformat = '';\n\t\t}\n\t\t\n\t\telem.setAttribute('format', format);\n\t\t\n\t\tif (overflow != null)\n\t\t{\n\t\t\telem.setAttribute('overflow', overflow);\n\t\t}\n\t\t\n\t\tif (clip != null)\n\t\t{\n\t\t\telem.setAttribute('clip', (clip) ? '1' : '0');\n\t\t}\n\t\t\n\t\tif (rotation != null)\n\t\t{\n\t\t\telem.setAttribute('rotation', rotation);\n\t\t}\n\t\t\n\t\tif (dir != null)\n\t\t{\n\t\t\telem.setAttribute('dir', dir);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.stroke = function()\n{\n\tthis.root.appendChild(this.createElement('stroke'));\n};\n\n/**\n * Function: fill\n * \n * Fills the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.fill = function()\n{\n\tthis.root.appendChild(this.createElement('fill'));\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills the current drawing buffer and its outline.\n */\nmxXmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.root.appendChild(this.createElement('fillstroke'));\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSvgCanvas2D\n *\n * Extends <mxAbstractCanvas2D> to implement a canvas for SVG. This canvas writes all\n * calls as SVG output to the given SVG root node.\n * \n * (code)\n * var svgDoc = mxUtils.createXmlDocument();\n * var root = (svgDoc.createElementNS != null) ?\n * \t\tsvgDoc.createElementNS(mxConstants.NS_SVG, 'svg') : svgDoc.createElement('svg');\n * \n * if (svgDoc.createElementNS == null)\n * {\n *   root.setAttribute('xmlns', mxConstants.NS_SVG);\n *   root.setAttribute('xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * else\n * {\n *   root.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * \n * var bounds = graph.getGraphBounds();\n * root.setAttribute('width', (bounds.x + bounds.width + 4) + 'px');\n * root.setAttribute('height', (bounds.y + bounds.height + 4) + 'px');\n * root.setAttribute('version', '1.1');\n * \n * svgDoc.appendChild(root);\n * \n * var svgCanvas = new mxSvgCanvas2D(root);\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>.\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * graph.view.canvas.ownerSVGElement.setAttribute('shape-rendering', 'crispEdges');\n * (end)\n * \n * Or set the respective attribute in the SVG element directly.\n * \n * Constructor: mxSvgCanvas2D\n *\n * Constructs a new SVG canvas.\n * \n * Parameters:\n * \n * root - SVG container for the output.\n * styleEnabled - Optional boolean that specifies if a style section should be\n * added. The style section sets the default font-size, font-family and\n * stroke-miterlimit globally. Default is false.\n */\nfunction mxSvgCanvas2D(root, styleEnabled)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t/**\n\t * Variable: gradients\n\t * \n\t * Local cache of gradients for quick lookups.\n\t */\n\tthis.gradients = [];\n\n\t/**\n\t * Variable: defs\n\t * \n\t * Reference to the defs section of the SVG document. Only for export.\n\t */\n\tthis.defs = null;\n\t\n\t/**\n\t * Variable: styleEnabled\n\t * \n\t * Stores the value of styleEnabled passed to the constructor.\n\t */\n\tthis.styleEnabled = (styleEnabled != null) ? styleEnabled : false;\n\t\n\tvar svg = null;\n\t\n\t// Adds optional defs section for export\n\tif (root.ownerDocument != document)\n\t{\n\t\tvar node = root;\n\n\t\t// Finds owner SVG element in XML DOM\n\t\twhile (node != null && node.nodeName != 'svg')\n\t\t{\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tsvg = node;\n\t}\n\n\tif (svg != null)\n\t{\n\t\t// Tries to get existing defs section\n\t\tvar tmp = svg.getElementsByTagName('defs');\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tthis.defs = svg.getElementsByTagName('defs')[0];\n\t\t}\n\t\t\n\t\t// Adds defs section if none exists\n\t\tif (this.defs == null)\n\t\t{\n\t\t\tthis.defs = this.createElement('defs');\n\t\t\t\n\t\t\tif (svg.firstChild != null)\n\t\t\t{\n\t\t\t\tsvg.insertBefore(this.defs, svg.firstChild);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(this.defs);\n\t\t\t}\n\t\t}\n\n\t\t// Adds stylesheet\n\t\tif (this.styleEnabled)\n\t\t{\n\t\t\tthis.defs.appendChild(this.createStyle());\n\t\t}\n\t}\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxSvgCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Capability check for DOM parser.\n */\n(function()\n{\n\tmxSvgCanvas2D.prototype.useDomParser = !mxClient.IS_IE && typeof DOMParser === 'function' && typeof XMLSerializer === 'function';\n\t\n\tif (mxSvgCanvas2D.prototype.useDomParser)\n\t{\n\t\t// Checks using a generic test text if the parsing actually works. This is a workaround\n\t\t// for older browsers where the capability check returns true but the parsing fails.\n\t\ttry\n\t\t{\n\t\t\tvar doc = new DOMParser().parseFromString('test text', 'text/html');\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = doc != null;\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = false;\n\t\t}\n\t}\n})();\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxSvgCanvas2D.prototype.node = null;\n\n/**\n * Variable: matchHtmlAlignment\n * \n * Specifies if plain text output should match the vertical HTML alignment.\n * Defaul is true.\n */\nmxSvgCanvas2D.prototype.matchHtmlAlignment = true;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxSvgCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: foEnabled\n * \n * Specifies if use of foreignObject for HTML markup is allowed. Default is true.\n */\nmxSvgCanvas2D.prototype.foEnabled = true;\n\n/**\n * Variable: foAltText\n * \n * Specifies the fallback text for unsupported foreignObjects in exported\n * documents. Default is '[Object]'. If this is set to null then no fallback\n * text is added to the exported document.\n */\nmxSvgCanvas2D.prototype.foAltText = '[Object]';\n\n/**\n * Variable: foOffset\n * \n * Offset to be used for foreignObjects.\n */\nmxSvgCanvas2D.prototype.foOffset = 0;\n\n/**\n * Variable: textOffset\n * \n * Offset to be used for text elements.\n */\nmxSvgCanvas2D.prototype.textOffset = 0;\n\n/**\n * Variable: imageOffset\n * \n * Offset to be used for image elements.\n */\nmxSvgCanvas2D.prototype.imageOffset = 0;\n\n/**\n * Variable: strokeTolerance\n * \n * Adds transparent paths for strokes.\n */\nmxSvgCanvas2D.prototype.strokeTolerance = 0;\n\n/**\n * Variable: minStrokeWidth\n * \n * Minimum stroke width for output.\n */\nmxSvgCanvas2D.prototype.minStrokeWidth = 1;\n\n/**\n * Variable: refCount\n * \n * Local counter for references in SVG export.\n */\nmxSvgCanvas2D.prototype.refCount = 0;\n\n/**\n * Variable: blockImagePointerEvents\n * \n * Specifies if a transparent rectangle should be added on top of images to absorb\n * all pointer events. Default is false. This is only needed in Firefox to disable\n * control-clicks on images.\n */\nmxSvgCanvas2D.prototype.blockImagePointerEvents = false;\n\n/**\n * Variable: lineHeightCorrection\n * \n * Correction factor for <mxConstants.LINE_HEIGHT> in HTML output. Default is 1.\n */\nmxSvgCanvas2D.prototype.lineHeightCorrection = 1;\n\n/**\n * Variable: pointerEventsValue\n * \n * Default value for active pointer events. Default is all.\n */\nmxSvgCanvas2D.prototype.pointerEventsValue = 'all';\n\n/**\n * Variable: fontMetricsPadding\n * \n * Padding to be added for text that is not wrapped to account for differences\n * in font metrics on different platforms in pixels. Default is 10.\n */\nmxSvgCanvas2D.prototype.fontMetricsPadding = 10;\n\n/**\n * Variable: cacheOffsetSize\n * \n * Specifies if offsetWidth and offsetHeight should be cached. Default is true.\n * This is used to speed up repaint of text in <updateText>.\n */\nmxSvgCanvas2D.prototype.cacheOffsetSize = true;\n\n/**\n * Function: format\n * \n * Rounds all numbers to 2 decimal points.\n */\nmxSvgCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns the URL of the page without the hash part. This needs to use href to\n * include any search part with no params (ie question mark alone). This is a\n * workaround for the fact that window.location.search is empty if there is\n * no search string behind the question mark.\n */\nmxSvgCanvas2D.prototype.getBaseUrl = function()\n{\n\tvar href = window.location.href;\n\tvar hash = href.lastIndexOf('#');\n\t\n\tif (hash > 0)\n\t{\n\t\thref = href.substring(0, hash);\n\t}\n\t\n\treturn href;\n};\n\n/**\n * Function: reset\n * \n * Returns any offsets for rendering pixels.\n */\nmxSvgCanvas2D.prototype.reset = function()\n{\n\tmxAbstractCanvas2D.prototype.reset.apply(this, arguments);\n\tthis.gradients = [];\n};\n\n/**\n * Function: createStyle\n * \n * Creates the optional style section.\n */\nmxSvgCanvas2D.prototype.createStyle = function(x)\n{\n\tvar style = this.createElement('style');\n\tstyle.setAttribute('type', 'text/css');\n\tmxUtils.write(style, 'svg{font-family:' + mxConstants.DEFAULT_FONTFAMILY +\n\t\t\t';font-size:' + mxConstants.DEFAULT_FONTSIZE +\n\t\t\t';fill:none;stroke-miterlimit:10}');\n\t\n\treturn style;\n};\n\n/**\n * Function: createElement\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createElement = function(tagName, namespace)\n{\n\tif (this.root.ownerDocument.createElementNS != null)\n\t{\n\t\treturn this.root.ownerDocument.createElementNS(namespace || mxConstants.NS_SVG, tagName);\n\t}\n\telse\n\t{\n\t\tvar elt = this.root.ownerDocument.createElement(tagName);\n\t\t\n\t\tif (namespace != null)\n\t\t{\n\t\t\telt.setAttribute('xmlns', namespace);\n\t\t}\n\t\t\n\t\treturn elt;\n\t}\n};\n\n/**\n * Function: getAlternateContent\n * \n * Returns the alternate content for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.createAlternateContent = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\tif (this.foAltText != null)\n\t{\n\t\tvar s = this.state;\n\t\tvar alt = this.createElement('text');\n\t\talt.setAttribute('x', Math.round(w / 2));\n\t\talt.setAttribute('y', Math.round((h + s.fontSize) / 2));\n\t\talt.setAttribute('fill', s.fontColor || 'black');\n\t\talt.setAttribute('text-anchor', 'middle');\n\t\talt.setAttribute('font-size', s.fontSize + 'px');\n\t\talt.setAttribute('font-family', s.fontFamily);\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t{\n\t\t\talt.setAttribute('font-weight', 'bold');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t{\n\t\t\talt.setAttribute('font-style', 'italic');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\talt.setAttribute('text-decoration', 'underline');\n\t\t}\n\t\t\n\t\tmxUtils.write(alt, this.foAltText);\n\t\t\n\t\treturn alt;\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: createGradientId\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createGradientId = function(start, end, alpha1, alpha2, direction)\n{\n\t// Removes illegal characters from gradient ID\n\tif (start.charAt(0) == '#')\n\t{\n\t\tstart = start.substring(1);\n\t}\n\t\n\tif (end.charAt(0) == '#')\n\t{\n\t\tend = end.substring(1);\n\t}\n\t\n\t// Workaround for gradient IDs not working in Safari 5 / Chrome 6\n\t// if they contain uppercase characters\n\tstart = start.toLowerCase() + '-' + alpha1;\n\tend = end.toLowerCase() + '-' + alpha2;\n\n\t// Wrong gradient directions possible?\n\tvar dir = null;\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tdir = 's';\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tdir = 'e';\n\t}\n\telse\n\t{\n\t\tvar tmp = start;\n\t\tstart = end;\n\t\tend = tmp;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tdir = 's';\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tdir = 'e';\n\t\t}\n\t}\n\t\n\treturn 'mx-gradient-' + start + '-' + end + '-' + dir;\n};\n\n/**\n * Function: getSvgGradient\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar id = this.createGradientId(start, end, alpha1, alpha2, direction);\n\tvar gradient = this.gradients[id];\n\t\n\tif (gradient == null)\n\t{\n\t\tvar svg = this.root.ownerSVGElement;\n\n\t\tvar counter = 0;\n\t\tvar tmpId = id + '-' + counter;\n\n\t\tif (svg != null)\n\t\t{\n\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t\n\t\t\twhile (gradient != null && gradient.ownerSVGElement != svg)\n\t\t\t{\n\t\t\t\ttmpId = id + '-' + counter++;\n\t\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses shorter IDs for export\n\t\t\ttmpId = 'id' + (++this.refCount);\n\t\t}\n\t\t\n\t\tif (gradient == null)\n\t\t{\n\t\t\tgradient = this.createSvgGradient(start, end, alpha1, alpha2, direction);\n\t\t\tgradient.setAttribute('id', tmpId);\n\t\t\t\n\t\t\tif (this.defs != null)\n\t\t\t{\n\t\t\t\tthis.defs.appendChild(gradient);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(gradient);\n\t\t\t}\n\t\t}\n\n\t\tthis.gradients[id] = gradient;\n\t}\n\n\treturn gradient.getAttribute('id');\n};\n\n/**\n * Function: createSvgGradient\n * \n * Creates the given SVG gradient.\n */\nmxSvgCanvas2D.prototype.createSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar gradient = this.createElement('linearGradient');\n\tgradient.setAttribute('x1', '0%');\n\tgradient.setAttribute('y1', '0%');\n\tgradient.setAttribute('x2', '0%');\n\tgradient.setAttribute('y2', '0%');\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tgradient.setAttribute('y2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tgradient.setAttribute('x2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tgradient.setAttribute('y1', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_WEST)\n\t{\n\t\tgradient.setAttribute('x1', '100%');\n\t}\n\t\n\tvar op = (alpha1 < 1) ? ';stop-opacity:' + alpha1 : '';\n\t\n\tvar stop = this.createElement('stop');\n\tstop.setAttribute('offset', '0%');\n\tstop.setAttribute('style', 'stop-color:' + start + op);\n\tgradient.appendChild(stop);\n\t\n\top = (alpha2 < 1) ? ';stop-opacity:' + alpha2 : '';\n\t\n\tstop = this.createElement('stop');\n\tstop.setAttribute('offset', '100%');\n\tstop.setAttribute('style', 'stop-color:' + end + op);\n\tgradient.appendChild(stop);\n\t\n\treturn gradient;\n};\n\n/**\n * Function: addNode\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'path')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.setAttribute('d', this.path.join(' '));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tthis.updateFill();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\t// Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=814952\n\t\t\tif (node.nodeName == 'ellipse' && mxClient.IS_FF)\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'transparent');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'none');\n\t\t\t}\n\t\t\t\n\t\t\t// Sets the actual filled state for stroke tolerance\n\t\t\tfilled = false;\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tthis.updateStroke();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\tnode.setAttribute('stroke', 'none');\n\t\t}\n\t\t\n\t\tif (s.transform != null && s.transform.length > 0)\n\t\t{\n\t\t\tnode.setAttribute('transform', s.transform);\n\t\t}\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node));\n\t\t}\n\t\n\t\t// Adds stroke tolerance\n\t\tif (this.strokeTolerance > 0 && !filled)\n\t\t{\n\t\t\tthis.root.appendChild(this.createTolerance(node));\n\t\t}\n\n\t\t// Adds pointer events\n\t\tif (this.pointerEvents)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', this.pointerEventsValue);\n\t\t}\n\t\t// Enables clicks for nodes inside a link element\n\t\telse if (!this.pointerEvents && this.originalRoot == null)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', 'none');\n\t\t}\n\t\t\n\t\t// Removes invisible nodes from output if they don't handle events\n\t\tif ((node.nodeName != 'rect' && node.nodeName != 'path' && node.nodeName != 'ellipse') ||\n\t\t\t(node.getAttribute('fill') != 'none' && node.getAttribute('fill') != 'transparent') ||\n\t\t\tnode.getAttribute('stroke') != 'none' || node.getAttribute('pointer-events') != 'none')\n\t\t{\n\t\t\t// LATER: Update existing DOM for performance\t\t\n\t\t\tthis.root.appendChild(node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n};\n\n/**\n * Function: updateFill\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateFill = function()\n{\n\tvar s = this.state;\n\t\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('fill-opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tif (s.fillColor != null)\n\t{\n\t\tif (s.gradientColor != null)\n\t\t{\n\t\t\tvar id = this.getSvgGradient(String(s.fillColor), String(s.gradientColor),\n\t\t\t\ts.gradientFillAlpha, s.gradientAlpha, s.gradientDirection);\n\t\t\t\n\t\t\tif (!mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t\t{\n\t\t\t\t// Workaround for potential base tag and brackets must be escaped\n\t\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\t\tthis.node.setAttribute('fill', 'url(' + base + '#' + id + ')');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.node.setAttribute('fill', 'url(#' + id + ')');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.node.setAttribute('fill', String(s.fillColor).toLowerCase());\n\t\t}\n\t}\n};\n\n/**\n * Function: getCurrentStrokeWidth\n * \n * Returns the current stroke width (>= 1), ie. max(1, this.format(this.state.strokeWidth * this.state.scale)).\n */\nmxSvgCanvas2D.prototype.getCurrentStrokeWidth = function()\n{\n\treturn Math.max(this.minStrokeWidth, Math.max(0.01, this.format(this.state.strokeWidth * this.state.scale)));\n};\n\n/**\n * Function: updateStroke\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStroke = function()\n{\n\tvar s = this.state;\n\n\tthis.node.setAttribute('stroke', String(s.strokeColor).toLowerCase());\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('stroke-opacity', s.alpha * s.strokeAlpha);\n\t}\n\t\n\tvar sw = this.getCurrentStrokeWidth();\n\t\n\tif (sw != 1)\n\t{\n\t\tthis.node.setAttribute('stroke-width', sw);\n\t}\n\t\n\tif (this.node.nodeName == 'path')\n\t{\n\t\tthis.updateStrokeAttributes();\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tthis.node.setAttribute('stroke-dasharray', this.createDashPattern(\n\t\t\t((s.fixDash) ? 1 : s.strokeWidth) * s.scale));\n\t}\n};\n\n/**\n * Function: updateStrokeAttributes\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStrokeAttributes = function()\n{\n\tvar s = this.state;\n\t\n\t// Linejoin miter is default in SVG\n\tif (s.lineJoin != null && s.lineJoin != 'miter')\n\t{\n\t\tthis.node.setAttribute('stroke-linejoin', s.lineJoin);\n\t}\n\t\n\tif (s.lineCap != null)\n\t{\n\t\t// flat is called butt in SVG\n\t\tvar value = s.lineCap;\n\t\t\n\t\tif (value == 'flat')\n\t\t{\n\t\t\tvalue = 'butt';\n\t\t}\n\t\t\n\t\t// Linecap butt is default in SVG\n\t\tif (value != 'butt')\n\t\t{\n\t\t\tthis.node.setAttribute('stroke-linecap', value);\n\t\t}\n\t}\n\t\n\t// Miterlimit 10 is default in our document\n\tif (s.miterLimit != null && (!this.styleEnabled || s.miterLimit != 10))\n\t{\n\t\tthis.node.setAttribute('stroke-miterlimit', s.miterLimit);\n\t}\n};\n\n/**\n * Function: createDashPattern\n * \n * Creates the SVG dash pattern for the given state.\n */\nmxSvgCanvas2D.prototype.createDashPattern = function(scale)\n{\n\tvar pat = [];\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar dash = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (dash.length > 0)\n\t\t{\n\t\t\tfor (var i = 0; i < dash.length; i++)\n\t\t\t{\n\t\t\t\tpat[i] = Number(dash[i]) * scale;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn pat.join(' ');\n};\n\n/**\n * Function: createTolerance\n * \n * Creates a hit detection tolerance shape for the given node.\n */\nmxSvgCanvas2D.prototype.createTolerance = function(node)\n{\n\tvar tol = node.cloneNode(true);\n\tvar sw = parseFloat(tol.getAttribute('stroke-width') || 1) + this.strokeTolerance;\n\ttol.setAttribute('pointer-events', 'stroke');\n\ttol.setAttribute('visibility', 'hidden');\n\ttol.removeAttribute('stroke-dasharray');\n\ttol.setAttribute('stroke-width', sw);\n\ttol.setAttribute('fill', 'none');\n\t\n\t// Workaround for Opera ignoring the visiblity attribute above while\n\t// other browsers need a stroke color to perform the hit-detection but\n\t// do not ignore the visibility attribute. Side-effect is that Opera's\n\t// hit detection for horizontal/vertical edges seems to ignore the tol.\n\ttol.setAttribute('stroke', (mxClient.IS_OT) ? 'none' : 'white');\n\t\n\treturn tol;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxSvgCanvas2D.prototype.createShadow = function(node)\n{\n\tvar shadow = node.cloneNode(true);\n\tvar s = this.state;\n\n\t// Firefox uses transparent for no fill in ellipses\n\tif (shadow.getAttribute('fill') != 'none' && (!mxClient.IS_FF || shadow.getAttribute('fill') != 'transparent'))\n\t{\n\t\tshadow.setAttribute('fill', s.shadowColor);\n\t}\n\t\n\tif (shadow.getAttribute('stroke') != 'none')\n\t{\n\t\tshadow.setAttribute('stroke', s.shadowColor);\n\t}\n\n\tshadow.setAttribute('transform', 'translate(' + this.format(s.shadowDx * s.scale) +\n\t\t',' + this.format(s.shadowDy * s.scale) + ')' + (s.transform || ''));\n\tshadow.setAttribute('opacity', s.shadowAlpha);\n\t\n\treturn shadow;\n};\n\n/**\n * Function: setLink\n * \n * Experimental implementation for hyperlinks.\n */\nmxSvgCanvas2D.prototype.setLink = function(link)\n{\n\tif (link == null)\n\t{\n\t\tthis.root = this.originalRoot;\n\t}\n\telse\n\t{\n\t\tthis.originalRoot = this.root;\n\t\t\n\t\tvar node = this.createElement('a');\n\t\t\n\t\t// Workaround for implicit namespace handling in HTML5 export, IE adds NS1 namespace so use code below\n\t\t// in all IE versions except quirks mode. KNOWN: Adds xlink namespace to each image tag in output.\n\t\tif (node.setAttributeNS == null || (this.root.ownerDocument != document && document.documentMode == null))\n\t\t{\n\t\t\tnode.setAttribute('xlink:href', link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', link);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(node);\n\t\tthis.root = node;\n\t}\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxSvgCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\tvar s = this.state;\n\t\tcx += s.dx;\n\t\tcy += s.dy;\n\t\n\t\tcx *= s.scale;\n\t\tcy *= s.scale;\n\n\t\ts.transform = s.transform || '';\n\t\t\n\t\t// This implementation uses custom scale/translate and built-in rotation\n\t\t// Rotation state is part of the AffineTransform in state.transform\n\t\tif (flipH && flipV)\n\t\t{\n\t\t\ttheta += 180;\n\t\t}\n\t\telse if (flipH != flipV)\n\t\t{\n\t\t\tvar tx = (flipH) ? cx : 0;\n\t\t\tvar sx = (flipH) ? -1 : 1;\n\t\n\t\t\tvar ty = (flipV) ? cy : 0;\n\t\t\tvar sy = (flipV) ? -1 : 1;\n\n\t\t\ts.transform += 'translate(' + this.format(tx) + ',' + this.format(ty) + ')' +\n\t\t\t\t'scale(' + this.format(sx) + ',' + this.format(sy) + ')' +\n\t\t\t\t'translate(' + this.format(-tx) + ',' + this.format(-ty) + ')';\n\t\t}\n\t\t\n\t\tif (flipH ? !flipV : flipV)\n\t\t{\n\t\t\ttheta *= -1;\n\t\t}\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\ts.transform += 'rotate(' + this.format(theta) + ',' + this.format(cx) + ',' + this.format(cy) + ')';\n\t\t}\n\t\t\n\t\ts.rotation = s.rotation + theta;\n\t\ts.rotationCx = cx;\n\t\ts.rotationCy = cy;\n\t}\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxSvgCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createElement('path');\n};\n\n/**\n * Function: rect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('rect');\n\tn.setAttribute('x', this.format((x + s.dx) * s.scale));\n\tn.setAttribute('y', this.format((y + s.dy) * s.scale));\n\tn.setAttribute('width', this.format(w * s.scale));\n\tn.setAttribute('height', this.format(h * s.scale));\n\t\n\tthis.node = n;\n};\n\n/**\n * Function: roundrect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.rect(x, y, w, h);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.node.setAttribute('rx', this.format(dx * this.state.scale));\n\t}\n\t\n\tif (dy > 0)\n\t{\n\t\tthis.node.setAttribute('ry', this.format(dy * this.state.scale));\n\t}\n};\n\n/**\n * Function: ellipse\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('ellipse');\n\t// No rounding for consistent output with 1.x\n\tn.setAttribute('cx', this.format((x + w / 2 + s.dx) * s.scale));\n\tn.setAttribute('cy', this.format((y + h / 2 + s.dy) * s.scale));\n\tn.setAttribute('rx', w / 2 * s.scale);\n\tn.setAttribute('ry', h / 2 * s.scale);\n\tthis.node = n;\n};\n\n/**\n * Function: image\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\taspect = (aspect != null) ? aspect : true;\n\tflipH = (flipH != null) ? flipH : false;\n\tflipV = (flipV != null) ? flipV : false;\n\t\n\tvar s = this.state;\n\tx += s.dx;\n\ty += s.dy;\n\t\n\tvar node = this.createElement('image');\n\tnode.setAttribute('x', this.format(x * s.scale) + this.imageOffset);\n\tnode.setAttribute('y', this.format(y * s.scale) + this.imageOffset);\n\tnode.setAttribute('width', this.format(w * s.scale));\n\tnode.setAttribute('height', this.format(h * s.scale));\n\t\n\t// Workaround for missing namespace support\n\tif (node.setAttributeNS == null)\n\t{\n\t\tnode.setAttribute('xlink:href', src);\n\t}\n\telse\n\t{\n\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', src);\n\t}\n\t\n\tif (!aspect)\n\t{\n\t\tnode.setAttribute('preserveAspectRatio', 'none');\n\t}\n\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tvar tr = this.state.transform || '';\n\t\n\tif (flipH || flipV)\n\t{\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\tif (flipH)\n\t\t{\n\t\t\tsx = -1;\n\t\t\tdx = -w - 2 * x;\n\t\t}\n\t\t\n\t\tif (flipV)\n\t\t{\n\t\t\tsy = -1;\n\t\t\tdy = -h - 2 * y;\n\t\t}\n\t\t\n\t\t// Adds image tansformation to existing transform\n\t\ttr += 'scale(' + sx + ',' + sy + ')translate(' + (dx * s.scale) + ',' + (dy * s.scale) + ')';\n\t}\n\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (!this.pointerEvents)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\t\n\tthis.root.appendChild(node);\n\t\n\t// Disables control-clicks on images in Firefox to open in new tab\n\t// by putting a rect in the foreground that absorbs all events and\n\t// disabling all pointer-events on the original image tag.\n\tif (this.blockImagePointerEvents)\n\t{\n\t\tnode.setAttribute('style', 'pointer-events:none');\n\t\t\n\t\tnode = this.createElement('rect');\n\t\tnode.setAttribute('visibility', 'hidden');\n\t\tnode.setAttribute('pointer-events', 'fill');\n\t\tnode.setAttribute('x', this.format(x * s.scale));\n\t\tnode.setAttribute('y', this.format(y * s.scale));\n\t\tnode.setAttribute('width', this.format(w * s.scale));\n\t\tnode.setAttribute('height', this.format(h * s.scale));\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: convertHtml\n * \n * Converts the given HTML string to XHTML.\n */\nmxSvgCanvas2D.prototype.convertHtml = function(val)\n{\n\tif (this.useDomParser)\n\t{\n\t\tvar doc = new DOMParser().parseFromString(val, 'text/html');\n\n\t\tif (doc != null)\n\t\t{\n\t\t\tval = new XMLSerializer().serializeToString(doc.body);\n\t\t\t\n\t\t\t// Extracts body content from DOM\n\t\t\tif (val.substring(0, 5) == '<body')\n\t\t\t{\n\t\t\t\tval = val.substring(val.indexOf('>', 5) + 1);\n\t\t\t}\n\t\t\t\n\t\t\tif (val.substring(val.length - 7, val.length) == '</body>')\n\t\t\t{\n\t\t\t\tval = val.substring(0, val.length - 7);\n\t\t\t}\n\t\t}\n\t}\n\telse if (document.implementation != null && document.implementation.createDocument != null)\n\t{\n\t\tvar xd = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);\n\t\tvar xb = xd.createElement('body');\n\t\txd.documentElement.appendChild(xb);\n\t\t\n\t\tvar div = document.createElement('div');\n\t\tdiv.innerHTML = val;\n\t\tvar child = div.firstChild;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar next = child.nextSibling;\n\t\t\txb.appendChild(xd.adoptNode(child));\n\t\t\tchild = next;\n\t\t}\n\t\t\n\t\treturn xb.innerHTML;\n\t}\n\telse\n\t{\n\t\tvar ta = document.createElement('textarea');\n\t\t\n\t\t// Handles special HTML entities < and > and double escaping\n\t\t// and converts unclosed br, hr and img tags to XHTML\n\t\t// LATER: Convert all unclosed tags\n\t\tta.innerHTML = val.replace(/&amp;/g, '&amp;amp;').\n\t\t\treplace(/&#60;/g, '&amp;lt;').replace(/&#62;/g, '&amp;gt;').\n\t\t\treplace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;').\n\t\t\treplace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t\tval = ta.value.replace(/&/g, '&amp;').replace(/&amp;lt;/g, '&lt;').\n\t\t\treplace(/&amp;gt;/g, '&gt;').replace(/&amp;amp;/g, '&amp;').\n\t\t\treplace(/<br>/g, '<br />').replace(/<hr>/g, '<hr />').\n\t\t\treplace(/(<img[^>]+)>/gm, \"$1 />\");\n\t}\n\t\n\treturn val;\n};\n\n/**\n * Function: createDiv\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createDiv = function(str, align, valign, style, overflow, whiteSpace)\n{\n\tvar s = this.state;\n\n\t// Inline block for rendering HTML background over SVG in Safari\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t(mxConstants.LINE_HEIGHT * this.lineHeightCorrection);\n\t\n\tstyle = 'display:inline-block;font-size:' + s.fontSize + 'px;font-family:' + s.fontFamily +\n\t\t';color:' + s.fontColor + ';line-height:' + lh + ';' + style;\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle += 'font-weight:bold;';\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle += 'font-style:italic;';\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle += 'text-decoration:underline;';\n\t}\n\t\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle += 'text-align:center;';\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle += 'text-align:right;';\n\t}\n\telse\n\t{\n\t\tstyle += 'text-align:left;';\n\t}\n\n\tvar css = '';\n\t\n\tif (s.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + mxUtils.htmlEntities(s.fontBackgroundColor) + ';';\n\t}\n\t\n\tif (s.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(s.fontBorderColor) + ';';\n\t}\n\t\n\tvar val = str;\n\t\n\tif (!mxUtils.isNode(val))\n\t{\n\t\tval = this.convertHtml(val);\n\t\t\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\t// Workaround for no wrapping in HTML canvas for image\n\t\t\t// export if the inner HTML contains a DIV with width\n\t\t\tif (whiteSpace != null)\n\t\t\t{\n\t\t\t\tcss += 'white-space:' + whiteSpace + ';';\n\t\t\t}\n\t\t\t\n\t\t\t// Inner div always needed to measure wrapped text\n\t\t\tval = '<div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display:inline-block;text-align:inherit;text-decoration:inherit;' + css + '\">' + val + '</div>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle += css;\n\t\t}\n\t}\n\n\t// Uses DOM API where available. This cannot be used in IE to avoid\n\t// an opening and two (!) closing TBODY tags being added to tables.\n\tif (!mxClient.IS_IE && document.createElementNS)\n\t{\n\t\tvar div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n\t\tdiv.setAttribute('style', style);\n\t\t\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\t// Creates a copy for export\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tdiv.appendChild(val.cloneNode(true));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.appendChild(val);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.innerHTML = val;\n\t\t}\n\t\t\n\t\treturn div;\n\t}\n\telse\n\t{\n\t\t// Serializes for export\n\t\tif (mxUtils.isNode(val) && this.root.ownerDocument != document)\n\t\t{\n\t\t\tval = val.outerHTML;\n\t\t}\n\n\t\t// NOTE: FF 3.6 crashes if content CSS contains \"height:100%\"\n\t\treturn mxUtils.parseXml('<div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"' + style + \n\t\t\t'\">' + val + '</div>').documentElement;\n\t}\n};\n\n/**\n * Invalidates the cached offset size for the given node.\n */\nmxSvgCanvas2D.prototype.invalidateCachedOffsetSize = function(node)\n{\n\tdelete node.firstChild.mxCachedOffsetWidth;\n\tdelete node.firstChild.mxCachedFinalOffsetWidth;\n\tdelete node.firstChild.mxCachedFinalOffsetHeight;\n};\n\n/**\n * Updates existing DOM nodes for text rendering. LATER: Merge common parts with text function below.\n */\nmxSvgCanvas2D.prototype.updateText = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node)\n{\n\tif (node != null && node.firstChild != null && node.firstChild.firstChild != null &&\n\t\tnode.firstChild.firstChild.firstChild != null)\n\t{\n\t\t// Uses outer group for opacity and transforms to\n\t\t// fix rendering order in Chrome\n\t\tvar group = node.firstChild;\n\t\tvar fo = group.firstChild;\n\t\tvar div = fo.firstChild;\n\n\t\trotation = (rotation != null) ? rotation : 0;\n\t\t\n\t\tvar s = this.state;\n\t\tx += s.dx;\n\t\ty += s.dy;\n\t\t\n\t\tif (clip)\n\t\t{\n\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\tdiv.style.maxWidth = Math.round(w) + 'px';\n\t\t}\n\t\telse if (overflow == 'fill')\n\t\t{\n\t\t\tdiv.style.width = Math.round(w + 1) + 'px';\n\t\t\tdiv.style.height = Math.round(h + 1) + 'px';\n\t\t}\n\t\telse if (overflow == 'width')\n\t\t{\n\t\t\tdiv.style.width = Math.round(w + 1) + 'px';\n\t\t\t\n\t\t\tif (h > 0)\n\t\t\t{\n\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t}\n\t\t}\n\n\t\tif (wrap && w > 0)\n\t\t{\n\t\t\tdiv.style.width = Math.round(w + 1) + 'px';\n\t\t}\n\t\t\n\t\t// Code that depends on the size which is computed after\n\t\t// the element was added to the DOM.\n\t\tvar ow = 0;\n\t\tvar oh = 0;\n\t\t\n\t\t// Padding avoids clipping on border and wrapping for differing font metrics on platforms\n\t\tvar padX = 0;\n\t\tvar padY = 2;\n\n\t\tvar sizeDiv = div;\n\t\t\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t}\n\t\t\n\t\tvar tmp = (group.mxCachedOffsetWidth != null) ? group.mxCachedOffsetWidth : sizeDiv.offsetWidth;\n\t\tow = tmp + padX;\n\n\t\t// Recomputes the height of the element for wrapped width\n\t\tif (wrap && overflow != 'fill')\n\t\t{\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, w);\n\t\t\t}\n\t\t\t\n\t\t\tdiv.style.width = Math.round(ow + 1) + 'px';\n\t\t}\n\n\t\tow = (group.mxCachedFinalOffsetWidth != null) ? group.mxCachedFinalOffsetWidth : sizeDiv.offsetWidth;\n\t\toh = (group.mxCachedFinalOffsetHeight != null) ? group.mxCachedFinalOffsetHeight : sizeDiv.offsetHeight;\n\t\t\n\t\tif (this.cacheOffsetSize)\n\t\t{\n\t\t\tgroup.mxCachedOffsetWidth = tmp;\n\t\t\tgroup.mxCachedFinalOffsetWidth = ow;\n\t\t\tgroup.mxCachedFinalOffsetHeight = oh;\n\t\t}\n\t\t\n\t\tow += padX;\n\t\toh -= 2;\n\t\t\n\t\tif (clip)\n\t\t{\n\t\t\toh = Math.min(oh, h);\n\t\t\tow = Math.min(ow, w);\n\t\t}\n\n\t\tif (overflow == 'width')\n\t\t{\n\t\t\th = oh;\n\t\t}\n\t\telse if (overflow != 'fill')\n\t\t{\n\t\t\tw = ow;\n\t\t\th = oh;\n\t\t}\n\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tdx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx -= w;\n\t\t}\n\t\t\n\t\tx += dx;\n\t\t\n\t\t// FIXME: LINE_HEIGHT not ideal for all text sizes, fix for export\n\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tdy -= h / 2;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy -= h;\n\t\t}\n\t\t\n\t\t// Workaround for rendering offsets\n\t\t// TODO: Check if export needs these fixes, too\n\t\tif (overflow != 'fill' && mxClient.IS_FF && mxClient.IS_WIN)\n\t\t{\n\t\t\tdy -= 2;\n\t\t}\n\t\t\n\t\ty += dy;\n\n\t\tvar tr = (s.scale != 1) ? 'scale(' + s.scale + ')' : '';\n\n\t\tif (s.rotation != 0 && this.rotateHtml)\n\t\t{\n\t\t\ttr += 'rotate(' + (s.rotation) + ',' + (w / 2) + ',' + (h / 2) + ')';\n\t\t\tvar pt = this.rotatePoint((x + w / 2) * s.scale, (y + h / 2) * s.scale,\n\t\t\t\ts.rotation, s.rotationCx, s.rotationCy);\n\t\t\tx = pt.x - w * s.scale / 2;\n\t\t\ty = pt.y - h * s.scale / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx *= s.scale;\n\t\t\ty *= s.scale;\n\t\t}\n\n\t\tif (rotation != 0)\n\t\t{\n\t\t\ttr += 'rotate(' + (rotation) + ',' + (-dx) + ',' + (-dy) + ')';\n\t\t}\n\n\t\tgroup.setAttribute('transform', 'translate(' + Math.round(x) + ',' + Math.round(y) + ')' + tr);\n\t\tfo.setAttribute('width', Math.round(Math.max(1, w)));\n\t\tfo.setAttribute('height', Math.round(Math.max(1, h)));\n\t}\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Note that HTML markup is only supported if\n * foreignObject is supported and <foEnabled> is true. (This means IE9 and later\n * does currently not support HTML text as part of shapes.)\n */\nmxSvgCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\trotation = (rotation != null) ? rotation : 0;\n\t\t\n\t\tvar s = this.state;\n\t\tx += s.dx;\n\t\ty += s.dy;\n\t\t\n\t\tif (this.foEnabled && format == 'html')\n\t\t{\n\t\t\tvar style = 'vertical-align:top;';\n\t\t\t\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tstyle += 'overflow:hidden;max-height:' + Math.round(h) + 'px;max-width:' + Math.round(w) + 'px;';\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\tstyle += 'width:' + Math.round(w + 1) + 'px;height:' + Math.round(h + 1) + 'px;overflow:hidden;';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\tstyle += 'width:' + Math.round(w + 1) + 'px;';\n\t\t\t\t\n\t\t\t\tif (h > 0)\n\t\t\t\t{\n\t\t\t\t\tstyle += 'max-height:' + Math.round(h) + 'px;overflow:hidden;';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tstyle += 'width:' + Math.round(w + 1) + 'px;white-space:normal;word-wrap:' +\n\t\t\t\t\tmxConstants.WORD_WRAP + ';';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle += 'white-space:nowrap;';\n\t\t\t}\n\t\t\t\n\t\t\t// Uses outer group for opacity and transforms to\n\t\t\t// fix rendering order in Chrome\n\t\t\tvar group = this.createElement('g');\n\t\t\t\n\t\t\tif (s.alpha < 1)\n\t\t\t{\n\t\t\t\tgroup.setAttribute('opacity', s.alpha);\n\t\t\t}\n\n\t\t\tvar fo = this.createElement('foreignObject');\n\t\t\tfo.setAttribute('style', 'overflow:visible;');\n\t\t\tfo.setAttribute('pointer-events', (this.pointerEvents) ? this.pointerEventsValue : 'none');\n\t\t\t\n\t\t\tvar div = this.createDiv(str, align, valign, style, overflow, (wrap && w > 0) ? 'normal' : null);\n\t\t\t\n\t\t\t// Ignores invalid XHTML labels\n\t\t\tif (div == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tgroup.appendChild(fo);\n\t\t\tthis.root.appendChild(group);\n\t\t\t\n\t\t\t// Code that depends on the size which is computed after\n\t\t\t// the element was added to the DOM.\n\t\t\tvar ow = 0;\n\t\t\tvar oh = 0;\n\t\t\t\n\t\t\t// Padding avoids clipping on border and wrapping for differing font metrics on platforms\n\t\t\tvar padX = 2;\n\t\t\tvar padY = 2;\n\n\t\t\t// NOTE: IE is always export as it does not support foreign objects\n\t\t\tif (mxClient.IS_IE && (document.documentMode == 9 || !mxClient.IS_SVG))\n\t\t\t{\n\t\t\t\t// Handles non-standard namespace for getting size in IE\n\t\t\t\tvar clone = document.createElement('div');\n\t\t\t\t\n\t\t\t\tclone.style.cssText = div.getAttribute('style');\n\t\t\t\tclone.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\t\tclone.style.position = 'absolute';\n\t\t\t\tclone.style.visibility = 'hidden';\n\n\t\t\t\t// Inner DIV is needed for text measuring\n\t\t\t\tvar div2 = document.createElement('div');\n\t\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\t\tdiv2.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv2.innerHTML = (mxUtils.isNode(str)) ? str.outerHTML : str;\n\t\t\t\tclone.appendChild(div2);\n\n\t\t\t\tdocument.body.appendChild(clone);\n\n\t\t\t\t// Workaround for different box models\n\t\t\t\tif (document.documentMode != 8 && document.documentMode != 9 && s.fontBorderColor != null)\n\t\t\t\t{\n\t\t\t\t\tpadX += 2;\n\t\t\t\t\tpadY += 2;\n\t\t\t\t}\n\n\t\t\t\tif (wrap && w > 0)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div2.offsetWidth;\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for adding padding twice in IE8/IE9 standards mode if label is wrapped\n\t\t\t\t\tpadDx = 0;\n\t\t\t\t\t\n\t\t\t\t\t// For export, if no wrapping occurs, we add a large padding to make\n\t\t\t\t\t// sure there is no wrapping even if the text metrics are different.\n\t\t\t\t\t// This adds support for text metrics on different operating systems.\n\t\t\t\t\t// Disables wrapping if text is not wrapped for given width\n\t\t\t\t\tif (!clip && wrap && w > 0 && this.root.ownerDocument != document && overflow != 'fill')\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ws = clone.style.whiteSpace;\n\t\t\t\t\t\tdiv2.style.whiteSpace = 'nowrap';\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (tmp < div2.offsetWidth)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tclone.style.whiteSpace = ws;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (clip)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tclone.style.width = tmp + 'px';\n\t\n\t\t\t\t\t// Padding avoids clipping on border\n\t\t\t\t\tow = div2.offsetWidth + padX + padDx;\n\t\t\t\t\toh = div2.offsetHeight + padY;\n\t\t\t\t\t\n\t\t\t\t\t// Overrides the width of the DIV via XML DOM by using the\n\t\t\t\t\t// clone DOM style, getting the CSS text for that and\n\t\t\t\t\t// then setting that on the DIV via setAttribute\n\t\t\t\t\tclone.style.display = 'inline-block';\n\t\t\t\t\tclone.style.position = '';\n\t\t\t\t\tclone.style.visibility = '';\n\t\t\t\t\tclone.style.width = ow + 'px';\n\t\t\t\t\t\n\t\t\t\t\tdiv.setAttribute('style', clone.style.cssText);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Padding avoids clipping on border\n\t\t\t\t\tow = div2.offsetWidth + padX;\n\t\t\t\t\toh = div2.offsetHeight + padY;\n\t\t\t\t}\n\n\t\t\t\tclone.parentNode.removeChild(clone);\n\t\t\t\tfo.appendChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Uses document for text measuring during export\n\t\t\t\tif (this.root.ownerDocument != document)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfo.appendChild(div);\n\t\t\t\t}\n\n\t\t\t\tvar sizeDiv = div;\n\t\t\t\t\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t\t\n\t\t\t\t\tif (wrap && div.style.wordWrap == 'break-word')\n\t\t\t\t\t{\n\t\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar tmp = sizeDiv.offsetWidth;\n\t\t\t\t\n\t\t\t\t// Workaround for text measuring in hidden containers\n\t\t\t\tif (tmp == 0 && div.parentNode == fo)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\t\n\t\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.cacheOffsetSize)\n\t\t\t\t{\n\t\t\t\t\tgroup.mxCachedOffsetWidth = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Disables wrapping if text is not wrapped for given width\n\t\t\t\tif (!clip && wrap && w > 0 && this.root.ownerDocument != document &&\n\t\t\t\t\toverflow != 'fill' && overflow != 'width')\n\t\t\t\t{\n\t\t\t\t\tvar ws = div.style.whiteSpace;\n\t\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\t\t\t\n\t\t\t\t\tif (tmp < sizeDiv.offsetWidth)\n\t\t\t\t\t{\n\t\t\t\t\t\tdiv.style.whiteSpace = ws;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tow = tmp + padX - 1;\n\n\t\t\t\t// Recomputes the height of the element for wrapped width\n\t\t\t\tif (wrap && overflow != 'fill' && overflow != 'width')\n\t\t\t\t{\n\t\t\t\t\tif (clip)\n\t\t\t\t\t{\n\t\t\t\t\t\tow = Math.min(ow, w);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tdiv.style.width = ow + 'px';\n\t\t\t\t}\n\n\t\t\t\tow = sizeDiv.offsetWidth;\n\t\t\t\toh = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tif (this.cacheOffsetSize)\n\t\t\t\t{\n\t\t\t\t\tgroup.mxCachedFinalOffsetWidth = ow;\n\t\t\t\t\tgroup.mxCachedFinalOffsetHeight = oh;\n\t\t\t\t}\n\n\t\t\t\toh -= padY;\n\t\t\t\t\n\t\t\t\tif (div.parentNode != fo)\n\t\t\t\t{\n\t\t\t\t\tfo.appendChild(div);\n\t\t\t\t\tdiv.style.visibility = '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\toh = Math.min(oh, h);\n\t\t\t\tow = Math.min(ow, w);\n\t\t\t}\n\n\t\t\tif (overflow == 'width')\n\t\t\t{\n\t\t\t\th = oh;\n\t\t\t}\n\t\t\telse if (overflow != 'fill')\n\t\t\t{\n\t\t\t\tw = ow;\n\t\t\t\th = oh;\n\t\t\t}\n\n\t\t\tif (s.alpha < 1)\n\t\t\t{\n\t\t\t\tgroup.setAttribute('opacity', s.alpha);\n\t\t\t}\n\t\t\t\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tx += dx;\n\t\t\t\n\t\t\t// FIXME: LINE_HEIGHT not ideal for all text sizes, fix for export\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tdy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tdy -= h;\n\t\t\t}\n\t\t\t\n\t\t\t// Workaround for rendering offsets\n\t\t\t// TODO: Check if export needs these fixes, too\n\t\t\t//if (this.root.ownerDocument == document)\n\t\t\tif (overflow != 'fill' && mxClient.IS_FF && mxClient.IS_WIN)\n\t\t\t{\n\t\t\t\tdy -= 2;\n\t\t\t}\n\t\t\t\n\t\t\ty += dy;\n\n\t\t\tvar tr = (s.scale != 1) ? 'scale(' + s.scale + ')' : '';\n\n\t\t\tif (s.rotation != 0 && this.rotateHtml)\n\t\t\t{\n\t\t\t\ttr += 'rotate(' + (s.rotation) + ',' + (w / 2) + ',' + (h / 2) + ')';\n\t\t\t\tvar pt = this.rotatePoint((x + w / 2) * s.scale, (y + h / 2) * s.scale,\n\t\t\t\t\ts.rotation, s.rotationCx, s.rotationCy);\n\t\t\t\tx = pt.x - w * s.scale / 2;\n\t\t\t\ty = pt.y - h * s.scale / 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\ttr += 'rotate(' + (rotation) + ',' + (-dx) + ',' + (-dy) + ')';\n\t\t\t}\n\n\t\t\tgroup.setAttribute('transform', 'translate(' + (Math.round(x) + this.foOffset) + ',' +\n\t\t\t\t(Math.round(y) + this.foOffset) + ')' + tr);\n\t\t\tfo.setAttribute('width', Math.round(Math.max(1, w)));\n\t\t\tfo.setAttribute('height', Math.round(Math.max(1, h)));\n\t\t\t\n\t\t\t// Adds alternate content if foreignObject not supported in viewer\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tvar alt = this.createAlternateContent(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\t\t\t\t\n\t\t\t\tif (alt != null)\n\t\t\t\t{\n\t\t\t\t\tfo.setAttribute('requiredFeatures', 'http://www.w3.org/TR/SVG11/feature#Extensibility');\n\t\t\t\t\tvar sw = this.createElement('switch');\n\t\t\t\t\tsw.appendChild(fo);\n\t\t\t\t\tsw.appendChild(alt);\n\t\t\t\t\tgroup.appendChild(sw);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: createClip\n * \n * Creates a clip for the given coordinates.\n */\nmxSvgCanvas2D.prototype.createClip = function(x, y, w, h)\n{\n\tx = Math.round(x);\n\ty = Math.round(y);\n\tw = Math.round(w);\n\th = Math.round(h);\n\t\n\tvar id = 'mx-clip-' + x + '-' + y + '-' + w + '-' + h;\n\n\tvar counter = 0;\n\tvar tmp = id + '-' + counter;\n\t\n\t// Resolves ID conflicts\n\twhile (document.getElementById(tmp) != null)\n\t{\n\t\ttmp = id + '-' + (++counter);\n\t}\n\t\n\tclip = this.createElement('clipPath');\n\tclip.setAttribute('id', tmp);\n\t\n\tvar rect = this.createElement('rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\t\t\n\tclip.appendChild(rect);\n\t\n\treturn clip;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup.\n */\nmxSvgCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir)\n{\n\trotation = (rotation != null) ? rotation : 0;\n\tvar s = this.state;\n\tvar size = s.fontSize;\n\tvar node = this.createElement('g');\n\tvar tr = s.transform || '';\n\tthis.updateFont(node);\n\t\n\t// Non-rotated text\n\tif (rotation != 0)\n\t{\n\t\ttr += 'rotate(' + rotation  + ',' + this.format(x * s.scale) + ',' + this.format(y * s.scale) + ')';\n\t}\n\t\n\tif (dir != null)\n\t{\n\t\tnode.setAttribute('direction', dir);\n\t}\n\n\tif (clip && w > 0 && h > 0)\n\t{\n\t\tvar cx = x;\n\t\tvar cy = y;\n\t\t\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tcx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tcx -= w;\n\t\t}\n\t\t\n\t\tif (overflow != 'fill')\n\t\t{\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tcy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tcy -= h;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// LATER: Remove spacing from clip rectangle\n\t\tvar c = this.createClip(cx * s.scale - 2, cy * s.scale - 2, w * s.scale + 4, h * s.scale + 4);\n\t\t\n\t\tif (this.defs != null)\n\t\t{\n\t\t\tthis.defs.appendChild(c);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Makes sure clip is removed with referencing node\n\t\t\tthis.root.appendChild(c);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_CHROMEAPP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Workaround for potential base tag\n\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\tnode.setAttribute('clip-path', 'url(' + base + '#' + c.getAttribute('id') + ')');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttribute('clip-path', 'url(#' + c.getAttribute('id') + ')');\n\t\t}\n\t}\n\n\t// Default is left\n\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t\t\t(align == mxConstants.ALIGN_CENTER) ? 'middle' :\n\t\t\t\t\t'start';\n\n\t// Text-anchor start is default in SVG\n\tif (anchor != 'start')\n\t{\n\t\tnode.setAttribute('text-anchor', anchor);\n\t}\n\t\n\tif (!this.styleEnabled || size != mxConstants.DEFAULT_FONTSIZE)\n\t{\n\t\tnode.setAttribute('font-size', (size * s.scale) + 'px');\n\t}\n\t\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (s.alpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha);\n\t}\n\t\n\tvar lines = str.split('\\n');\n\tvar lh = Math.round(size * mxConstants.LINE_HEIGHT);\n\tvar textHeight = size + (lines.length - 1) * lh;\n\n\tvar cy = y + size - 1;\n\n\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = ((this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight) / 2;\n\t\t\tcy -= dy + 1;\n\t\t}\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = (this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight;\n\t\t\tcy -= dy + 2;\n\t\t}\n\t}\n\n\tfor (var i = 0; i < lines.length; i++)\n\t{\n\t\t// Workaround for bounding box of empty lines and spaces\n\t\tif (lines[i].length > 0 && mxUtils.trim(lines[i]).length > 0)\n\t\t{\n\t\t\tvar text = this.createElement('text');\n\t\t\t// LATER: Match horizontal HTML alignment\n\t\t\ttext.setAttribute('x', this.format(x * s.scale) + this.textOffset);\n\t\t\ttext.setAttribute('y', this.format(cy * s.scale) + this.textOffset);\n\t\t\t\n\t\t\tmxUtils.write(text, lines[i]);\n\t\t\tnode.appendChild(text);\n\t\t}\n\n\t\tcy += lh;\n\t}\n\n\tthis.root.appendChild(node);\n\tthis.addTextBackground(node, str, x, y, w, (overflow == 'fill') ? h : textHeight, align, valign, overflow);\n};\n\n/**\n * Function: updateFont\n * \n * Updates the text properties for the given node. (NOTE: For this to work in\n * IE, the given node must be a text or tspan element.)\n */\nmxSvgCanvas2D.prototype.updateFont = function(node)\n{\n\tvar s = this.state;\n\n\tnode.setAttribute('fill', s.fontColor);\n\t\n\tif (!this.styleEnabled || s.fontFamily != mxConstants.DEFAULT_FONTFAMILY)\n\t{\n\t\tnode.setAttribute('font-family', s.fontFamily);\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tnode.setAttribute('font-weight', 'bold');\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tnode.setAttribute('font-style', 'italic');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tnode.setAttribute('text-decoration', 'underline');\n\t}\n};\n\n/**\n * Function: addTextBackground\n * \n * Background color and border\n */\nmxSvgCanvas2D.prototype.addTextBackground = function(node, str, x, y, w, h, align, valign, overflow)\n{\n\tvar s = this.state;\n\n\tif (s.fontBackgroundColor != null || s.fontBorderColor != null)\n\t{\n\t\tvar bbox = null;\n\t\t\n\t\tif (overflow == 'fill' || overflow == 'width')\n\t\t{\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, y * s.scale, (w - 2) * s.scale, (h + 2) * s.scale);\n\t\t}\n\t\telse if (node.getBBox != null && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Uses getBBox only if inside document for correct size\n\t\t\ttry\n\t\t\t{\n\t\t\t\tbbox = node.getBBox();\n\t\t\t\tvar ie = mxClient.IS_IE && mxClient.IS_SVG;\n\t\t\t\tbbox = new mxRectangle(bbox.x, bbox.y + ((ie) ? 0 : 1), bbox.width, bbox.height + ((ie) ? 1 : 0));\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Computes size if not in document or no getBBox available\n\t\t\tvar div = document.createElement('div');\n\n\t\t\t// Wrapping and clipping can be ignored here\n\t\t\tdiv.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\t\tdiv.style.fontSize = s.fontSize + 'px';\n\t\t\tdiv.style.fontFamily = s.fontFamily;\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.visibility = 'hidden';\n\t\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv.style.zoom = '1';\n\t\t\t\n\t\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\n\t\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tstr = mxUtils.htmlEntities(str, false);\n\t\t\tdiv.innerHTML = str.replace(/\\n/g, '<br/>');\n\t\t\t\n\t\t\tdocument.body.appendChild(div);\n\t\t\tvar w = div.offsetWidth;\n\t\t\tvar h = div.offsetHeight;\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, (y + 2) * s.scale, w * s.scale, (h + 1) * s.scale);\n\t\t}\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tvar n = this.createElement('rect');\n\t\t\tn.setAttribute('fill', s.fontBackgroundColor || 'none');\n\t\t\tn.setAttribute('stroke', s.fontBorderColor || 'none');\n\t\t\tn.setAttribute('x', Math.floor(bbox.x - 1));\n\t\t\tn.setAttribute('y', Math.floor(bbox.y - 1));\n\t\t\tn.setAttribute('width', Math.ceil(bbox.width + 2));\n\t\t\tn.setAttribute('height', Math.ceil(bbox.height));\n\n\t\t\tvar sw = (s.fontBorderColor != null) ? Math.max(1, this.format(s.scale)) : 0;\n\t\t\tn.setAttribute('stroke-width', sw);\n\t\t\t\n\t\t\t// Workaround for crisp rendering - only required if not exporting\n\t\t\tif (this.root.ownerDocument == document && mxUtils.mod(sw, 2) == 1)\n\t\t\t{\n\t\t\t\tn.setAttribute('transform', 'translate(0.5, 0.5)');\n\t\t\t}\n\t\t\t\n\t\t\tnode.insertBefore(n, node.firstChild);\n\t\t}\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxSvgCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxVmlCanvas2D\n * \n * Implements a canvas to be used for rendering VML. Here is an example of implementing a\n * fallback for SVG images which are not supported in VML-based browsers.\n * \n * (code)\n * var mxVmlCanvas2DImage = mxVmlCanvas2D.prototype.image;\n * mxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n * {\n *   if (src.substring(src.length - 4, src.length) == '.svg')\n *   {\n *     src = 'http://www.jgraph.com/images/mxgraph.gif';\n *   }\n *   \n *   mxVmlCanvas2DImage.apply(this, arguments);\n * };\n * (end)\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * document.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{antialias:false;)}';\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>. Note that\n * there is a known issue in VML where gradients are painted using the outer\n * bounding box of rotated shapes, not the actual bounds of the shape. See\n * also <text> for plain text label restrictions in shapes for VML.\n */\nvar mxVmlCanvas2D = function(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxVmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxVmlCanvas2D.prototype.node = null;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabledetB. Default is true.\n */\nmxVmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'm'.\n */\nmxVmlCanvas2D.prototype.moveOp = 'm';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'l'.\n */\nmxVmlCanvas2D.prototype.lineOp = 'l';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'c'.\n */\nmxVmlCanvas2D.prototype.curveOp = 'c';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'x e'.\n */\nmxVmlCanvas2D.prototype.closeOp = 'x';\n\n/**\n * Variable: rotatedHtmlBackground\n * \n * Background color for rotated HTML. Default is ''. This can be set to eg.\n * white to improve rendering of rotated text in VML for IE9.\n */\nmxVmlCanvas2D.prototype.rotatedHtmlBackground = '';\n\n/**\n * Variable: vmlScale\n * \n * Specifies the scale used to draw VML shapes.\n */\nmxVmlCanvas2D.prototype.vmlScale = 1;\n\n/**\n * Function: createElement\n * \n * Creates the given element using the document.\n */\nmxVmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn document.createElement(name);\n};\n\n/**\n * Function: createVmlElement\n * \n * Creates a new element using <createElement> and prefixes the given name with\n * <mxClient.VML_PREFIX>.\n */\nmxVmlCanvas2D.prototype.createVmlElement = function(name)\n{\n\treturn this.createElement(mxClient.VML_PREFIX + ':' + name);\n};\n\n/**\n * Function: addNode\n * \n * Adds the current node to the <root>.\n */\nmxVmlCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\t\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.path = this.path.join(' ') + ' e';\n\t\t\t\tnode.style.width = this.root.style.width;\n\t\t\t\tnode.style.height = this.root.style.height;\n\t\t\t\tnode.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tnode.strokeweight = this.format(Math.max(1, s.strokeWidth * s.scale / this.vmlScale)) + 'px';\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node,\n\t\t\t\tfilled && s.fillColor != null,\n\t\t\t\tstroked && s.strokeColor != null));\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tnode.stroked = 'true';\n\t\t\tnode.strokecolor = s.strokeColor;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.stroked = 'false';\n\t\t}\n\n\t\tnode.appendChild(this.createStroke());\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tnode.appendChild(this.createFill());\n\t\t}\n\t\telse if (this.pointerEvents && (node.nodeName != 'shape' ||\n\t\t\tthis.path[this.path.length - 1] == this.closeOp))\n\t\t{\n\t\t\tnode.appendChild(this.createTransparentFill());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.filled = 'false';\n\t\t}\n\n\t\t// LATER: Update existing DOM for performance\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: createTransparentFill\n * \n * Creates a transparent fill.\n */\nmxVmlCanvas2D.prototype.createTransparentFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.src = mxClient.imageBasePath + '/transparent.gif';\n\tfill.type = 'tile';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createFill\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createFill = function()\n{\n\tvar s = this.state;\n\t\n\t// Gradients in foregrounds not supported because special gradients\n\t// with bounds must be created for each element in graphics-canvases\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fillColor;\n\n\tif (s.gradientColor != null)\n\t{\n\t\tfill.type = 'gradient';\n\t\tfill.method = 'none';\n\t\tfill.color2 = s.gradientColor;\n\t\tvar angle = 180 - s.rotation;\n\t\t\n\t\tif (s.gradientDirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tangle -= 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_EAST)\n\t\t{\n\t\t\tangle += 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tangle -= 180 + ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t angle += ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\t\n\t\tif (this.root.style.flip == 'x' || this.root.style.flip == 'y')\n\t\t{\n\t\t\tangle *= -1;\n\t\t}\n\n\t\t// LATER: Fix outer bounding box for rotated shapes used in VML.\n\t\tfill.angle = mxUtils.mod(angle, 360);\n\t\tfill.opacity = (s.alpha * s.gradientFillAlpha * 100) + '%';\n\t\tfill.setAttribute(mxClient.OFFICE_PREFIX + ':opacity2', (s.alpha * s.gradientAlpha * 100) + '%');\n\t}\n\telse if (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tfill.opacity = (s.alpha * s.fillAlpha * 100) + '%';\t\t\t\n\t}\n\t\n\treturn fill;\n};\n/**\n * Function: createStroke\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createStroke = function()\n{\n\tvar s = this.state;\n\tvar stroke = this.createVmlElement('stroke');\n\tstroke.endcap = s.lineCap || 'flat';\n\tstroke.joinstyle = s.lineJoin || 'miter';\n\tstroke.miterlimit = s.miterLimit || '10';\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tstroke.opacity = (s.alpha * s.strokeAlpha * 100) + '%';\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tstroke.dashstyle = this.getVmlDashStyle();\n\t}\n\t\n\treturn stroke;\n};\n\n/**\n * Function: getVmlDashPattern\n * \n * Returns a VML dash pattern for the current dashPattern.\n * See http://msdn.microsoft.com/en-us/library/bb264085(v=vs.85).aspx\n */\nmxVmlCanvas2D.prototype.getVmlDashStyle = function()\n{\n\tvar result = 'dash';\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar tok = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (tok.length > 0 && tok[0] == 1)\n\t\t{\n\t\t\tresult = '0 2';\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxVmlCanvas2D.prototype.createShadow = function(node, filled, stroked)\n{\n\tvar s = this.state;\n\tvar rad = -s.rotation * (Math.PI / 180);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\n\tvar dx = s.shadowDx * s.scale;\n\tvar dy = s.shadowDy * s.scale;\n\n\tif (this.root.style.flip == 'x')\n\t{\n\t\tdx *= -1;\n\t}\n\telse if (this.root.style.flip == 'y')\n\t{\n\t\tdy *= -1;\n\t}\n\t\n\tvar shadow = node.cloneNode(true);\n\tshadow.style.marginLeft = Math.round(dx * cos - dy * sin) + 'px';\n\tshadow.style.marginTop = Math.round(dx * sin + dy * cos) + 'px';\n\n\t// Workaround for wrong cloning in IE8 standards mode\n\tif (document.documentMode == 8)\n\t{\n\t\tshadow.strokeweight = node.strokeweight;\n\t\t\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\tshadow.path = this.path.join(' ') + ' e';\n\t\t\tshadow.style.width = this.root.style.width;\n\t\t\tshadow.style.height = this.root.style.height;\n\t\t\tshadow.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t}\n\t}\n\t\n\tif (stroked)\n\t{\n\t\tshadow.strokecolor = s.shadowColor;\n\t\tshadow.appendChild(this.createShadowStroke());\n\t}\n\telse\n\t{\n\t\tshadow.stroked = 'false';\n\t}\n\t\n\tif (filled)\n\t{\n\t\tshadow.appendChild(this.createShadowFill());\n\t}\n\telse\n\t{\n\t\tshadow.filled = 'false';\n\t}\n\t\n\treturn shadow;\n};\n\n/**\n * Function: createShadowFill\n * \n * Creates the fill for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = this.state.shadowColor;\n\tfill.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createShadowStroke\n * \n * Creates the stroke for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowStroke = function()\n{\n\tvar stroke = this.createStroke();\n\tstroke.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn stroke;\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxVmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (flipH && flipV)\n\t{\n\t\ttheta += 180;\n\t}\n\telse if (flipH)\n\t{\n\t\tthis.root.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tthis.root.style.flip = 'y';\n\t}\n\n\tif (flipH ? !flipV : flipV)\n\t{\n\t\ttheta *= -1;\n\t}\n\n\tthis.root.style.rotation = theta;\n\tthis.state.rotation = this.state.rotation + theta;\n\tthis.state.rotationCx = cx;\n\tthis.state.rotationCy = cy;\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxVmlCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createVmlElement('shape');\n\tthis.node.style.position = 'absolute';\n};\n\n/**\n * Function: quadTo\n * \n * Replaces quadratic curve with bezier curve in VML.\n */\nmxVmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar s = this.state;\n\n\tvar cpx0 = (this.lastX + s.dx) * s.scale;\n\tvar cpy0 = (this.lastY + s.dy) * s.scale;\n\tvar qpx1 = (x1 + s.dx) * s.scale;\n\tvar qpy1 = (y1 + s.dy) * s.scale;\n\tvar cpx3 = (x2 + s.dx) * s.scale;\n\tvar cpy3 = (y2 + s.dy) * s.scale;\n\t\n\tvar cpx1 = cpx0 + 2/3 * (qpx1 - cpx0);\n\tvar cpy1 = cpy0 + 2/3 * (qpy1 - cpy0);\n\t\n\tvar cpx2 = cpx3 + 2/3 * (qpx1 - cpx3);\n\tvar cpy2 = cpy3 + 2/3 * (qpy1 - cpy3);\n\t\n\tthis.path.push('c ' + this.format(cpx1) + ' ' + this.format(cpy1) +\n\t\t\t' ' + this.format(cpx2) + ' ' + this.format(cpy2) +\n\t\t\t' ' + this.format(cpx3) + ' ' + this.format(cpy3));\n\tthis.lastX = (cpx3 / s.scale) - s.dx;\n\tthis.lastY = (cpy3 / s.scale) - s.dy;\n\t\n};\n\n/**\n * Function: createRect\n * \n * Sets the glass gradient.\n */\nmxVmlCanvas2D.prototype.createRect = function(nodeName, x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createVmlElement(nodeName);\n\tn.style.position = 'absolute';\n\tn.style.left = this.format((x + s.dx) * s.scale) + 'px';\n\tn.style.top = this.format((y + s.dy) * s.scale) + 'px';\n\tn.style.width = this.format(w * s.scale) + 'px';\n\tn.style.height = this.format(h * s.scale) + 'px';\n\t\n\treturn n;\n};\n\n/**\n * Function: rect\n * \n * Sets the current path to a rectangle.\n */\nmxVmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tthis.node = this.createRect('rect', x, y, w, h);\n};\n\n/**\n * Function: roundrect\n * \n * Sets the current path to a rounded rectangle.\n */\nmxVmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.node = this.createRect('roundrect', x, y, w, h);\n\t// SetAttribute needed here for IE8\n\tthis.node.setAttribute('arcsize', Math.max(dx * 100 / w, dy * 100 / h) + '%');\n};\n\n/**\n * Function: ellipse\n * \n * Sets the current path to an ellipse.\n */\nmxVmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tthis.node = this.createRect('oval', x, y, w, h);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n */\nmxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tvar node = null;\n\t\n\tif (!aspect)\n\t{\n\t\tnode = this.createRect('image', x, y, w, h);\n\t\tnode.src = src;\n\t}\n\telse\n\t{\n\t\t// Uses fill with aspect to avoid asynchronous update of size\n\t\tnode = this.createRect('rect', x, y, w, h);\n\t\tnode.stroked = 'false';\n\t\t\n\t\t// Handles image aspect via fill\n\t\tvar fill = this.createVmlElement('fill');\n\t\tfill.aspect = (aspect) ? 'atmost' : 'ignore';\n\t\tfill.rotate = 'true';\n\t\tfill.type = 'frame';\n\t\tfill.src = src;\n\n\t\tnode.appendChild(fill);\n\t}\n\t\n\tif (flipH && flipV)\n\t{\n\t\tnode.style.rotation = '180';\n\t}\n\telse if (flipH)\n\t{\n\t\tnode.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tnode.style.flip = 'y';\n\t}\n\t\n\tif (this.state.alpha < 1 || this.state.fillAlpha < 1)\n\t{\n\t\t// KNOWN: Borders around transparent images in IE<9. Using fill.opacity\n\t\t// fixes this problem by adding a white background in all IE versions.\n\t\tnode.style.filter += 'alpha(opacity=' + (this.state.alpha * this.state.fillAlpha * 100) + ')';\n\t}\n\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: createText\n * \n * Creates the innermost element that contains the HTML text.\n */\nmxVmlCanvas2D.prototype.createDiv = function(str, align, valign, overflow)\n{\n\tvar div = this.createElement('div');\n\tvar state = this.state;\n\n\tvar css = '';\n\t\n\tif (state.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + mxUtils.htmlEntities(state.fontBackgroundColor) + ';';\n\t}\n\t\n\tif (state.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(state.fontBorderColor) + ';';\n\t}\n\t\n\tif (mxUtils.isNode(str))\n\t{\n\t\tdiv.appendChild(str);\n\t}\n\telse\n\t{\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\tvar div2 = this.createElement('div');\n\t\t\tdiv2.style.cssText = css;\n\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv2.style.zoom = '1';\n\t\t\tdiv2.style.textDecoration = 'inherit';\n\t\t\tdiv2.innerHTML = str;\n\t\t\tdiv.appendChild(div2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.cssText = css;\n\t\t\tdiv.innerHTML = str;\n\t\t}\n\t}\n\t\n\tvar style = div.style;\n\n\tstyle.fontSize = (state.fontSize / this.vmlScale) + 'px';\n\tstyle.fontFamily = state.fontFamily;\n\tstyle.color = state.fontColor;\n\tstyle.verticalAlign = 'top';\n\tstyle.textAlign = align || 'left';\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (state.fontSize * mxConstants.LINE_HEIGHT / this.vmlScale) + 'px' : mxConstants.LINE_HEIGHT;\n\n\tif ((state.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\n\tif ((state.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\t\n\tif ((state.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\t\n\treturn div;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Clipping, text background and border are not\n * supported for plain text in VML.\n */\nmxVmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tvar s = this.state;\n\t\t\n\t\tif (format == 'html')\n\t\t{\n\t\t\tif (s.rotation != null)\n\t\t\t{\n\t\t\t\tvar pt = this.rotatePoint(x, y, s.rotation, s.rotationCx, s.rotationCy);\n\t\t\t\t\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tx += s.dx;\n\t\t\t\ty += s.dy;\n\t\t\t\t\n\t\t\t\t// Workaround for rendering offsets\n\t\t\t\tif (overflow != 'fill' && valign == mxConstants.ALIGN_TOP)\n\t\t\t\t{\n\t\t\t\t\ty -= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\t// Adds event transparency in IE8 standards without the transparent background\n\t\t\t// filter which cannot be used due to bugs in the zoomed bounding box (too slow)\n\t\t\t// FIXME: No event transparency if inside v:rect (ie part of shape)\n\t\t\t// KNOWN: Offset wrong for rotated text with word that are longer than the wrapping\n\t\t\t// width in IE8 because real width of text cannot be determined here.\n\t\t\t// This should be fixed in mxText.updateBoundingBox by calling before this and\n\t\t\t// passing the real width to this method if not clipped and wrapped.\n\t\t\tvar abs = (document.documentMode == 8 && !mxClient.IS_EM) ? this.createVmlElement('group') : this.createElement('div');\n\t\t\tabs.style.position = 'absolute';\n\t\t\tabs.style.display = 'inline';\n\t\t\tabs.style.left = this.format(x) + 'px';\n\t\t\tabs.style.top = this.format(y) + 'px';\n\t\t\tabs.style.zoom = s.scale;\n\n\t\t\tvar box = this.createElement('div');\n\t\t\tbox.style.position = 'relative';\n\t\t\tbox.style.display = 'inline';\n\t\t\t\n\t\t\tvar margin = mxUtils.getAlignmentAsPoint(align, valign);\n\t\t\tvar dx = margin.x;\n\t\t\tvar dy = margin.y;\n\n\t\t\tvar div = this.createDiv(str, align, valign, overflow);\n\t\t\tvar inner = this.createElement('div');\n\t\t\t\n\t\t\tif (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tif (!clip)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\t// LATER: Check if other cases need to be handled\n\t\t\t\tif (div.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div;\n\t\t\t\t\t\n\t\t\t\t\tif (tmp.firstChild != null && tmp.firstChild.nodeName == 'DIV')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.firstChild.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\t}\n\t\t\t\n\t\t\tvar rot = s.rotation + (rotation || 0);\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tinner.style.display = 'inline';\n\t\t\t\tinner.style.zoom = '1';\n\t\t\t\tinner.appendChild(div);\n\n\t\t\t\t// Box not needed for rendering in IE8 standards\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM && this.root.nodeName != 'DIV')\n\t\t\t\t{\n\t\t\t\t\tbox.appendChild(inner);\n\t\t\t\t\tabs.appendChild(box);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tabs.appendChild(inner);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tbox.appendChild(div);\n\t\t\t\tabs.appendChild(box);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.display = 'inline';\n\t\t\t\tabs.appendChild(div);\n\t\t\t}\n\t\t\t\n\t\t\t// Inserts the node into the DOM\n\t\t\tif (this.root.nodeName != 'DIV')\n\t\t\t{\n\t\t\t\t// Rectangle to fix position in group\n\t\t\t\tvar rect = this.createVmlElement('rect');\n\t\t\t\trect.stroked = 'false';\n\t\t\t\trect.filled = 'false';\n\n\t\t\t\trect.appendChild(abs);\n\t\t\t\tthis.root.appendChild(rect);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.root.appendChild(abs);\n\t\t\t}\n\t\t\t\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.height = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.maxHeight = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tvar rad = rot * (Math.PI / 180);\n\t\t\t\t\n\t\t\t\t// Precalculate cos and sin for the rotation\n\t\t\t\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\t\t\t\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\t\t\t\trad %= 2 * Math.PI;\n\t\t\t\tif (rad < 0) rad += 2 * Math.PI;\n\t\t\t\trad %= Math.PI;\n\t\t\t\tif (rad > Math.PI / 2) rad = Math.PI - rad;\n\t\t\t\t\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.display = 'inline-block';\n\t\t\t\t\tinner.style.display = 'inline-block';\n\t\t\t\t\tbox.style.display = 'inline-block';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdiv.style.position = 'absolute';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tvar sizeDiv = div;\n\t\t\t\t\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar tmp = sizeDiv.offsetWidth + 3;\n\t\t\t\tvar oh = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tif (clip)\n\t\t\t\t{\n\t\t\t\t\tw = Math.min(w, tmp);\n\t\t\t\t\toh = Math.min(oh, h);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tw = tmp;\n\t\t\t\t}\n\n\t\t\t\t// Handles words that are longer than the given wrapping width\n\t\t\t\tif (wrap)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = w + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && (clip || overflow == 'width') && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\n\t\t\t\tvar top_fix = (h - h * cos + w * -sin) / 2 - real_sin * w * (dx + 0.5) + real_cos * h * (dy + 0.5);\n\t\t\t\tvar left_fix = (w - w * cos + h * -sin) / 2 + real_cos * w * (dx + 0.5) + real_sin * h * (dy + 0.5);\n\n\t\t\t\tif (abs.nodeName == 'group' && this.root.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\t// Workaround for bug where group gets moved away if left and top are non-zero in IE8 standards\n\t\t\t\t\tvar pos = this.createElement('div');\n\t\t\t\t\tpos.style.display = 'inline-block';\n\t\t\t\t\tpos.style.position = 'absolute';\n\t\t\t\t\tpos.style.left = this.format(x + (left_fix - w / 2) * s.scale) + 'px';\n\t\t\t\t\tpos.style.top = this.format(y + (top_fix - h / 2) * s.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\tabs.parentNode.appendChild(pos);\n\t\t\t\t\tpos.appendChild(abs);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar sc = (document.documentMode == 8 && !mxClient.IS_EM) ? 1 : s.scale;\n\t\t\t\t\t\n\t\t\t\t\tabs.style.left = this.format(x + (left_fix - w / 2) * sc) + 'px';\n\t\t\t\t\tabs.style.top = this.format(y + (top_fix - h / 2) * sc) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// KNOWN: Rotated text rendering quality is bad for IE9 quirks\n\t\t\t\tinner.style.filter = \"progid:DXImageTransform.Microsoft.Matrix(M11=\"+real_cos+\", M12=\"+\n\t\t\t\t\treal_sin+\", M21=\"+(-real_sin)+\", M22=\"+real_cos+\", sizingMethod='auto expand')\";\n\t\t\t\tinner.style.backgroundColor = this.rotatedHtmlBackground;\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tinner.style.filter += 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\n\t\t\t\t// Restore parent node for DIV\n\t\t\t\tinner.appendChild(div);\n\t\t\t\tdiv.style.position = '';\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t}\n\t\t\telse if (document.documentMode != 8 || mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tdiv.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tabs.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tvar divParent = div.parentNode;\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tw = div.offsetWidth;\n\t\t\t\tvar oh = div.offsetHeight;\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && clip && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t\tdivParent.appendChild(div);\n\t\t\t\t\n\t\t\t\tabs.style.left = this.format(x + w * dx * this.state.scale) + 'px';\n\t\t\t\tabs.style.top = this.format(y + h * dy * this.state.scale) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Faster rendering in IE8 without offsetWidth/Height\n\t\t\t\tbox.style.left = (dx * 100) + '%';\n\t\t\t\tbox.style.top = (dy * 100) + '%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, mxUtils.htmlEntities(str, false), align, valign, wrap, format, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: plainText\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\t// TextDirection is ignored since this code is not used (format is always HTML in the text function)\n\tvar s = this.state;\n\tx = (x + s.dx) * s.scale;\n\ty = (y + s.dy) * s.scale;\n\t\n\tvar node = this.createVmlElement('shape');\n\tnode.style.width = '1px';\n\tnode.style.height = '1px';\n\tnode.stroked = 'false';\n\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fontColor;\n\tfill.opacity = (s.alpha * 100) + '%';\n\tnode.appendChild(fill);\n\t\n\tvar path = this.createVmlElement('path');\n\tpath.textpathok = 'true';\n\tpath.v = 'm ' + this.format(0) + ' ' + this.format(0) + ' l ' + this.format(1) + ' ' + this.format(0);\n\t\n\tnode.appendChild(path);\n\t\n\t// KNOWN: Font family and text decoration ignored\n\tvar tp = this.createVmlElement('textpath');\n\ttp.style.cssText = 'v-text-align:' + align;\n\ttp.style.align = align;\n\ttp.style.fontFamily = s.fontFamily;\n\ttp.string = str;\n\ttp.on = 'true';\n\t\n\t// Scale via fontsize instead of node.style.zoom for correct offsets in IE8\n\tvar size = s.fontSize * s.scale / this.vmlScale;\n\ttp.style.fontSize = size + 'px';\n\t\n\t// Bold\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\ttp.style.fontWeight = 'bold';\n\t}\n\t\n\t// Italic\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\ttp.style.fontStyle = 'italic';\n\t}\n\n\t// Underline\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttp.style.textDecoration = 'underline';\n\t}\n\n\tvar lines = str.split('\\n');\n\tvar textHeight = size + (lines.length - 1) * size * mxConstants.LINE_HEIGHT;\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = - textHeight / 2;\n\t}\n\telse if (valign != mxConstants.ALIGN_MIDDLE) // top\n\t{\n\t\tdy = textHeight / 2;\n\t}\n\n\tif (rotation != null)\n\t{\n\t\tnode.style.rotation = rotation;\n\t\tvar rad = rotation * (Math.PI / 180);\n\t\tdx = Math.sin(rad) * dy;\n\t\tdy = Math.cos(rad) * dy;\n\t}\n\n\t// FIXME: Clipping is relative to bounding box\n\t/*if (clip)\n\t{\n\t\tnode.style.clip = 'rect(0px ' + this.format(w) + 'px ' + this.format(h) + 'px 0px)';\n\t}*/\n\t\n\tnode.appendChild(tp);\n\tnode.style.left = this.format(x - dx) + 'px';\n\tnode.style.top = this.format(y + dy) + 'px';\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxVmlCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGuide\n *\n * Implements the alignment of selection cells to other cells in the graph.\n * \n * Constructor: mxGuide\n * \n * Constructs a new guide object.\n */\nfunction mxGuide(graph, states)\n{\n\tthis.graph = graph;\n\tthis.setStates(states);\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph> instance.\n */\nmxGuide.prototype.graph = null;\n\n/**\n * Variable: states\n * \n * Contains the <mxCellStates> that are used for alignment.\n */\nmxGuide.prototype.states = null;\n\n/**\n * Variable: horizontal\n *\n * Specifies if horizontal guides are enabled. Default is true.\n */\nmxGuide.prototype.horizontal = true;\n\n/**\n * Variable: vertical\n *\n * Specifies if vertical guides are enabled. Default is true.\n */\nmxGuide.prototype.vertical = true;\n\n/**\n * Variable: vertical\n *\n * Holds the <mxShape> for the horizontal guide.\n */\nmxGuide.prototype.guideX = null;\n\n/**\n * Variable: vertical\n *\n * Holds the <mxShape> for the vertical guide.\n */\nmxGuide.prototype.guideY = null;\n\n/**\n * Variable: rounded\n *\n * Specifies if rounded coordinates should be used. Default is false.\n */\nmxGuide.prototype.rounded = false;\n\n/**\n * Function: setStates\n * \n * Sets the <mxCellStates> that should be used for alignment.\n */\nmxGuide.prototype.setStates = function(states)\n{\n\tthis.states = states;\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the guide should be enabled for the given native event. This\n * implementation always returns true.\n */\nmxGuide.prototype.isEnabledForEvent = function(evt)\n{\n\treturn true;\n};\n\n/**\n * Function: getGuideTolerance\n * \n * Returns the tolerance for the guides. Default value is gridSize / 2.\n */\nmxGuide.prototype.getGuideTolerance = function()\n{\n\treturn this.graph.gridSize / 2;\n};\n\n/**\n * Function: createGuideShape\n * \n * Returns the mxShape to be used for painting the respective guide. This\n * implementation returns a new, dashed and crisp <mxPolyline> using\n * <mxConstants.GUIDE_COLOR> and <mxConstants.GUIDE_STROKEWIDTH> as the format.\n * \n * Parameters:\n * \n * horizontal - Boolean that specifies which guide should be created.\n */\nmxGuide.prototype.createGuideShape = function(horizontal)\n{\n\tvar guide = new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH);\n\tguide.isDashed = true;\n\t\n\treturn guide;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored.\n */\nmxGuide.prototype.isStateIgnored = function(state)\n{\n\treturn false;\n};\n\n/**\n * Function: move\n * \n * Moves the <bounds> by the given <mxPoint> and returnt the snapped point.\n */\nmxGuide.prototype.move = function(bounds, delta, gridEnabled, clone)\n{\n\tif (this.states != null && (this.horizontal || this.vertical) && bounds != null && delta != null)\n\t{\n\t\tvar trx = this.graph.getView().translate;\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\t\n\t\tvar overrideX = false;\n\t\tvar stateX = null;\n\t\tvar valueX = null;\n\t\tvar overrideY = false;\n\t\tvar stateY = null;\n\t\tvar valueY = null;\n\t\t\n\t\tvar tt = this.getGuideTolerance();\n\t\tvar ttX = tt;\n\t\tvar ttY = tt;\n\t\t\n\t\tvar b = bounds.clone();\n\t\tb.x += delta.x;\n\t\tb.y += delta.y;\n\t\t\n\t\tvar left = b.x;\n\t\tvar right = b.x + b.width;\n\t\tvar center = b.getCenterX();\n\t\tvar top = b.y;\n\t\tvar bottom = b.y + b.height;\n\t\tvar middle = b.getCenterY();\n\t\n\t\t// Snaps the left, center and right to the given x-coordinate\n\t\tfunction snapX(x, state)\n\t\t{\n\t\t\tx += this.graph.panDx;\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (Math.abs(x - center) < ttX)\n\t\t\t{\n\t\t\t\tdx = x - bounds.getCenterX();\n\t\t\t\tttX = Math.abs(x - center);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(x - left) < ttX)\n\t\t\t{\n\t\t\t\tdx = x - bounds.x;\n\t\t\t\tttX = Math.abs(x - left);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(x - right) < ttX)\n\t\t\t{\n\t\t\t\tdx = x - bounds.x - bounds.width;\n\t\t\t\tttX = Math.abs(x - right);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateX = state;\n\t\t\t\tvalueX = Math.round(x - this.graph.panDx);\n\t\t\t\t\n\t\t\t\tif (this.guideX == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideX = this.createGuideShape(true);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideX.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideX.pointerEvents = false;\n\t\t\t\t\tthis.guideX.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideX = overrideX || override;\n\t\t};\n\t\t\n\t\t// Snaps the top, middle or bottom to the given y-coordinate\n\t\tfunction snapY(y, state)\n\t\t{\n\t\t\ty += this.graph.panDy;\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (Math.abs(y - middle) < ttY)\n\t\t\t{\n\t\t\t\tdy = y - bounds.getCenterY();\n\t\t\t\tttY = Math.abs(y -  middle);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(y - top) < ttY)\n\t\t\t{\n\t\t\t\tdy = y - bounds.y;\n\t\t\t\tttY = Math.abs(y - top);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(y - bottom) < ttY)\n\t\t\t{\n\t\t\t\tdy = y - bounds.y - bounds.height;\n\t\t\t\tttY = Math.abs(y - bottom);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateY = state;\n\t\t\t\tvalueY = Math.round(y - this.graph.panDy);\n\t\t\t\t\n\t\t\t\tif (this.guideY == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideY = this.createGuideShape(false);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideY.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideY.pointerEvents = false;\n\t\t\t\t\tthis.guideY.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideY = overrideY || override;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < this.states.length; i++)\n\t\t{\n\t\t\tvar state =  this.states[i];\n\t\t\t\n\t\t\tif (state != null && !this.isStateIgnored(state))\n\t\t\t{\n\t\t\t\t// Align x\n\t\t\t\tif (this.horizontal)\n\t\t\t\t{\n\t\t\t\t\tsnapX.call(this, state.getCenterX(), state);\n\t\t\t\t\tsnapX.call(this, state.x, state);\n\t\t\t\t\tsnapX.call(this, state.x + state.width, state);\n\t\t\t\t}\n\t\n\t\t\t\t// Align y\n\t\t\t\tif (this.vertical)\n\t\t\t\t{\n\t\t\t\t\tsnapY.call(this, state.getCenterY(), state);\n\t\t\t\t\tsnapY.call(this, state.y, state);\n\t\t\t\t\tsnapY.call(this, state.y + state.height, state);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Moves cells that are off-grid back to the grid on move\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tif (!overrideX)\n\t\t\t{\n\t\t\t\tvar tx = bounds.x - (this.graph.snap(bounds.x /\n\t\t\t\t\tscale - trx.x) + trx.x) * scale;\n\t\t\t\tdx = this.graph.snap(dx / scale) * scale - tx;\n\t\t\t}\n\t\t\t\n\t\t\tif (!overrideY)\n\t\t\t{\n\t\t\t\tvar ty = bounds.y - (this.graph.snap(bounds.y /\n\t\t\t\t\tscale - trx.y) + trx.y) * scale;\n\t\t\t\tdy = this.graph.snap(dy / scale) * scale - ty;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Redraws the guides\n\t\tvar c = this.graph.container;\n\t\t\n\t\tif (!overrideX && this.guideX != null)\n\t\t{\n\t\t\tthis.guideX.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideX != null)\n\t\t{\n\t\t\tvar minY = null;\n        \tvar maxY = null;\n        \t\n\t\t\tif (stateX != null && bounds != null)\n\t\t\t{\n\t\t\t\tminY = Math.min(bounds.y + dy - this.graph.panDy, stateX.y);\n\t\t\t\tmaxY = Math.max(bounds.y + bounds.height + dy - this.graph.panDy, stateX.y + stateX.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (minY != null && maxY != null)\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, minY), new mxPoint(valueX, maxY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, -this.graph.panDy), new mxPoint(valueX, c.scrollHeight - 3 - this.graph.panDy)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideX.stroke = this.getGuideColor(stateX, true);\n\t\t\tthis.guideX.node.style.visibility = 'visible';\n\t\t\tthis.guideX.redraw();\n\t\t}\n\t\t\n\t\tif (!overrideY && this.guideY != null)\n\t\t{\n\t\t\tthis.guideY.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideY != null)\n\t\t{\n\t\t\tvar minX = null;\n        \tvar maxX = null;\n        \t\n\t\t\tif (stateY != null && bounds != null)\n\t\t\t{\n\t\t\t\tminX = Math.min(bounds.x + dx - this.graph.panDx, stateY.x);\n\t\t\t\tmaxX = Math.max(bounds.x + bounds.width + dx - this.graph.panDx, stateY.x + stateY.width);\n\t\t\t}\n\t\t\t\n\t\t\tif (minX != null && maxX != null)\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(minX, valueY), new mxPoint(maxX, valueY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(-this.graph.panDx, valueY), new mxPoint(c.scrollWidth - 3 - this.graph.panDx, valueY)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideY.stroke = this.getGuideColor(stateY, false);\n\t\t\tthis.guideY.node.style.visibility = 'visible';\n\t\t\tthis.guideY.redraw();\n\t\t}\n\n\t\tdelta = this.getDelta(bounds, stateX, dx, stateY, dy)\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.getDelta = function(bounds, stateX, dx, stateY, dy)\n{\n\t// Round to pixels for virtual states (eg. page guides)\n\tif (this.rounded || (stateX != null && stateX.cell == null))\n\t{\n\t\tdx = Math.floor(bounds.x + dx) - bounds.x;\n\t}\n\n\tif (this.rounded || (stateY != null && stateY.cell == null))\n\t{\n\t\tdy = Math.floor(bounds.y + dy) - bounds.y;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.getGuideColor = function(state, horizontal)\n{\n\treturn mxConstants.GUIDE_COLOR;\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.hide = function()\n{\n\tthis.setVisible(false);\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides the current guides.\n */\nmxGuide.prototype.setVisible = function(visible)\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys all resources that this object uses.\n */\nmxGuide.prototype.destroy = function()\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.destroy();\n\t\tthis.guideX = null;\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.destroy();\n\t\tthis.guideY = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxShape\n *\n * Base class for all shapes. A shape in mxGraph is a\n * separate implementation for SVG, VML and HTML. Which\n * implementation to use is controlled by the <dialect>\n * property which is assigned from within the <mxCellRenderer>\n * when the shape is created. The dialect must be assigned\n * for a shape, and it does normally depend on the browser and\n * the confiuration of the graph (see <mxGraph> rendering hint).\n *\n * For each supported shape in SVG and VML, a corresponding\n * shape exists in mxGraph, namely for text, image, rectangle,\n * rhombus, ellipse and polyline. The other shapes are a\n * combination of these shapes (eg. label and swimlane)\n * or they consist of one or more (filled) path objects\n * (eg. actor and cylinder). The HTML implementation is\n * optional but may be required for a HTML-only view of\n * the graph.\n *\n * Custom Shapes:\n *\n * To extend from this class, the basic code looks as follows.\n * In the special case where the custom shape consists only of\n * one filled region or one filled region and an additional stroke\n * the <mxActor> and <mxCylinder> should be subclassed,\n * respectively.\n *\n * (code)\n * function CustomShape() { }\n * \n * CustomShape.prototype = new mxShape();\n * CustomShape.prototype.constructor = CustomShape; \n * (end)\n *\n * To register a custom shape in an existing graph instance,\n * one must register the shape under a new name in the graph's\n * cell renderer as follows:\n *\n * (code)\n * mxCellRenderer.registerShape('customShape', CustomShape);\n * (end)\n *\n * The second argument is the name of the constructor.\n *\n * In order to use the shape you can refer to the given name above\n * in a stylesheet. For example, to change the shape for the default\n * vertex style, the following code is used:\n *\n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'customShape';\n * (end)\n * \n * Constructor: mxShape\n *\n * Constructs a new shape.\n */\nfunction mxShape(stencil)\n{\n\tthis.stencil = stencil;\n\tthis.initStyles();\n};\n\n/**\n * Variable: dialect\n *\n * Holds the dialect in which the shape is to be painted.\n * This can be one of the DIALECT constants in <mxConstants>.\n */\nmxShape.prototype.dialect = null;\n\n/**\n * Variable: scale\n *\n * Holds the scale in which the shape is being painted.\n */\nmxShape.prototype.scale = 1;\n\n/**\n * Variable: antiAlias\n * \n * Rendering hint for configuring the canvas.\n */\nmxShape.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxShape.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: bounds\n *\n * Holds the <mxRectangle> that specifies the bounds of this shape.\n */\nmxShape.prototype.bounds = null;\n\n/**\n * Variable: points\n *\n * Holds the array of <mxPoints> that specify the points of this shape.\n */\nmxShape.prototype.points = null;\n\n/**\n * Variable: node\n *\n * Holds the outermost DOM node that represents this shape.\n */\nmxShape.prototype.node = null;\n \n/**\n * Variable: state\n * \n * Optional reference to the corresponding <mxCellState>.\n */\nmxShape.prototype.state = null;\n\n/**\n * Variable: style\n *\n * Optional reference to the style of the corresponding <mxCellState>.\n */\nmxShape.prototype.style = null;\n\n/**\n * Variable: boundingBox\n *\n * Contains the bounding box of the shape, that is, the smallest rectangle\n * that includes all pixels of the shape.\n */\nmxShape.prototype.boundingBox = null;\n\n/**\n * Variable: stencil\n *\n * Holds the <mxStencil> that defines the shape.\n */\nmxShape.prototype.stencil = null;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Event-tolerance for SVG strokes (in px). Default is 8. This is only passed\n * to the canvas in <createSvgCanvas> if <pointerEvents> is true.\n */\nmxShape.prototype.svgStrokeTolerance = 8;\n\n/**\n * Variable: pointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.pointerEvents = true;\n\n/**\n * Variable: svgPointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.svgPointerEvents = 'all';\n\n/**\n * Variable: shapePointerEvents\n * \n * Specifies if pointer events outside of shape should be handled. Default\n * is false.\n */\nmxShape.prototype.shapePointerEvents = false;\n\n/**\n * Variable: stencilPointerEvents\n * \n * Specifies if pointer events outside of stencils should be handled. Default\n * is false. Set this to true for backwards compatibility with the 1.x branch.\n */\nmxShape.prototype.stencilPointerEvents = false;\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 1.\n */\nmxShape.prototype.vmlScale = 1;\n\n/**\n * Variable: outline\n * \n * Specifies if the shape should be drawn as an outline. This disables all\n * fill colors and can be used to disable other drawing states that should\n * not be painted for outlines. Default is false. This should be set before\n * calling <apply>.\n */\nmxShape.prototype.outline = false;\n\n/**\n * Variable: visible\n * \n * Specifies if the shape is visible. Default is true.\n */\nmxShape.prototype.visible = true;\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxShape.prototype.useSvgBoundingBox = false;\n\n/**\n * Function: init\n *\n * Initializes the shape by creaing the DOM node using <create>\n * and adding it into the given container.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.init = function(container)\n{\n\tif (this.node == null)\n\t{\n\t\tthis.node = this.create(container);\n\t\t\n\t\tif (container != null)\n\t\t{\n\t\t\tcontainer.appendChild(this.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: initStyles\n *\n * Sets the styles to their default values.\n */\nmxShape.prototype.initStyles = function(container)\n{\n\tthis.strokewidth = 1;\n\tthis.rotation = 0;\n\tthis.opacity = 100;\n\tthis.fillOpacity = 100;\n\tthis.strokeOpacity = 100;\n\tthis.flipH = false;\n\tthis.flipV = false;\n};\n\n/**\n * Function: isParseVml\n * \n * Specifies if any VML should be added via insertAdjacentHtml to the DOM. This\n * is only needed in IE8 and only if the shape contains VML markup. This method\n * returns true.\n */\nmxShape.prototype.isParseVml = function()\n{\n\treturn true;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxShape.prototype.isHtmlAllowed = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Returns 0, or 0.5 if <strokewidth> % 2 == 1.\n */\nmxShape.prototype.getSvgScreenOffset = function()\n{\n\tvar sw = this.stencil && this.stencil.strokewidth != 'inherit' ? Number(this.stencil.strokewidth) : this.strokewidth;\n\t\n\treturn (mxUtils.mod(Math.max(1, Math.round(sw * this.scale)), 2) == 1) ? 0.5 : 0;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM node(s) for the shape in\n * the given container. This implementation invokes\n * <createSvg>, <createHtml> or <createVml> depending\n * on the <dialect> and style settings.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.create = function(container)\n{\n\tvar node = null;\n\t\n\tif (container != null && container.ownerSVGElement != null)\n\t{\n\t\tnode = this.createSvg(container);\n\t}\n\telse if (document.documentMode == 8 || !mxClient.IS_VML ||\n\t\t(this.dialect != mxConstants.DIALECT_VML && this.isHtmlAllowed()))\n\t{\n\t\tnode = this.createHtml(container);\n\t}\n\telse\n\t{\n\t\tnode = this.createVml(container);\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.createSvg = function()\n{\n\treturn document.createElementNS(mxConstants.NS_SVG, 'g');\n};\n\n/**\n * Function: createVml\n *\n * Creates and returns the VML node to represent this shape.\n */\nmxShape.prototype.createVml = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: reconfigure\n *\n * Reconfigures this shape. This will update the colors etc in\n * addition to the bounds or points.\n */\nmxShape.prototype.reconfigure = function()\n{\n\tthis.redraw();\n};\n\n/**\n * Function: redraw\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.redraw = function()\n{\n\tthis.updateBoundsFromPoints();\n\t\n\tif (this.visible && this.checkBounds())\n\t{\n\t\tthis.node.style.visibility = 'visible';\n\t\tthis.clear();\n\t\t\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.redrawHtmlShape();\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tthis.redrawShape();\n\t\t}\n\n\t\tthis.updateBoundingBox();\n\t}\n\telse\n\t{\n\t\tthis.node.style.visibility = 'hidden';\n\t\tthis.boundingBox = null;\n\t}\n};\n\n/**\n * Function: clear\n * \n * Removes all child nodes and resets all CSS.\n */\nmxShape.prototype.clear = function()\n{\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\twhile (this.node.lastChild != null)\n\t\t{\n\t\t\tthis.node.removeChild(this.node.lastChild);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.node.style.cssText = 'position:absolute;' + ((this.cursor != null) ?\n\t\t\t('cursor:' + this.cursor + ';') : '');\n\t\tthis.node.innerHTML = '';\n\t}\n};\n\n/**\n * Function: updateBoundsFromPoints\n * \n * Updates the bounds based on the points.\n */\nmxShape.prototype.updateBoundsFromPoints = function()\n{\n\tvar pts = this.points;\n\t\n\tif (pts != null && pts.length > 0 && pts[0] != null)\n\t{\n\t\tthis.bounds = new mxRectangle(Number(pts[0].x), Number(pts[0].y), 1, 1);\n\t\t\n\t\tfor (var i = 1; i < this.points.length; i++)\n\t\t{\n\t\t\tif (pts[i] != null)\n\t\t\t{\n\t\t\t\tthis.bounds.add(new mxRectangle(Number(pts[i].x), Number(pts[i].y), 1, 1));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the <mxRectangle> for the label bounds of this shape, based on the\n * given scaled and translated bounds of the shape. This method should not\n * change the rectangle in-place. This implementation returns the given rect.\n */\nmxShape.prototype.getLabelBounds = function(rect)\n{\n\tvar d = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar bounds = rect;\n\t\n\t// Normalizes argument for getLabelMargins hook\n\tif (d != mxConstants.DIRECTION_SOUTH && d != mxConstants.DIRECTION_NORTH &&\n\t\tthis.state != null && this.state.text != null &&\n\t\tthis.state.text.isPaintBoundsInverted())\n\t{\n\t\tbounds = bounds.clone();\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\t\n\tvar m = this.getLabelMargins(bounds);\n\t\n\tif (m != null)\n\t{\n\t\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, false) == '1';\n\t\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, false) == '1';\n\t\t\n\t\t// Handles special case for vertical labels\n\t\tif (this.state != null && this.state.text != null &&\n\t\t\tthis.state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.height;\n\t\t\tm.height = m.width;\n\t\t\tm.width = m.y;\n\t\t\tm.y = tmp;\n\n\t\t\ttmp = flipH;\n\t\t\tflipH = flipV;\n\t\t\tflipV = tmp;\n\t\t}\n\t\t\n\t\treturn mxUtils.getDirectedBounds(rect, m, this.style, flipH, flipV);\n\t}\n\t\n\treturn rect;\n};\n\n/**\n * Function: getLabelMargins\n * \n * Returns the scaled top, left, bottom and right margin to be used for\n * computing the label bounds as an <mxRectangle>, where the bottom and right\n * margin are defined in the width and height of the rectangle, respectively.\n */\nmxShape.prototype.getLabelMargins= function(rect)\n{\n\treturn null;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxShape.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height) &&\n\t\t\tthis.bounds.width > 0 && this.bounds.height > 0);\n};\n\n/**\n * Function: createVmlGroup\n *\n * Returns the temporary element used for rendering in IE8 standards mode.\n */\nmxShape.prototype.createVmlGroup = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\tnode.style.width = this.node.style.width;\n\tnode.style.height = this.node.style.height;\n\t\n\treturn node;\n};\n\n/**\n * Function: redrawShape\n *\n * Updates the SVG or VML shape.\n */\nmxShape.prototype.redrawShape = function()\n{\n\tvar canvas = this.createCanvas();\n\t\n\tif (canvas != null)\n\t{\n\t\t// Specifies if events should be handled\n\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\tthis.paint(canvas);\n\t\n\t\tif (this.node != canvas.root)\n\t\t{\n\t\t\t// Forces parsing in IE8 standards mode - slow! avoid\n\t\t\tthis.node.insertAdjacentHTML('beforeend', canvas.root.outerHTML);\n\t\t}\n\t\n\t\tif (this.node.nodeName == 'DIV' && document.documentMode == 8)\n\t\t{\n\t\t\t// Makes DIV transparent to events for IE8 in IE8 standards\n\t\t\t// mode (Note: Does not work for IE9 in IE8 standards mode\n\t\t\t// and not for IE11 in enterprise mode)\n\t\t\tthis.node.style.filter = '';\n\t\t\t\n\t\t\t// Adds event transparency in IE8 standards\n\t\t\tmxUtils.addTransparentBackgroundFilter(this.node);\n\t\t}\n\t\t\n\t\tthis.destroyCanvas(canvas);\n\t}\n};\n\n/**\n * Function: createCanvas\n * \n * Creates a new canvas for drawing this shape. May return null.\n */\nmxShape.prototype.createCanvas = function()\n{\n\tvar canvas = null;\n\t\n\t// LATER: Check if reusing existing DOM nodes improves performance\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\tcanvas = this.createSvgCanvas();\n\t}\n\telse if (mxClient.IS_VML)\n\t{\n\t\tthis.updateVmlContainer();\n\t\tcanvas = this.createVmlCanvas();\n\t}\n\t\n\tif (canvas != null && this.outline)\n\t{\n\t\tcanvas.setStrokeWidth(this.strokewidth);\n\t\tcanvas.setStrokeColor(this.stroke);\n\t\t\n\t\tif (this.isDashed != null)\n\t\t{\n\t\t\tcanvas.setDashed(this.isDashed);\n\t\t}\n\t\t\n\t\tcanvas.setStrokeWidth = function() {};\n\t\tcanvas.setStrokeColor = function() {};\n\t\tcanvas.setFillColor = function() {};\n\t\tcanvas.setGradient = function() {};\n\t\tcanvas.setDashed = function() {};\n\t\tcanvas.text = function() {};\n\t}\n\n\treturn canvas;\n};\n\n/**\n * Function: createSvgCanvas\n * \n * Creates and returns an <mxSvgCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createSvgCanvas = function()\n{\n\tvar canvas = new mxSvgCanvas2D(this.node, false);\n\tcanvas.strokeTolerance = (this.pointerEvents) ? this.svgStrokeTolerance : 0;\n\tcanvas.pointerEventsValue = this.svgPointerEvents;\n\tcanvas.blockImagePointerEvents = mxClient.IS_FF;\n\tvar off = this.getSvgScreenOffset();\n\n\tif (off != 0)\n\t{\n\t\tthis.node.setAttribute('transform', 'translate(' + off + ',' + off + ')');\n\t}\n\telse\n\t{\n\t\tthis.node.removeAttribute('transform');\n\t}\n\n\tcanvas.minStrokeWidth = this.minSvgStrokeWidth;\n\t\n\tif (!this.antiAlias)\n\t{\n\t\t// Rounds all numbers in the SVG output to integers\n\t\tcanvas.format = function(value)\n\t\t{\n\t\t\treturn Math.round(parseFloat(value));\n\t\t};\n\t}\n\t\n\treturn canvas;\n};\n\n/**\n * Function: createVmlCanvas\n * \n * Creates and returns an <mxVmlCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createVmlCanvas = function()\n{\n\t// Workaround for VML rendering bug in IE8 standards mode\n\tvar node = (document.documentMode == 8 && this.isParseVml()) ? this.createVmlGroup() : this.node;\n\tvar canvas = new mxVmlCanvas2D(node, false);\n\t\n\tif (node.tagUrn != '')\n\t{\n\t\tvar w = Math.max(1, Math.round(this.bounds.width));\n\t\tvar h = Math.max(1, Math.round(this.bounds.height));\n\t\tnode.coordsize = (w * this.vmlScale) + ',' + (h * this.vmlScale);\n\t\tcanvas.scale(this.vmlScale);\n\t\tcanvas.vmlScale = this.vmlScale;\n\t}\n\n\t// Painting relative to top, left shape corner\n\tvar s = this.scale;\n\tcanvas.translate(-Math.round(this.bounds.x / s), -Math.round(this.bounds.y / s));\n\t\n\treturn canvas;\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Updates the bounds of the VML container.\n */\nmxShape.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tvar w = Math.max(1, Math.round(this.bounds.width));\n\tvar h = Math.max(1, Math.round(this.bounds.height));\n\tthis.node.style.width = w + 'px';\n\tthis.node.style.height = h + 'px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.redrawHtmlShape = function()\n{\n\t// LATER: Refactor methods\n\tthis.updateHtmlBounds(this.node);\n\tthis.updateHtmlFilters(this.node);\n\tthis.updateHtmlColors(this.node);\n};\n\n/**\n * Function: updateHtmlFilters\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlFilters = function(node)\n{\n\tvar f = '';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tf += 'alpha(opacity=' + (this.opacity) + ')';\n\t}\n\t\n\tif (this.isShadow)\n\t{\n\t\t// FIXME: Cannot implement shadow transparency with filter\n\t\tf += 'progid:DXImageTransform.Microsoft.dropShadow (' +\n\t\t\t'OffX=\\'' + Math.round(mxConstants.SHADOW_OFFSET_X * this.scale) + '\\', ' +\n\t\t\t'OffY=\\'' + Math.round(mxConstants.SHADOW_OFFSET_Y * this.scale) + '\\', ' +\n\t\t\t'Color=\\'' + mxConstants.VML_SHADOWCOLOR + '\\')';\n\t}\n\t\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar start = this.fill;\n\t\tvar end = this.gradient;\n\t\tvar type = '0';\n\t\t\n\t\tvar lookup = {east:0,south:1,west:2,north:3};\n\t\tvar dir = (this.direction != null) ? lookup[this.direction] : 0;\n\t\t\n\t\tif (this.gradientDirection != null)\n\t\t{\n\t\t\tdir = mxUtils.mod(dir + lookup[this.gradientDirection] - 1, 4);\n\t\t}\n\n\t\tif (dir == 1)\n\t\t{\n\t\t\ttype = '1';\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 2)\n\t\t{\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 3)\n\t\t{\n\t\t\ttype = '1';\n\t\t}\n\t\t\n\t\tf += 'progid:DXImageTransform.Microsoft.gradient(' +\n\t\t\t'startColorStr=\\'' + start + '\\', endColorStr=\\'' + end +\n\t\t\t'\\', gradientType=\\'' + type + '\\')';\n\t}\n\n\tnode.style.filter = f;\n};\n\n/**\n * Function: mixedModeHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlColors = function(node)\n{\n\tvar color = this.stroke;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.borderColor = color;\n\n\t\tif (this.isDashed)\n\t\t{\n\t\t\tnode.style.borderStyle = 'dashed';\n\t\t}\n\t\telse if (this.strokewidth > 0)\n\t\t{\n\t\t\tnode.style.borderStyle = 'solid';\n\t\t}\n\n\t\tnode.style.borderWidth = Math.max(1, Math.ceil(this.strokewidth * this.scale)) + 'px';\n\t}\n\telse\n\t{\n\t\tnode.style.borderWidth = '0px';\n\t}\n\n\tcolor = (this.outline) ? null : this.fill;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.backgroundColor = color;\n\t\tnode.style.backgroundImage = 'none';\n\t}\n\telse if (this.pointerEvents)\n\t{\n\t\t node.style.backgroundColor = 'transparent';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tmxUtils.addTransparentBackgroundFilter(node);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(node);\n\t}\n};\n\n/**\n * Function: mixedModeHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlBounds = function(node)\n{\n\tvar sw = (document.documentMode >= 9) ? 0 : Math.ceil(this.strokewidth * this.scale);\n\tnode.style.borderWidth = Math.max(1, sw) + 'px';\n\tnode.style.overflow = 'hidden';\n\t\n\tnode.style.left = Math.round(this.bounds.x - sw / 2) + 'px';\n\tnode.style.top = Math.round(this.bounds.y - sw / 2) + 'px';\n\n\tif (document.compatMode == 'CSS1Compat')\n\t{\n\t\tsw = -sw;\n\t}\n\t\n\tnode.style.width = Math.round(Math.max(0, this.bounds.width + sw)) + 'px';\n\tnode.style.height = Math.round(Math.max(0, this.bounds.height + sw)) + 'px';\n};\n\n/**\n * Function: destroyCanvas\n * \n * Destroys the given canvas which was used for drawing. This implementation\n * increments the reference counts on all shared gradients used in the canvas.\n */\nmxShape.prototype.destroyCanvas = function(canvas)\n{\n\t// Manages reference counts\n\tif (canvas instanceof mxSvgCanvas2D)\n\t{\n\t\t// Increments ref counts\n\t\tfor (var key in canvas.gradients)\n\t\t{\n\t\t\tvar gradient = canvas.gradients[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.releaseSvgGradients(this.oldGradients);\n\t\tthis.oldGradients = canvas.gradients;\n\t}\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxShape.prototype.paint = function(c)\n{\n\tvar strokeDrawn = false;\n\t\n\tif (c != null && this.outline)\n\t{\n\t\tvar stroke = c.stroke;\n\t\t\n\t\tc.stroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tstroke.apply(this, arguments);\n\t\t};\n\n\t\tvar fillAndStroke = c.fillAndStroke;\n\t\t\n\t\tc.fillAndStroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tfillAndStroke.apply(this, arguments);\n\t\t};\n\t}\n\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\tif (this.isPaintBoundsInverted())\n\t{\n\t\tvar t = (w - h) / 2;\n\t\tx += t;\n\t\ty -= t;\n\t\tvar tmp = w;\n\t\tw = h;\n\t\th = tmp;\n\t}\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\t// Adds background rectangle to capture events\n\tvar bg = null;\n\t\n\tif ((this.stencil == null && this.points == null && this.shapePointerEvents) ||\n\t\t(this.stencil != null && this.stencilPointerEvents))\n\t{\n\t\tvar bb = this.createBoundingBox();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tbg = this.createTransparentSvgRectangle(bb.x, bb.y, bb.width, bb.height);\n\t\t\tthis.node.appendChild(bg);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar rect = c.createRect('rect', bb.x / s, bb.y / s, bb.width / s, bb.height / s);\n\t\t\trect.appendChild(c.createTransparentFill());\n\t\t\trect.stroked = 'false';\n\t\t\tc.root.appendChild(rect);\n\t\t}\n\t}\n\n\tif (this.stencil != null)\n\t{\n\t\tthis.stencil.drawShape(c, this, x, y, w, h);\n\t}\n\telse\n\t{\n\t\t// Stencils have separate strokewidth\n\t\tc.setStrokeWidth(this.strokewidth);\n\t\t\n\t\tif (this.points != null)\n\t\t{\n\t\t\t// Paints edge shape\n\t\t\tvar pts = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t\t{\n\t\t\t\tif (this.points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tpts.push(new mxPoint(this.points[i].x / s, this.points[i].y / s));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.paintEdgeShape(c, pts);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Paints vertex shape\n\t\t\tthis.paintVertexShape(c, x, y, w, h);\n\t\t}\n\t}\n\t\n\tif (bg != null && c.state != null && c.state.transform != null)\n\t{\n\t\tbg.setAttribute('transform', c.state.transform);\n\t}\n\t\n\t// Draws highlight rectangle if no stroke was used\n\tif (c != null && this.outline && !strokeDrawn)\n\t{\n\t\tc.rect(x, y, w, h);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxShape.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tvar dash = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tdash = this.style['dashPattern'];\t\t\n\t}\n\n\tc.setAlpha(this.opacity / 100);\n\tc.setFillAlpha(this.fillOpacity / 100);\n\tc.setStrokeAlpha(this.strokeOpacity / 100);\n\n\t// Sets alpha, colors and gradients\n\tif (this.isShadow != null)\n\t{\n\t\tc.setShadow(this.isShadow);\n\t}\n\t\n\t// Dash pattern\n\tif (this.isDashed != null)\n\t{\n\t\tc.setDashed(this.isDashed, (this.style != null) ?\n\t\t\tmxUtils.getValue(this.style, mxConstants.STYLE_FIX_DASH, false) == 1 : false);\n\t}\n\n\tif (dash != null)\n\t{\n\t\tc.setDashPattern(dash);\n\t}\n\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar b = this.getGradientBounds(c, x, y, w, h);\n\t\tc.setGradient(this.fill, this.gradient, b.x, b.y, b.width, b.height, this.gradientDirection);\n\t}\n\telse\n\t{\n\t\tc.setFillColor(this.fill);\n\t}\n\n\tc.setStrokeColor(this.stroke);\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxShape.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\treturn new mxRectangle(x, y, w, h);\n};\n\n/**\n * Function: updateTransform\n * \n * Sets the scale and rotation on the given canvas.\n */\nmxShape.prototype.updateTransform = function(c, x, y, w, h)\n{\n\t// NOTE: Currently, scale is implemented in state and canvas. This will\n\t// move to canvas in a later version, so that the states are unscaled\n\t// and untranslated and do not need an update after zooming or panning.\n\tc.scale(this.scale);\n\tc.rotate(this.getShapeRotation(), this.flipH, this.flipV, x + w / 2, y + h / 2);\n};\n\n/**\n * Function: paintVertexShape\n * \n * Paints the vertex shape.\n */\nmxShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tthis.paintBackground(c, x, y, w, h);\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintForeground(c, x, y, w, h);\n\t}\n};\n\n/**\n * Function: paintBackground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintBackground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintForeground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintForeground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintEdgeShape\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintEdgeShape = function(c, pts) { };\n\n/**\n * Function: getArcSize\n * \n * Returns the arc size for the given dimension.\n */\nmxShape.prototype.getArcSize = function(w, h)\n{\n\tvar r = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\tr = Math.min(w * f, h * f);\n\t}\n\t\n\treturn r;\n};\n\n/**\n * Function: paintGlassEffect\n * \n * Paints the glass gradient effect.\n */\nmxShape.prototype.paintGlassEffect = function(c, x, y, w, h, arc)\n{\n\tvar sw = Math.ceil(this.strokewidth / 2);\n\tvar size = 0.4;\n\t\n\tc.setGradient('#ffffff', '#ffffff', x, y, w, h * 0.6, 'south', 0.9, 0.1);\n\tc.begin();\n\tarc += 2 * sw;\n\t\t\n\tif (this.isRounded)\n\t{\n\t\tc.moveTo(x - sw + arc, y - sw);\n\t\tc.quadTo(x - sw, y - sw, x - sw, y - sw + arc);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw + arc);\n\t\tc.quadTo(x + w + sw, y - sw, x + w + sw - arc, y - sw);\n\t}\n\telse\n\t{\n\t\tc.moveTo(x - sw, y - sw);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw);\n\t}\n\t\n\tc.close();\n\tc.fill();\n};\n\n/**\n * Function: addPoints\n * \n * Paints the given points with rounded corners.\n */\nmxShape.prototype.addPoints = function(c, pts, rounded, arcSize, close, exclude, initialMove)\n{\n\tif (pts != null && pts.length > 0)\n\t{\n\t\tinitialMove = (initialMove != null) ? initialMove : true;\n\t\tvar pe = pts[pts.length - 1];\n\t\t\n\t\t// Adds virtual waypoint in the center between start and end point\n\t\tif (close && rounded)\n\t\t{\n\t\t\tpts = pts.slice();\n\t\t\tvar p0 = pts[0];\n\t\t\tvar wp = new mxPoint(pe.x + (p0.x - pe.x) / 2, pe.y + (p0.y - pe.y) / 2);\n\t\t\tpts.splice(0, 0, wp);\n\t\t}\n\t\n\t\tvar pt = pts[0];\n\t\tvar i = 1;\n\t\n\t\t// Draws the line segments\n\t\tif (initialMove)\n\t\t{\n\t\t\tc.moveTo(pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pt.x, pt.y);\n\t\t}\n\t\t\n\t\twhile (i < ((close) ? pts.length : pts.length - 1))\n\t\t{\n\t\t\tvar tmp = pts[mxUtils.mod(i, pts.length)];\n\t\t\tvar dx = pt.x - tmp.x;\n\t\t\tvar dy = pt.y - tmp.y;\n\t\n\t\t\tif (rounded && (dx != 0 || dy != 0) && (exclude == null || mxUtils.indexOf(exclude, i - 1) < 0))\n\t\t\t{\n\t\t\t\t// Draws a line from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the last point\n\t\t\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tvar nx1 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny1 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x1 = tmp.x + nx1;\n\t\t\t\tvar y1 = tmp.y + ny1;\n\t\t\t\tc.lineTo(x1, y1);\n\t\n\t\t\t\t// Draws a curve from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the next point\n\t\t\t\tvar next = pts[mxUtils.mod(i + 1, pts.length)];\n\t\t\t\t\n\t\t\t\t// Uses next non-overlapping point\n\t\t\t\twhile (i < pts.length - 2 && Math.round(next.x - tmp.x) == 0 && Math.round(next.y - tmp.y) == 0)\n\t\t\t\t{\n\t\t\t\t\tnext = pts[mxUtils.mod(i + 2, pts.length)];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdx = next.x - tmp.x;\n\t\t\t\tdy = next.y - tmp.y;\n\t\n\t\t\t\tdist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\t\tvar nx2 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny2 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x2 = tmp.x + nx2;\n\t\t\t\tvar y2 = tmp.y + ny2;\n\t\n\t\t\t\tc.quadTo(tmp.x, tmp.y, x2, y2);\n\t\t\t\ttmp = new mxPoint(x2, y2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.lineTo(tmp.x, tmp.y);\n\t\t\t}\n\t\n\t\t\tpt = tmp;\n\t\t\ti++;\n\t\t}\n\t\n\t\tif (close)\n\t\t{\n\t\t\tc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pe.x, pe.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxShape.prototype.resetStyles = function()\n{\n\tthis.initStyles();\n\n\tthis.spacing = 0;\n\t\n\tdelete this.fill;\n\tdelete this.gradient;\n\tdelete this.gradientDirection;\n\tdelete this.stroke;\n\tdelete this.startSize;\n\tdelete this.endSize;\n\tdelete this.startArrow;\n\tdelete this.endArrow;\n\tdelete this.direction;\n\tdelete this.isShadow;\n\tdelete this.isDashed;\n\tdelete this.isRounded;\n\tdelete this.glass;\n};\n\n/**\n * Function: apply\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_FILLCOLOR> => fill\n * - <mxConstants.STYLE_GRADIENTCOLOR> => gradient\n * - <mxConstants.STYLE_GRADIENT_DIRECTION> => gradientDirection\n * - <mxConstants.STYLE_OPACITY> => opacity\n * - <mxConstants.STYLE_FILL_OPACITY> => fillOpacity\n * - <mxConstants.STYLE_STROKE_OPACITY> => strokeOpacity\n * - <mxConstants.STYLE_STROKECOLOR> => stroke\n * - <mxConstants.STYLE_STROKEWIDTH> => strokewidth\n * - <mxConstants.STYLE_SHADOW> => isShadow\n * - <mxConstants.STYLE_DASHED> => isDashed\n * - <mxConstants.STYLE_SPACING> => spacing\n * - <mxConstants.STYLE_STARTSIZE> => startSize\n * - <mxConstants.STYLE_ENDSIZE> => endSize\n * - <mxConstants.STYLE_ROUNDED> => isRounded\n * - <mxConstants.STYLE_STARTARROW> => startArrow\n * - <mxConstants.STYLE_ENDARROW> => endArrow\n * - <mxConstants.STYLE_ROTATION> => rotation\n * - <mxConstants.STYLE_DIRECTION> => direction\n * - <mxConstants.STYLE_GLASS> => glass\n *\n * This keeps a reference to the <style>. If you need to keep a reference to\n * the cell, you can override this method and store a local reference to\n * state.cell or the <mxCellState> itself. If <outline> should be true, make\n * sure to set it before calling this method.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxShape.prototype.apply = function(state)\n{\n\tthis.state = state;\n\tthis.style = state.style;\n\n\tif (this.style != null)\n\t{\n\t\tthis.fill = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, this.fill);\n\t\tthis.gradient = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENTCOLOR, this.gradient);\n\t\tthis.gradientDirection = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENT_DIRECTION, this.gradientDirection);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_OPACITY, this.opacity);\n\t\tthis.fillOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_FILL_OPACITY, this.fillOpacity);\n\t\tthis.strokeOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_STROKE_OPACITY, this.strokeOpacity);\n\t\tthis.stroke = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, this.stroke);\n\t\tthis.strokewidth = mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth);\n\t\tthis.spacing = mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing);\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, this.startSize);\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, this.endSize);\n\t\tthis.startArrow = mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, this.startArrow);\n\t\tthis.endArrow = mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, this.endArrow);\n\t\tthis.rotation = mxUtils.getValue(this.style, mxConstants.STYLE_ROTATION, this.rotation);\n\t\tthis.direction = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, this.direction);\n\t\tthis.flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\tthis.flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\t\n\t\t// Legacy support for stencilFlipH/V\n\t\tif (this.stencil != null)\n\t\t{\n\t\t\tthis.flipH = mxUtils.getValue(this.style, 'stencilFlipH', 0) == 1 || this.flipH;\n\t\t\tthis.flipV = mxUtils.getValue(this.style, 'stencilFlipV', 0) == 1 || this.flipV;\n\t\t}\n\t\t\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH || this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tvar tmp = this.flipH;\n\t\t\tthis.flipH = this.flipV;\n\t\t\tthis.flipV = tmp;\n\t\t}\n\n\t\tthis.isShadow = mxUtils.getValue(this.style, mxConstants.STYLE_SHADOW, this.isShadow) == 1;\n\t\tthis.isDashed = mxUtils.getValue(this.style, mxConstants.STYLE_DASHED, this.isDashed) == 1;\n\t\tthis.isRounded = mxUtils.getValue(this.style, mxConstants.STYLE_ROUNDED, this.isRounded) == 1;\n\t\tthis.glass = mxUtils.getValue(this.style, mxConstants.STYLE_GLASS, this.glass) == 1;\n\t\t\n\t\tif (this.fill == mxConstants.NONE)\n\t\t{\n\t\t\tthis.fill = null;\n\t\t}\n\n\t\tif (this.gradient == mxConstants.NONE)\n\t\t{\n\t\t\tthis.gradient = null;\n\t\t}\n\n\t\tif (this.stroke == mxConstants.NONE)\n\t\t{\n\t\t\tthis.stroke = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the cursor on the given shape.\n *\n * Parameters:\n *\n * cursor - The cursor to be used.\n */\nmxShape.prototype.setCursor = function(cursor)\n{\n\tif (cursor == null)\n\t{\n\t\tcursor = '';\n\t}\n\t\n\tthis.cursor = cursor;\n\n\tif (this.node != null)\n\t{\n\t\tthis.node.style.cursor = cursor;\n\t}\n};\n\n/**\n * Function: getCursor\n * \n * Returns the current cursor.\n */\nmxShape.prototype.getCursor = function()\n{\n\treturn this.cursor;\n};\n\n/**\n * Function: isRoundable\n * \n * Hook for subclassers.\n */\nmxShape.prototype.isRoundable = function()\n{\n\treturn false;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxShape.prototype.updateBoundingBox = function()\n{\n\t// Tries to get bounding box from SVG subsystem\n\t// LATER: Use getBoundingClientRect for fallback in VML\n\tif (this.useSvgBoundingBox && this.node != null && this.node.ownerSVGElement != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar b = this.node.getBBox();\n\t\n\t\t\tif (b.width > 0 && b.height > 0)\n\t\t\t{\n\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\n\t\t\t\t// Adds strokeWidth\n\t\t\t\tthis.boundingBox.grow(this.strokewidth * this.scale / 2);\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tcatch(e)\n\t\t{\n\t\t\t// fallback to code below\n\t\t}\n\t}\n\n\tif (this.bounds != null)\n\t{\n\t\tvar bbox = this.createBoundingBox();\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tthis.augmentBoundingBox(bbox);\n\t\t\tvar rot = this.getShapeRotation();\n\t\t\t\n\t\t\tif (rot != 0)\n\t\t\t{\n\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, rot);\n\t\t\t}\n\t\t}\n\n\t\tthis.boundingBox = bbox;\n\t}\n};\n\n/**\n * Function: createBoundingBox\n *\n * Returns a new rectangle that represents the bounding box of the bare shape\n * with no shadows or strokewidths.\n */\nmxShape.prototype.createBoundingBox = function()\n{\n\tvar bb = this.bounds.clone();\n\n\tif ((this.stencil != null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\tthis.direction == mxConstants.DIRECTION_SOUTH)) || this.isPaintBoundsInverted())\n\t{\n\t\tbb.rotate90();\n\t}\n\t\n\treturn bb;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxShape.prototype.augmentBoundingBox = function(bbox)\n{\n\tif (this.isShadow)\n\t{\n\t\tbbox.width += Math.ceil(mxConstants.SHADOW_OFFSET_X * this.scale);\n\t\tbbox.height += Math.ceil(mxConstants.SHADOW_OFFSET_Y * this.scale);\n\t}\n\t\n\t// Adds strokeWidth\n\tbbox.grow(this.strokewidth * this.scale / 2);\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns true if the bounds should be inverted.\n */\nmxShape.prototype.isPaintBoundsInverted = function()\n{\n\t// Stencil implements inversion via aspect\n\treturn this.stencil == null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation from the style.\n */\nmxShape.prototype.getRotation = function()\n{\n\treturn (this.rotation != null) ? this.rotation : 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label.\n */\nmxShape.prototype.getTextRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) != 1)\n\t{\n\t\trot += mxText.prototype.verticalTextRotation;\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns the actual rotation of the shape.\n */\nmxShape.prototype.getShapeRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (this.direction != null)\n\t{\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\trot += 270;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\trot += 180;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\trot += 90;\n\t\t}\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: createTransparentSvgRectangle\n * \n * Adds a transparent rectangle that catches all events.\n */\nmxShape.prototype.createTransparentSvgRectangle = function(x, y, w, h)\n{\n\tvar rect = document.createElementNS(mxConstants.NS_SVG, 'rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\trect.setAttribute('fill', 'none');\n\trect.setAttribute('stroke', 'none');\n\trect.setAttribute('pointer-events', 'all');\n\t\n\treturn rect;\n};\n\n/**\n * Function: setTransparentBackgroundImage\n * \n * Sets a transparent background CSS style to catch all events.\n * \n * Paints the line shape.\n */\nmxShape.prototype.setTransparentBackgroundImage = function(node)\n{\n\tnode.style.backgroundImage = 'url(\\'' + mxClient.imageBasePath + '/transparent.gif\\')';\n};\n\n/**\n * Function: releaseSvgGradients\n * \n * Paints the line shape.\n */\nmxShape.prototype.releaseSvgGradients = function(grads)\n{\n\tif (grads != null)\n\t{\n\t\tfor (var key in grads)\n\t\t{\n\t\t\tvar gradient = grads[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) - 1;\n\t\t\t\t\n\t\t\t\tif (gradient.mxRefCount == 0 && gradient.parentNode != null)\n\t\t\t\t{\n\t\t\t\t\tgradient.parentNode.removeChild(gradient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the shape by removing it from the DOM and releasing the DOM\n * node associated with the shape using <mxEvent.release>.\n */\nmxShape.prototype.destroy = function()\n{\n\tif (this.node != null)\n\t{\n\t\tmxEvent.release(this.node);\n\t\t\n\t\tif (this.node.parentNode != null)\n\t\t{\n\t\t\tthis.node.parentNode.removeChild(this.node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n\t\n\t// Decrements refCount and removes unused\n\tthis.releaseSvgGradients(this.oldGradients);\n\tthis.oldGradients = null;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStencil\n *\n * Implements a generic shape which is based on a XML node as a description.\n * \n * shape:\n * \n * The outer element is *shape*, that has attributes:\n * \n * - \"name\", string, required. The stencil name that uniquely identifies the shape.\n * - \"w\" and \"h\" are optional decimal view bounds. This defines your co-ordinate\n * system for the graphics operations in the shape. The default is 100,100.\n * - \"aspect\", optional string. Either \"variable\", the default, or \"fixed\". Fixed\n * means always render the shape with the aspect ratio defined by the ratio w/h.\n * Variable causes the ratio to match that of the geometry of the current vertex.\n * - \"strokewidth\", optional string. Either an integer or the string \"inherit\".\n * \"inherit\" indicates that the strokeWidth of the cell is only changed on scaling,\n * not on resizing. Default is \"1\".\n * If numeric values are used, the strokeWidth of the cell is changed on both\n * scaling and resizing and the value defines the multiple that is applied to\n * the width.\n * \n * connections:\n * \n * If you want to define specific fixed connection points on the shape use the\n * *connections* element. Each *constraint* element within connections defines\n * a fixed connection point on the shape. Constraints have attributes:\n * \n * - \"perimeter\", required. 1 or 0. 0 sets the connection point where specified\n * by x,y. 1 Causes the position of the connection point to be extrapolated from\n * the center of the shape, through x,y to the point of intersection with the\n * perimeter of the shape.\n * - \"x\" and \"y\" are the position of the fixed point relative to the bounds of\n * the shape. They can be automatically adjusted if perimeter=1. So, (0,0) is top\n * left, (0.5,0.5) the center, (1,0.5) the center of the right hand edge of the\n * bounds, etc. Values may be less than 0 or greater than 1 to be positioned\n * outside of the shape.\n * - \"name\", optional string. A unique identifier for the port on the shape.\n * \n * background and foreground:\n * \n * The path of the graphics drawing is split into two elements, *foreground* and\n * *background*. The split is to define which part any shadow applied to the shape\n * is derived from (the background). This, generally, means the background is the\n * line tracing of the outside of the shape, but not always.\n * \n * Any stroke, fill or fillstroke of a background must be the first element of the\n * foreground element, they must not be used within *background*. If the background\n * is empty, this is not required.\n * \n * Because the background cannot have any fill or stroke, it can contain only one\n * *path*, *rect*, *roundrect* or *ellipse* element (or none). It can also not\n * include *image*, *text* or *include-shape*.\n * \n * Note that the state, styling and drawing in mxGraph stencils is very close in\n * design to that of HTML 5 canvas. Tutorials on this subject, if you're not\n * familiar with the topic, will give a good high-level introduction to the\n * concepts used.\n * \n * State:\n * \n * Rendering within the foreground and background elements has the concept of\n * state. There are two types of operations other than state save/load, styling\n * and drawing. The styling operations change the current state, so you can save\n * the current state with <save/> and pull the last saved state from the state\n * stack using <restore/>.\n * \n * Styling:\n * \n * The elements that change colors within the current state all take a hash\n * prefixed hex color code (\"#FFEA80\").\n * \n * - *strokecolor*, this sets the color that drawing paths will be rendered in\n * when a stroke or fillstroke command is issued.\n * - *fillcolor*, this sets the color that the inside of closed paths will be\n * rendered in when a fill or fillstroke command is issued.\n * - *fontcolor*, this sets the color that fonts are rendered in when text is drawn.\n * \n * *alpha* defines the degree of transparency used between 1.0 for fully opaque\n * and 0.0 for fully transparent.\n * \n * *fillalpha* defines the degree of fill transparency used between 1.0 for fully\n * opaque and 0.0 for fully transparent.\n * \n * *strokealpha* defines the degree of stroke transparency used between 1.0 for\n * fully opaque and 0.0 for fully transparent.\n * \n * *strokewidth* defines the integer thickness of drawing elements rendered by\n * stroking. Use fixed=\"1\" to apply the value as-is, without scaling.\n * \n * *dashed* is \"1\" for dashing enabled and \"0\" for disabled.\n * \n * When *dashed* is enabled the current dash pattern, defined by *dashpattern*,\n * is used on strokes. dashpattern is a sequence of space separated \"on, off\"\n * lengths that define what distance to paint the stroke for, then what distance\n * to paint nothing for, repeat... The default is \"3 3\". You could define a more\n * complex pattern with \"5 3 2 6\", for example. Generally, it makes sense to have\n * an even number of elements in the dashpattern, but that's not required.\n * \n * *linejoin*, *linecap* and *miterlimit* are best explained by the Mozilla page\n * on Canvas styling (about halfway down). The values are all the same except we\n * use \"flat\" for linecap, instead of Canvas' \"butt\".\n * \n * For font styling there are.\n * \n * - *fontsize*, an integer,\n * - *fontstyle*, an ORed bit pattern of bold (1), italic (2) and underline (4),\n * i.e bold underline is \"5\".\n * - *fontfamily*, is a string defining the typeface to be used.\n * \n * Drawing:\n * \n * Most drawing is contained within a *path* element. Again, the graphic\n * primitives are very similar to that of HTML 5 canvas.\n * \n * - *move* to attributes required decimals (x,y).\n * - *line* to attributes required decimals (x,y).\n * - *quad* to required decimals (x2,y2) via control point required decimals\n * (x1,y1).\n * - *curve* to required decimals (x3,y3), via control points required decimals\n * (x1,y1) and (x2,y2).\n * - *arc*, this doesn't follow the HTML Canvas signatures, instead it's a copy\n * of the SVG arc command. The SVG specification documentation gives the best\n * description of its behaviors. The attributes are named identically, they are\n * decimals and all required.\n * - *close* ends the current subpath and causes an automatic straight line to\n * be drawn from the current point to the initial point of the current subpath.\n * \n * Complex drawing:\n * \n * In addition to the graphics primitive operations there are non-primitive\n * operations. These provide an easy method to draw some basic shapes.\n * \n * - *rect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals\n * - *roundrect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals. Also\n * \"arcsize\" an optional decimal attribute defining how large, the corner curves\n * are.\n * - *ellipse*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals.\n * \n * Note that these 3 shapes and all paths must be followed by either a fill,\n * stroke, or fillstroke.\n * \n * Text:\n * \n * *text* elements have the following attributes.\n * \n * - \"str\", the text string to display, required.\n * - \"x\" and \"y\", the decimal location (x,y) of the text element, required.\n * - \"align\", the horizontal alignment of the text element, either \"left\",\n * \"center\" or \"right\". Optional, default is \"left\".\n * - \"valign\", the vertical alignment of the text element, either \"top\", \"middle\"\n * or \"bottom\". Optional, default is \"top\".\n * - \"localized\", 0 or 1, if 1 then the \"str\" actually contains a key to use to\n * fetch the value out of mxResources. Optional, default is\n * <mxStencil.defaultLocalized>.\n * - \"vertical\", 0 or 1, if 1 the label is rendered vertically (rotated by 90\n * degrees). Optional, default is 0.\n * - \"rotation\", angle in degrees (0 to 360). The angle to rotate the text by.\n * Optional, default is 0.\n * - \"align-shape\", 0 or 1, if 0 ignore the rotation of the shape when setting\n * the text rotation. Optional, default is 1.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the text element (ignored if the str attribute is not null).\n * \n * Images:\n * \n * *image* elements can either be external URLs, or data URIs, where supported\n * (not in IE 7-). Attributes are:\n * \n * - \"src\", required string. Either a data URI or URL.\n * - \"x\", \"y\", required decimals. The (x,y) position of the image.\n * - \"w\", \"h\", required decimals. The width and height of the image.\n * - \"flipH\" and \"flipV\", optional 0 or 1. Whether to flip the image along the\n * horizontal/vertical axis. Default is 0 for both.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the image source (ignored if the src attribute is not null).\n * \n * Sub-shapes:\n * \n * *include-shape* allow stencils to be rendered within the current stencil by\n * referencing the sub-stencil by name. Attributes are:\n * \n * - \"name\", required string. The unique shape name of the stencil.\n * - \"x\", \"y\", \"w\", \"h\", required decimals. The (x,y) position of the sub-shape\n * and its width and height.\n * \n * Constructor: mxStencil\n * \n * Constructs a new generic shape by setting <desc> to the given XML node and\n * invoking <parseDescription> and <parseConstraints>.\n * \n * Parameters:\n * \n * desc - XML node that contains the stencil description.\n */\nfunction mxStencil(desc)\n{\n\tthis.desc = desc;\n\tthis.parseDescription();\n\tthis.parseConstraints();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxStencil, mxShape);\n\n/**\n * Variable: defaultLocalized\n * \n * Static global variable that specifies the default value for the localized\n * attribute of the text element. Default is false.\n */\nmxStencil.defaultLocalized = false;\n\n/**\n * Function: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content and images. Default is false. Set this to true\n * if stencils can not contain user input.\n */\nmxStencil.allowEval = false;\n\n/**\n * Variable: desc\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.desc = null;\n\n/**\n * Variable: constraints\n * \n * Holds an array of <mxConnectionConstraints> as defined in the shape.\n */\nmxStencil.prototype.constraints = null;\n\n/**\n * Variable: aspect\n *\n * Holds the aspect of the shape. Default is 'auto'.\n */\nmxStencil.prototype.aspect = null;\n\n/**\n * Variable: w0\n *\n * Holds the width of the shape. Default is 100.\n */\nmxStencil.prototype.w0 = null;\n\n/**\n * Variable: h0\n *\n * Holds the height of the shape. Default is 100.\n */\nmxStencil.prototype.h0 = null;\n\n/**\n * Variable: bgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.bgNode = null;\n\n/**\n * Variable: fgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.fgNode = null;\n\n/**\n * Variable: strokewidth\n *\n * Holds the strokewidth direction from the description.\n */\nmxStencil.prototype.strokewidth = null;\n\n/**\n * Function: parseDescription\n *\n * Reads <w0>, <h0>, <aspect>, <bgNodes> and <fgNodes> from <desc>.\n */\nmxStencil.prototype.parseDescription = function()\n{\n\t// LATER: Preprocess nodes for faster painting\n\tthis.fgNode = this.desc.getElementsByTagName('foreground')[0];\n\tthis.bgNode = this.desc.getElementsByTagName('background')[0];\n\tthis.w0 = Number(this.desc.getAttribute('w') || 100);\n\tthis.h0 = Number(this.desc.getAttribute('h') || 100);\n\t\n\t// Possible values for aspect are: variable and fixed where\n\t// variable means fill the available space and fixed means\n\t// use w0 and h0 to compute the aspect.\n\tvar aspect = this.desc.getAttribute('aspect');\n\tthis.aspect = (aspect != null) ? aspect : 'variable';\n\t\n\t// Possible values for strokewidth are all numbers and \"inherit\"\n\t// where the inherit means take the value from the style (ie. the\n\t// user-defined stroke-width). Note that the strokewidth is scaled\n\t// by the minimum scaling that is used to draw the shape (sx, sy).\n\tvar sw = this.desc.getAttribute('strokewidth');\n\tthis.strokewidth = (sw != null) ? sw : '1';\n};\n\n/**\n * Function: parseConstraints\n *\n * Reads the constraints from <desc> into <constraints> using\n * <parseConstraint>.\n */\nmxStencil.prototype.parseConstraints = function()\n{\n\tvar conns = this.desc.getElementsByTagName('connections')[0];\n\t\n\tif (conns != null)\n\t{\n\t\tvar tmp = mxUtils.getChildNodes(conns);\n\t\t\n\t\tif (tmp != null && tmp.length > 0)\n\t\t{\n\t\t\tthis.constraints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t{\n\t\t\t\tthis.constraints.push(this.parseConstraint(tmp[i]));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: parseConstraint\n *\n * Parses the given XML node and returns its <mxConnectionConstraint>.\n */\nmxStencil.prototype.parseConstraint = function(node)\n{\n\tvar x = Number(node.getAttribute('x'));\n\tvar y = Number(node.getAttribute('y'));\n\tvar perimeter = node.getAttribute('perimeter') == '1';\n\tvar name = node.getAttribute('name');\n\t\n\treturn new mxConnectionConstraint(new mxPoint(x, y), perimeter, name);\n};\n\n/**\n * Function: evaluateTextAttribute\n * \n * Gets the given attribute as a text. The return value from <evaluateAttribute>\n * is used as a key to <mxResources.get> if the localized attribute in the text\n * node is 1 or if <defaultLocalized> is true.\n */\nmxStencil.prototype.evaluateTextAttribute = function(node, attribute, shape)\n{\n\tvar result = this.evaluateAttribute(node, attribute, shape);\n\tvar loc = node.getAttribute('localized');\n\t\n\tif ((mxStencil.defaultLocalized && loc == null) || loc == '1')\n\t{\n\t\tresult = mxResources.get(result);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: evaluateAttribute\n *\n * Gets the attribute for the given name from the given node. If the attribute\n * does not exist then the text content of the node is evaluated and if it is\n * a function it is invoked with <shape> as the only argument and the return\n * value is used as the attribute value to be returned.\n */\nmxStencil.prototype.evaluateAttribute = function(node, attribute, shape)\n{\n\tvar result = node.getAttribute(attribute);\n\t\n\tif (result == null)\n\t{\n\t\tvar text = mxUtils.getTextContent(node);\n\t\t\n\t\tif (text != null && mxStencil.allowEval)\n\t\t{\n\t\t\tvar funct = mxUtils.eval(text);\n\t\t\t\n\t\t\tif (typeof(funct) == 'function')\n\t\t\t{\n\t\t\t\tresult = funct(shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: drawShape\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawShape = function(canvas, shape, x, y, w, h)\n{\n\t// TODO: Internal structure (array of special structs?), relative and absolute\n\t// coordinates (eg. note shape, process vs star, actor etc.), text rendering\n\t// and non-proportional scaling, how to implement pluggable edge shapes\n\t// (start, segment, end blocks), pluggable markers, how to implement\n\t// swimlanes (title area) with this API, add icon, horizontal/vertical\n\t// label, indicator for all shapes, rotation\n\tvar direction = mxUtils.getValue(shape.style, mxConstants.STYLE_DIRECTION, null);\n\tvar aspect = this.computeAspect(shape.style, x, y, w, h, direction);\n\tvar minScale = Math.min(aspect.width, aspect.height);\n\tvar sw = (this.strokewidth == 'inherit') ?\n\t\t\tNumber(mxUtils.getNumber(shape.style, mxConstants.STYLE_STROKEWIDTH, 1)) :\n\t\t\tNumber(this.strokewidth) * minScale;\n\tcanvas.setStrokeWidth(sw);\n\n\t// Draws a transparent rectangle for catching events\n\tif (shape.style != null && mxUtils.getValue(shape.style, mxConstants.STYLE_POINTER_EVENTS, '0') == '1')\n\t{\n\t\tcanvas.setStrokeColor(mxConstants.NONE);\n\t\tcanvas.rect(x, y, w, h);\n\t\tcanvas.stroke();\n\t\tcanvas.setStrokeColor(shape.stroke);\n\t}\n\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.bgNode, aspect, false, true);\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.fgNode, aspect, true,\n\t\t!shape.outline || shape.style == null || mxUtils.getValue(\n\t\tshape.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0);\n};\n\n/**\n * Function: drawChildren\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawChildren = function(canvas, shape, x, y, w, h, node, aspect, disableShadow, paint)\n{\n\tif (node != null && w > 0 && h > 0)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t{\n\t\t\t\tthis.drawNode(canvas, shape, tmp, aspect, disableShadow, paint);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t}\n};\n\n/**\n * Function: computeAspect\n *\n * Returns a rectangle that contains the offset in x and y and the horizontal\n * and vertical scale in width and height used to draw this shape inside the\n * given <mxRectangle>.\n * \n * Parameters:\n * \n * shape - <mxShape> to be drawn.\n * bounds - <mxRectangle> that should contain the stencil.\n * direction - Optional direction of the shape to be darwn.\n */\nmxStencil.prototype.computeAspect = function(shape, x, y, w, h, direction)\n{\n\tvar x0 = x;\n\tvar y0 = y;\n\tvar sx = w / this.w0;\n\tvar sy = h / this.h0;\n\t\n\tvar inverse = (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH);\n\n\tif (inverse)\n\t{\n\t\tsy = w / this.h0;\n\t\tsx = h / this.w0;\n\t\t\n\t\tvar delta = (w - h) / 2;\n\n\t\tx0 += delta;\n\t\ty0 -= delta;\n\t}\n\n\tif (this.aspect == 'fixed')\n\t{\n\t\tsy = Math.min(sx, sy);\n\t\tsx = sy;\n\t\t\n\t\t// Centers the shape inside the available space\n\t\tif (inverse)\n\t\t{\n\t\t\tx0 += (h - this.w0 * sx) / 2;\n\t\t\ty0 += (w - this.h0 * sy) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx0 += (w - this.w0 * sx) / 2;\n\t\t\ty0 += (h - this.h0 * sy) / 2;\n\t\t}\n\t}\n\n\treturn new mxRectangle(x0, y0, sx, sy);\n};\n\n/**\n * Function: drawNode\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawNode = function(canvas, shape, node, aspect, disableShadow, paint)\n{\n\tvar name = node.nodeName;\n\tvar x0 = aspect.x;\n\tvar y0 = aspect.y;\n\tvar sx = aspect.width;\n\tvar sy = aspect.height;\n\tvar minScale = Math.min(sx, sy);\n\t\n\tif (name == 'save')\n\t{\n\t\tcanvas.save();\n\t}\n\telse if (name == 'restore')\n\t{\n\t\tcanvas.restore();\n\t}\n\telse if (paint)\n\t{\n\t\tif (name == 'path')\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\t\n\t\t\tvar parseRegularly = true;\n\t\t\t\n\t\t\tif (node.getAttribute('rounded') == '1')\n\t\t\t{\n\t\t\t\tparseRegularly = false;\n\t\t\t\t\n\t\t\t\tvar arcSize = Number(node.getAttribute('arcSize'));\n\t\t\t\tvar pointCount = 0;\n\t\t\t\tvar segs = [];\n\t\t\t\t\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childName = childNode.nodeName;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (childName == 'move' || childName == 'line')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (childName == 'move' || segs.length == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsegs.push([]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tsegs[segs.length - 1].push(new mxPoint(x0 + Number(childNode.getAttribute('x')) * sx,\n\t\t\t\t\t\t\t\ty0 + Number(childNode.getAttribute('y')) * sy));\n\t\t\t\t\t\t\tpointCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//We only support move and line for rounded corners\n\t\t\t\t\t\t\tparseRegularly = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\n\t\t\t\tif (!parseRegularly && pointCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < segs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar close = false, ps = segs[i][0], pe = segs[i][segs[i].length - 1];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (ps.x == pe.x && ps.y == pe.y) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsegs[i].pop();\n\t\t\t\t\t\t\tclose = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.addPoints(canvas, segs[i], true, arcSize, close);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tparseRegularly = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (parseRegularly)\n\t\t\t{\n\t\t\t\t// Renders the elements inside the given path\n\t\t\t\tvar childNode = node.firstChild;\n\t\t\t\t\n\t\t\t\twhile (childNode != null)\n\t\t\t\t{\n\t\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.drawNode(canvas, shape, childNode, aspect, disableShadow, paint);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (name == 'close')\n\t\t{\n\t\t\tcanvas.close();\n\t\t}\n\t\telse if (name == 'move')\n\t\t{\n\t\t\tcanvas.moveTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'line')\n\t\t{\n\t\t\tcanvas.lineTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'quad')\n\t\t{\n\t\t\tcanvas.quadTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy);\n\t\t}\n\t\telse if (name == 'curve')\n\t\t{\n\t\t\tcanvas.curveTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x3')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y3')) * sy);\n\t\t}\n\t\telse if (name == 'arc')\n\t\t{\n\t\t\tcanvas.arcTo(Number(node.getAttribute('rx')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('ry')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('x-axis-rotation')),\n\t\t\t\t\tNumber(node.getAttribute('large-arc-flag')),\n\t\t\t\t\tNumber(node.getAttribute('sweep-flag')),\n\t\t\t\t\tx0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'rect')\n\t\t{\n\t\t\tcanvas.rect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'roundrect')\n\t\t{\n\t\t\tvar arcsize = Number(node.getAttribute('arcsize'));\n\t\n\t\t\tif (arcsize == 0)\n\t\t\t{\n\t\t\t\tarcsize = mxConstants.RECTANGLE_ROUNDING_FACTOR * 100;\n\t\t\t}\n\t\t\t\n\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\tvar factor = Number(arcsize) / 100;\n\t\t\tvar r = Math.min(w * factor, h * factor);\n\t\t\t\n\t\t\tcanvas.roundrect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tw, h, r, r);\n\t\t}\n\t\telse if (name == 'ellipse')\n\t\t{\n\t\t\tcanvas.ellipse(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'image')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar src = this.evaluateAttribute(node, 'src', shape);\n\t\t\t\t\n\t\t\t\tcanvas.image(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy,\n\t\t\t\t\tsrc, false, node.getAttribute('flipH') == '1',\n\t\t\t\t\tnode.getAttribute('flipV') == '1');\n\t\t\t}\n\t\t}\n\t\telse if (name == 'text')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar str = this.evaluateTextAttribute(node, 'str', shape);\n\t\t\t\tvar rotation = node.getAttribute('vertical') == '1' ? -90 : 0;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('align-shape') == '0')\n\t\t\t\t{\n\t\t\t\t\tvar dr = shape.rotation;\n\t\t\n\t\t\t\t\t// Depends on flipping\n\t\t\t\t\tvar flipH = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (flipH && flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t\telse if (flipH || flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation += dr;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\trotation -= node.getAttribute('rotation');\n\t\t\n\t\t\t\tcanvas.text(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\t\t0, 0, str, node.getAttribute('align') || 'left',\n\t\t\t\t\t\tnode.getAttribute('valign') || 'top', false, '',\n\t\t\t\t\t\tnull, false, rotation);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'include-shape')\n\t\t{\n\t\t\tvar stencil = mxStencilRegistry.getStencil(node.getAttribute('name'));\n\t\t\t\n\t\t\tif (stencil != null)\n\t\t\t{\n\t\t\t\tvar x = x0 + Number(node.getAttribute('x')) * sx;\n\t\t\t\tvar y = y0 + Number(node.getAttribute('y')) * sy;\n\t\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\t\t\n\t\t\t\tstencil.drawShape(canvas, shape, x, y, w, h);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'fillstroke')\n\t\t{\n\t\t\tcanvas.fillAndStroke();\n\t\t}\n\t\telse if (name == 'fill')\n\t\t{\n\t\t\tcanvas.fill();\n\t\t}\n\t\telse if (name == 'stroke')\n\t\t{\n\t\t\tcanvas.stroke();\n\t\t}\n\t\telse if (name == 'strokewidth')\n\t\t{\n\t\t\tvar s = (node.getAttribute('fixed') == '1') ? 1 : minScale;\n\t\t\tcanvas.setStrokeWidth(Number(node.getAttribute('width')) * s);\n\t\t}\n\t\telse if (name == 'dashed')\n\t\t{\n\t\t\tcanvas.setDashed(node.getAttribute('dashed') == '1');\n\t\t}\n\t\telse if (name == 'dashpattern')\n\t\t{\n\t\t\tvar value = node.getAttribute('pattern');\n\t\t\t\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\tvar tmp = value.split(' ');\n\t\t\t\tvar pat = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (tmp[i].length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tpat.push(Number(tmp[i]) * minScale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = pat.join(' ');\n\t\t\t\tcanvas.setDashPattern(value);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'strokecolor')\n\t\t{\n\t\t\tcanvas.setStrokeColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'linecap')\n\t\t{\n\t\t\tcanvas.setLineCap(node.getAttribute('cap'));\n\t\t}\n\t\telse if (name == 'linejoin')\n\t\t{\n\t\t\tcanvas.setLineJoin(node.getAttribute('join'));\n\t\t}\n\t\telse if (name == 'miterlimit')\n\t\t{\n\t\t\tcanvas.setMiterLimit(Number(node.getAttribute('limit')));\n\t\t}\n\t\telse if (name == 'fillcolor')\n\t\t{\n\t\t\tcanvas.setFillColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'alpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fillalpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'strokealpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fontcolor')\n\t\t{\n\t\t\tcanvas.setFontColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'fontstyle')\n\t\t{\n\t\t\tcanvas.setFontStyle(node.getAttribute('style'));\n\t\t}\n\t\telse if (name == 'fontfamily')\n\t\t{\n\t\t\tcanvas.setFontFamily(node.getAttribute('family'));\n\t\t}\n\t\telse if (name == 'fontsize')\n\t\t{\n\t\t\tcanvas.setFontSize(Number(node.getAttribute('size')) * minScale);\n\t\t}\n\t\t\n\t\tif (disableShadow && (name == 'fillstroke' || name == 'fill' || name == 'stroke'))\n\t\t{\n\t\t\tdisableShadow = false;\n\t\t\tcanvas.setShadow(false);\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n * \n * Code to add stencils.\n * \n * (code)\n * var req = mxUtils.load('test/stencils.xml');\n * var root = req.getDocumentElement();\n * var shape = root.firstChild;\n * \n * while (shape != null)\n * {\n * \t if (shape.nodeType == mxConstants.NODETYPE_ELEMENT)\n *   {\n *     mxStencilRegistry.addStencil(shape.getAttribute('name'), new mxStencil(shape));\n *   }\n *   \n *   shape = shape.nextSibling;\n * }\n * (end)\n */\nvar mxStencilRegistry =\n{\n\t/**\n\t * Class: mxStencilRegistry\n\t * \n\t * A singleton class that provides a registry for stencils and the methods\n\t * for painting those stencils onto a canvas or into a DOM.\n\t */\n\tstencils: {},\n\t\n\t/**\n\t * Function: addStencil\n\t * \n\t * Adds the given <mxStencil>.\n\t */\n\taddStencil: function(name, stencil)\n\t{\n\t\tmxStencilRegistry.stencils[name] = stencil;\n\t},\n\t\n\t/**\n\t * Function: getStencil\n\t * \n\t * Returns the <mxStencil> for the given name.\n\t */\n\tgetStencil: function(name)\n\t{\n\t\treturn mxStencilRegistry.stencils[name];\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxMarker =\n{\n\t/**\n\t * Class: mxMarker\n\t * \n\t * A static class that implements all markers for VML and SVG using a\n\t * registry. NOTE: The signatures in this class will change.\n\t * \n\t * Variable: markers\n\t * \n\t * Maps from markers names to functions to paint the markers.\n\t */\n\tmarkers: [],\n\t\n\t/**\n\t * Function: addMarker\n\t * \n\t * Adds a factory method that updates a given endpoint and returns a\n\t * function to paint the marker onto the given canvas.\n\t */\n\taddMarker: function(type, funct)\n\t{\n\t\tmxMarker.markers[type] = funct;\n\t},\n\t\n\t/**\n\t * Function: createMarker\n\t * \n\t * Returns a function to paint the given marker.\n\t */\n\tcreateMarker: function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar funct = mxMarker.markers[type];\n\t\t\n\t\treturn (funct != null) ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) : null;\n\t}\n\n};\n\n/**\n * Adds the classic and block marker factory method.\n */\n(function()\n{\n\tfunction createArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tvar f = (type != mxConstants.ARROW_CLASSIC && type != mxConstants.ARROW_CLASSIC_THIN) ? 1 : 3 / 4;\n\t\t\tpe.x += -unitX * f - endOffsetX;\n\t\t\tpe.y += -unitY * f - endOffsetY;\n\t\t\t\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\n\t\t\t\tif (type == mxConstants.ARROW_CLASSIC || type == mxConstants.ARROW_CLASSIC_THIN)\n\t\t\t\t{\n\t\t\t\t\tcanvas.lineTo(pt.x - unitX * 3 / 4, pt.y - unitY * 3 / 4);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.close();\n\t\n\t\t\t\tif (filled)\n\t\t\t\t{\n\t\t\t\t\tcanvas.fillAndStroke();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.stroke();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('classic', createArrow(2));\n\tmxMarker.addMarker('classicThin', createArrow(3));\n\tmxMarker.addMarker('block', createArrow(2));\n\tmxMarker.addMarker('blockThin', createArrow(3));\n\t\n\tfunction createOpenArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\t\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tpe.x += -endOffsetX * 2;\n\t\t\tpe.y += -endOffsetY * 2;\n\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\tcanvas.lineTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.stroke();\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('open', createOpenArrow(2));\n\tmxMarker.addMarker('openThin', createOpenArrow(3));\n\t\n\tmxMarker.addMarker('oval', function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar a = size / 2;\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpe.x -= unitX * a;\n\t\tpe.y -= unitY * a;\n\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.ellipse(pt.x - a, pt.y - a, size, size);\n\t\t\t\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction diamond(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t// 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n\t\t// only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n\t\t// Note these values and the tk variable below are dependent, update\n\t\t// both together (saves trig hard coding it).\n\t\tvar swFactor = (type == mxConstants.ARROW_DIAMOND) ?  0.7071 : 0.9862;\n\t\tvar endOffsetX = unitX * sw * swFactor;\n\t\tvar endOffsetY = unitY * sw * swFactor;\n\t\t\n\t\tunitX = unitX * (size + sw);\n\t\tunitY = unitY * (size + sw);\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpt.x -= endOffsetX;\n\t\tpt.y -= endOffsetY;\n\t\t\n\t\tpe.x += -unitX - endOffsetX;\n\t\tpe.y += -unitY - endOffsetY;\n\t\t\n\t\t// thickness factor for diamond\n\t\tvar tk = ((type == mxConstants.ARROW_DIAMOND) ?  2 : 3.4);\n\t\t\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n\t\t\tcanvas.lineTo(pt.x - unitX, pt.y - unitY);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n\t\t\tcanvas.close();\n\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t};\n\n\tmxMarker.addMarker('diamond', diamond);\n\tmxMarker.addMarker('diamondThin', diamond);\n})();\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxActor\n *\n * Extends <mxShape> to implement an actor shape. If a custom shape with one\n * filled area is needed, then this shape's <redrawPath> should be overridden.\n * \n * Example:\n * \n * (code)\n * function SampleShape() { }\n * \n * SampleShape.prototype = new mxActor();\n * SampleShape.prototype.constructor = vsAseShape;\n * \n * mxCellRenderer.registerShape('sample', SampleShape);\n * SampleShape.prototype.redrawPath = function(path, x, y, w, h)\n * {\n *   path.moveTo(0, 0);\n *   path.lineTo(w, h);\n *   // ...\n *   path.close();\n * }\n * (end)\n * \n * This shape is registered under <mxConstants.SHAPE_ACTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxActor\n *\n * Constructs a new actor shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxActor(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxActor, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxActor.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxActor.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar width = w/3;\n\tc.moveTo(0, h);\n\tc.curveTo(0, 3 * h / 5, 0, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w / 2 - width, 2 * h / 5, w / 2 - width, 0, w / 2, 0);\n\tc.curveTo(w / 2 + width, 0, w / 2 + width, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w, 2 * h / 5, w, 3 * h / 5, w, h);\n\tc.close();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCloud\n *\n * Extends <mxActor> to implement a cloud shape.\n * \n * This shape is registered under <mxConstants.SHAPE_CLOUD> in\n * <mxCellRenderer>.\n * \n * Constructor: mxCloud\n *\n * Constructs a new cloud shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCloud(bounds, fill, stroke, strokewidth)\n{\n\tmxActor.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxCloud, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCloud.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tc.moveTo(0.25 * w, 0.25 * h);\n\tc.curveTo(0.05 * w, 0.25 * h, 0, 0.5 * h, 0.16 * w, 0.55 * h);\n\tc.curveTo(0, 0.66 * h, 0.18 * w, 0.9 * h, 0.31 * w, 0.8 * h);\n\tc.curveTo(0.4 * w, h, 0.7 * w, h, 0.8 * w, 0.8 * h);\n\tc.curveTo(w, 0.8 * h, w, 0.6 * h, 0.875 * w, 0.5 * h);\n\tc.curveTo(w, 0.3 * h, 0.8 * w, 0.1 * h, 0.625 * w, 0.2 * h);\n\tc.curveTo(0.5 * w, 0.05 * h, 0.3 * w, 0.05 * h, 0.25 * w, 0.25 * h);\n\tc.close();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangleShape\n *\n * Extends <mxShape> to implement a rectangle shape.\n * This shape is registered under <mxConstants.SHAPE_RECTANGLE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRectangleShape\n *\n * Constructs a new rectangle shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRectangleShape(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRectangleShape, mxShape);\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient.\n */\nmxRectangleShape.prototype.isHtmlAllowed = function()\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\t\t\n\t}\n\t\n\treturn !this.isRounded && !this.glass && this.rotation == 0 && (events ||\n\t\t(this.fill != null && this.fill != mxConstants.NONE));\n};\n\n/**\n * Function: paintBackground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\n\t}\n\t\n\tif (events || (this.fill != null && this.fill != mxConstants.NONE) ||\n\t\t(this.stroke != null && this.stroke != mxConstants.NONE))\n\t{\n\t\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t\t{\n\t\t\tc.pointerEvents = false;\n\t\t}\n\t\t\n\t\tif (this.isRounded)\n\t\t{\n\t\t\tvar r = 0;\n\t\t\t\n\t\t\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t\t\t{\n\t\t\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\t\t\tr = Math.min(w * f, h * f);\n\t\t\t}\n\t\t\t\n\t\t\tc.roundrect(x, y, w, h, r, r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.rect(x, y, w, h);\n\t\t}\n\t\t\t\n\t\tc.fillAndStroke();\n\t}\n};\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRectangleShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (this.glass && !this.outline && this.fill != null && this.fill != mxConstants.NONE)\n\t{\n\t\tthis.paintGlassEffect(c, x, y, w, h, this.getArcSize(w + this.strokewidth, h + this.strokewidth));\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEllipse\n *\n * Extends <mxShape> to implement an ellipse shape.\n * This shape is registered under <mxConstants.SHAPE_ELLIPSE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxEllipse\n *\n * Constructs a new ellipse shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxEllipse, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Paints the ellipse shape.\n */\nmxEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDoubleEllipse\n *\n * Extends <mxShape> to implement a double ellipse shape. This shape is\n * registered under <mxConstants.SHAPE_DOUBLE_ELLIPSE> in <mxCellRenderer>.\n * Use the following override to only fill the inner ellipse in this shape:\n * \n * (code)\n * mxDoubleEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n * {\n *   c.ellipse(x, y, w, h);\n *   c.stroke();\n *   \n *   var inset = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n *   x += inset;\n *   y += inset;\n *   w -= 2 * inset;\n *   h -= 2 * inset;\n *   \n *   if (w > 0 && h > 0)\n *   {\n *     c.ellipse(x, y, w, h);\n *   }\n *   \n *   c.fillAndStroke();\n * };\n * (end)\n * \n * Constructor: mxDoubleEllipse\n *\n * Constructs a new ellipse shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxDoubleEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxDoubleEllipse, mxShape);\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 10.\n */\nmxDoubleEllipse.prototype.vmlScale = 10;\n\n/**\n * Function: paintBackground\n * \n * Paints the background.\n */\nmxDoubleEllipse.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: paintForeground\n * \n * Paints the foreground.\n */\nmxDoubleEllipse.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (!this.outline)\n\t{\n\t\tvar margin = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n\t\tx += margin;\n\t\ty += margin;\n\t\tw -= 2 * margin;\n\t\th -= 2 * margin;\n\t\t\n\t\t// FIXME: Rounding issues in IE8 standards mode (not in 1.x)\n\t\tif (w > 0 && h > 0)\n\t\t{\n\t\t\tc.ellipse(x, y, w, h);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds for the label.\n */\nmxDoubleEllipse.prototype.getLabelBounds = function(rect)\n{\n\tvar margin = (mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth,\n\t\t\tMath.min(rect.width / 5 / this.scale, rect.height / 5 / this.scale)))) * this.scale;\n\n\treturn new mxRectangle(rect.x + margin, rect.y + margin, rect.width - 2 * margin, rect.height - 2 * margin);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRhombus\n *\n * Extends <mxShape> to implement a rhombus (aka diamond) shape.\n * This shape is registered under <mxConstants.SHAPE_RHOMBUS>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRhombus\n *\n * Constructs a new rhombus shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRhombus(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRhombus, mxShape);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRhombus.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic painting implementation.\n */\nmxRhombus.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar hw = w / 2;\n\tvar hh = h / 2;\n\t\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, [new mxPoint(x + hw, y), new mxPoint(x + w, y + hh), new mxPoint(x + hw, y + h),\n\t     new mxPoint(x, y + hh)], this.isRounded, arcSize, true);\n\tc.fillAndStroke();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPolyline\n *\n * Extends <mxShape> to implement a polyline (a line with multiple points).\n * This shape is registered under <mxConstants.SHAPE_POLYLINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxPolyline\n *\n * Constructs a new polyline shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxPolyline(points, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxPolyline, mxShape);\n\n/**\n * Function: getRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns false.\n */\nmxPolyline.prototype.isPaintBoundsInverted = function()\n{\n\treturn false;\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintEdgeShape = function(c, pts)\n{\n\tvar prev = c.pointerEventsValue;\n\tc.pointerEventsValue = 'stroke';\n\t\n\tif (this.style == null || this.style[mxConstants.STYLE_CURVED] != 1)\n\t{\n\t\tthis.paintLine(c, pts, this.isRounded);\n\t}\n\telse\n\t{\n\t\tthis.paintCurvedLine(c, pts);\n\t}\n\t\n\tc.pointerEventsValue = prev;\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintLine = function(c, pts, rounded)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, pts, rounded, arcSize, false);\n\tc.stroke();\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintCurvedLine = function(c, pts)\n{\n\tc.begin();\n\t\n\tvar pt = pts[0];\n\tvar n = pts.length;\n\t\n\tc.moveTo(pt.x, pt.y);\n\t\n\tfor (var i = 1; i < n - 2; i++)\n\t{\n\t\tvar p0 = pts[i];\n\t\tvar p1 = pts[i + 1];\n\t\tvar ix = (p0.x + p1.x) / 2;\n\t\tvar iy = (p0.y + p1.y) / 2;\n\t\t\n\t\tc.quadTo(p0.x, p0.y, ix, iy);\n\t}\n\t\n\tvar p0 = pts[n - 2];\n\tvar p1 = pts[n - 1];\n\t\n\tc.quadTo(p0.x, p0.y, p1.x, p1.y);\n\tc.stroke();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrow\n *\n * Extends <mxShape> to implement an arrow shape. (The shape\n * is used to represent edges, not vertices.)\n * This shape is registered under <mxConstants.SHAPE_ARROW>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrow\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrow(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.spacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.endSize = (endSize != null) ? endSize : mxConstants.ARROW_SIZE;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrow, mxShape);\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrow.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = Math.max(this.arrowWidth, this.endSize);\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrow.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar spacing =  mxConstants.ARROW_SPACING;\n\tvar width = mxConstants.ARROW_WIDTH;\n\tvar arrow = mxConstants.ARROW_SIZE;\n\n\t// Base vector (between end points)\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\tvar dx = pe.x - p0.x;\n\tvar dy = pe.y - p0.y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\tvar length = dist - 2 * spacing - arrow;\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar ny = dy / dist;\n\tvar basex = length * nx;\n\tvar basey = length * ny;\n\tvar floorx = width * ny/3;\n\tvar floory = -width * nx/3;\n\t\n\t// Computes points\n\tvar p0x = p0.x - floorx / 2 + spacing * nx;\n\tvar p0y = p0.y - floory / 2 + spacing * ny;\n\tvar p1x = p0x + floorx;\n\tvar p1y = p0y + floory;\n\tvar p2x = p1x + basex;\n\tvar p2y = p1y + basey;\n\tvar p3x = p2x + floorx;\n\tvar p3y = p2y + floory;\n\t// p4 not necessary\n\tvar p5x = p3x - 3 * floorx;\n\tvar p5y = p3y - 3 * floory;\n\t\n\tc.begin();\n\tc.moveTo(p0x, p0y);\n\tc.lineTo(p1x, p1y);\n\tc.lineTo(p2x, p2y);\n\tc.lineTo(p3x, p3y);\n\tc.lineTo(pe.x - spacing * nx, pe.y - spacing * ny);\n\tc.lineTo(p5x, p5y);\n\tc.lineTo(p5x + floorx, p5y + floory);\n\tc.close();\n\n\tc.fillAndStroke();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrowConnector\n *\n * Extends <mxShape> to implement an new rounded arrow shape with support for\n * waypoints and double arrows. (The shape is used to represent edges, not\n * vertices.) This shape is registered under <mxConstants.SHAPE_ARROW_CONNECTOR>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrowConnector\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrowConnector(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.arrowSpacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.startSize = mxConstants.ARROW_SIZE / 5;\n\tthis.endSize = mxConstants.ARROW_SIZE / 5;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrowConnector, mxShape);\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxArrowConnector.prototype.useSvgBoundingBox = true;\n\n/**\n * Variable: resetStyles\n * \n * Overrides mxShape to reset spacing.\n */\nmxArrowConnector.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.arrowSpacing = mxConstants.ARROW_SPACING;\n};\n\n/**\n * Overrides apply to get smooth transition from default start- and endsize.\n */\nmxArrowConnector.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\n\tif (this.style != null)\n\t{\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t}\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrowConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = this.getEdgeWidth();\n\t\n\tif (this.isMarkerStart())\n\t{\n\t\tw = Math.max(w, this.getStartArrowWidth());\n\t}\n\t\n\tif (this.isMarkerEnd())\n\t{\n\t\tw = Math.max(w, this.getEndArrowWidth());\n\t}\n\t\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar strokeWidth = this.strokewidth;\n\t\n\tif (this.outline)\n\t{\n\t\tstrokeWidth = Math.max(1, mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth));\n\t}\n\t\n\tvar startWidth = this.getStartArrowWidth() + strokeWidth;\n\tvar endWidth = this.getEndArrowWidth() + strokeWidth;\n\tvar edgeWidth = this.outline ? this.getEdgeWidth() + strokeWidth : this.getEdgeWidth();\n\tvar openEnded = this.isOpenEnded();\n\tvar markerStart = this.isMarkerStart();\n\tvar markerEnd = this.isMarkerEnd();\n\tvar spacing = (openEnded) ? 0 : this.arrowSpacing + strokeWidth / 2;\n\tvar startSize = this.startSize + strokeWidth;\n\tvar endSize = this.endSize + strokeWidth;\n\tvar isRounded = this.isArrowRounded();\n\t\n\t// Base vector (between first points)\n\tvar pe = pts[pts.length - 1];\n\n\t// Finds first non-overlapping point\n\tvar i0 = 1;\n\t\n\twhile (i0 < pts.length - 1 && pts[i0].x == pts[0].x && pts[i0].y == pts[0].y)\n\t{\n\t\ti0++;\n\t}\n\t\n\tvar dx = pts[i0].x - pts[0].x;\n\tvar dy = pts[i0].y - pts[0].y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\n\tif (dist == 0)\n\t{\n\t\treturn;\n\t}\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar nx2, nx1 = nx;\n\tvar ny = dy / dist;\n\tvar ny2, ny1 = ny;\n\tvar orthx = edgeWidth * ny;\n\tvar orthy = -edgeWidth * nx;\n\t\n\t// Stores the inbound function calls in reverse order in fns\n\tvar fns = [];\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('round');\n\t}\n\telse if (pts.length > 2)\n\t{\n\t\t// Only mitre if there are waypoints\n\t\tc.setMiterLimit(1.42);\n\t}\n\n\tc.begin();\n\n\tvar startNx = nx;\n\tvar startNy = ny;\n\n\tif (markerStart && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n\t}\n\telse\n\t{\n\t\tvar outStartX = pts[0].x + orthx / 2 + spacing * nx;\n\t\tvar outStartY = pts[0].y + orthy / 2 + spacing * ny;\n\t\tvar inEndX = pts[0].x - orthx / 2 + spacing * nx;\n\t\tvar inEndY = pts[0].y - orthy / 2 + spacing * ny;\n\t\t\n\t\tif (openEnded)\n\t\t{\n\t\t\tc.moveTo(outStartX, outStartY);\n\t\t\t\n\t\t\tfns.push(function()\n\t\t\t{\n\t\t\t\tc.lineTo(inEndX, inEndY);\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inEndX, inEndY);\n\t\t\tc.lineTo(outStartX, outStartY);\n\t\t}\n\t}\n\t\n\tvar dx1 = 0;\n\tvar dy1 = 0;\n\tvar dist1 = 0;\n\n\tfor (var i = 0; i < pts.length - 2; i++)\n\t{\n\t\t// Work out in which direction the line is bending\n\t\tvar pos = mxUtils.relativeCcw(pts[i].x, pts[i].y, pts[i+1].x, pts[i+1].y, pts[i+2].x, pts[i+2].y);\n\n\t\tdx1 = pts[i+2].x - pts[i+1].x;\n\t\tdy1 = pts[i+2].y - pts[i+1].y;\n\n\t\tdist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n\t\t\n\t\tif (dist1 != 0)\n\t\t{\n\t\t\tnx1 = dx1 / dist1;\n\t\t\tny1 = dy1 / dist1;\n\t\t\t\n\t\t\tvar tmp1 = nx * nx1 + ny * ny1;\n\t\t\tvar tmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n\t\t\t\n\t\t\t// Work out the normal orthogonal to the line through the control point and the edge sides intersection\n\t\t\tnx2 = (nx + nx1);\n\t\t\tny2 = (ny + ny1);\n\t\n\t\t\tvar dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n\t\t\t\n\t\t\tif (dist2 != 0)\n\t\t\t{\n\t\t\t\tnx2 = nx2 / dist2;\n\t\t\t\tny2 = ny2 / dist2;\n\t\t\t\t\n\t\t\t\t// Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n\t\t\t\tvar strokeWidthFactor = Math.max(tmp, Math.min(this.strokewidth / 200 + 0.04, 0.35));\n\t\t\t\tvar angleFactor = (pos != 0 && isRounded) ? Math.max(0.1, strokeWidthFactor) : Math.max(tmp, 0.06);\n\n\t\t\t\tvar outX = pts[i+1].x + ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar outY = pts[i+1].y - nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inX = pts[i+1].x - ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inY = pts[i+1].y + nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\t\n\t\t\t\tif (pos == 0 || !isRounded)\n\t\t\t\t{\n\t\t\t\t\t// If the two segments are aligned, or if we're not drawing curved sections between segments\n\t\t\t\t\t// just draw straight to the intersection point\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse if (pos == -1)\n\t\t\t\t{\n\t\t\t\t\tvar c1x = inX + ny * edgeWidth;\n\t\t\t\t\tvar c1y = inY - nx * edgeWidth;\n\t\t\t\t\tvar c2x = inX + ny1 * edgeWidth;\n\t\t\t\t\tvar c2y = inY - nx1 * edgeWidth;\n\t\t\t\t\tc.lineTo(c1x, c1y);\n\t\t\t\t\tc.quadTo(outX, outY, c2x, c2y);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c1x = outX - ny * edgeWidth;\n\t\t\t\t\t\tvar c1y = outY + nx * edgeWidth;\n\t\t\t\t\t\tvar c2x = outX - ny1 * edgeWidth;\n\t\t\t\t\t\tvar c2y = outY + nx1 * edgeWidth;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.quadTo(x, y, c1x, c1y);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(c2x, c2y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnx = nx1;\n\t\t\t\tny = ny1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\torthx = edgeWidth * ny1;\n\torthy = - edgeWidth * nx1;\n\n\tif (markerEnd && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n\t}\n\telse\n\t{\n\t\tc.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n\t\t\n\t\tvar inStartX = pe.x - spacing * nx1 - orthx / 2;\n\t\tvar inStartY = pe.y - spacing * ny1 - orthy / 2;\n\n\t\tif (!openEnded)\n\t\t{\n\t\t\tc.lineTo(inStartX, inStartY);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t\n\t\t\tfns.splice(0, 0, function()\n\t\t\t{\n\t\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t});\n\t\t}\n\t}\n\t\n\tfor (var i = fns.length - 1; i >= 0; i--)\n\t{\n\t\tfns[i]();\n\t}\n\n\tif (openEnded)\n\t{\n\t\tc.end();\n\t\tc.stroke();\n\t}\n\telse\n\t{\n\t\tc.close();\n\t\tc.fillAndStroke();\n\t}\n\t\n\t// Workaround for shadow on top of base arrow\n\tc.setShadow(false);\n\t\n\t// Need to redraw the markers without the low miter limit\n\tc.setMiterLimit(4);\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('flat');\n\t}\n\n\tif (pts.length > 2)\n\t{\n\t\t// Only to repaint markers if no waypoints\n\t\t// Need to redraw the markers without the low miter limit\n\t\tc.setMiterLimit(4);\n\t\tif (markerStart && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t\t\n\t\tif (markerEnd && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t}\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintMarker = function(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove)\n{\n\tvar widthArrowRatio = edgeWidth / arrowWidth;\n\tvar orthx = edgeWidth * ny / 2;\n\tvar orthy = -edgeWidth * nx / 2;\n\n\tvar spaceX = (spacing + size) * nx;\n\tvar spaceY = (spacing + size) * ny;\n\n\tif (initialMove)\n\t{\n\t\tc.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\telse\n\t{\n\t\tc.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\n\tc.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n\tc.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n}\n\n/**\n * Function: isArrowRounded\n * \n * Returns wether the arrow is rounded\n */\nmxArrowConnector.prototype.isArrowRounded = function()\n{\n\treturn this.isRounded;\n};\n\n/**\n * Function: getStartArrowWidth\n * \n * Returns the width of the start arrow\n */\nmxArrowConnector.prototype.getStartArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEndArrowWidth\n * \n * Returns the width of the end arrow\n */\nmxArrowConnector.prototype.getEndArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEdgeWidth\n * \n * Returns the width of the body of the edge\n */\nmxArrowConnector.prototype.getEdgeWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH / 3;\n};\n\n/**\n * Function: isOpenEnded\n * \n * Returns whether the ends of the shape are drawn\n */\nmxArrowConnector.prototype.isOpenEnded = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isMarkerStart\n * \n * Returns whether the start marker is drawn\n */\nmxArrowConnector.prototype.isMarkerStart = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n\n/**\n * Function: isMarkerEnd\n * \n * Returns whether the end marker is drawn\n */\nmxArrowConnector.prototype.isMarkerEnd = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxText\n *\n * Extends <mxShape> to implement a text shape. To change vertical text from\n * bottom to top to top to bottom, the following code can be used:\n * \n * (code)\n * mxText.prototype.verticalTextRotation = 90;\n * (end)\n * \n * Constructor: mxText\n *\n * Constructs a new text shape.\n * \n * Parameters:\n * \n * value - String that represents the text to be displayed. This is stored in\n * <value>.\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * align - Specifies the horizontal alignment. Default is ''. This is stored in\n * <align>.\n * valign - Specifies the vertical alignment. Default is ''. This is stored in\n * <valign>.\n * color - String that specifies the text color. Default is 'black'. This is\n * stored in <color>.\n * family - String that specifies the font family. Default is\n * <mxConstants.DEFAULT_FONTFAMILY>. This is stored in <family>.\n * size - Integer that specifies the font size. Default is\n * <mxConstants.DEFAULT_FONTSIZE>. This is stored in <size>.\n * fontStyle - Specifies the font style. Default is 0. This is stored in\n * <fontStyle>.\n * spacing - Integer that specifies the global spacing. Default is 2. This is\n * stored in <spacing>.\n * spacingTop - Integer that specifies the top spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingTop>.\n * spacingRight - Integer that specifies the right spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingRight>.\n * spacingBottom - Integer that specifies the bottom spacing. Default is 0.The\n * sum of the spacing and this is stored in <spacingBottom>.\n * spacingLeft - Integer that specifies the left spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingLeft>.\n * horizontal - Boolean that specifies if the label is horizontal. Default is\n * true. This is stored in <horizontal>.\n * background - String that specifies the background color. Default is null.\n * This is stored in <background>.\n * border - String that specifies the label border color. Default is null.\n * This is stored in <border>.\n * wrap - Specifies if word-wrapping should be enabled. Default is false.\n * This is stored in <wrap>.\n * clipped - Specifies if the label should be clipped. Default is false.\n * This is stored in <clipped>.\n * overflow - Value of the overflow style. Default is 'visible'.\n */\nfunction mxText(value, bounds, align, valign, color,\n\tfamily,\tsize, fontStyle, spacing, spacingTop, spacingRight,\n\tspacingBottom, spacingLeft, horizontal, background, border,\n\twrap, clipped, overflow, labelPadding, textDirection)\n{\n\tmxShape.call(this);\n\tthis.value = value;\n\tthis.bounds = bounds;\n\tthis.color = (color != null) ? color : 'black';\n\tthis.align = (align != null) ? align : mxConstants.ALIGN_CENTER;\n\tthis.valign = (valign != null) ? valign : mxConstants.ALIGN_MIDDLE;\n\tthis.family = (family != null) ? family : mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = (size != null) ? size : mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = (fontStyle != null) ? fontStyle : mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = parseInt(spacing || 2);\n\tthis.spacingTop = this.spacing + parseInt(spacingTop || 0);\n\tthis.spacingRight = this.spacing + parseInt(spacingRight || 0);\n\tthis.spacingBottom = this.spacing + parseInt(spacingBottom || 0);\n\tthis.spacingLeft = this.spacing + parseInt(spacingLeft || 0);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.background = background;\n\tthis.border = border;\n\tthis.wrap = (wrap != null) ? wrap : false;\n\tthis.clipped = (clipped != null) ? clipped : false;\n\tthis.overflow = (overflow != null) ? overflow : 'visible';\n\tthis.labelPadding = (labelPadding != null) ? labelPadding : 0;\n\tthis.textDirection = textDirection;\n\tthis.rotation = 0;\n\tthis.updateMargin();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxText, mxShape);\n\n/**\n * Variable: baseSpacingTop\n * \n * Specifies the spacing to be added to the top spacing. Default is 0. Use the\n * value 5 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingTop = 0;\n\n/**\n * Variable: baseSpacingBottom\n * \n * Specifies the spacing to be added to the bottom spacing. Default is 0. Use the\n * value 1 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingBottom = 0;\n\n/**\n * Variable: baseSpacingLeft\n * \n * Specifies the spacing to be added to the left spacing. Default is 0.\n */\nmxText.prototype.baseSpacingLeft = 0;\n\n/**\n * Variable: baseSpacingRight\n * \n * Specifies the spacing to be added to the right spacing. Default is 0.\n */\nmxText.prototype.baseSpacingRight = 0;\n\n/**\n * Variable: replaceLinefeeds\n * \n * Specifies if linefeeds in HTML labels should be replaced with BR tags.\n * Default is true.\n */\nmxText.prototype.replaceLinefeeds = true;\n\n/**\n * Variable: verticalTextRotation\n * \n * Rotation for vertical text. Default is -90 (bottom to top).\n */\nmxText.prototype.verticalTextRotation = -90;\n\n/**\n * Variable: ignoreClippedStringSize\n * \n * Specifies if the string size should be measured in <updateBoundingBox> if\n * the label is clipped and the label position is center and middle. If this is\n * true, then the bounding box will be set to <bounds>. Default is true.\n * <ignoreStringSize> has precedence over this switch.\n */\nmxText.prototype.ignoreClippedStringSize = true;\n\n/**\n * Variable: ignoreStringSize\n * \n * Specifies if the actual string size should be measured. If disabled the\n * boundingBox will not ignore the actual size of the string, otherwise\n * <bounds> will be used instead. Default is false.\n */\nmxText.prototype.ignoreStringSize = false;\n\n/**\n * Variable: textWidthPadding\n * \n * Specifies the padding to be added to the text width for the bounding box.\n * This is needed to make sure no clipping is applied to borders. Default is 4\n * for IE 8 standards mode and 3 for all others.\n */\nmxText.prototype.textWidthPadding = (document.documentMode == 8 && !mxClient.IS_EM) ? 4 : 3;\n\n/**\n * Variable: lastValue\n * \n * Contains the last rendered text value. Used for caching.\n */\nmxText.prototype.lastValue = null;\n\n/**\n * Variable: cacheEnabled\n * \n * Specifies if caching for HTML labels should be enabled. Default is true.\n */\nmxText.prototype.cacheEnabled = true;\n\n/**\n * Function: isParseVml\n * \n * Text shapes do not contain VML markup and do not need to be parsed. This\n * method returns false to speed up rendering in IE8.\n */\nmxText.prototype.isParseVml = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation returns\n * true if the browser is not in IE8 standards mode.\n */\nmxText.prototype.isHtmlAllowed = function()\n{\n\treturn document.documentMode != 8 || mxClient.IS_EM;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxText.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxText.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height));\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxText.prototype.paint = function(c, update)\n{\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\tvar unscaledWidth = (this.state != null) ? this.state.unscaledWidth : null;\n\n\tif (update)\n\t{\n\t\tif (this.node.firstChild != null && (unscaledWidth == null ||\n\t\t\tthis.lastUnscaledWidth != unscaledWidth))\n\t\t{\n\t\t\tc.invalidateCachedOffsetSize(this.node);\n\t\t}\n\n\t\tc.updateText(x, y, w, h, this.align, this.valign, this.wrap, this.overflow,\n\t\t\t\tthis.clipped, this.getTextRotation(), this.node);\n\t}\n\telse\n\t{\n\t\t// Checks if text contains HTML markup\n\t\tvar realHtml = mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML;\n\t\t\n\t\t// Always renders labels as HTML in VML\n\t\tvar fmt = (realHtml || c instanceof mxVmlCanvas2D) ? 'html' : '';\n\t\tvar val = this.value;\n\t\t\n\t\tif (!realHtml && fmt == 'html')\n\t\t{\n\t\t\tval =  mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\tif (fmt == 'html' && !mxUtils.isNode(this.value))\n\t\t{\n\t\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\t\t\t\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = (!mxUtils.isNode(this.value) && this.replaceLinefeeds && fmt == 'html') ?\n\t\t\tval.replace(/\\n/g, '<br/>') : val;\n\t\t\t\n\t\tvar dir = this.textDirection;\n\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && !realHtml)\n\t\t{\n\t\t\tdir = this.getAutoDirection();\n\t\t}\n\t\t\n\t\tif (dir != mxConstants.TEXT_DIRECTION_LTR && dir != mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tdir = null;\n\t\t}\n\t\n\t\tc.text(x, y, w, h, val, this.align, this.valign, this.wrap, fmt, this.overflow,\n\t\t\tthis.clipped, this.getTextRotation(), dir);\n\t}\n\t\n\t// Needs to invalidate the cached offset widths if the geometry changes\n\tthis.lastUnscaledWidth = unscaledWidth;\n};\n\n/**\n * Function: redraw\n * \n * Renders the text using the given DOM nodes.\n */\nmxText.prototype.redraw = function()\n{\n\tif (this.visible && this.checkBounds() && this.cacheEnabled && this.lastValue == this.value &&\n\t\t(mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML))\n\t{\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\n\t\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t\t{\n\t\t\t\tthis.updateHtmlFilter();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.updateHtmlTransform();\n\t\t\t}\n\t\t\t\n\t\t\tthis.updateBoundingBox();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar canvas = this.createCanvas();\n\n\t\t\tif (canvas != null && canvas.updateText != null &&\n\t\t\t\tcanvas.invalidateCachedOffsetSize != null)\n\t\t\t{\n\t\t\t\tthis.paint(canvas, true);\n\t\t\t\tthis.destroyCanvas(canvas);\n\t\t\t\tthis.updateBoundingBox();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Fallback if canvas does not support updateText (VML)\n\t\t\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\n\t\tif (mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tthis.lastValue = this.value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.lastValue = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxText.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.color = 'black';\n\tthis.align = mxConstants.ALIGN_CENTER;\n\tthis.valign = mxConstants.ALIGN_MIDDLE;\n\tthis.family = mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = 2;\n\tthis.spacingTop = 2;\n\tthis.spacingRight = 2;\n\tthis.spacingBottom = 2;\n\tthis.spacingLeft = 2;\n\tthis.horizontal = true;\n\tdelete this.background;\n\tdelete this.border;\n\tthis.textDirection = mxConstants.DEFAULT_TEXT_DIRECTION;\n\tdelete this.margin;\n};\n\n/**\n * Function: apply\n * \n * Extends mxShape to update the text styles.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxText.prototype.apply = function(state)\n{\n\tvar old = this.spacing;\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.fontStyle = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSTYLE, this.fontStyle);\n\t\tthis.family = mxUtils.getValue(this.style, mxConstants.STYLE_FONTFAMILY, this.family);\n\t\tthis.size = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, this.size);\n\t\tthis.color = mxUtils.getValue(this.style, mxConstants.STYLE_FONTCOLOR, this.color);\n\t\tthis.align = mxUtils.getValue(this.style, mxConstants.STYLE_ALIGN, this.align);\n\t\tthis.valign = mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_ALIGN, this.valign);\n\t\tthis.spacing = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing));\n\t\tthis.spacingTop = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_TOP, this.spacingTop - old)) + this.spacing;\n\t\tthis.spacingRight = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_RIGHT, this.spacingRight - old)) + this.spacing;\n\t\tthis.spacingBottom = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_BOTTOM, this.spacingBottom - old)) + this.spacing;\n\t\tthis.spacingLeft = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_LEFT, this.spacingLeft - old)) + this.spacing;\n\t\tthis.horizontal = mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, this.horizontal);\n\t\tthis.background = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, this.background);\n\t\tthis.border = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BORDERCOLOR, this.border);\n\t\tthis.textDirection = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tthis.updateMargin();\n\t}\n\t\n\tthis.flipV = null;\n\tthis.flipH = null;\n};\n\n/**\n * Function: getAutoDirection\n * \n * Used to determine the automatic text direction. Returns\n * <mxConstants.TEXT_DIRECTION_LTR> or <mxConstants.TEXT_DIRECTION_RTL>\n * depending on the contents of <value>. This is not invoked for HTML, wrapped\n * content or if <value> is a DOM node.\n */\nmxText.prototype.getAutoDirection = function()\n{\n\t// Looks for strong (directional) characters\n\tvar tmp = /[A-Za-z\\u05d0-\\u065f\\u066a-\\u06ef\\u06fa-\\u07ff\\ufb1d-\\ufdff\\ufe70-\\ufefc]/.exec(this.value);\n\t\n\t// Returns the direction defined by the character\n\treturn (tmp != null && tmp.length > 0 && tmp[0] > 'z') ?\n\t\tmxConstants.TEXT_DIRECTION_RTL : mxConstants.TEXT_DIRECTION_LTR;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using the given node and position.\n */\nmxText.prototype.updateBoundingBox = function()\n{\n\tvar node = this.node;\n\tthis.boundingBox = this.bounds.clone();\n\tvar rot = this.getTextRotation();\n\t\n\tvar h = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER) : null;\n\tvar v = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE) : null;\n\n\tif (!this.ignoreStringSize && node != null && this.overflow != 'fill' && (!this.clipped ||\n\t\t!this.ignoreClippedStringSize || h != mxConstants.ALIGN_CENTER || v != mxConstants.ALIGN_MIDDLE))\n\t{\n\t\tvar ow = null;\n\t\tvar oh = null;\n\t\t\n\t\tif (node.ownerSVGElement != null)\n\t\t{\n\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t{\n\t\t\t\tnode = node.firstChild.firstChild;\n\t\t\t\tow = parseInt(node.getAttribute('width')) * this.scale;\n\t\t\t\toh = parseInt(node.getAttribute('height')) * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar b = node.getBBox();\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for bounding box of empty string\n\t\t\t\t\tif (typeof(this.value) == 'string' && mxUtils.trim(this.value) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (b.width == 0 && b.height == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\n\t\t\t// Use cached offset size\n\t\t\tif (this.offsetWidth != null && this.offsetHeight != null)\n\t\t\t{\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Cannot get node size while container hidden so a\n\t\t\t\t// shared temporary DIV is used for text measuring\n\t\t\t\tif (td != null)\n\t\t\t\t{\n\t\t\t\t\tthis.updateFont(td);\n\t\t\t\t\tthis.updateSize(td, false);\n\t\t\t\t\tthis.updateInnerHtml(td);\n\n\t\t\t\t\tnode = td;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar sizeDiv = node;\n\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tvar w = Math.round(this.bounds.width / this.scale);\n\t\n\t\t\t\t\tif (this.wrap && w > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\t\t\tnode.style.whiteSpace = 'normal';\n\n\t\t\t\t\t\tif (node.style.wordWrap != 'break-word')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Innermost DIV is used for measuring text\n\t\t\t\t\t\t\tvar divs = sizeDiv.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (divs.length > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsizeDiv = divs[divs.length - 1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tow = sizeDiv.offsetWidth + 2;\n\t\t\t\t\t\t\tdivs = this.node.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.clipped)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tow = Math.min(w, ow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Second last DIV width must be updated in DOM tree\n\t\t\t\t\t\t\tif (divs.length > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdivs[divs.length - 2].style.width = ow + 'px';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.whiteSpace = 'nowrap';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\n\t\t\t\tthis.offsetWidth = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\t\tthis.offsetHeight = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t}\n\n\t\tif (ow != null && oh != null)\n\t\t{\t\n\t\t\tthis.boundingBox = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y, ow, oh);\n\t\t}\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tif (rot != 0)\n\t\t{\n\t\t\t// Accounts for pre-rotated x and y\n\t\t\tvar bbox = mxUtils.getBoundingBox(new mxRectangle(\n\t\t\t\tthis.margin.x * this.boundingBox.width,\n\t\t\t\tthis.margin.y * this.boundingBox.height,\n\t\t\t\tthis.boundingBox.width, this.boundingBox.height),\n\t\t\t\trot, new mxPoint(0, 0));\n\t\t\t\n\t\t\tthis.unrotatedBoundingBox = mxRectangle.fromRectangle(this.boundingBox);\n\t\t\tthis.unrotatedBoundingBox.x += this.margin.x * this.unrotatedBoundingBox.width;\n\t\t\tthis.unrotatedBoundingBox.y += this.margin.y * this.unrotatedBoundingBox.height;\n\t\t\t\n\t\t\tthis.boundingBox.x += bbox.x;\n\t\t\tthis.boundingBox.y += bbox.y;\n\t\t\tthis.boundingBox.width = bbox.width;\n\t\t\tthis.boundingBox.height = bbox.height;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.boundingBox.x += this.margin.x * this.boundingBox.width;\n\t\t\tthis.boundingBox.y += this.margin.y * this.boundingBox.height;\n\t\t\tthis.unrotatedBoundingBox = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0 to avoid using rotation in the canvas via updateTransform.\n */\nmxText.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label of the corresponding shape.\n */\nmxText.prototype.getTextRotation = function()\n{\n\treturn (this.state != null && this.state.shape != null) ? this.state.shape.getTextRotation() : 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Inverts the bounds if <mxShape.isBoundsInverted> returns true or if the\n * horizontal style is false.\n */\nmxText.prototype.isPaintBoundsInverted = function()\n{\n\treturn !this.horizontal && this.state != null && this.state.view.graph.model.isVertex(this.state.cell);\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxText.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tmxShape.prototype.configureCanvas.apply(this, arguments);\n\t\n\tc.setFontColor(this.color);\n\tc.setFontBackgroundColor(this.background);\n\tc.setFontBorderColor(this.border);\n\tc.setFontFamily(this.family);\n\tc.setFontSize(this.size);\n\tc.setFontStyle(this.fontStyle);\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Sets the width and height of the container to 1px.\n */\nmxText.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = '1px';\n\tthis.node.style.height = '1px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtmlShape\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShape = function()\n{\n\tvar style = this.node.style;\n\n\t// Resets CSS styles\n\tstyle.whiteSpace = 'normal';\n\tstyle.overflow = '';\n\tstyle.width = '';\n\tstyle.height = '';\n\t\n\tthis.updateValue();\n\tthis.updateFont(this.node);\n\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\n\tthis.offsetWidth = null;\n\tthis.offsetHeight = null;\n\n\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t{\n\t\tthis.updateHtmlFilter();\n\t}\n\telse\n\t{\n\t\tthis.updateHtmlTransform();\n\t}\n};\n\n/**\n * Function: updateHtmlTransform\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateHtmlTransform = function()\n{\n\tvar theta = this.getTextRotation();\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\t\n\tif (theta != 0)\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', (-dx * 100) + '%' + ' ' + (-dy * 100) + '%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)' +\n\t\t\t'scale(' + this.scale + ') rotate(' + theta + 'deg)');\n\t}\n\telse\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', '0% 0%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'scale(' + this.scale + ')' +\n\t\t\t'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)');\n\t}\n\n\tstyle.left = Math.round(this.bounds.x - Math.ceil(dx * ((this.overflow != 'fill' &&\n\t\tthis.overflow != 'width') ? 3 : 1))) + 'px';\n\tstyle.top = Math.round(this.bounds.y - dy * ((this.overflow != 'fill') ? 3 : 1)) + 'px';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tstyle.opacity = this.opacity / 100;\n\t}\n\telse\n\t{\n\t\tstyle.opacity = '';\n\t}\n};\n\n/**\n * Function: setInnerHtml\n * \n * Sets the inner HTML of the given element to the <value>.\n */\nmxText.prototype.updateInnerHtml = function(elt)\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\telt.innerHTML = this.value.outerHTML;\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\t// LATER: Can be cached in updateValue\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div>&nbsp;</div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tval = '<div style=\"display:inline-block;_display:inline;\">' + val + '</div>';\n\t\t\n\t\telt.innerHTML = val;\n\t}\n};\n\n/**\n * Function: updateHtmlFilter\n *\n * Rotated text rendering quality is bad for IE9 quirks/IE8 standards\n */\nmxText.prototype.updateHtmlFilter = function()\n{\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\tvar s = this.scale;\n\t\n\t// Resets filter before getting offsetWidth\n\tmxUtils.setOpacity(this.node, this.opacity);\n\t\n\t// Adds 1 to match table height in 1.x\n\tvar ow = 0;\n\tvar oh = 0;\n\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\tvar sizeDiv = this.node;\n\t\n\t// Fallback for hidden text rendering in IE quirks mode\n\tif (td != null)\n\t{\n\t\ttd.style.overflow = '';\n\t\ttd.style.height = '';\n\t\ttd.style.width = '';\n\t\t\n\t\tthis.updateFont(td);\n\t\tthis.updateSize(td, false);\n\t\tthis.updateInnerHtml(td);\n\t\t\n\t\tvar w = Math.round(this.bounds.width / this.scale);\n\n\t\tif (this.wrap && w > 0)\n\t\t{\n\t\t\ttd.style.whiteSpace = 'normal';\n\t\t\ttd.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\tow = w;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, this.bounds.width);\n\t\t\t}\n\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttd.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\tsizeDiv = td;\n\t\t\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\n\t\t\tif (this.wrap && td.style.wordWrap == 'break-word')\n\t\t\t{\n\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t}\n\t\t}\n\n\t\t// Required to update the height of the text box after wrapping width is known \n\t\tif (!this.clipped && this.wrap && w > 0)\n\t\t{\n\t\t\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\t\n\t\toh = sizeDiv.offsetHeight + 2;\n\t\t\n\t\tif (mxClient.IS_QUIRKS && this.border != null && this.border != mxConstants.NONE)\n\t\t{\n\t\t\toh += 3;\n\t\t}\n\t}\n\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t{\n\t\tsizeDiv = sizeDiv.firstChild;\n\t\toh = sizeDiv.offsetHeight;\n\t}\n\n\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\n\tif (this.clipped)\n\t{\n\t\toh = Math.min(oh, this.bounds.height);\n\t}\n\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\t// Handles special case for live preview with no wrapper DIV and no textDiv\n\tif (this.overflow == 'fill')\n\t{\n\t\toh = h;\n\t\tow = w;\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\toh = sizeDiv.scrollHeight;\n\t\tow = w;\n\t}\n\t\n\t// Stores for later use\n\tthis.offsetWidth = ow;\n\tthis.offsetHeight = oh;\n\t\n\t// Simulates max-height CSS in quirks mode\n\tif (mxClient.IS_QUIRKS && (this.clipped || (this.overflow == 'width' && h > 0)))\n\t{\n\t\th = Math.min(h, oh);\n\t\tstyle.height = Math.round(h) + 'px';\n\t}\n\telse\n\t{\n\t\th = oh;\n\t}\n\n\tif (this.overflow != 'fill' && this.overflow != 'width')\n\t{\n\t\tif (this.clipped)\n\t\t{\n\t\t\tow = Math.min(w, ow);\n\t\t}\n\t\t\n\t\tw = ow;\n\n\t\t// Simulates max-width CSS in quirks mode\n\t\tif ((mxClient.IS_QUIRKS && this.clipped) || this.wrap)\n\t\t{\n\t\t\tstyle.width = Math.round(w) + 'px';\n\t\t}\n\t}\n\n\th *= s;\n\tw *= s;\n\t\n\t// Rotation case is handled via VML canvas\n\tvar rad = this.getTextRotation() * (Math.PI / 180);\n\t\n\t// Precalculate cos and sin for the rotation\n\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\trad %= 2 * Math.PI;\n\t\n\tif (rad < 0)\n\t{\n\t\trad += 2 * Math.PI;\n\t}\n\t\n\trad %= Math.PI;\n\t\n\tif (rad > Math.PI / 2)\n\t{\n\t\trad = Math.PI - rad;\n\t}\n\t\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(-rad);\n\n\tvar tx = w * -(dx + 0.5);\n\tvar ty = h * -(dy + 0.5);\n\n\tvar top_fix = (h - h * cos + w * sin) / 2 + real_sin * tx - real_cos * ty;\n\tvar left_fix = (w - w * cos + h * sin) / 2 - real_cos * tx - real_sin * ty;\n\t\n\tif (rad != 0)\n\t{\n\t\tvar f = 'progid:DXImageTransform.Microsoft.Matrix(M11=' + real_cos + ', M12='+\n\t\t\treal_sin + ', M21=' + (-real_sin) + ', M22=' + real_cos + ', sizingMethod=\\'auto expand\\')';\n\t\t\n\t\tif (style.filter != null && style.filter.length > 0)\n\t\t{\n\t\t\tstyle.filter += ' ' + f;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.filter = f;\n\t\t}\n\t}\n\t\n\t// Workaround for rendering offsets\n\tvar dy = 0;\n\t\n\tif (this.overflow != 'fill' && mxClient.IS_QUIRKS)\n\t{\n\t\tif (this.valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy -= 1;\n\t\t}\n\t\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdy += 1;\n\t\t}\n\t}\n\n\tstyle.zoom = s;\n\tstyle.left = Math.round(this.bounds.x + left_fix - w / 2) + 'px';\n\tstyle.top = Math.round(this.bounds.y + top_fix - h / 2 + dy) + 'px';\n};\n\n/**\n * Function: updateValue\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateValue = function()\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\tthis.node.innerHTML = '';\n\t\tthis.node.appendChild(this.value);\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tvar bg = (this.background != null && this.background != mxConstants.NONE) ? this.background : null;\n\t\tvar bd = (this.border != null && this.border != mxConstants.NONE) ? this.border : null;\n\n\t\tif (this.overflow == 'fill' || this.overflow == 'width')\n\t\t{\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tthis.node.style.backgroundColor = bg;\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tthis.node.style.border = '1px solid ' + bd;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar css = '';\n\t\t\t\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tcss += 'background-color:' + mxUtils.htmlEntities(bg) + ';';\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tcss += 'border:1px solid ' + mxUtils.htmlEntities(bd) + ';';\n\t\t\t}\n\t\t\t\n\t\t\t// Wrapper DIV for background, zoom needed for inline in quirks\n\t\t\t// and to measure wrapped font sizes in all browsers\n\t\t\t// FIXME: Background size in quirks mode for wrapped text\n\t\t\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t\t\tmxConstants.LINE_HEIGHT;\n\t\t\tval = '<div style=\"zoom:1;' + css + 'display:inline-block;_display:inline;text-decoration:inherit;' +\n\t\t\t\t'padding-bottom:1px;padding-right:1px;line-height:' + lh + '\">' + val + '</div>';\n\t\t}\n\n\t\tthis.node.innerHTML = val;\n\t\t\n\t\t// Sets text direction\n\t\tvar divs = this.node.getElementsByTagName('div');\n\t\t\n\t\tif (divs.length > 0)\n\t\t{\n\t\t\tvar dir = this.textDirection;\n\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t\t{\n\t\t\t\tdir = this.getAutoDirection();\n\t\t\t}\n\t\t\t\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].setAttribute('dir', dir);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].removeAttribute('dir');\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateFont\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateFont = function(node)\n{\n\tvar style = node.style;\n\t\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\tstyle.fontSize = this.size + 'px';\n\tstyle.fontFamily = this.family;\n\tstyle.verticalAlign = 'top';\n\tstyle.color = this.color;\n\t\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\telse\n\t{\n\t\tstyle.fontWeight = '';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\telse\n\t{\n\t\tstyle.fontStyle = '';\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\telse\n\t{\n\t\tstyle.textDecoration = '';\n\t}\n\t\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle.textAlign = 'center';\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle.textAlign = 'right';\n\t}\n\telse\n\t{\n\t\tstyle.textAlign = 'left';\n\t}\n};\n\n/**\n * Function: updateSize\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateSize = function(node, enableWrap)\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar style = node.style;\n\t\n\t// NOTE: Do not use maxWidth here because wrapping will\n\t// go wrong if the cell is outside of the viewable area\n\tif (this.clipped)\n\t{\n\t\tstyle.overflow = 'hidden';\n\t\t\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tstyle.maxHeight = h + 'px';\n\t\t\tstyle.maxWidth = w + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.width = w + 'px';\n\t\t}\n\t}\n\telse if (this.overflow == 'fill')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.height = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.maxHeight = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\t\n\tif (this.wrap && w > 0)\n\t{\n\t\tstyle.wordWrap = mxConstants.WORD_WRAP;\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.width = w + 'px';\n\n\t\tif (enableWrap && this.overflow != 'fill' && this.overflow != 'width')\n\t\t{\n\t\t\tvar sizeDiv = node;\n\t\t\t\n\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t{\n\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t\n\t\t\t\tif (node.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar tmp = sizeDiv.offsetWidth;\n\t\t\t\n\t\t\t// Workaround for text measuring in hidden containers\n\t\t\tif (tmp == 0)\n\t\t\t{\n\t\t\t\tvar prev = node.parentNode;\n\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(node);\n\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\tnode.style.visibility = '';\n\t\t\t\tprev.appendChild(node);\n\t\t\t}\n\n\t\t\ttmp += 3;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t}\n\t\t\t\n\t\t\tstyle.width = tmp + 'px';\n\t\t}\n\t}\n\telse\n\t{\n\t\tstyle.whiteSpace = 'nowrap';\n\t}\n};\n\n/**\n * Function: getMargin\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateMargin = function()\n{\n\tthis.margin = mxUtils.getAlignmentAsPoint(this.align, this.valign);\n};\n\n/**\n * Function: getSpacing\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.getSpacing = function()\n{\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tdx = (this.spacingLeft - this.spacingRight) / 2;\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tdx = -this.spacingRight - this.baseSpacingRight;\n\t}\n\telse\n\t{\n\t\tdx = this.spacingLeft + this.baseSpacingLeft;\n\t}\n\n\tif (this.valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tdy = (this.spacingTop - this.spacingBottom) / 2;\n\t}\n\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = -this.spacingBottom - this.baseSpacingBottom;;\n\t}\n\telse\n\t{\n\t\tdy = this.spacingTop + this.baseSpacingTop;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTriangle\n * \n * Implementation of the triangle shape.\n * \n * Constructor: mxTriangle\n *\n * Constructs a new triangle shape.\n */\nfunction mxTriangle()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxTriangle, mxActor);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxTriangle.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxTriangle.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0, 0), new mxPoint(w, 0.5 * h), new mxPoint(0, h)], this.isRounded, arcSize, true);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHexagon\n * \n * Implementation of the hexagon shape.\n * \n * Constructor: mxHexagon\n *\n * Constructs a new hexagon shape.\n */\nfunction mxHexagon()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxHexagon, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxHexagon.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0.25 * w, 0), new mxPoint(0.75 * w, 0), new mxPoint(w, 0.5 * h), new mxPoint(0.75 * w, h),\n\t                   new mxPoint(0.25 * w, h), new mxPoint(0, 0.5 * h)], this.isRounded, arcSize, true);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLine\n *\n * Extends <mxShape> to implement a horizontal line shape.\n * This shape is registered under <mxConstants.SHAPE_LINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLine\n *\n * Constructs a new line shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLine(bounds, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLine, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxLine.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar mid = y + h / 2;\n\n\tc.begin();\n\tc.moveTo(x, mid);\n\tc.lineTo(x + w, mid);\n\tc.stroke();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageShape\n *\n * Extends <mxShape> to implement an image shape. This shape is registered\n * under <mxConstants.SHAPE_IMAGE> in <mxCellRenderer>.\n * \n * Constructor: mxImageShape\n * \n * Constructs a new image shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * image - String that specifies the URL of the image. This is stored in\n * <image>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 0. This is stored in <strokewidth>.\n */\nfunction mxImageShape(bounds, image, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.image = image;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.shadow = false;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxImageShape, mxRectangleShape);\n\n/**\n * Variable: preserveImageAspect\n *\n * Switch to preserve image aspect. Default is true.\n */\nmxImageShape.prototype.preserveImageAspect = true;\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxImageShape.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: apply\n * \n * Overrides <mxShape.apply> to replace the fill and stroke colors with the\n * respective values from <mxConstants.STYLE_IMAGE_BACKGROUND> and\n * <mxConstants.STYLE_IMAGE_BORDER>.\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_IMAGE_BACKGROUND> => fill\n * - <mxConstants.STYLE_IMAGE_BORDER> => stroke\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxImageShape.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tthis.fill = null;\n\tthis.stroke = null;\n\tthis.gradient = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.preserveImageAspect = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_ASPECT, 1) == 1;\n\t\t\n\t\t// Legacy support for imageFlipH/V\n\t\tthis.flipH = this.flipH || mxUtils.getValue(this.style, 'imageFlipH', 0) == 1;\n\t\tthis.flipV = this.flipV || mxUtils.getValue(this.style, 'imageFlipV', 0) == 1;\n\t}\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxImageShape.prototype.isHtmlAllowed = function()\n{\n\treturn !this.preserveImageAspect;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxImageShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\n\treturn node;\n};\n\n/**\n * Function: isRoundable\n * \n * Disables inherited roundable support.\n */\nmxImageShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn false;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic background painting implementation.\n */\nmxImageShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, null);\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (fill != null)\n\t\t{\n\t\t\t// Stroke rendering required for shadow\n\t\t\tc.setFillColor(fill);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.fillAndStroke();\n\t\t}\n\n\t\t// FlipH/V are implicit via mxShape.updateTransform\n\t\tc.image(x, y, w, h, this.image, this.preserveImageAspect, false, false);\n\t\t\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (stroke != null)\n\t\t{\n\t\t\tc.setShadow(false);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.stroke();\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxRectangleShape.prototype.paintBackground.apply(this, arguments);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Overrides <mxShape.redraw> to preserve the aspect ratio of images.\n */\nmxImageShape.prototype.redrawHtmlShape = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = Math.max(0, Math.round(this.bounds.width)) + 'px';\n\tthis.node.style.height = Math.max(0, Math.round(this.bounds.height)) + 'px';\n\tthis.node.innerHTML = '';\n\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, '');\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, '');\n\t\tthis.node.style.backgroundColor = fill;\n\t\tthis.node.style.borderColor = stroke;\n\t\t\n\t\t// VML image supports PNG in IE6\n\t\tvar useVml = mxClient.IS_IE6 || ((document.documentMode == null || document.documentMode <= 8) && this.rotation != 0);\n\t\tvar img = document.createElement((useVml) ? mxClient.VML_PREFIX + ':image' : 'img');\n\t\timg.setAttribute('border', '0');\n\t\timg.style.position = 'absolute';\n\t\timg.src = this.image;\n\n\t\tvar filter = (this.opacity < 100) ? 'alpha(opacity=' + this.opacity + ')' : '';\n\t\tthis.node.style.filter = filter;\n\t\t\n\t\tif (this.flipH && this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2)';\n\t\t}\n\t\telse if (this.flipH)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(mirror=1)';\n\t\t}\n\t\telse if (this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)';\n\t\t}\n\n\t\tif (img.style.filter != filter)\n\t\t{\n\t\t\timg.style.filter = filter;\n\t\t}\n\n\t\tif (img.nodeName == 'image')\n\t\t{\n\t\t\timg.style.rotation = this.rotation;\n\t\t}\n\t\telse if (this.rotation != 0)\n\t\t{\n\t\t\t// LATER: Add flipV/H support\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', 'rotate(' + this.rotation + 'deg)');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', '');\n\t\t}\n\n\t\t// Known problem: IE clips top line of image for certain angles\n\t\timg.style.width = this.node.style.width;\n\t\timg.style.height = this.node.style.height;\n\t\t\n\t\tthis.node.style.backgroundImage = '';\n\t\tthis.node.appendChild(img);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(this.node);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLabel\n *\n * Extends <mxShape> to implement an image shape with a label.\n * This shape is registered under <mxConstants.SHAPE_LABEL> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLabel\n *\n * Constructs a new label shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLabel(bounds, fill, stroke, strokewidth)\n{\n\tmxRectangleShape.call(this, bounds, fill, stroke, strokewidth);\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLabel, mxRectangleShape);\n\n/**\n * Variable: imageSize\n *\n * Default width and height for the image. Default is\n * <mxConstants.DEFAULT_IMAGESIZE>.\n */\nmxLabel.prototype.imageSize = mxConstants.DEFAULT_IMAGESIZE;\n\n/**\n * Variable: spacing\n *\n * Default value for image spacing. Default is 2.\n */\nmxLabel.prototype.spacing = 2;\n\n/**\n * Variable: indicatorSize\n *\n * Default width and height for the indicicator. Default is 10.\n */\nmxLabel.prototype.indicatorSize = 10;\n\n/**\n * Variable: indicatorSpacing\n *\n * Default spacing between image and indicator. Default is 2.\n */\nmxLabel.prototype.indicatorSpacing = 2;\n\n/**\n * Function: init\n *\n * Initializes the shape and the <indicator>.\n */\nmxLabel.prototype.init = function(container)\n{\n\tmxShape.prototype.init.apply(this, arguments);\n\n\tif (this.indicatorShape != null)\n\t{\n\t\tthis.indicator = new this.indicatorShape();\n\t\tthis.indicator.dialect = this.dialect;\n\t\tthis.indicator.init(this.node);\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Reconfigures this shape. This will update the colors of the indicator\n * and reconfigure it if required.\n */\nmxLabel.prototype.redraw = function()\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.fill = this.indicatorColor;\n\t\tthis.indicator.stroke = this.indicatorStrokeColor;\n\t\tthis.indicator.gradient = this.indicatorGradientColor;\n\t\tthis.indicator.direction = this.indicatorDirection;\n\t}\n\t\n\tmxShape.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n * no indicator shape.\n */\nmxLabel.prototype.isHtmlAllowed = function()\n{\n\treturn mxRectangleShape.prototype.isHtmlAllowed.apply(this, arguments) &&\n\t\tthis.indicatorColor == null && this.indicatorShape == null;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tthis.paintImage(c, x, y, w, h);\n\tthis.paintIndicator(c, x, y, w, h);\n\t\n\tmxRectangleShape.prototype.paintForeground.apply(this, arguments);\n};\n\n/**\n * Function: paintImage\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintImage = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.image, false, false, false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getImageBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_WIDTH, mxConstants.DEFAULT_IMAGESIZE);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_HEIGHT, mxConstants.DEFAULT_IMAGESIZE);\n\tvar spacing = mxUtils.getNumber(this.style, mxConstants.STYLE_SPACING, this.spacing) + 5;\n\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\n\tif (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n\n/**\n * Function: paintIndicator\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintIndicator = function(c, x, y, w, h)\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tthis.indicator.paint(c);\n\t}\n\telse if (this.indicatorImage != null)\n\t{\n\t\tvar bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImage, false, false, false);\n\t}\n};\n\n/**\n * Function: getIndicatorBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getIndicatorBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_WIDTH, this.indicatorSize);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_HEIGHT, this.indicatorSize);\n\tvar spacing = this.spacing + 5;\t\t\n\t\n\tif (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse if (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\t\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n/**\n * Function: redrawHtmlShape\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.redrawHtmlShape = function()\n{\n\tmxRectangleShape.prototype.redrawHtmlShape.apply(this, arguments);\n\t\n\t// Removes all children\n\twhile(this.node.hasChildNodes())\n\t{\n\t\tthis.node.removeChild(this.node.lastChild);\n\t}\n\t\n\tif (this.image != null)\n\t{\n\t\tvar node = document.createElement('img');\n\t\tnode.style.position = 'relative';\n\t\tnode.setAttribute('border', '0');\n\t\t\n\t\tvar bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t\tbounds.x -= this.bounds.x;\n\t\tbounds.y -= this.bounds.y;\n\n\t\tnode.style.left = Math.round(bounds.x) + 'px';\n\t\tnode.style.top = Math.round(bounds.y) + 'px';\n\t\tnode.style.width = Math.round(bounds.width) + 'px';\n\t\tnode.style.height = Math.round(bounds.height) + 'px';\n\t\t\n\t\tnode.src = this.image;\n\t\t\n\t\tthis.node.appendChild(node);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCylinder\n *\n * Extends <mxShape> to implement an cylinder shape. If a\n * custom shape with one filled area and an overlay path is\n * needed, then this shape's <redrawPath> should be overridden.\n * This shape is registered under <mxConstants.SHAPE_CYLINDER>\n * in <mxCellRenderer>.\n * \n * Constructor: mxCylinder\n *\n * Constructs a new cylinder shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCylinder(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxCylinder, mxShape);\n\n/**\n * Variable: maxHeight\n *\n * Defines the maximum height of the top and bottom part\n * of the cylinder shape.\n */\nmxCylinder.prototype.maxHeight = 40;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Sets stroke tolerance to 0 for SVG.\n */\nmxCylinder.prototype.svgStrokeTolerance = 0;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxCylinder.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h, false);\n\tc.fillAndStroke();\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tc.begin();\n\t\tthis.redrawPath(c, x, y, w, h, true);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.getCylinderSize = function(x, y, w, h)\n{\n\treturn Math.min(this.maxHeight, Math.round(h / 5));\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.redrawPath = function(c, x, y, w, h, isForeground)\n{\n\tvar dy = this.getCylinderSize(x, y, w, h);\n\t\n\tif ((isForeground && this.fill != null) || (!isForeground && this.fill == null))\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n\t\t\n\t\t// Needs separate shapes for correct hit-detection\n\t\tif (!isForeground)\n\t\t{\n\t\t\tc.stroke();\n\t\t\tc.begin();\n\t\t}\n\t}\n\t\n\tif (!isForeground)\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n\t\tc.lineTo(w, h - dy);\n\t\tc.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n\t\tc.close();\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnector\n * \n * Extends <mxShape> to implement a connector shape. The connector\n * shape allows for arrow heads on either side.\n * \n * This shape is registered under <mxConstants.SHAPE_CONNECTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxConnector\n * \n * Constructs a new connector shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * Default is 'black'.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxConnector(points, stroke, strokewidth)\n{\n\tmxPolyline.call(this, points, stroke, strokewidth);\n};\n\n/**\n * Extends mxPolyline.\n */\nmxUtils.extend(mxConnector, mxPolyline);\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxConnector.prototype.updateBoundingBox = function()\n{\n\tthis.useSvgBoundingBox = this.style != null && this.style[mxConstants.STYLE_CURVED] == 1;\n\tmxShape.prototype.updateBoundingBox.apply(this, arguments);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// The indirection via functions for markers is needed in\n\t// order to apply the offsets before painting the line and\n\t// paint the markers after painting the line.\n\tvar sourceMarker = this.createMarker(c, pts, true);\n\tvar targetMarker = this.createMarker(c, pts, false);\n\n\tmxPolyline.prototype.paintEdgeShape.apply(this, arguments);\n\t\n\t// Disables shadows, dashed styles and fixes fill color for markers\n\tc.setFillColor(this.stroke);\n\tc.setShadow(false);\n\tc.setDashed(false);\n\t\n\tif (sourceMarker != null)\n\t{\n\t\tsourceMarker();\n\t}\n\t\n\tif (targetMarker != null)\n\t{\n\t\ttargetMarker();\n\t}\n};\n\n/**\n * Function: createMarker\n * \n * Prepares the marker by adding offsets in pts and returning a function to\n * paint the marker.\n */\nmxConnector.prototype.createMarker = function(c, pts, source)\n{\n\tvar result = null;\n\tvar n = pts.length;\n\tvar type = mxUtils.getValue(this.style, (source) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW);\n\tvar p0 = (source) ? pts[1] : pts[n - 2];\n\tvar pe = (source) ? pts[0] : pts[n - 1];\n\t\n\tif (type != null && p0 != null && pe != null)\n\t{\n\t\tvar count = 1;\n\t\t\n\t\t// Uses next non-overlapping point\n\t\twhile (count < n - 1 && Math.round(p0.x - pe.x) == 0 && Math.round(p0.y - pe.y) == 0)\n\t\t{\n\t\t\tp0 = (source) ? pts[1 + count] : pts[n - 2 - count];\n\t\t\tcount++;\n\t\t}\n\t\n\t\t// Computes the norm and the inverse norm\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\n\t\tvar dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\n\t\tvar unitX = dx / dist;\n\t\tvar unitY = dy / dist;\n\t\n\t\tvar size = mxUtils.getNumber(this.style, (source) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\n\t\t// Allow for stroke width in the end point used and the \n\t\t// orthogonal vectors describing the direction of the marker\n\t\tvar filled = this.style[(source) ? mxConstants.STYLE_STARTFILL : mxConstants.STYLE_ENDFILL] != 0;\n\t\t\n\t\tresult = mxMarker.createMarker(c, this, type, pe, unitX, unitY, size, source, this.strokewidth, filled);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\t// Adds marker sizes\n\tvar size = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_MARKERSIZE) + 1;\n\t}\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = Math.max(size, mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE)) + 1;\n\t}\n\t\n\tbbox.grow(size * this.scale);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlane\n *\n * Extends <mxShape> to implement a swimlane shape. This shape is registered\n * under <mxConstants.SHAPE_SWIMLANE> in <mxCellRenderer>. Use the\n * <mxConstants.STYLE_STYLE_STARTSIZE> to define the size of the title\n * region, <mxConstants.STYLE_SWIMLANE_FILLCOLOR> for the content area fill,\n * <mxConstants.STYLE_SEPARATORCOLOR> to draw an additional vertical separator\n * and <mxConstants.STYLE_SWIMLANE_LINE> to hide the line between the title\n * region and the content area. The <mxConstants.STYLE_HORIZONTAL> affects\n * the orientation of this shape, not only its label.\n * \n * Constructor: mxSwimlane\n *\n * Constructs a new swimlane shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxSwimlane(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxSwimlane, mxShape);\n\n/**\n * Variable: imageSize\n *\n * Default imagewidth and imageheight if an image but no imagewidth\n * and imageheight are defined in the style. Value is 16.\n */\nmxSwimlane.prototype.imageSize = 16;\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxSwimlane.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getTitleSize = function()\n{\n\treturn Math.max(0, mxUtils.getValue(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getLabelBounds = function(rect)\n{\n\tvar start = this.getTitleSize();\n\tvar bounds = new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n\tvar horizontal = this.isHorizontal();\n\t\n\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t// East is default\n\tvar shapeVertical = (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n\tvar realHorizontal = horizontal == !shapeVertical;\n\t\n\tvar realFlipH = !realHorizontal && flipH != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\tvar realFlipV = realHorizontal && flipV != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\n\t// Shape is horizontal\n\tif (!shapeVertical)\n\t{\n\t\tvar tmp = Math.min(bounds.height, start * this.scale);\n\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.y += bounds.height - tmp;\n\t\t}\n\n\t\tbounds.height = tmp;\n\t}\n\telse\n\t{\n\t\tvar tmp = Math.min(bounds.width, start * this.scale);\n\t\t\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.x += bounds.width - tmp;\t\n\t\t}\n\n\t\tbounds.width = tmp;\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t\treturn new mxRectangle(x, y, w, start);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t\treturn new mxRectangle(x, y, start, h);\n\t}\n};\n\n/**\n * Function: getArcSize\n * \n * Returns the arcsize for the swimlane.\n */\nmxSwimlane.prototype.getArcSize = function(w, h, start)\n{\n\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\n\treturn start * f * 3; \n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.isHorizontal = function()\n{\n\treturn mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_FILLCOLOR, mxConstants.NONE);\n\tvar swimlaneLine = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_LINE, 1) == 1;\n\tvar r = 0;\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t}\n\t\n\tc.translate(x, y);\n\t\n\tif (!this.isRounded)\n\t{\n\t\tthis.paintSwimlane(c, x, y, w, h, start, fill, swimlaneLine);\n\t}\n\telse\n\t{\n\t\tr = this.getArcSize(w, h, start);\n\t\tr = Math.min(((this.isHorizontal()) ? h : w) - start, Math.min(start, r));\n\t\tthis.paintRoundedSwimlane(c, x, y, w, h, start, r, fill, swimlaneLine);\n\t}\n\t\n\tvar sep = mxUtils.getValue(this.style, mxConstants.STYLE_SEPARATORCOLOR, mxConstants.NONE);\n\tthis.paintSeparator(c, x, y, w, h, start, sep);\n\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x - x, bounds.y - y, bounds.width, bounds.height,\n\t\t\t\tthis.image, false, false, false);\n\t}\n\t\n\tif (this.glass)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintGlassEffect(c, 0, 0, w, start, r);\n\t}\n};\n\n/**\n * Function: paintSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintSwimlane = function(c, x, y, w, h, start, fill, swimlaneLine)\n{\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(w, 0);\n\t\tc.lineTo(w, start);\n\t\tc.fillAndStroke();\n\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(0, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(start, h);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintRoundedSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintRoundedSwimlane = function(c, x, y, w, h, start, r, fill, swimlaneLine)\n{\n\tc.begin();\n\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(w, start);\n\t\tc.lineTo(w, r);\n\t\tc.quadTo(w, 0, w - Math.min(w / 2, r), 0);\n\t\tc.lineTo(Math.min(w / 2, r), 0);\n\t\tc.quadTo(0, 0, 0, r);\n\t\tc.lineTo(0, start);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h - r);\n\t\t\tc.quadTo(0, h, Math.min(w / 2, r), h);\n\t\t\tc.lineTo(w - Math.min(w / 2, r), h);\n\t\t\tc.quadTo(w, h, w, h - r);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(r, 0);\n\t\tc.quadTo(0, 0, 0, Math.min(h / 2, r));\n\t\tc.lineTo(0, h - Math.min(h / 2, r));\n\t\tc.quadTo(0, h, r, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, h);\n\t\t\tc.lineTo(w - r, h);\n\t\t\tc.quadTo(w, h, w, h - Math.min(h / 2, r));\n\t\t\tc.lineTo(w, Math.min(h / 2, r));\n\t\t\tc.quadTo(w, 0, w - r, 0);\n\t\t\tc.lineTo(start, 0);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintDivider\n *\n * Paints the divider between swimlane title and content area.\n */\nmxSwimlane.prototype.paintDivider = function(c, x, y, w, h, start, shadow)\n{\n\tif (!shadow)\n\t{\n\t\tc.setShadow(false);\n\t}\n\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(w, start);\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(start, h);\n\t}\n\n\tc.stroke();\n};\n\n/**\n * Function: paintSeparator\n *\n * Paints the vertical or horizontal separator line between swimlanes.\n */\nmxSwimlane.prototype.paintSeparator = function(c, x, y, w, h, start, color)\n{\n\tif (color != mxConstants.NONE)\n\t{\n\t\tc.setStrokeColor(color);\n\t\tc.setDashed(true);\n\t\tc.begin();\n\t\t\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tc.moveTo(w, start);\n\t\t\tc.lineTo(w, h);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t\tc.setDashed(false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.getImageBounds = function(x, y, w, h)\n{\n\tif (this.isHorizontal())\n\t{\n\t\treturn new mxRectangle(x + w - this.imageSize, y, this.imageSize, this.imageSize);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangle(x, y, this.imageSize, this.imageSize);\n\t}\n};\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphLayout\n * \n * Base class for all layout algorithms in mxGraph. Main public functions are\n * <moveCell> for handling a moved cell within a layouted parent, and <execute> for\n * running the layout on a given parent cell.\n *\n * Known Subclasses:\n *\n * <mxCircleLayout>, <mxCompactTreeLayout>, <mxCompositeLayout>,\n * <mxFastOrganicLayout>, <mxParallelEdgeLayout>, <mxPartitionLayout>,\n * <mxStackLayout>\n * \n * Constructor: mxGraphLayout\n *\n * Constructs a new layout using the given layouts.\n *\n * Arguments:\n * \n * graph - Enclosing \n */\nfunction mxGraphLayout(graph)\n{\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphLayout.prototype.graph = null;\n\n/**\n * Variable: useBoundingBox\n *\n * Boolean indicating if the bounding box of the label should be used if\n * its available. Default is true.\n */\nmxGraphLayout.prototype.useBoundingBox = true;\n\n/**\n * Variable: parent\n *\n * The parent cell of the layout, if any\n */\nmxGraphLayout.prototype.parent = null;\n\n/**\n * Function: moveCell\n * \n * Notified when a cell is being moved in a parent that has automatic\n * layout to update the cell state (eg. index) so that the outcome of the\n * layout will position the vertex as close to the point (x, y) as\n * possible.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * x - X-coordinate of the new cell location.\n * y - Y-coordinate of the new cell location.\n */\nmxGraphLayout.prototype.moveCell = function(cell, x, y) { };\n\n/**\n * Function: execute\n * \n * Executes the layout algorithm for the children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be layed out.\n */\nmxGraphLayout.prototype.execute = function(parent) { };\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxGraphLayout.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: getConstraint\n * \n * Returns the constraint for the given key and cell. The optional edge and\n * source arguments are used to return inbound and outgoing routing-\n * constraints for the given edge and vertex. This implementation always\n * returns the value for the given key in the style of the given cell.\n * \n * Parameters:\n * \n * key - Key of the constraint to be returned.\n * cell - <mxCell> whose constraint should be returned.\n * edge - Optional <mxCell> that represents the connection whose constraint\n * should be returned. Default is null.\n * source - Optional boolean that specifies if the connection is incoming\n * or outgoing. Default is null.\n */\nmxGraphLayout.prototype.getConstraint = function(key, cell, edge, source)\n{\n\tvar state = this.graph.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.graph.getCellStyle(cell);\n\t\n\treturn (style != null) ? style[key] : null;\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> of cell paths for the visited cells.\n */\nmxGraphLayout.traverse = function(vertex, directed, func, edge, visited)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.graph.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.graph.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.graph.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || isSource)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.graph.view.getVisibleTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n * traverseAncestors - boolean whether to \n */\nmxGraphLayout.prototype.isAncestor = function(parent, child, traverseAncestors)\n{\n\tif (!traverseAncestors)\n\t{\n\t\treturn (this.graph.model.getParent(child) == parent);\n\t}\t\n\t\n\tif (child == parent)\n\t{\n\t\treturn false;\n\t}\n\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.graph.model.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: isVertexMovable\n * \n * Returns a boolean indicating if the given <mxCell> is movable or\n * bendable by the algorithm. This implementation returns true if the given\n * cell is movable in the graph.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraphLayout.prototype.isVertexMovable = function(cell)\n{\n\treturn this.graph.isCellMovable(cell);\n};\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn !this.graph.getModel().isVertex(vertex) ||\n\t\t!this.graph.isCellVisible(vertex);\n};\n\n/**\n * Function: isEdgeIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * cell - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isEdgeIgnored = function(edge)\n{\n\tvar model = this.graph.getModel();\n\t\n\treturn !model.isEdge(edge) ||\n\t\t!this.graph.isCellVisible(edge) ||\n\t\tmodel.getTerminal(edge, true) == null ||\n\t\tmodel.getTerminal(edge, false) == null;\n};\n\n/**\n * Function: setEdgeStyleEnabled\n * \n * Disables or enables the edge style of the given edge.\n */\nmxGraphLayout.prototype.setEdgeStyleEnabled = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_NOEDGESTYLE,\n\t\t\t(value) ? '0' : '1', [edge]);\n};\n\n/**\n * Function: setOrthogonalEdge\n * \n * Disables or enables orthogonal end segments of the given edge.\n */\nmxGraphLayout.prototype.setOrthogonalEdge = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_ORTHOGONAL,\n\t\t\t(value) ? '1' : '0', [edge]);\n};\n\n/**\n * Function: getParentOffset\n * \n * Determines the offset of the given parent to the parent\n * of the layout\n */\nmxGraphLayout.prototype.getParentOffset = function(parent)\n{\n\tvar result = new mxPoint();\n\n\tif (parent != null && parent != this.parent)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isAncestor(this.parent, parent))\n\t\t{\n\t\t\tvar parentGeo = model.getGeometry(parent);\n\n\t\t\twhile (parent != this.parent)\n\t\t\t{\n\t\t\t\tresult.x = result.x + parentGeo.x;\n\t\t\t\tresult.y = result.y + parentGeo.y;\n\n\t\t\t\tparent = model.getParent(parent);;\n\t\t\t\tparentGeo = model.getGeometry(parent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: setEdgePoints\n * \n * Replaces the array of mxPoints in the geometry of the given edge\n * with the given array of mxPoints.\n */\nmxGraphLayout.prototype.setEdgePoints = function(edge, points)\n{\n\tif (edge != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar geometry = model.getGeometry(edge);\n\n\t\tif (geometry == null)\n\t\t{\n\t\t\tgeometry = new mxGeometry();\n\t\t\tgeometry.setRelative(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t}\n\n\t\tif (this.parent != null && points != null)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tpoints[i].x = points[i].x - parentOffset.x;\n\t\t\t\tpoints[i].y = points[i].y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tgeometry.points = points;\n\t\tmodel.setGeometry(edge, geometry);\n\t}\n};\n\n/**\n * Function: setVertexLocation\n * \n * Sets the new position of the given cell taking into account the size of\n * the bounding box if <useBoundingBox> is true. The change is only carried\n * out if the new location is not equal to the existing location, otherwise\n * the geometry is not replaced with an updated instance. The new or old\n * bounds are returned (including overlapping labels).\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry is to be set.\n * x - Integer that defines the x-coordinate of the new location.\n * y - Integer that defines the y-coordinate of the new location.\n */\nmxGraphLayout.prototype.setVertexLocation = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(cell);\n\tvar result = null;\n\t\n\tif (geometry != null)\n\t{\n\t\tresult = new mxRectangle(x, y, geometry.width, geometry.height);\n\t\t\n\t\t// Checks for oversize labels and shifts the result\n\t\t// TODO: Use mxUtils.getStringSize for label bounds\n\t\tif (this.useBoundingBox)\n\t\t{\n\t\t\tvar state = this.graph.getView().getState(cell);\n\t\t\t\n\t\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar box = state.text.boundingBox;\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.x < state.x)\n\t\t\t\t{\n\t\t\t\t\tx += (state.x - box.x) / scale;\n\t\t\t\t\tresult.width = box.width;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y < state.y)\n\t\t\t\t{\n\t\t\t\t\ty += (state.y - box.y) / scale;\n\t\t\t\t\tresult.height = box.height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.parent != null)\n\t\t{\n\t\t\tvar parent = model.getParent(cell);\n\n\t\t\tif (parent != null && parent != this.parent)\n\t\t\t{\n\t\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\t\tx = x - parentOffset.x;\n\t\t\t\ty = y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tif (geometry.x != x || geometry.y != y)\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t\tgeometry.x = x;\n\t\t\tgeometry.y = y;\n\t\t\t\n\t\t\tmodel.setGeometry(cell, geometry);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVertexBounds\n * \n * Returns an <mxRectangle> that defines the bounds of the given cell or\n * the bounding box if <useBoundingBox> is true.\n */\nmxGraphLayout.prototype.getVertexBounds = function(cell)\n{\n\tvar geo = this.graph.getModel().getGeometry(cell);\n\n\t// Checks for oversize label bounding box and corrects\n\t// the return value accordingly\n\t// TODO: Use mxUtils.getStringSize for label bounds\n\tif (this.useBoundingBox)\n\t{\n\t\tvar state = this.graph.getView().getState(cell);\n\n\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tvar scale = this.graph.getView().scale;\n\t\t\tvar tmp = state.text.boundingBox;\n\n\t\t\tvar dx0 = Math.max(state.x - tmp.x, 0) / scale;\n\t\t\tvar dy0 = Math.max(state.y - tmp.y, 0) / scale;\n\t\t\tvar dx1 = Math.max((tmp.x + tmp.width) - (state.x + state.width), 0) / scale;\n  \t\t\tvar dy1 = Math.max((tmp.y + tmp.height) - (state.y + state.height), 0) / scale;\n\n\t\t\tgeo = new mxRectangle(geo.x - dx0, geo.y - dy0, geo.width + dx0 + dx1, geo.height + dy0 + dy1);\n\t\t}\n\t}\n\n\tif (this.parent != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tgeo = geo.clone();\n\n\t\tif (parent != null && parent != this.parent)\n\t\t{\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\t\t\tgeo.x = geo.x + parentOffset.x;\n\t\t\tgeo.y = geo.y + parentOffset.y;\n\t\t}\n\t}\n\n\treturn new mxRectangle(geo.x, geo.y, geo.width, geo.height);\n};\n\n/**\n * Function: arrangeGroups\n * \n * Shortcut to <mxGraph.updateGroupBounds> with moveGroup set to true.\n */\nmxGraphLayout.prototype.arrangeGroups = function(cells, border, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\treturn this.graph.updateGroupBounds(cells, border, true, topBorder, rightBorder, bottomBorder, leftBorder);\n};\n\n/**\n * Class: WeightedCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the weighted\n * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==\n * (x.equals(y))\n *\n * Constructor: WeightedCellSorter\n * \n * Constructs a new weighted cell sorted for the given cell and weight.\n */\nfunction WeightedCellSorter(cell, weightedValue)\n{\n\tthis.cell = cell;\n\tthis.weightedValue = weightedValue;\n};\n\n/**\n * Variable: weightedValue\n * \n * The weighted value of the cell stored.\n */\nWeightedCellSorter.prototype.weightedValue = 0;\n\n/**\n * Variable: nudge\n * \n * Whether or not to flip equal weight values.\n */\nWeightedCellSorter.prototype.nudge = false;\n\n/**\n * Variable: visited\n * \n * Whether or not this cell has been visited in the current assignment.\n */\nWeightedCellSorter.prototype.visited = false;\n\n/**\n * Variable: rankIndex\n * \n * The index this cell is in the model rank.\n */\nWeightedCellSorter.prototype.rankIndex = null;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated.\n */\nWeightedCellSorter.prototype.cell = null;\n\n/**\n * Function: compare\n * \n * Compares two WeightedCellSorters.\n */\nWeightedCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.weightedValue > a.weightedValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.weightedValue < a.weightedValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b.nudge)\n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStackLayout\n * \n * Extends <mxGraphLayout> to create a horizontal or vertical stack of the\n * child vertices. The children do not need to be connected for this layout\n * to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxStackLayout(graph, true);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxStackLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxStackLayout(graph, horizontal, spacing, x0, y0, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = (spacing != null) ? spacing : 0;\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.border = (border != null) ? border : 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxStackLayout.prototype = new mxGraphLayout();\nmxStackLayout.prototype.constructor = mxStackLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxStackLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n *\n * Specifies the spacing between the cells. Default is 0.\n */\nmxStackLayout.prototype.spacing = null;\n\n/**\n * Variable: x0\n *\n * Specifies the horizontal origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.x0 = null;\n\n/**\n * Variable: y0\n *\n * Specifies the vertical origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.y0 = null;\n\n/**\n * Variable: border\n *\n * Border to be added if fill is true. Default is 0.\n */\nmxStackLayout.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginTop = 0;\n\n/**\n * Variable: marginLeft\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginLeft = 0;\n\n/**\n * Variable: marginRight\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginRight = 0;\n\n/**\n * Variable: marginBottom\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginBottom = 0;\n\n/**\n * Variable: keepFirstLocation\n * \n * Boolean indicating if the location of the first cell should be\n * kept, that is, it will not be moved to x0 or y0. Default is false.\n */\nmxStackLayout.prototype.keepFirstLocation = false;\n\n/**\n * Variable: fill\n * \n * Boolean indicating if dimension should be changed to fill out the parent\n * cell. Default is false.\n */\nmxStackLayout.prototype.fill = false;\n\t\n/**\n * Variable: resizeParent\n * \n * If the parent should be resized to match the width/height of the\n * stack. Default is false.\n */\nmxStackLayout.prototype.resizeParent = false;\n\n/**\n * Variable: resizeParentMax\n * \n * Use maximum of existing value and new value for resize of parent.\n * Default is false.\n */\nmxStackLayout.prototype.resizeParentMax = false;\n\n/**\n * Variable: resizeLast\n * \n * If the last element should be resized to fill out the parent. Default is\n * false. If <resizeParent> is true then this is ignored.\n */\nmxStackLayout.prototype.resizeLast = false;\n\n/**\n * Variable: wrap\n * \n * Value at which a new column or row should be created. Default is null.\n */\nmxStackLayout.prototype.wrap = null;\n\n/**\n * Variable: borderCollapse\n * \n * If the strokeWidth should be ignored. Default is true.\n */\nmxStackLayout.prototype.borderCollapse = true;\n\n/**\n * Variable: allowGaps\n * \n * If gaps should be allowed in the stack. Default is false.\n */\nmxStackLayout.prototype.allowGaps = false;\n\n/**\n * Variable: gridSize\n * \n * Grid size for alignment of position and size. Default is 0.\n */\nmxStackLayout.prototype.gridSize = 0;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxStackLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxStackLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\tvar horizontal = this.isHorizontal();\n\t\n\tif (cell != null && parent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar value = (horizontal) ? x : y;\n\t\tvar pstate = this.graph.getView().getState(parent);\n\n\t\tif (pstate != null)\n\t\t{\n\t\t\tvalue -= (horizontal) ? pstate.x : pstate.y;\n\t\t}\n\t\t\n\t\tvalue /= this.graph.view.scale;\n\t\t\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != cell)\n\t\t\t{\n\t\t\t\tvar bounds = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = (horizontal) ?\n\t\t\t\t\t\tbounds.x + bounds.width / 2 :\n\t\t\t\t\t\tbounds.y + bounds.height / 2;\n\t\t\t\t\t\n\t\t\t\t\tif (last <= value && tmp > value)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlast = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: getParentSize\n * \n * Returns the size for the parent container or the size of the graph\n * container if the parent is a layer or the root of the model.\n */\nmxStackLayout.prototype.getParentSize = function(parent)\n{\n\tvar model = this.graph.getModel();\t\t\t\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null && ((pgeo == null &&\n\t\tmodel.isLayer(parent)) || parent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\t\n\treturn pgeo;\n};\n\n/**\n * Function: getLayoutCells\n * \n * Returns the cells to be layouted.\n */\nmxStackLayout.prototype.getLayoutCells = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(parent);\n\tvar cells = [];\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isVertexIgnored(child) && this.isVertexMovable(child))\n\t\t{\n\t\t\tcells.push(child);\n\t\t}\n\t}\n\t\n\tif (this.allowGaps)\n\t{\n\t\tcells.sort(mxUtils.bind(this, function(c1, c2)\n\t\t{\n\t\t\tvar geo1 = this.graph.getCellGeometry(c1);\n\t\t\tvar geo2 = this.graph.getCellGeometry(c2);\n\t\t\t\n\t\t\treturn (geo1.y == geo2.y) ? 0 : ((geo1.y > geo2.y > 0) ? 1 : -1);\n\t\t}));\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: snap\n * \n * Snaps the given value to the grid size.\n */\nmxStackLayout.prototype.snap = function(value)\n{\n\tif (this.gridSize != null && this.gridSize > 0)\n\t{\n\t\tvalue = Math.max(value, this.gridSize);\n\t\t\n\t\tif (value / this.gridSize > 1)\n\t\t{\n\t\t\tvar mod = value % this.gridSize;\n\t\t\tvalue += mod > this.gridSize / 2 ? (this.gridSize - mod) : -mod;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.execute = function(parent)\n{\n\tif (parent != null)\n\t{\n\t\tvar pgeo = this.getParentSize(parent);\n\t\tvar horizontal = this.isHorizontal();\n\t\tvar model = this.graph.getModel();\t\n\t\tvar fillValue = null;\n\t\t\n\t\tif (pgeo != null)\n\t\t{\n\t\t\tfillValue = (horizontal) ? pgeo.height - this.marginTop - this.marginBottom :\n\t\t\t\tpgeo.width - this.marginLeft - this.marginRight;\n\t\t}\n\t\t\n\t\tfillValue -= 2 * this.border;\n\t\tvar x0 = this.x0 + this.border + this.marginLeft;\n\t\tvar y0 = this.y0 + this.border + this.marginTop;\n\t\t\n\t\t// Handles swimlane start size\n\t\tif (this.graph.isSwimlane(parent))\n\t\t{\n\t\t\t// Uses computed style to get latest \n\t\t\tvar style = this.graph.getCellStyle(parent);\n\t\t\tvar start = mxUtils.getNumber(style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE);\n\t\t\tvar horz = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true) == 1;\n\n\t\t\tif (pgeo != null)\n\t\t\t{\n\t\t\t\tif (horz)\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.height);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.width);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal == horz)\n\t\t\t{\n\t\t\t\tfillValue -= start;\n\t\t\t}\n\n\t\t\tif (horz)\n\t\t\t{\n\t\t\t\ty0 += start;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx0 += start;\n\t\t\t}\n\t\t}\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar tmp = 0;\n\t\t\tvar last = null;\n\t\t\tvar lastValue = 0;\n\t\t\tvar lastChild = null;\n\t\t\tvar cells = this.getLayoutCells(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar child = cells[i];\n\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (this.wrap != null && last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((horizontal && last.x + last.width +\n\t\t\t\t\t\t\tgeo.width + 2 * this.spacing > this.wrap) ||\n\t\t\t\t\t\t\t(!horizontal && last.y + last.height +\n\t\t\t\t\t\t\tgeo.height + 2 * this.spacing > this.wrap))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlast = null;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ty0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tx0 += tmp + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = 0;\n\t\t\t\t\t\t}\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\ttmp = Math.max(tmp, (horizontal) ? geo.height : geo.width);\n\t\t\t\t\tvar sw = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (!this.borderCollapse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childStyle = this.graph.getCellStyle(child);\n\t\t\t\t\t\tsw = mxUtils.getNumber(childStyle, mxConstants.STYLE_STROKEWIDTH, 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (last != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar temp = lastValue + this.spacing + Math.floor(sw / 2);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = this.snap(((this.allowGaps) ? Math.max(temp, geo.x) :\n\t\t\t\t\t\t\t\ttemp) - this.marginLeft) + this.marginLeft;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = this.snap(((this.allowGaps) ? Math.max(temp, geo.y) :\n\t\t\t\t\t\t\t\ttemp) - this.marginTop) + this.marginTop;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (!this.keepFirstLocation)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = (this.allowGaps && geo.x > x0) ? Math.max(this.snap(geo.x -\n\t\t\t\t\t\t\t\tthis.marginLeft) + this.marginLeft, x0) : x0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = (this.allowGaps && geo.y > y0) ? Math.max(this.snap(geo.y -\n\t\t\t\t\t\t\t\tthis.marginTop) + this.marginTop, y0) : y0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y = y0;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.fill && fillValue != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = fillValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = fillValue;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = this.snap(geo.width);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = this.snap(geo.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.setChildGeometry(child, geo);\n\t\t\t\t\tlastChild = child;\n\t\t\t\t\tlast = geo;\n\t\t\t\t\t\n\t\t\t\t\tif (horizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.x + last.width + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlastValue = last.y + last.height + Math.floor(sw / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resizeParent && pgeo != null && last != null && !this.graph.isCellCollapsed(parent))\n\t\t\t{\n\t\t\t\tthis.updateParentGeometry(parent, pgeo, last);\n\t\t\t}\n\t\t\telse if (this.resizeLast && pgeo != null && last != null && lastChild != null)\n\t\t\t{\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tlast.width = pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlast.height = pgeo.height - last.y - this.spacing - this.marginBottom;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.setChildGeometry(lastChild, last);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.setChildGeometry = function(child, geo)\n{\n\tvar geo2 = this.graph.getCellGeometry(child);\n\t\n\tif (geo2 == null || geo.x != geo2.x || geo.y != geo2.y ||\n\t\tgeo.width != geo2.width || geo.height != geo2.height)\n\t{\n\t\tthis.graph.getModel().setGeometry(child, geo);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.updateParentGeometry = function(parent, pgeo, last)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\t\n\n\tvar pgeo2 = pgeo.clone();\n\t\n\tif (horizontal)\n\t{\n\t\tvar tmp = last.x + last.width + this.marginRight + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.width = Math.max(pgeo2.width, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.width = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tmp = last.y + last.height + this.marginBottom + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.height = Math.max(pgeo2.height, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.height = tmp;\n\t\t}\n\t}\n\t\n\tif (pgeo.x != pgeo2.x || pgeo.y != pgeo2.y ||\n\t\tpgeo.width != pgeo2.width || pgeo.height != pgeo2.height)\n\t{\n\t\tmodel.setGeometry(parent, pgeo2);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPartitionLayout\n * \n * Extends <mxGraphLayout> for partitioning the parent cell vertically or\n * horizontally by filling the complete area with the child cells. A horizontal\n * layout partitions the height of the given parent whereas a a non-horizontal\n * layout partitions the width. If the parent is a layer (that is, a child of\n * the root node), then the current graph size is partitioned. The children do\n * not need to be connected for this layout to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxPartitionLayout(graph, true, 10, 20);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxPartitionLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxPartitionLayout(graph, horizontal, spacing, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = spacing || 0;\n\tthis.border = border || 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxPartitionLayout.prototype = new mxGraphLayout();\nmxPartitionLayout.prototype.constructor = mxPartitionLayout;\n\n/**\n * Variable: horizontal\n * \n * Boolean indicating the direction in which the space is partitioned.\n * Default is true.\n */\nmxPartitionLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n * \n * Integer that specifies the absolute spacing in pixels between the\n * children. Default is 0.\n */\nmxPartitionLayout.prototype.spacing = null;\n\n/**\n * Variable: border\n * \n * Integer that specifies the absolute inset in pixels for the parent that\n * contains the children. Default is 0.\n */\nmxPartitionLayout.prototype.border = null;\n\n/**\n * Variable: resizeVertices\n * \n * Boolean that specifies if vertices should be resized. Default is true.\n */\nmxPartitionLayout.prototype.resizeVertices = true;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxPartitionLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxPartitionLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\t\n\tif (cell != null &&\n\t\tparent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\t// Finds index of the closest swimlane\n\t\t// TODO: Take into account the orientation\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\tvar bounds = this.getVertexBounds(child);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tvar tmp = bounds.x + bounds.width / 2;\n\t\t\t\t\n\t\t\t\tif (last < x && tmp > x)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlast = tmp;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\t\t\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. All children where <isVertexIgnored>\n * returns false and <isVertexMovable> returns true are modified.\n */\nmxPartitionLayout.prototype.execute = function(parent)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null &&\n\t\t((pgeo == null &&\n\t\tmodel.isLayer(parent)) ||\n\t\tparent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\n\tif (pgeo != null)\n\t{\n\t\tvar children = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(child) &&\n\t\t\t\tthis.isVertexMovable(child))\n\t\t\t{\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar n = children.length;\n\n\t\tif (n > 0)\n\t\t{\n\t\t\tvar x0 = this.border;\n\t\t\tvar y0 = this.border;\n\t\t\tvar other = (horizontal) ? pgeo.height : pgeo.width;\n\t\t\tother -= 2 * this.border;\n\n\t\t\tvar size = (this.graph.isSwimlane(parent)) ?\n\t\t\t\tthis.graph.getStartSize(parent) :\n\t\t\t\tnew mxRectangle();\n\n\t\t\tother -= (horizontal) ? size.height : size.width;\n\t\t\tx0 = x0 + size.width;\n\t\t\ty0 = y0 + size.height;\n\n\t\t\tvar tmp = this.border + (n - 1) * this.spacing;\n\t\t\tvar value = (horizontal) ?\n\t\t\t\t((pgeo.width - x0 - tmp) / n) :\n\t\t\t\t((pgeo.height - y0 - tmp) / n);\n\t\t\t\n\t\t\t// Avoids negative values, that is values where the sum of the\n\t\t\t// spacing plus the border is larger then the available space\n\t\t\tif (value > 0)\n\t\t\t{\n\t\t\t\tmodel.beginUpdate();\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t\tgeo.y = y0;\n\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.width = value;\n\t\t\t\t\t\t\t\t\tgeo.height = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tx0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.height = value;\n\t\t\t\t\t\t\t\t\tgeo.width = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ty0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel.setGeometry(child, geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCompactTreeLayout\n * \n * Extends <mxGraphLayout> to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new compact tree layout for the specified graph\n * and orientation.\n */\nfunction mxCompactTreeLayout(graph, horizontal, invert)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.invert = (invert != null) ? invert : false;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompactTreeLayout.prototype = new mxGraphLayout();\nmxCompactTreeLayout.prototype.constructor = mxCompactTreeLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxCompactTreeLayout.prototype.horizontal = null;\t \n\n/**\n * Variable: invert\n *\n * Specifies if edge directions should be inverted. Default is false.\n */\nmxCompactTreeLayout.prototype.invert = null;\t \n\n/**\n * Variable: resizeParent\n * \n * If the parents should be resized to match the width/height of the\n * children. Default is true.\n */\nmxCompactTreeLayout.prototype.resizeParent = true;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxCompactTreeLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents. Default is 10.\n */\nmxCompactTreeLayout.prototype.groupPadding = 10;\n\n/**\n * Variable: groupPaddingTop\n * \n * Top padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingTop = 0;\n\n/**\n * Variable: groupPaddingRight\n * \n * Right padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingRight = 0;\n\n/**\n * Variable: groupPaddingBottom\n * \n * Bottom padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingBottom = 0;\n\n/**\n * Variable: groupPaddingLeft\n * \n * Left padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingLeft = 0;\n\n/**\n * Variable: parentsChanged\n *\n * A set of the parents that need updating based on children\n * process as part of the layout.\n */\nmxCompactTreeLayout.prototype.parentsChanged = null;\n\n/**\n * Variable: moveTree\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.moveTree = false;\n\n/**\n * Variable: visited\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.visited = null;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 10.\n */\nmxCompactTreeLayout.prototype.levelDistance = 10;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 20.\n */\nmxCompactTreeLayout.prototype.nodeDistance = 20;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCompactTreeLayout.prototype.resetEdges = true;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefVertEdgeOff = 4;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex.\n */\nmxCompactTreeLayout.prototype.minEdgeJetty = 8;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed.\n */\nmxCompactTreeLayout.prototype.channelBuffer = 4;\n\n/**\n * Variable: edgeRouting\n * \n * Whether or not to apply the internal tree edge routing.\n */\nmxCompactTreeLayout.prototype.edgeRouting = true;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxCompactTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: alignRanks\n * \n * Whether or not the tops of cells in each rank should be aligned\n * across the rank\n */\nmxCompactTreeLayout.prototype.alignRanks = false;\n\n/**\n * Variable: maxRankHeight\n * \n * An array of the maximum height of cells (relative to the layout direction)\n * per rank\n */\nmxCompactTreeLayout.prototype.maxRankHeight = null;\n\n/**\n * Variable: root\n * \n * The cell to use as the root of the tree\n */\nmxCompactTreeLayout.prototype.root = null;\n\n/**\n * Variable: node\n * \n * The internal node representation of the root cell. Do not set directly\n * , this value is only exposed to assist with post-processing functionality\n */\nmxCompactTreeLayout.prototype.node = null;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxCompactTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxCompactTreeLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n * Overrides <root> if specified.\n */\nmxCompactTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.getModel();\n\n\tif (root == null)\n\t{\n\t\t// Takes the parent as the root if it has outgoing edges\n\t\tif (this.graph.getEdges(parent, model.getParent(parent),\n\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t{\n\t\t\tthis.root = parent;\n\t\t}\n\t\t\n\t\t// Tries to find a suitable root in the parent's\n\t\t// children\n\t\telse\n\t\t{\n\t\t\tvar roots = this.graph.findTreeRoots(parent, true, this.invert);\n\t\t\t\n\t\t\tif (roots.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < roots.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (!this.isVertexIgnored(roots[i]) &&\n\t\t\t\t\t\tthis.graph.getEdges(roots[i], null,\n\t\t\t\t\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.root = roots[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.root = root;\n\t}\n\t\n\tif (this.root != null)\n\t{\n\t\tif (this.resizeParent)\n\t\t{\n\t\t\tthis.parentsChanged = new Object();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.parentsChanged = null;\n\t\t}\n\n\t\t//  Maintaining parent location\n\t\tthis.parentX = null;\n\t\tthis.parentY = null;\n\t\t\n\t\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tthis.parentX = geo.x;\n\t\t\t\tthis.parentY = geo.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmodel.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tthis.visited = new Object();\n\t\t\tthis.node = this.dfs(this.root, parent);\n\t\t\t\n\t\t\tif (this.alignRanks)\n\t\t\t{\n\t\t\t\tthis.maxRankHeight = [];\n\t\t\t\tthis.findRankHeights(this.node, 0);\n\t\t\t\tthis.setCellHeights(this.node, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.node != null)\n\t\t\t{\n\t\t\t\tthis.layout(this.node);\n\t\t\t\tvar x0 = this.graph.gridSize;\n\t\t\t\tvar y0 = x0;\n\t\t\t\t\n\t\t\t\tif (!this.moveTree)\n\t\t\t\t{\n\t\t\t\t\tvar g = this.getVertexBounds(this.root);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx0 = g.x;\n\t\t\t\t\t\ty0 = g.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bounds = null;\n\t\t\t\t\n\t\t\t\tif (this.isHorizontal())\n\t\t\t\t{\n\t\t\t\t\tbounds = this.horizontalLayout(this.node, x0, y0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbounds = this.verticalLayout(this.node, null, x0, y0);\n\t\t\t\t}\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\tvar dy = 0;\n\n\t\t\t\t\tif (bounds.x < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = Math.abs(x0 - bounds.x);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bounds.y < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = Math.abs(y0 - bounds.y);\t\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.moveNode(this.node, dx, dy);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.resizeParent)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.adjustParents();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.edgeRouting)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Iterate through all edges setting their positions\n\t\t\t\t\t\tthis.localEdgeProcessing(this.node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Maintaining parent location\n\t\t\t\tif (this.parentX != null && this.parentY != null)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\tgeo.x = this.parentX;\n\t\t\t\t\t\tgeo.y = this.parentY;\n\t\t\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: moveNode\n * \n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.moveNode = function(node, dx, dy)\n{\n\tnode.x += dx;\n\tnode.y += dy;\n\tthis.apply(node);\n\t\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.moveNode(child, dx, dy);\n\t\tchild = child.next;\n\t}\n};\n\n\n/**\n * Function: sortOutgoingEdges\n * \n * Called if <sortEdges> is true to sort the array of outgoing edges in place.\n */\nmxCompactTreeLayout.prototype.sortOutgoingEdges = function(source, edges)\n{\n\tvar lookup = new mxDictionary();\n\t\n\tedges.sort(function(e1, e2)\n\t{\n\t\tvar end1 = e1.getTerminal(e1.getTerminal(false) == source);\n\t\tvar p1 = lookup.get(end1);\n\t\t\n\t\tif (p1 == null)\n\t\t{\n\t\t\tp1 = mxCellPath.create(end1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end1, p1);\n\t\t}\n\n\t\tvar end2 = e2.getTerminal(e2.getTerminal(false) == source);\n\t\tvar p2 = lookup.get(end2);\n\t\t\n\t\tif (p2 == null)\n\t\t{\n\t\t\tp2 = mxCellPath.create(end2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end2, p2);\n\t\t}\n\n\t\treturn mxCellPath.compare(p1, p2);\n\t});\n};\n\n/**\n * Function: findRankHeights\n * \n * Stores the maximum height (relative to the layout\n * direction) of cells in each rank\n */\nmxCompactTreeLayout.prototype.findRankHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] == null || this.maxRankHeight[rank] < node.height)\n\t{\n\t\tthis.maxRankHeight[rank] = node.height;\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.findRankHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: setCellHeights\n * \n * Set the cells heights (relative to the layout\n * direction) when the tops of each rank are to be aligned\n */\nmxCompactTreeLayout.prototype.setCellHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] != null && this.maxRankHeight[rank] > node.height)\n\t{\n\t\tnode.height = this.maxRankHeight[rank];\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.setCellHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: dfs\n * \n * Does a depth first search starting at the specified cell.\n * Makes sure the specified parent is never left by the\n * algorithm.\n */\nmxCompactTreeLayout.prototype.dfs = function(cell, parent)\n{\n\tvar id = mxCellPath.create(cell);\n\tvar node = null;\n\t\n\tif (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell))\n\t{\n\t\tthis.visited[id] = cell;\n\t\tnode = this.createNode(cell);\n\n\t\tvar model = this.graph.getModel();\n\t\tvar prev = null;\n\t\tvar out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n\t\tvar view = this.graph.getView();\n\t\t\n\t\tif (this.sortEdges)\n\t\t{\n\t\t\tthis.sortOutgoingEdges(cell, out);\n\t\t}\n\n\t\tfor (var i = 0; i < out.length; i++)\n\t\t{\n\t\t\tvar edge = out[i];\n\t\t\t\n\t\t\tif (!this.isEdgeIgnored(edge))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.edgeRouting)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if terminal in same swimlane\n\t\t\t\tvar state = view.getState(edge);\n\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);\n\t\t\t\tvar tmp = this.dfs(target, parent);\n\t\t\t\t\n\t\t\t\tif (tmp != null && model.getGeometry(target) != null)\n\t\t\t\t{\n\t\t\t\t\tif (prev == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.child = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprev.next = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tprev = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: layout\n * \n * Starts the actual compact tree layout algorithm\n * at the given node.\n */\nmxCompactTreeLayout.prototype.layout = function(node)\n{\n\tif (node != null)\n\t{\n\t\tvar child = node.child;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tthis.layout(child);\n\t\t\tchild = child.next;\n\t\t}\n\t\t\n\t\tif (node.child != null)\n\t\t{\n\t\t\tthis.attachParent(node, this.join(node));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.layoutLeaf(node);\n\t\t}\n\t}\n};\n\n/**\n * Function: horizontalLayout\n */\nmxCompactTreeLayout.prototype.horizontalLayout = function(node, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetX;\n\tnode.y += y0 + node.offsetY;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.horizontalLayout(child, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.y + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\t\n/**\n * Function: verticalLayout\n */\nmxCompactTreeLayout.prototype.verticalLayout = function(node, parent, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetY;\n\tnode.y += y0 + node.offsetX;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.x + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: attachParent\n */\nmxCompactTreeLayout.prototype.attachParent = function(node, height)\n{\n\tvar x = this.nodeDistance + this.levelDistance;\n\tvar y2 = (height - node.width) / 2 - this.nodeDistance;\n\tvar y1 = y2 + node.width + 2 * this.nodeDistance - height;\n\t\n\tnode.child.offsetX = x + node.height;\n\tnode.child.offsetY = y1;\n\t\n\tnode.contour.upperHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y1, node.contour.upperHead));\n\tnode.contour.lowerHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y2, node.contour.lowerHead));\n};\n\n/**\n * Function: layoutLeaf\n */\nmxCompactTreeLayout.prototype.layoutLeaf = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tnode.contour.upperTail = this.createLine(\n\t\tnode.height + dist, 0);\n\tnode.contour.upperHead = node.contour.upperTail;\n\tnode.contour.lowerTail = this.createLine(\n\t\t0, -node.width - dist);\n\tnode.contour.lowerHead = this.createLine(\n\t\tnode.height + dist, 0, node.contour.lowerTail);\n};\n\n/**\n * Function: join\n */\nmxCompactTreeLayout.prototype.join = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tvar child = node.child;\n\tnode.contour = child.contour;\n\tvar h = child.width + dist;\n\tvar sum = h;\n\tchild = child.next;\n\t\n\twhile (child != null)\n\t{\n\t\tvar d = this.merge(node.contour, child.contour);\n\t\tchild.offsetY = d + h;\n\t\tchild.offsetX = 0;\n\t\th = child.width + dist;\n\t\tsum += d + h;\n\t\tchild = child.next;\n\t}\n\t\n\treturn sum;\n};\n\n/**\n * Function: merge\n */\nmxCompactTreeLayout.prototype.merge = function(p1, p2)\n{\n\tvar x = 0;\n\tvar y = 0;\n\tvar total = 0;\n\t\n\tvar upper = p1.lowerHead;\n\tvar lower = p2.upperHead;\n\t\n\twhile (lower != null && upper != null)\n\t{\n\t\tvar d = this.offset(x, y, lower.dx, lower.dy,\n\t\t\tupper.dx, upper.dy);\n\t\ty += d;\n\t\ttotal += d;\n\t\t\n\t\tif (x + lower.dx <= upper.dx)\n\t\t{\n\t\t\tx += lower.dx;\n\t\t\ty += lower.dy;\n\t\t\tlower = lower.next;\n\t\t}\n\t\telse\n\t\t{\t\t\t\t\n\t\t\tx -= upper.dx;\n\t\t\ty -= upper.dy;\n\t\t\tupper = upper.next;\n\t\t}\n\t}\n\t\n\tif (lower != null)\n\t{\n\t\tvar b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n\t\tp1.upperTail = (b.next != null) ? p2.upperTail : b;\n\t\tp1.lowerTail = p2.lowerTail;\n\t}\n\telse\n\t{\n\t\tvar b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n\t\t\n\t\tif (b.next == null)\n\t\t{\n\t\t\tp1.lowerTail = b;\n\t\t}\n\t}\n\t\n\tp1.lowerHead = p2.lowerHead;\n\t\n\treturn total;\n};\n\n/**\n * Function: offset\n */\nmxCompactTreeLayout.prototype.offset = function(p1, p2, a1, a2, b1, b2)\n{\n\tvar d = 0;\n\t\n\tif (b1 <= p1 || p1 + a1 <= 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar t = b1 * a2 - a1 * b2;\n\t\n\tif (t > 0)\n\t{\n\t\tif (p1 < 0)\n\t\t{\n\t\t\tvar s = p1 * a2;\n\t\t\td = s / a1 - p2;\n\t\t}\n\t\telse if (p1 > 0)\n\t\t{\n\t\t\tvar s = p1 * b2;\n\t\t\td = s / b1 - p2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\td = -p2;\n\t\t}\n\t}\n\telse if (b1 < p1 + a1)\n\t{\n\t\tvar s = (b1 - p1) * a2;\n\t\td = b2 - (p2 + s / a1);\n\t}\n\telse if (b1 > p1 + a1)\n\t{\n\t\tvar s = (a1 + p1) * b2;\n\t\td = s / b1 - (p2 + a2);\n\t}\n\telse\n\t{\n\t\td = b2 - (p2 + a2);\n\t}\n\n\tif (d > 0)\n\t{\n\t\treturn d;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n/**\n * Function: bridge\n */\nmxCompactTreeLayout.prototype.bridge = function(line1, x1, y1, line2, x2, y2)\n{\n\tvar dx = x2 + line2.dx - x1;\n\tvar dy = 0;\n\tvar s = 0;\n\t\n\tif (line2.dx == 0)\n\t{\n\t\tdy = line2.dy;\n\t}\n\telse\n\t{\n\t\ts = dx * line2.dy;\n\t\tdy = s / line2.dx;\n\t}\n\t\n\tvar r = this.createLine(dx, dy, line2.next);\n\tline1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n\t\n\treturn r;\n};\n\n/**\n * Function: createNode\n */\nmxCompactTreeLayout.prototype.createNode = function(cell)\n{\n\tvar node = new Object();\n\tnode.cell = cell;\n\tnode.x = 0;\n\tnode.y = 0;\n\tnode.width = 0;\n\tnode.height = 0;\n\t\n\tvar geo = this.getVertexBounds(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tnode.width = geo.height;\n\t\t\tnode.height = geo.width;\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.width = geo.width;\n\t\t\tnode.height = geo.height;\n\t\t}\n\t}\n\t\n\tnode.offsetX = 0;\n\tnode.offsetY = 0;\n\tnode.contour = new Object();\n\t\n\treturn node;\n};\n\n/**\n * Function: apply\n */\nmxCompactTreeLayout.prototype.apply = function(node, bounds)\n{\n\tvar model = this.graph.getModel();\n\tvar cell = node.cell;\n\tvar g = model.getGeometry(cell);\n\n\tif (cell != null && g != null)\n\t{\n\t\tif (this.isVertexMovable(cell))\n\t\t{\n\t\t\tg = this.setVertexLocation(cell, node.x, node.y);\n\t\t\t\n\t\t\tif (this.resizeParent)\n\t\t\t{\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\tvar id = mxCellPath.create(parent);\n\t\t\t\t\n\t\t\t\t// Implements set semantic\n\t\t\t\tif (this.parentsChanged[id] == null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentsChanged[id] = parent;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bounds == null)\n\t\t{\n\t\t\tbounds = new mxRectangle(g.x, g.y, g.width, g.height);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds = new mxRectangle(Math.min(bounds.x, g.x),\n\t\t\t\tMath.min(bounds.y, g.y),\n\t\t\t\tMath.max(bounds.x + bounds.width, g.x + g.width),\n\t\t\t\tMath.max(bounds.y + bounds.height, g.y + g.height));\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: createLine\n */\nmxCompactTreeLayout.prototype.createLine = function(dx, dy, next)\n{\n\tvar line = new Object();\n\tline.dx = dx;\n\tline.dy = dy;\n\tline.next = next;\n\t\n\treturn line;\n};\n\n/**\n * Function: adjustParents\n * \n * Adjust parent cells whose child geometries have changed. The default \n * implementation adjusts the group to just fit around the children with \n * a padding.\n */\nmxCompactTreeLayout.prototype.adjustParents = function()\n{\n\tvar tmp = [];\n\t\n\tfor (var id in this.parentsChanged)\n\t{\n\t\ttmp.push(this.parentsChanged[id]);\n\t}\n\t\n\tthis.arrangeGroups(mxUtils.sortCells(tmp, true), this.groupPadding, this.groupPaddingTop,\n\t\tthis.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.localEdgeProcessing = function(node)\n{\n\tthis.processNodeOutgoing(node);\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.localEdgeProcessing(child);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Separates the x position of edges as they connect to vertices\n */\nmxCompactTreeLayout.prototype.processNodeOutgoing = function(node)\n{\n\tvar child = node.child;\n\tvar parentCell = node.cell;\n\n\tvar childCount = 0;\n\tvar sortedCells = [];\n\n\twhile (child != null)\n\t{\n\t\tchildCount++;\n\n\t\tvar sortingCriterion = child.x;\n\n\t\tif (this.horizontal)\n\t\t{\n\t\t\tsortingCriterion = child.y;\n\t\t}\n\n\t\tsortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n\t\tchild = child.next;\n\t}\n\n\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\tvar availableWidth = node.width;\n\n\tvar requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n\n\t// Add a buffer on the edges of the vertex if the edge count allows\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tavailableWidth -= 2 * this.prefHozEdgeSep;\n\t}\n\n\tvar edgeSpacing = availableWidth / childCount;\n\n\tvar currentXOffset = edgeSpacing / 2.0;\n\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tcurrentXOffset += this.prefHozEdgeSep;\n\t}\n\n\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\tvar maxYOffset = 0;\n\n\tvar parentBounds = this.getVertexBounds(parentCell);\n\tchild = node.child;\n\n\tfor (var j = 0; j < sortedCells.length; j++)\n\t{\n\t\tvar childCell = sortedCells[j].cell.cell;\n\t\tvar childBounds = this.getVertexBounds(childCell);\n\n\t\tvar edges = this.graph.getEdgesBetween(parentCell,\n\t\t\t\tchildCell, false);\n\t\t\n\t\tvar newPoints = [];\n\t\tvar x = 0;\n\t\tvar y = 0;\n\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.horizontal)\n\t\t\t{\n\t\t\t\t// Use opposite co-ords, calculation was done for \n\t\t\t\t// \n\t\t\t\tx = parentBounds.x + parentBounds.width;\n\t\t\t\ty = parentBounds.y + currentXOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = parentBounds.x + parentBounds.width\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = childBounds.y + childBounds.height / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = parentBounds.x + currentXOffset;\n\t\t\t\ty = parentBounds.y + parentBounds.height;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = parentBounds.y + parentBounds.height\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = childBounds.x + childBounds.width / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t}\n\n\t\tif (j < childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t}\n\t\telse if (j > childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t}\n\t\t// Ignore the case if equals, this means the second of 2\n\t\t// jettys with the same y (even number of edges)\n\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2] = currentX;\n\t\tcurrentXOffset += edgeSpacing;\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2 + 1] = currentYOffset;\n\n\t\tmaxYOffset = Math.max(maxYOffset, currentYOffset);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRadialTreeLayout\n * \n * Extends <mxGraphLayout> to implement a radial tree algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxRadialTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxRadialTreeLayout\n * \n * Constructs a new radial tree layout for the specified graph\n */\nfunction mxRadialTreeLayout(graph)\n{\n\tmxCompactTreeLayout.call(this, graph , false);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxUtils.extend(mxRadialTreeLayout, mxCompactTreeLayout);\n\n/**\n * Variable: angleOffset\n *\n * The initial offset to compute the angle position.\n */\nmxRadialTreeLayout.prototype.angleOffset = 0.5;\n\n/**\n * Variable: rootx\n *\n * The X co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rootx = 0;\n\n/**\n * Variable: rooty\n *\n * The Y co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rooty = 0;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 120.\n */\nmxRadialTreeLayout.prototype.levelDistance = 120;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 10.\n */\nmxRadialTreeLayout.prototype.nodeDistance = 10;\n\n/**\n * Variable: autoRadius\n * \n * Specifies if the radios should be computed automatically\n */\nmxRadialTreeLayout.prototype.autoRadius = false;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxRadialTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: rowMinX\n * \n * Array of leftmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMinX = [];\n\n/**\n * Variable: rowMaxX\n * \n * Array of rightmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMaxX = [];\n\n/**\n * Variable: rowMinCenX\n * \n * Array of x coordinate of leftmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMinCenX = [];\n\n/**\n * Variable: rowMaxCenX\n * \n * Array of x coordinate of rightmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMaxCenX = [];\n\n/**\n * Variable: rowRadi\n * \n * Array of y deltas of each row behind root vertex, also the radius in the tree\n */\nmxRadialTreeLayout.prototype.rowRadi = [];\n\n/**\n * Variable: row\n * \n * Array of vertices on each row\n */\nmxRadialTreeLayout.prototype.row = [];\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxRadialTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n */\nmxRadialTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\t\n\tthis.useBoundingBox = false;\n\tthis.edgeRouting = false;\n\t//this.horizontal = false;\n\n\tmxCompactTreeLayout.prototype.execute.apply(this, arguments);\n\t\n\tvar bounds = null;\n\tvar rootBounds = this.getVertexBounds(this.root);\n\tthis.centerX = rootBounds.x + rootBounds.width / 2;\n\tthis.centerY = rootBounds.y + rootBounds.height / 2;\n\n\t// Calculate the bounds of the involved vertices directly from the values set in the compact tree\n\tfor (var vertex in this.visited)\n\t{\n\t\tvar vertexBounds = this.getVertexBounds(this.visited[vertex]);\n\t\tbounds = (bounds != null) ? bounds : vertexBounds.clone();\n\t\tbounds.add(vertexBounds);\n\t}\n\t\n\tthis.calcRowDims([this.node], 0);\n\t\n\tvar maxLeftGrad = 0;\n\tvar maxRightGrad = 0;\n\n\t// Find the steepest left and right gradients\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar leftGrad = (this.centerX - this.rowMinX[i] - this.nodeDistance) / this.rowRadi[i];\n\t\tvar rightGrad = (this.rowMaxX[i] - this.centerX - this.nodeDistance) / this.rowRadi[i];\n\t\t\n\t\tmaxLeftGrad = Math.max (maxLeftGrad, leftGrad);\n\t\tmaxRightGrad = Math.max (maxRightGrad, rightGrad);\n\t}\n\t\n\t// Extend out row so they meet the maximum gradient and convert to polar co-ords\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar xLeftLimit = this.centerX - this.nodeDistance - maxLeftGrad * this.rowRadi[i];\n\t\tvar xRightLimit = this.centerX + this.nodeDistance + maxRightGrad * this.rowRadi[i];\n\t\tvar fullWidth = xRightLimit - xLeftLimit;\n\t\t\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tvar xProportion = (vertexBounds.x + vertexBounds.width / 2 - xLeftLimit) / (fullWidth);\n\t\t\tvar theta =  2 * Math.PI * xProportion;\n\t\t\tnode.theta = theta;\n\t\t}\n\t}\n\n\t// Post-process from outside inwards to try to align parents with children\n\tfor (var i = this.row.length - 2; i >= 0; i--)\n\t{\n\t\tvar row = this.row[i];\n\t\t\n\t\tfor (var j = 0; j < row.length; j++)\n\t\t{\n\t\t\tvar node = row[j];\n\t\t\tvar child = node.child;\n\t\t\tvar counter = 0;\n\t\t\tvar totalTheta = 0;\n\t\t\t\n\t\t\twhile (child != null)\n\t\t\t{\n\t\t\t\ttotalTheta += child.theta;\n\t\t\t\tcounter++;\n\t\t\t\tchild = child.next;\n\t\t\t}\n\t\t\t\n\t\t\tif (counter > 0)\n\t\t\t{\n\t\t\t\tvar averTheta = totalTheta / counter;\n\t\t\t\t\n\t\t\t\tif (averTheta > node.theta && j < row.length - 1)\n\t\t\t\t{\n\t\t\t\t\tvar nextTheta = row[j+1].theta;\n\t\t\t\t\tnode.theta = Math.min (averTheta, nextTheta - Math.PI/10);\n\t\t\t\t}\n\t\t\t\telse if (averTheta < node.theta && j > 0 )\n\t\t\t\t{\n\t\t\t\t\tvar lastTheta = row[j-1].theta;\n\t\t\t\t\tnode.theta = Math.max (averTheta, lastTheta + Math.PI/10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Set locations\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tthis.setVertexLocation(node.cell,\n\t\t\t\t\t\t\t\t\tthis.centerX - vertexBounds.width / 2 + this.rowRadi[i] * Math.cos(node.theta),\n\t\t\t\t\t\t\t\t\tthis.centerY - vertexBounds.height / 2 + this.rowRadi[i] * Math.sin(node.theta));\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRowDims\n * \n * Recursive function to calculate the dimensions of each row\n * \n * Parameters:\n * \n * row - Array of internal nodes, the children of which are to be processed.\n * rowNum - Integer indicating which row is being processed.\n */\nmxRadialTreeLayout.prototype.calcRowDims = function(row, rowNum)\n{\n\tif (row == null || row.length == 0)\n\t{\n\t\treturn;\n\t}\n\n\t// Place root's children proportionally around the first level\n\tthis.rowMinX[rowNum] = this.centerX;\n\tthis.rowMaxX[rowNum] = this.centerX;\n\tthis.rowMinCenX[rowNum] = this.centerX;\n\tthis.rowMaxCenX[rowNum] = this.centerX;\n\tthis.row[rowNum] = [];\n\n\tvar rowHasChildren = false;\n\n\tfor (var i = 0; i < row.length; i++)\n\t{\n\t\tvar child = row[i] != null ? row[i].child : null;\n\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar cell = child.cell;\n\t\t\tvar vertexBounds = this.getVertexBounds(cell);\n\t\t\t\n\t\t\tthis.rowMinX[rowNum] = Math.min(vertexBounds.x, this.rowMinX[rowNum]);\n\t\t\tthis.rowMaxX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width, this.rowMaxX[rowNum]);\n\t\t\tthis.rowMinCenX[rowNum] = Math.min(vertexBounds.x + vertexBounds.width / 2, this.rowMinCenX[rowNum]);\n\t\t\tthis.rowMaxCenX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width / 2, this.rowMaxCenX[rowNum]);\n\t\t\tthis.rowRadi[rowNum] = vertexBounds.y - this.getVertexBounds(this.root).y;\n\t\n\t\t\tif (child.child != null)\n\t\t\t{\n\t\t\t\trowHasChildren = true;\n\t\t\t}\n\t\t\t\n\t\t\tthis.row[rowNum].push(child);\n\t\t\tchild = child.next;\n\t\t}\n\t}\n\t\n\tif (rowHasChildren)\n\t{\n\t\tthis.calcRowDims(this.row[rowNum], rowNum + 1);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxFastOrganicLayout\n * \n * Extends <mxGraphLayout> to implement a fast organic layout algorithm.\n * The vertices need to be connected for this layout to work, vertices\n * with no connections are ignored.\n * \n * Example:\n * \n * (code)\n * var layout = new mxFastOrganicLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new fast organic layout for the specified graph.\n */\nfunction mxFastOrganicLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxFastOrganicLayout.prototype = new mxGraphLayout();\nmxFastOrganicLayout.prototype.constructor = mxFastOrganicLayout;\n\n/**\n * Variable: useInputOrigin\n * \n * Specifies if the top left corner of the input cells should be the origin\n * of the layout result. Default is true.\n */\nmxFastOrganicLayout.prototype.useInputOrigin = true;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxFastOrganicLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxFastOrganicLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: forceConstant\n * \n * The force constant by which the attractive forces are divided and the\n * replusive forces are multiple by the square of. The value equates to the\n * average radius there is of free space around each node. Default is 50.\n */\nmxFastOrganicLayout.prototype.forceConstant = 50;\n\n/**\n * Variable: forceConstantSquared\n * \n * Cache of <forceConstant>^2 for performance.\n */\nmxFastOrganicLayout.prototype.forceConstantSquared = 0;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.minDistanceLimit = 2;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.maxDistanceLimit = 500;\n\n/**\n * Variable: minDistanceLimitSquared\n * \n * Cached version of <minDistanceLimit> squared.\n */\nmxFastOrganicLayout.prototype.minDistanceLimitSquared = 4;\n\n/**\n * Variable: initialTemp\n * \n * Start value of temperature. Default is 200.\n */\nmxFastOrganicLayout.prototype.initialTemp = 200;\n\n/**\n * Variable: temperature\n * \n * Temperature to limit displacement at later stages of layout.\n */\nmxFastOrganicLayout.prototype.temperature = 0;\n\n/**\n * Variable: maxIterations\n * \n * Total number of iterations to run the layout though.\n */\nmxFastOrganicLayout.prototype.maxIterations = 0;\n\n/**\n * Variable: iteration\n * \n * Current iteration count.\n */\nmxFastOrganicLayout.prototype.iteration = 0;\n\n/**\n * Variable: vertexArray\n * \n * An array of all vertices to be laid out.\n */\nmxFastOrganicLayout.prototype.vertexArray;\n\n/**\n * Variable: dispX\n * \n * An array of locally stored X co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispX;\n\n/**\n * Variable: dispY\n * \n * An array of locally stored Y co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispY;\n\n/**\n * Variable: cellLocation\n * \n * An array of locally stored co-ordinate positions for the vertices.\n */\nmxFastOrganicLayout.prototype.cellLocation;\n\n/**\n * Variable: radius\n * \n * The approximate radius of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radius;\n\n/**\n * Variable: radiusSquared\n * \n * The approximate radius squared of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radiusSquared;\n\n/**\n * Variable: isMoveable\n * \n * Array of booleans representing the movable states of the vertices.\n */\nmxFastOrganicLayout.prototype.isMoveable;\n\n/**\n * Variable: neighbours\n * \n * Local copy of cell neighbours.\n */\nmxFastOrganicLayout.prototype.neighbours;\n\n/**\n * Variable: indices\n * \n * Hashtable from cells to local indices.\n */\nmxFastOrganicLayout.prototype.indices;\n\n/**\n * Variable: allowedToRun\n * \n * Boolean flag that specifies if the layout is allowed to run. If this is\n * set to false, then the layout exits in the following iteration.\n */\nmxFastOrganicLayout.prototype.allowedToRun = true;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxFastOrganicLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. This operates on all children of the\n * given parent where <isVertexIgnored> returns false.\n */\nmxFastOrganicLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tthis.vertexArray = [];\n\tvar cells = this.graph.getChildVertices(parent);\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.isVertexIgnored(cells[i]))\n\t\t{\n\t\t\tthis.vertexArray.push(cells[i]);\n\t\t}\n\t}\n\t\n\tvar initialBounds = (this.useInputOrigin) ?\n\t\t\tthis.graph.getBoundingBoxFromGeometry(this.vertexArray) :\n\t\t\t\tnull;\n\tvar n = this.vertexArray.length;\n\n\tthis.indices = [];\n\tthis.dispX = [];\n\tthis.dispY = [];\n\tthis.cellLocation = [];\n\tthis.isMoveable = [];\n\tthis.neighbours = [];\n\tthis.radius = [];\n\tthis.radiusSquared = [];\n\n\tif (this.forceConstant < 0.001)\n\t{\n\t\tthis.forceConstant = 0.001;\n\t}\n\n\tthis.forceConstantSquared = this.forceConstant * this.forceConstant;\n\n\t// Create a map of vertices first. This is required for the array of\n\t// arrays called neighbours which holds, for each vertex, a list of\n\t// ints which represents the neighbours cells to that vertex as\n\t// the indices into vertexArray\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tvar vertex = this.vertexArray[i];\n\t\tthis.cellLocation[i] = [];\n\t\t\n\t\t// Set up the mapping from array indices to cells\n\t\tvar id = mxObjectIdentity.get(vertex);\n\t\tthis.indices[id] = i;\n\t\tvar bounds = this.getVertexBounds(vertex);\n\n\t\t// Set the X,Y value of the internal version of the cell to\n\t\t// the center point of the vertex for better positioning\n\t\tvar width = bounds.width;\n\t\tvar height = bounds.height;\n\t\t\n\t\t// Randomize (0, 0) locations\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\t\n\t\tthis.cellLocation[i][0] = x + width / 2.0;\n\t\tthis.cellLocation[i][1] = y + height / 2.0;\n\t\tthis.radius[i] = Math.min(width, height);\n\t\tthis.radiusSquared[i] = this.radius[i] * this.radius[i];\n\t}\n\n\t// Moves cell location back to top-left from center locations used in\n\t// algorithm, resetting the edge points is part of the transaction\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < n; i++)\n\t\t{\n\t\t\tthis.dispX[i] = 0;\n\t\t\tthis.dispY[i] = 0;\n\t\t\tthis.isMoveable[i] = this.isVertexMovable(this.vertexArray[i]);\n\n\t\t\t// Get lists of neighbours to all vertices, translate the cells\n\t\t\t// obtained in indices into vertexArray and store as an array\n\t\t\t// against the orginial cell index\n\t\t\tvar edges = this.graph.getConnections(this.vertexArray[i], parent);\n\t\t\tvar cells = this.graph.getOpposites(edges, this.vertexArray[i]);\n\t\t\tthis.neighbours[i] = [];\n\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(edges[j]);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \tthis.setEdgeStyleEnabled(edges[j], false);\n\t\t\t    }\n\n\t\t\t\t// Looks the cell up in the indices dictionary\n\t\t\t\tvar id = mxObjectIdentity.get(cells[j]);\n\t\t\t\tvar index = this.indices[id];\n\n\t\t\t\t// Check the connected cell in part of the vertex list to be\n\t\t\t\t// acted on by this layout\n\t\t\t\tif (index != null)\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = index;\n\t\t\t\t}\n\n\t\t\t\t// Else if index of the other cell doesn't correspond to\n\t\t\t\t// any cell listed to be acted upon in this layout. Set\n\t\t\t\t// the index to the value of this vertex (a dummy self-loop)\n\t\t\t\t// so the attraction force of the edge is not calculated\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.temperature = this.initialTemp;\n\n\t\t// If max number of iterations has not been set, guess it\n\t\tif (this.maxIterations == 0)\n\t\t{\n\t\t\tthis.maxIterations = 20 * Math.sqrt(n);\n\t\t}\n\t\t\n\t\t// Main iteration loop\n\t\tfor (this.iteration = 0; this.iteration < this.maxIterations; this.iteration++)\n\t\t{\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Calculate repulsive forces on all vertices\n\t\t\tthis.calcRepulsion();\n\n\t\t\t// Calculate attractive forces through edges\n\t\t\tthis.calcAttraction();\n\n\t\t\tthis.calcPositions();\n\t\t\tthis.reduceTemperature();\n\t\t}\n\n\t\tvar minx = null;\n\t\tvar miny = null;\n\t\t\n\t\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t\t{\n\t\t\tvar vertex = this.vertexArray[i];\n\t\t\t\n\t\t\tif (this.isVertexMovable(vertex))\n\t\t\t{\n\t\t\t\tvar bounds = this.getVertexBounds(vertex);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tthis.cellLocation[i][0] -= bounds.width / 2.0;\n\t\t\t\t\tthis.cellLocation[i][1] -= bounds.height / 2.0;\n\t\t\t\t\t\n\t\t\t\t\tvar x = this.graph.snap(Math.round(this.cellLocation[i][0]));\n\t\t\t\t\tvar y = this.graph.snap(Math.round(this.cellLocation[i][1]));\n\t\t\t\t\t\n\t\t\t\t\tthis.setVertexLocation(vertex, x, y);\n\t\t\t\t\t\n\t\t\t\t\tif (minx == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = Math.min(minx, x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (miny == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = y;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = Math.min(miny, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Modifies the cloned geometries in-place. Not needed\n\t\t// to clone the geometries again as we're in the same\n\t\t// undoable change.\n\t\tvar dx = -(minx || 0) + 1;\n\t\tvar dy = -(miny || 0) + 1;\n\t\t\n\t\tif (initialBounds != null)\n\t\t{\n\t\t\tdx += initialBounds.x;\n\t\t\tdy += initialBounds.y;\n\t\t}\n\t\t\n\t\tthis.graph.moveCells(this.vertexArray, dx, dy);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: calcPositions\n * \n * Takes the displacements calculated for each cell and applies them to the\n * local cache of cell positions. Limits the displacement to the current\n * temperature.\n */\nmxFastOrganicLayout.prototype.calcPositions = function()\n{\n\tfor (var index = 0; index < this.vertexArray.length; index++)\n\t{\n\t\tif (this.isMoveable[index])\n\t\t{\n\t\t\t// Get the distance of displacement for this node for this\n\t\t\t// iteration\n\t\t\tvar deltaLength = Math.sqrt(this.dispX[index] * this.dispX[index] +\n\t\t\t\tthis.dispY[index] * this.dispY[index]);\n\n\t\t\tif (deltaLength < 0.001)\n\t\t\t{\n\t\t\t\tdeltaLength = 0.001;\n\t\t\t}\n\n\t\t\t// Scale down by the current temperature if less than the\n\t\t\t// displacement distance\n\t\t\tvar newXDisp = this.dispX[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\tvar newYDisp = this.dispY[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\t// reset displacements\n\t\t\tthis.dispX[index] = 0;\n\t\t\tthis.dispY[index] = 0;\n\n\t\t\t// Update the cached cell locations\n\t\t\tthis.cellLocation[index][0] += newXDisp;\n\t\t\tthis.cellLocation[index][1] += newYDisp;\n\t\t}\n\t}\n};\n\n/**\n * Function: calcAttraction\n * \n * Calculates the attractive forces between all laid out nodes linked by\n * edges\n */\nmxFastOrganicLayout.prototype.calcAttraction = function()\n{\n\t// Check the neighbours of each vertex and calculate the attractive\n\t// force of the edge connecting them\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tfor (var k = 0; k < this.neighbours[i].length; k++)\n\t\t{\n\t\t\t// Get the index of the othe cell in the vertex array\n\t\t\tvar j = this.neighbours[i][k];\n\t\t\t\n\t\t\t// Do not proceed self-loops\n\t\t\tif (i != j &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\t// The distance between the nodes\n\t\t\t\tvar deltaLengthSquared = xDelta * xDelta + yDelta\n\t\t\t\t\t\t* yDelta - this.radiusSquared[i] - this.radiusSquared[j];\n\n\t\t\t\tif (deltaLengthSquared < this.minDistanceLimitSquared)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthSquared = this.minDistanceLimitSquared;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar deltaLength = Math.sqrt(deltaLengthSquared);\n\t\t\t\tvar force = (deltaLengthSquared) / this.forceConstant;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] -= displacementX;\n\t\t\t\tthis.dispY[i] -= displacementY;\n\t\t\t\t\n\t\t\t\tthis.dispX[j] += displacementX;\n\t\t\t\tthis.dispY[j] += displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRepulsion\n * \n * Calculates the repulsive forces between all laid out nodes\n */\nmxFastOrganicLayout.prototype.calcRepulsion = function()\n{\n\tvar vertexCount = this.vertexArray.length;\n\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tfor (var j = i; j < vertexCount; j++)\n\t\t{\n\t\t\t// Exits if the layout is no longer allowed to run\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (j != i &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\tif (xDelta == 0)\n\t\t\t\t{\n\t\t\t\t\txDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (yDelta == 0)\n\t\t\t\t{\n\t\t\t\t\tyDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Distance between nodes\n\t\t\t\tvar deltaLength = Math.sqrt((xDelta * xDelta)\n\t\t\t\t\t\t+ (yDelta * yDelta));\n\t\t\t\tvar deltaLengthWithRadius = deltaLength - this.radius[i]\n\t\t\t\t\t\t- this.radius[j];\n\n\t\t\t\tif (deltaLengthWithRadius > this.maxDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\t// Ignore vertices too far apart\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (deltaLengthWithRadius < this.minDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthWithRadius = this.minDistanceLimit;\n\t\t\t\t}\n\n\t\t\t\tvar force = this.forceConstantSquared / deltaLengthWithRadius;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] += displacementX;\n\t\t\t\tthis.dispY[i] += displacementY;\n\n\t\t\t\tthis.dispX[j] -= displacementX;\n\t\t\t\tthis.dispY[j] -= displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reduceTemperature\n * \n * Reduces the temperature of the layout from an initial setting in a linear\n * fashion to zero.\n */\nmxFastOrganicLayout.prototype.reduceTemperature = function()\n{\n\tthis.temperature = this.initialTemp * (1.0 - this.iteration / this.maxIterations);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCircleLayout\n * \n * Extends <mxGraphLayout> to implement a circluar layout for a given radius.\n * The vertices do not need to be connected for this layout to work and all\n * connections between vertices are not taken into account.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCircleLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCircleLayout\n *\n * Constructs a new circular layout for the specified radius.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n * radius - Optional radius as an int. Default is 100.\n */\nfunction mxCircleLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.radius = (radius != null) ? radius : 100;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCircleLayout.prototype = new mxGraphLayout();\nmxCircleLayout.prototype.constructor = mxCircleLayout;\n\n/**\n * Variable: radius\n * \n * Integer specifying the size of the radius. Default is 100.\n */\nmxCircleLayout.prototype.radius = null;\n\n/**\n * Variable: moveCircle\n * \n * Boolean specifying if the circle should be moved to the top,\n * left corner specified by <x0> and <y0>. Default is false.\n */\nmxCircleLayout.prototype.moveCircle = false;\n\n/**\n * Variable: x0\n * \n * Integer specifying the left coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.x0 = 0;\n\n/**\n * Variable: y0\n * \n * Integer specifying the top coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.y0 = 0;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCircleLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxCircleLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxCircleLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\t// Gets all vertices inside the parent and finds\n\t\t// the maximum dimension of the largest vertex\n\t\tvar max = 0;\n\t\tvar top = null;\n\t\tvar left = null;\n\t\tvar vertices = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(cell);\n\t\t\t\tvar bounds = this.getVertexBounds(cell);\n\t\t\t\t\n\t\t\t\tif (top == null)\n\t\t\t\t{\n\t\t\t\t\ttop = bounds.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttop = Math.min(top, bounds.y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (left == null)\n\t\t\t\t{\n\t\t\t\t\tleft = bounds.x;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleft = Math.min(left, bounds.x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmax = Math.max(max, Math.max(bounds.width, bounds.height));\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(cell);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \t\tthis.setEdgeStyleEnabled(cell, false);\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar r = this.getRadius(vertices.length, max);\n\n\t\t// Moves the circle to the specified origin\n\t\tif (this.moveCircle)\n\t\t{\n\t\t\tleft = this.x0;\n\t\t\ttop = this.y0;\n\t\t}\n\t\t\n\t\tthis.circle(vertices, r, left, top);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: getRadius\n * \n * Returns the radius to be used for the given vertex count. Max is the maximum\n * width or height of all vertices in the layout.\n */\nmxCircleLayout.prototype.getRadius = function(count, max)\n{\n\treturn Math.max(count * max / Math.PI, this.radius);\n};\n\n/**\n * Function: circle\n * \n * Executes the circular layout for the specified array\n * of vertices and the given radius. This is called from\n * <execute>.\n */\nmxCircleLayout.prototype.circle = function(vertices, r, left, top)\n{\n\tvar vertexCount = vertices.length;\n\tvar phi = 2 * Math.PI / vertexCount;\n\t\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tif (this.isVertexMovable(vertices[i]))\n\t\t{\n\t\t\tthis.setVertexLocation(vertices[i],\n\t\t\t\tMath.round(left + r + r * Math.sin(i * phi)),\n\t\t\t\tMath.round(top + r + r * Math.cos(i * phi)));\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxParallelEdgeLayout\n * \n * Extends <mxGraphLayout> for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n * \n * Example:\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * \n * graph.addListener(mxEvent.CELL_CONNECTED, function(sender, evt)\n * {\n *   var model = graph.getModel();\n *   var edge = evt.getProperty('edge');\n *   var src = model.getTerminal(edge, true);\n *   var trg = model.getTerminal(edge, false);\n *   \n *   layout.isEdgeIgnored = function(edge2)\n *   {\n *     var src2 = model.getTerminal(edge2, true);\n *     var trg2 = model.getTerminal(edge2, false);\n *     \n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *   \n *   layout.execute(graph.getDefaultParent());\n * });\n * (end)\n * \n * Constructor: mxParallelEdgeLayout\n * \n * Constructs a new parallel edge layout for the specified graph.\n */\nfunction mxParallelEdgeLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxParallelEdgeLayout.prototype = new mxGraphLayout();\nmxParallelEdgeLayout.prototype.constructor = mxParallelEdgeLayout;\n\n/**\n * Variable: spacing\n * \n * Defines the spacing between the parallels. Default is 20.\n */\nmxParallelEdgeLayout.prototype.spacing = 20;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxParallelEdgeLayout.prototype.execute = function(parent)\n{\n\tvar lookup = this.findParallels(parent);\n\t\n\tthis.graph.model.beginUpdate();\t\n\ttry\n\t{\n\t\tfor (var i in lookup)\n\t\t{\n\t\t\tvar parallels = lookup[i];\n\n\t\t\tif (parallels.length > 1)\n\t\t\t{\n\t\t\t\tthis.layout(parallels);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.model.endUpdate();\n\t}\n};\n\n/**\n * Function: findParallels\n * \n * Finds the parallel edges in the given parent.\n */\nmxParallelEdgeLayout.prototype.findParallels = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar lookup = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isEdgeIgnored(child))\n\t\t{\n\t\t\tvar id = this.getEdgeId(child);\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tif (lookup[id] == null)\n\t\t\t\t{\n\t\t\t\t\tlookup[id] = [];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlookup[id].push(child);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn lookup;\n};\n\n/**\n * Function: getEdgeId\n * \n * Returns a unique ID for the given edge. The id is independent of the\n * edge direction and is built using the visible terminal of the given\n * edge.\n */\nmxParallelEdgeLayout.prototype.getEdgeId = function(edge)\n{\n\tvar view = this.graph.getView();\n\t\n\t// Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n\tvar src = view.getVisibleTerminal(edge, true);\n\tvar trg = view.getVisibleTerminal(edge, false);\n\n\tif (src != null && trg != null)\n\t{\n\t\tsrc = mxObjectIdentity.get(src);\n\t\ttrg = mxObjectIdentity.get(trg);\n\t\t\n\t\treturn (src > trg) ? trg + '-' + src : src + '-' + trg;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: layout\n * \n * Lays out the parallel edges in the given array.\n */\nmxParallelEdgeLayout.prototype.layout = function(parallels)\n{\n\tvar edge = parallels[0];\n\tvar view = this.graph.getView();\n\tvar model = this.graph.getModel();\n\tvar src = model.getGeometry(view.getVisibleTerminal(edge, true));\n\tvar trg = model.getGeometry(view.getVisibleTerminal(edge, false));\n\t\n\t// Routes multiple loops\n\tif (src == trg)\n\t{\n\t\tvar x0 = src.x + src.width + this.spacing;\n\t\tvar y0 = src.y + src.height / 2;\n\n\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t{\n\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\tx0 += this.spacing;\n\t\t}\n\t}\n\telse if (src != null && trg != null)\n\t{\n\t\t// Routes parallel edges\n\t\tvar scx = src.x + src.width / 2;\n\t\tvar scy = src.y + src.height / 2;\n\t\t\n\t\tvar tcx = trg.x + trg.width / 2;\n\t\tvar tcy = trg.y + trg.height / 2;\n\t\t\n\t\tvar dx = tcx - scx;\n\t\tvar dy = tcy - scy;\n\n\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (len > 0)\n\t\t{\n\t\t\tvar x0 = scx + dx / 2;\n\t\t\tvar y0 = scy + dy / 2;\n\t\t\t\n\t\t\tvar nx = dy * this.spacing / len;\n\t\t\tvar ny = dx * this.spacing / len;\n\t\t\t\n\t\t\tx0 += nx * (parallels.length - 1) / 2;\n\t\t\ty0 -= ny * (parallels.length - 1) / 2;\n\t\n\t\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t\t{\n\t\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\t\tx0 -= nx;\n\t\t\t\ty0 += ny;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: route\n * \n * Routes the given edge via the given point.\n */\nmxParallelEdgeLayout.prototype.route = function(edge, x, y)\n{\n\tif (this.graph.isCellMovable(edge))\n\t{\n\t\tthis.setEdgePoints(edge, [new mxPoint(x, y)]);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCompositeLayout\n * \n * Allows to compose multiple layouts into a single layout. The master layout\n * is the layout that handles move operations if another layout than the first\n * element in <layouts> should be used. The <master> layout is not executed as\n * the code assumes that it is part of <layouts>.\n * \n * Example:\n * (code)\n * var first = new mxFastOrganicLayout(graph);\n * var second = new mxParallelEdgeLayout(graph);\n * var layout = new mxCompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompositeLayout\n *\n * Constructs a new layout using the given layouts. The graph instance is\n * required for creating the transaction that contains all layouts.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * layouts - Array of <mxGraphLayouts>.\n * master - Optional layout that handles moves. If no layout is given then\n * the first layout of the above array is used to handle moves.\n */\nfunction mxCompositeLayout(graph, layouts, master)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.layouts = layouts;\n\tthis.master = master;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompositeLayout.prototype = new mxGraphLayout();\nmxCompositeLayout.prototype.constructor = mxCompositeLayout;\n\t\n/**\n * Variable: layouts\n * \n * Holds the array of <mxGraphLayouts> that this layout contains.\n */\nmxCompositeLayout.prototype.layouts = null;\n\n/**\n * Variable: layouts\n * \n * Reference to the <mxGraphLayouts> that handles moves. If this is null\n * then the first layout in <layouts> is used.\n */\nmxCompositeLayout.prototype.master = null;\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell> by calling move on <master> or the first\n * layout in <layouts>.\n */\nmxCompositeLayout.prototype.moveCell = function(cell, x, y)\n{\n\tif (this.master != null)\n\t{\n\t\tthis.master.moveCell.apply(this.master, arguments);\n\t}\n\telse\n\t{\n\t\tthis.layouts[0].moveCell.apply(this.layouts[0], arguments);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute> by executing all <layouts> in a\n * single transaction.\n */\nmxCompositeLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < this.layouts.length; i++)\n\t\t{\n\t\t\tthis.layouts[i].execute.apply(this.layouts[i], arguments);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeLabelLayout\n * \n * Extends <mxGraphLayout> to implement an edge label layout. This layout\n * makes use of cell states, which means the graph must be validated in\n * a graph view (so that the label bounds are available) before this layout\n * can be executed.\n * \n * Example:\n * \n * (code)\n * var layout = new mxEdgeLabelLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxEdgeLabelLayout\n *\n * Constructs a new edge label layout.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n */\nfunction mxEdgeLabelLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxEdgeLabelLayout.prototype = new mxGraphLayout();\nmxEdgeLabelLayout.prototype.constructor = mxEdgeLabelLayout;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxEdgeLabelLayout.prototype.execute = function(parent)\n{\n\tvar view = this.graph.view;\n\tvar model = this.graph.getModel();\n\t\n\t// Gets all vertices and edges inside the parent\n\tvar edges = [];\n\tvar vertices = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar cell = model.getChildAt(parent, i);\n\t\tvar state = view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(state);\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\tedges.push(state);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.placeLabels(vertices, edges);\n};\n\n/**\n * Function: placeLabels\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.placeLabels = function(v, e)\n{\n\tvar model = this.graph.getModel();\n\t\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < e.length; i++)\n\t\t{\n\t\t\tvar edge = e[i];\n\t\t\t\n\t\t\tif (edge != null && edge.text != null &&\n\t\t\t\tedge.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < v.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar vertex = v[j];\n\t\t\t\t\t\n\t\t\t\t\tif (vertex != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.avoid(edge, vertex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: avoid\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.avoid = function(edge, vertex)\n{\n\tvar model = this.graph.getModel();\n\tvar labRect = edge.text.boundingBox;\n\t\n\tif (mxUtils.intersects(labRect, vertex))\n\t{\n\t\tvar dy1 = -labRect.y - labRect.height + vertex.y;\n\t\tvar dy2 = -labRect.y + vertex.y + vertex.height;\n\t\t\n\t\tvar dy = (Math.abs(dy1) < Math.abs(dy2)) ? dy1 : dy2;\n\t\t\n\t\tvar dx1 = -labRect.x - labRect.width + vertex.x;\n\t\tvar dx2 = -labRect.x + vertex.x + vertex.width;\n\t\n\t\tvar dx = (Math.abs(dx1) < Math.abs(dx2)) ? dx1 : dx2;\n\t\t\n\t\tif (Math.abs(dx) < Math.abs(dy))\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\n\t\tvar g = model.getGeometry(edge.cell);\n\t\t\n\t\tif (g != null)\n\t\t{\n\t\t\tg = g.clone();\n\t\t\t\n\t\t\tif (g.offset != null)\n\t\t\t{\n\t\t\t\tg.offset.x += dx;\n\t\t\t\tg.offset.y += dy;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\t\n\t\t\tmodel.setGeometry(edge.cell, g);\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphAbstractHierarchyCell\n * \n * An abstraction of an internal hierarchy node or edge\n * \n * Constructor: mxGraphAbstractHierarchyCell\n *\n * Constructs a new hierarchical layout algorithm.\n */\nfunction mxGraphAbstractHierarchyCell()\n{\n\tthis.x = [];\n\tthis.y = [];\n\tthis.temp = [];\n};\n\n/**\n * Variable: maxRank\n * \n * The maximum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.maxRank = -1;\n\n/**\n * Variable: minRank\n * \n * The minimum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.minRank = -1;\n\n/**\n * Variable: x\n * \n * The x position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.x = null;\n\n/**\n * Variable: y\n * \n * The y position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.y = null;\n\n/**\n * Variable: width\n * \n * The width of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.width = 0;\n\n/**\n * Variable: height\n * \n * The height of this cell. Default is 0.\n */\nmxGraphAbstractHierarchyCell.prototype.height = 0;\n\n/**\n * Variable: nextLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.nextLayerConnectedCells = null;\n\n/**\n * Variable: previousLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.previousLayerConnectedCells = null;\n\n/**\n * Variable: temp\n * \n * Temporary variable for general use. Generally, try to avoid\n * carrying information between stages. Currently, the longest\n * path layering sets temp to the rank position in fixRanks()\n * and the crossing reduction uses this. This meant temp couldn't\n * be used for hashing the nodes in the model dfs and so hashCode\n * was created\n */\nmxGraphAbstractHierarchyCell.prototype.temp = null;\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.getNextLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: isEdge\n * \n * Returns whether or not this cell is an edge\n */\nmxGraphAbstractHierarchyCell.prototype.isEdge = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isVertex\n * \n * Returns whether or not this cell is a node\n */\nmxGraphAbstractHierarchyCell.prototype.isVertex = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\treturn null;\n};\n\n/**\n * Function: setX\n * \n * Set the value of x for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setX = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.x[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.x[layer - this.minRank - 1] = value;\n\t}\n};\n\n/**\n * Function: getX\n * \n * Gets the value of x on the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getX = function(layer)\n{\n\tif (this.isVertex())\n\t{\n\t\treturn this.x[0];\n\t}\n\telse if (this.isEdge())\n\t{\n\t\treturn this.x[layer - this.minRank - 1];\n\t}\n\n\treturn 0.0;\n};\n\n/**\n * Function: setY\n * \n * Set the value of y for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setY = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.y[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.y[layer -this. minRank - 1] = value;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyNode\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyNode\n *\n * Constructs an internal node to represent the specified real graph cell\n *\n * Arguments:\n * \n * cell - the real graph cell this node represents\n */\nfunction mxGraphHierarchyNode(cell)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.cell = cell;\n\tthis.id = mxObjectIdentity.get(cell);\n\tthis.connectsAsTarget = [];\n\tthis.connectsAsSource = [];\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyNode.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyNode.prototype.constructor = mxGraphHierarchyNode;\n\n/**\n * Variable: cell\n * \n * The graph cell this object represents.\n */\nmxGraphHierarchyNode.prototype.cell = null;\n\n/**\n * Variable: id\n * \n * The object identity of the wrapped cell\n */\nmxGraphHierarchyNode.prototype.id = null;\n\n/**\n * Variable: connectsAsTarget\n * \n * Collection of hierarchy edges that have this node as a target\n */\nmxGraphHierarchyNode.prototype.connectsAsTarget = null;\n\n/**\n * Variable: connectsAsSource\n * \n * Collection of hierarchy edges that have this node as a source\n */\nmxGraphHierarchyNode.prototype.connectsAsSource = null;\n\n/**\n * Variable: hashCode\n * \n * Assigns a unique hashcode for each node. Used by the model dfs instead\n * of copying HashSets\n */\nmxGraphHierarchyNode.prototype.hashCode = false;\n\n/**\n * Function: getRankValue\n * \n * Returns the integer value of the layer that this node resides in\n */\nmxGraphHierarchyNode.prototype.getRankValue = function(layer)\n{\n\treturn this.maxRank;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyNode.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\tthis.nextLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsTarget.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsTarget[i];\n\n\t\t\tif (edge.maxRank == -1 || edge.maxRank == layer + 1)\n\t\t\t{\n\t\t\t\t// Either edge is not in any rank or\n\t\t\t\t// no dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.nextLayerConnectedCells[0];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyNode.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\t\tthis.previousLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsSource.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsSource[i];\n\n\t\t\tif (edge.minRank == -1 || edge.minRank == layer - 1)\n\t\t\t{\n\t\t\t\t// No dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[0];\n};\n\n/**\n * Function: isVertex\n * \n * Returns true.\n */\nmxGraphHierarchyNode.prototype.isVertex = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[0];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[0] = value;\n};\n\n/**\n * Function: isAncestor\n */\nmxGraphHierarchyNode.prototype.isAncestor = function(otherNode)\n{\n\t// Firstly, the hash code of this node needs to be shorter than the\n\t// other node\n\tif (otherNode != null && this.hashCode != null && otherNode.hashCode != null\n\t\t\t&& this.hashCode.length < otherNode.hashCode.length)\n\t{\n\t\tif (this.hashCode == otherNode.hashCode)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (this.hashCode == null || this.hashCode == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Secondly, this hash code must match the start of the other\n\t\t// node's hash code. Arrays.equals cannot be used here since\n\t\t// the arrays are different length, and we do not want to\n\t\t// perform another array copy.\n\t\tfor (var i = 0; i < this.hashCode.length; i++)\n\t\t{\n\t\t\tif (this.hashCode[i] != otherNode.hashCode[i])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the core vertex associated with this wrapper\n */\nmxGraphHierarchyNode.prototype.getCoreCell = function()\n{\n\treturn this.cell;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyEdge\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyEdge\n *\n * Constructs a hierarchy edge\n *\n * Arguments:\n * \n * edges - a list of real graph edges this abstraction represents\n */\nfunction mxGraphHierarchyEdge(edges)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.edges = edges;\n\tthis.ids = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.ids.push(mxObjectIdentity.get(edges[i]));\n\t}\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyEdge.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyEdge.prototype.constructor = mxGraphHierarchyEdge;\n\n/**\n * Variable: edges\n * \n * The graph edge(s) this object represents. Parallel edges are all grouped\n * together within one hierarchy edge.\n */\nmxGraphHierarchyEdge.prototype.edges = null;\n\n/**\n * Variable: ids\n * \n * The object identities of the wrapped cells\n */\nmxGraphHierarchyEdge.prototype.ids = null;\n\n/**\n * Variable: source\n * \n * The node this edge is sourced at\n */\nmxGraphHierarchyEdge.prototype.source = null;\n\n/**\n * Variable: target\n * \n * The node this edge targets\n */\nmxGraphHierarchyEdge.prototype.target = null;\n\n/**\n * Variable: isReversed\n * \n * Whether or not the direction of this edge has been reversed\n * internally to create a DAG for the hierarchical layout\n */\nmxGraphHierarchyEdge.prototype.isReversed = false;\n\n/**\n * Function: invert\n * \n * Inverts the direction of this internal edge(s)\n */\nmxGraphHierarchyEdge.prototype.invert = function(layer)\n{\n\tvar temp = this.source;\n\tthis.source = this.target;\n\tthis.target = temp;\n\tthis.isReversed = !this.isReversed;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyEdge.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\t\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.nextLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == this.temp.length - 1)\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn this.nextLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyEdge.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.previousLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: isEdge\n * \n * Returns true.\n */\nmxGraphHierarchyEdge.prototype.isEdge = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[layer - this.minRank - 1];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[layer - this.minRank - 1] = value;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the first core edge associated with this wrapper\n */\nmxGraphHierarchyEdge.prototype.getCoreCell = function()\n{\n\tif (this.edges != null && this.edges.length > 0)\n\t{\n\t\treturn this.edges[0];\n\t}\n\t\n\treturn null;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxGraphHierarchyModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxGraphHierarchyModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxGraphHierarchyModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxGraphHierarchyModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxGraphHierarchyModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxGraphHierarchyModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxGraphHierarchyModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxGraphHierarchyModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxGraphHierarchyModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxGraphHierarchyModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxGraphHierarchyModel.prototype.tightenToSource = false;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxGraphHierarchyModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxGraphHierarchyModel.prototype.initialRank = function()\n{\n\tvar startNodes = [];\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = this.SOURCESCANSTARTRANK;\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\t\t\tthis.maxRank = Math.min(this.maxRank, minimumLayer);\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] -= this.maxRank;\n\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n\tfor ( var i = 0; i < startNodesCopy.length; i++)\n\t{\n\t\tvar internalNode = startNodesCopy[i];\n\t\tvar currentMaxLayer = 0;\n\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n\n\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[j];\n\t\t\tvar otherNode = internalEdge.target;\n\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n\t\t\t\t\totherNode.temp[0] + 1);\n\t\t\tcurrentMaxLayer = internalNode.temp[0];\n\t\t}\n\t}\n\t\n\t// Reset the maxRank to that which would be expected for a from-sink\n\t// scan\n\tthis.maxRank = this.SOURCESCANSTARTRANK - this.maxRank;\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxGraphHierarchyModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxGraphHierarchyModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxSwimlaneModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxSwimlaneModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxSwimlaneModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxSwimlaneModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxSwimlaneModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxSwimlaneModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxSwimlaneModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxSwimlaneModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxSwimlaneModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxSwimlaneModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxSwimlaneModel.prototype.tightenToSource = false;\n\n/**\n * Variable: ranksPerGroup\n *\n * An array of the number of ranks within each swimlane\n */\nmxSwimlaneModel.prototype.ranksPerGroup = null;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxSwimlaneModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\tvar swimlanes = layout.swimlanes;\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\t\tinternalVertices[i].swimlaneIndex = -1;\n\n\t\tfor (var ii = 0; ii < swimlanes.length; ii++)\n\t\t{\n\t\t\tif (graph.model.getParent(vertices[i]) == swimlanes[ii])\n\t\t\t{\n\t\t\t\tinternalVertices[i].swimlaneIndex = ii;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxSwimlaneModel.prototype.initialRank = function()\n{\n\tthis.ranksPerGroup = [];\n\t\n\tvar startNodes = [];\n\tvar seen = new Object();\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\t\t\tthis.maxChainDfs(null, internalNode, null, seen, 0);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Calculate the lower and upper rank bounds of each swimlane\n\tvar lowerRank = [];\n\tvar upperRank = [];\n\t\n\tfor (var i = this.ranksPerGroup.length - 1; i >= 0; i--)\n\t{\n\t\tif (i == this.ranksPerGroup.length - 1)\n\t\t{\n\t\t\tlowerRank[i] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlowerRank[i] = upperRank[i+1] + 1;\n\t\t}\n\t\t\n\t\tupperRank[i] = lowerRank[i] + this.ranksPerGroup[i];\n\t}\n\t\n\tthis.maxRank = upperRank[0];\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\t\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = upperRank[0];\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tif (minimumLayer > upperRank[internalNode.swimlaneIndex])\n\t\t\t{\n\t\t\t\tminimumLayer = upperRank[internalNode.swimlaneIndex];\n\t\t\t}\n\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n//\tfor (var key in this.vertexMapper)\n//\t{\n//\t\tvar internalNode = this.vertexMapper[key];\n//\t\t// Mark the node as not having had a layer assigned\n//\t\tinternalNode.temp[0] -= this.maxRank;\n//\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n//\tfor ( var i = 0; i < startNodesCopy.length; i++)\n//\t{\n//\t\tvar internalNode = startNodesCopy[i];\n//\t\tvar currentMaxLayer = 0;\n//\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n//\n//\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n//\t\t{\n//\t\t\tvar internalEdge = layerDeterminingEdges[j];\n//\t\t\tvar otherNode = internalEdge.target;\n//\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n//\t\t\t\t\totherNode.temp[0] + 1);\n//\t\t\tcurrentMaxLayer = internalNode.temp[0];\n//\t\t}\n//\t}\n};\n\n/**\n * Function: maxChainDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of chains within groups.\n * Any cycles should be removed prior to running, but previously seen cells\n * are ignored.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * seen - a set of all nodes seen by this dfs\n * chainCount - the number of edges in the chain of vertices going through\n * the current swimlane\n */\nmxSwimlaneModel.prototype.maxChainDfs = function(parent, root, connectingEdge, seen, chainCount)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = mxCellPath.create(root.cell);\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvar slIndex = root.swimlaneIndex;\n\t\t\t\n\t\t\tif (this.ranksPerGroup[slIndex] == null || this.ranksPerGroup[slIndex] < chainCount)\n\t\t\t{\n\t\t\t\tthis.ranksPerGroup[slIndex] = chainCount;\n\t\t\t}\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), 0);\n\t\t\t\t}\n\t\t\t\telse if (root.swimlaneIndex == targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), chainCount + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxSwimlaneModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxSwimlaneModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\tvar incomingEdges = root.connectsAsTarget.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\t\t\t\t\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex <= targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < incomingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = incomingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.source;\n\n\t\t\t\t// Only navigate in target->source direction from a lower index \n\t\t\t\t// swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayoutStage\n * \n * The specific layout interface for hierarchical layouts. It adds a\n * <code>run</code> method with a parameter for the hierarchical layout model\n * that is shared between the layout stages.\n * \n * Constructor: mxHierarchicalLayoutStage\n *\n * Constructs a new hierarchical layout stage.\n */\nfunction mxHierarchicalLayoutStage() { };\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxHierarchicalLayoutStage.prototype.execute = function(parent) { };\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMedianHybridCrossingReduction\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well heuristic to straighten edges as\n * far as possible.\n * \n * Constructor: mxMedianHybridCrossingReduction\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxMedianHybridCrossingReduction(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxMedianHybridCrossingReduction.\n */\nmxMedianHybridCrossingReduction.prototype = new mxHierarchicalLayoutStage();\nmxMedianHybridCrossingReduction.prototype.constructor = mxMedianHybridCrossingReduction;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMedianHybridCrossingReduction.prototype.layout = null;\n\n/**\n * Variable: maxIterations\n * \n * The maximum number of iterations to perform whilst reducing edge\n * crossings. Default is 24.\n */\nmxMedianHybridCrossingReduction.prototype.maxIterations = 24;\n\n/**\n * Variable: nestedBestRanks\n * \n * Stores each rank as a collection of cells in the best order found for\n * each layer so far\n */\nmxMedianHybridCrossingReduction.prototype.nestedBestRanks = null;\n\n/**\n * Variable: currentBestCrossings\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.currentBestCrossings = 0;\n\n/**\n * Variable: iterationsWithoutImprovement\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.iterationsWithoutImprovement = 0;\n\n/**\n * Variable: maxNoImprovementIterations\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.maxNoImprovementIterations = 2;\n\n/**\n * Function: execute\n * \n * Performs a vertex ordering within ranks as described by Gansner et al\n * 1993\n */\nmxMedianHybridCrossingReduction.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\n\t// Stores initial ordering as being the best one found so far\n\tthis.nestedBestRanks = [];\n\t\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.nestedBestRanks[i] = model.ranks[i].slice();\n\t}\n\n\tvar iterationsWithoutImprovement = 0;\n\tvar currentBestCrossings = this.calculateCrossings(model);\n\n\tfor (var i = 0; i < this.maxIterations &&\n\t\titerationsWithoutImprovement < this.maxNoImprovementIterations; i++)\n\t{\n\t\tthis.weightedMedian(i, model);\n\t\tthis.transpose(i, model);\n\t\tvar candidateCrossings = this.calculateCrossings(model);\n\n\t\tif (candidateCrossings < currentBestCrossings)\n\t\t{\n\t\t\tcurrentBestCrossings = candidateCrossings;\n\t\t\titerationsWithoutImprovement = 0;\n\n\t\t\t// Store the current rankings as the best ones\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tthis.nestedBestRanks[j][cell.getGeneralPurposeVariable(j)] = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Increase count of iterations where we haven't improved the\n\t\t\t// layout\n\t\t\titerationsWithoutImprovement++;\n\n\t\t\t// Restore the best values to the cells\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tcell.setGeneralPurposeVariable(j, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (currentBestCrossings == 0)\n\t\t{\n\t\t\t// Do nothing further\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Store the best rankings but in the model\n\tvar ranks = [];\n\tvar rankList = [];\n\n\tfor (var i = 0; i < model.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tranks[i] = rankList[i];\n\t}\n\n\tfor (var i = 0; i < this.nestedBestRanks.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.nestedBestRanks[i].length; j++)\n\t\t{\n\t\t\trankList[i].push(this.nestedBestRanks[i][j]);\n\t\t}\n\t}\n\n\tmodel.ranks = ranks;\n};\n\n\n/**\n * Function: calculateCrossings\n * \n * Calculates the total number of edge crossing in the current graph.\n * Returns the current number of edge crossings in the hierarchy graph\n * model in the current candidate layout\n * \n * Parameters:\n * \n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateCrossings = function(model)\n{\n\tvar numRanks = model.ranks.length;\n\tvar totalCrossings = 0;\n\n\tfor (var i = 1; i < numRanks; i++)\n\t{\n\t\ttotalCrossings += this.calculateRankCrossing(i, model);\n\t}\n\t\n\treturn totalCrossings;\n};\n\n/**\n * Function: calculateRankCrossing\n * \n * Calculates the number of edges crossings between the specified rank and\n * the rank below it. Returns the number of edges crossings with the rank\n * beneath\n * \n * Parameters:\n * \n * i -  the topmost rank of the pair ( higher rank value )\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateRankCrossing = function(i, model)\n{\n\tvar totalCrossings = 0;\n\tvar rank = model.ranks[i];\n\tvar previousRank = model.ranks[i - 1];\n\n\tvar tmpIndices = [];\n\n\t// Iterate over the top rank and fill in the connection information\n\tfor (var j = 0; j < rank.length; j++)\n\t{\n\t\tvar node = rank[j];\n\t\tvar rankPosition = node.getGeneralPurposeVariable(i);\n\t\tvar connectedCells = node.getPreviousLayerConnectedCells(i);\n\t\tvar nodeIndices = [];\n\n\t\tfor (var k = 0; k < connectedCells.length; k++)\n\t\t{\n\t\t\tvar connectedNode = connectedCells[k];\n\t\t\tvar otherCellRankPosition = connectedNode.getGeneralPurposeVariable(i - 1);\n\t\t\tnodeIndices.push(otherCellRankPosition);\n\t\t}\n\t\t\n\t\tnodeIndices.sort(function(x, y) { return x - y; });\n\t\ttmpIndices[rankPosition] = nodeIndices;\n\t}\n\t\n\tvar indices = [];\n\n\tfor (var j = 0; j < tmpIndices.length; j++)\n\t{\n\t\tindices = indices.concat(tmpIndices[j]);\n\t}\n\n\tvar firstIndex = 1;\n\t\n\twhile (firstIndex < previousRank.length)\n\t{\n\t\tfirstIndex <<= 1;\n\t}\n\n\tvar treeSize = 2 * firstIndex - 1;\n\tfirstIndex -= 1;\n\n\tvar tree = [];\n\t\n\tfor (var j = 0; j < treeSize; ++j)\n\t{\n\t\ttree[j] = 0;\n\t}\n\n\tfor (var j = 0; j < indices.length; j++)\n\t{\n\t\tvar index = indices[j];\n\t    var treeIndex = index + firstIndex;\n\t    ++tree[treeIndex];\n\t    \n\t    while (treeIndex > 0)\n\t    {\n\t    \tif (treeIndex % 2)\n\t    \t{\n\t    \t\ttotalCrossings += tree[treeIndex + 1];\n\t    \t}\n\t      \n\t    \ttreeIndex = (treeIndex - 1) >> 1;\n\t    \t++tree[treeIndex];\n\t    }\n\t}\n\n\treturn totalCrossings;\n};\n\n/**\n * Function: transpose\n * \n * Takes each possible adjacent cell pair on each rank and checks if\n * swapping them around reduces the number of crossing\n * \n * Parameters:\n * \n * mainLoopIteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.transpose = function(mainLoopIteration, model)\n{\n\tvar improved = true;\n\n\t// Track the number of iterations in case of looping\n\tvar count = 0;\n\tvar maxCount = 10;\n\twhile (improved && count++ < maxCount)\n\t{\n\t\t// On certain iterations allow allow swapping of cell pairs with\n\t\t// equal edge crossings switched or not switched. This help to\n\t\t// nudge a stuck layout into a lower crossing total.\n\t\tvar nudge = mainLoopIteration % 2 == 1 && count % 2 == 1;\n\t\timproved = false;\n\t\t\n\t\tfor (var i = 0; i < model.ranks.length; i++)\n\t\t{\n\t\t\tvar rank = model.ranks[i];\n\t\t\tvar orderedCells = [];\n\t\t\t\n\t\t\tfor (var j = 0; j < rank.length; j++)\n\t\t\t{\n\t\t\t\tvar cell = rank[j];\n\t\t\t\tvar tempRank = cell.getGeneralPurposeVariable(i);\n\t\t\t\t\n\t\t\t\t// FIXME: Workaround to avoid negative tempRanks\n\t\t\t\tif (tempRank < 0)\n\t\t\t\t{\n\t\t\t\t\ttempRank = j;\n\t\t\t\t}\n\t\t\t\torderedCells[tempRank] = cell;\n\t\t\t}\n\t\t\t\n\t\t\tvar leftCellAboveConnections = null;\n\t\t\tvar leftCellBelowConnections = null;\n\t\t\tvar rightCellAboveConnections = null;\n\t\t\tvar rightCellBelowConnections = null;\n\t\t\t\n\t\t\tvar leftAbovePositions = null;\n\t\t\tvar leftBelowPositions = null;\n\t\t\tvar rightAbovePositions = null;\n\t\t\tvar rightBelowPositions = null;\n\t\t\t\n\t\t\tvar leftCell = null;\n\t\t\tvar rightCell = null;\n\n\t\t\tfor (var j = 0; j < (rank.length - 1); j++)\n\t\t\t{\n\t\t\t\t// For each intra-rank adjacent pair of cells\n\t\t\t\t// see if swapping them around would reduce the\n\t\t\t\t// number of edges crossing they cause in total\n\t\t\t\t// On every cell pair except the first on each rank, we\n\t\t\t\t// can save processing using the previous values for the\n\t\t\t\t// right cell on the new left cell\n\t\t\t\tif (j == 0)\n\t\t\t\t{\n\t\t\t\t\tleftCell = orderedCells[j];\n\t\t\t\t\tleftCellAboveConnections = leftCell\n\t\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\t\tleftCellBelowConnections = leftCell\n\t\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\t\t\t\t\tleftAbovePositions = [];\n\t\t\t\t\tleftBelowPositions = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellAboveConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftAbovePositions[k] = leftCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellBelowConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftBelowPositions[k] = leftCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftCellAboveConnections = rightCellAboveConnections;\n\t\t\t\t\tleftCellBelowConnections = rightCellBelowConnections;\n\t\t\t\t\tleftAbovePositions = rightAbovePositions;\n\t\t\t\t\tleftBelowPositions = rightBelowPositions;\n\t\t\t\t\tleftCell = rightCell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trightCell = orderedCells[j + 1];\n\t\t\t\trightCellAboveConnections = rightCell\n\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\trightCellBelowConnections = rightCell\n\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\n\t\t\t\trightAbovePositions = [];\n\t\t\t\trightBelowPositions = [];\n\n\t\t\t\tfor (var k = 0; k < rightCellAboveConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightAbovePositions[k] = rightCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rightCellBelowConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightBelowPositions[k] = rightCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t}\n\n\t\t\t\tvar totalCurrentCrossings = 0;\n\t\t\t\tvar totalSwitchedCrossings = 0;\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftAbovePositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightAbovePositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftAbovePositions[k] > rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftAbovePositions[k] < rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftBelowPositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightBelowPositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftBelowPositions[k] > rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftBelowPositions[k] < rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((totalSwitchedCrossings < totalCurrentCrossings) ||\n\t\t\t\t\t(totalSwitchedCrossings == totalCurrentCrossings &&\n\t\t\t\t\tnudge))\n\t\t\t\t{\n\t\t\t\t\tvar temp = leftCell.getGeneralPurposeVariable(i);\n\t\t\t\t\tleftCell.setGeneralPurposeVariable(i, rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(i));\n\t\t\t\t\trightCell.setGeneralPurposeVariable(i, temp);\n\n\t\t\t\t\t// With this pair exchanged we have to switch all of\n\t\t\t\t\t// values for the left cell to the right cell so the\n\t\t\t\t\t// next iteration for this rank uses it as the left\n\t\t\t\t\t// cell again\n\t\t\t\t\trightCellAboveConnections = leftCellAboveConnections;\n\t\t\t\t\trightCellBelowConnections = leftCellBelowConnections;\n\t\t\t\t\trightAbovePositions = leftAbovePositions;\n\t\t\t\t\trightBelowPositions = leftBelowPositions;\n\t\t\t\t\trightCell = leftCell;\n\t\t\t\t\t\n\t\t\t\t\tif (!nudge)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Don't count nudges as improvement or we'll end\n\t\t\t\t\t\t// up stuck in two combinations and not finishing\n\t\t\t\t\t\t// as early as we should\n\t\t\t\t\t\timproved = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: weightedMedian\n * \n * Sweeps up or down the layout attempting to minimise the median placement\n * of connected cells on adjacent ranks\n * \n * Parameters:\n * \n * iteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.weightedMedian = function(iteration, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (iteration % 2 == 0);\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank - 1; j >= 0; j--)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 1; j < model.maxRank; j++)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianRank\n * \n * Attempts to minimise the median placement of connected cells on this rank\n * and one of the adjacent ranks\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * downwardSweep - whether or not this is a downward sweep through the graph\n */\nmxMedianHybridCrossingReduction.prototype.medianRank = function(rankValue, downwardSweep)\n{\n\tvar numCellsForRank = this.nestedBestRanks[rankValue].length;\n\tvar medianValues = [];\n\tvar reservedPositions = [];\n\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tvar cell = this.nestedBestRanks[rankValue][i];\n\t\tvar sorterEntry = new MedianCellSorter();\n\t\tsorterEntry.cell = cell;\n\n\t\t// Flip whether or not equal medians are flipped on up and down\n\t\t// sweeps\n\t\t// TODO re-implement some kind of nudge\n\t\t// medianValues[i].nudge = !downwardSweep;\n\t\tvar nextLevelConnectedCells;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\t\n\t\tvar nextRankValue;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextRankValue = rankValue + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextRankValue = rankValue - 1;\n\t\t}\n\n\t\tif (nextLevelConnectedCells != null\n\t\t\t\t&& nextLevelConnectedCells.length != 0)\n\t\t{\n\t\t\tsorterEntry.medianValue = this.medianValue(\n\t\t\t\t\tnextLevelConnectedCells, nextRankValue);\n\t\t\tmedianValues.push(sorterEntry);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Nodes with no adjacent vertices are flagged in the reserved array\n\t\t\t// to indicate they should be left in their current position.\n\t\t\treservedPositions[cell.getGeneralPurposeVariable(rankValue)] = true;\n\t\t}\n\t}\n\t\n\tmedianValues.sort(MedianCellSorter.prototype.compare);\n\t\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tif (reservedPositions[i] == null)\n\t\t{\n\t\t\tvar cell = medianValues.shift().cell;\n\t\t\tcell.setGeneralPurposeVariable(rankValue, i);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianValue\n * \n * Calculates the median rank order positioning for the specified cell using\n * the connected cells on the specified rank. Returns the median rank\n * ordering value of the connected cells\n * \n * Parameters:\n * \n * connectedCells - the cells on the specified rank connected to the\n * specified cell\n * rankValue - the rank that the connected cell lie upon\n */\nmxMedianHybridCrossingReduction.prototype.medianValue = function(connectedCells, rankValue)\n{\n\tvar medianValues = [];\n\tvar arrayCount = 0;\n\t\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tvar cell = connectedCells[i];\n\t\tmedianValues[arrayCount++] = cell.getGeneralPurposeVariable(rankValue);\n\t}\n\n\t// Sort() sorts lexicographically by default (i.e. 11 before 9) so force\n\t// numerical order sort\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (arrayCount % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(arrayCount / 2)];\n\t}\n\telse if (arrayCount == 2)\n\t{\n\t\treturn ((medianValues[0] + medianValues[1]) / 2.0);\n\t}\n\telse\n\t{\n\t\tvar medianPoint = arrayCount / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1] - medianValues[0];\n\t\tvar rightMedian = medianValues[arrayCount - 1]\n\t\t\t\t- medianValues[medianPoint];\n\n\t\treturn (medianValues[medianPoint - 1] * rightMedian + medianValues[medianPoint]\n\t\t\t\t* leftMedian)\n\t\t\t\t/ (leftMedian + rightMedian);\n\t}\n};\n\n/**\n * Class: MedianCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the median\n * values. Does not violate (x.compareTo(y)==0) == (x.equals(y))\n *\n * Constructor: MedianCellSorter\n * \n * Constructs a new median cell sorter.\n */\nfunction MedianCellSorter()\n{\n\t// empty\n};\n\n/**\n * Variable: medianValue\n * \n * The weighted value of the cell stored.\n */\nMedianCellSorter.prototype.medianValue = 0;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated\n */\nMedianCellSorter.prototype.cell = false;\n\n/**\n * Function: compare\n * \n * Compares two MedianCellSorters.\n */\nMedianCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.medianValue > a.medianValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.medianValue < a.medianValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMinimumCycleRemover\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxMinimumCycleRemover\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxMinimumCycleRemover(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxMinimumCycleRemover.prototype = new mxHierarchicalLayoutStage();\nmxMinimumCycleRemover.prototype.constructor = mxMinimumCycleRemover;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMinimumCycleRemover.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxMinimumCycleRemover.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodesArray = model.vertexMapper.getValues();\n\tvar unseenNodes = new Object();\n\t\n\tfor (var i = 0; i < unseenNodesArray.length; i++)\n\t{\n\t\tunseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n\t}\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, rootsArray, true, null);\n\n\t// If there are any nodes that should be nodes that the dfs can miss\n\t// these need to be processed with the dfs and the roots assigned\n\t// correctly to form a correct internal model\n\tvar seenNodesCopy = mxUtils.clone(seenNodes, null, true);\n\n\t// Pick a random cell and dfs from it\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, unseenNodes, true, seenNodesCopy);\n};\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCoordinateAssignment\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well as heuristics to straighten edges as\n * far as possible.\n * \n * Constructor: mxCoordinateAssignment\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxCoordinateAssignment(layout, intraCellSpacing, interRankCellSpacing,\n\torientation, initialX, parallelEdgeSpacing)\n{\n\tthis.layout = layout;\n\tthis.intraCellSpacing = intraCellSpacing;\n\tthis.interRankCellSpacing = interRankCellSpacing;\n\tthis.orientation = orientation;\n\tthis.initialX = initialX;\n\tthis.parallelEdgeSpacing = parallelEdgeSpacing;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxCoordinateAssignment.prototype = new mxHierarchicalLayoutStage();\nmxCoordinateAssignment.prototype.constructor = mxCoordinateAssignment;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxCoordinateAssignment.prototype.layout = null;\n\n/**\n * Variable: intraCellSpacing\n * \n * The minimum buffer between cells on the same rank. Default is 30.\n */\nmxCoordinateAssignment.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The minimum distance between cells on adjacent ranks. Default is 100.\n */\nmxCoordinateAssignment.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxCoordinateAssignment.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: maxIterations\n * \n * The number of heuristic iterations to run. Default is 8.\n */\nmxCoordinateAssignment.prototype.maxIterations = 8;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex Default is 5.\n */\nmxCoordinateAssignment.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex Default is 2.\n */\nmxCoordinateAssignment.prototype.prefVertEdgeOff = 2;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex Default is 12.\n */\nmxCoordinateAssignment.prototype.minEdgeJetty = 12;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed Default is 4.\n */\nmxCoordinateAssignment.prototype.channelBuffer = 4;\n\n/**\n * Variable: jettyPositions\n * \n * Map of internal edges and (x,y) pair of positions of the start and end jetty\n * for that edge where it connects to the source and target vertices.\n * Note this should technically be a WeakHashMap, but since JS does not\n * have an equivalent, housekeeping must be performed before using.\n * i.e. check all edges are still in the model and clear the values.\n * Note that the y co-ord is the offset of the jetty, not the\n * absolute point\n */\nmxCoordinateAssignment.prototype.jettyPositions = null;\n\n/**\n * Variable: orientation\n * \n * The position of the root ( start ) node(s) relative to the rest of the\n * laid out graph. Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxCoordinateAssignment.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: initialX\n * \n * The minimum x position node placement starts at\n */\nmxCoordinateAssignment.prototype.initialX = null;\n\n/**\n * Variable: limitX\n * \n * The maximum x value this positioning lays up to\n */\nmxCoordinateAssignment.prototype.limitX = null;\n\n/**\n * Variable: currentXDelta\n * \n * The sum of x-displacements for the current iteration\n */\nmxCoordinateAssignment.prototype.currentXDelta = null;\n\n/**\n * Variable: widestRank\n * \n * The rank that has the widest x position\n */\nmxCoordinateAssignment.prototype.widestRank = null;\n\n/**\n * Variable: rankTopY\n * \n * Internal cache of top-most values of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankTopY = null;\n\n/**\n * Variable: rankBottomY\n * \n * Internal cache of bottom-most value of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankBottomY = null;\n\n/**\n * Variable: widestRankValue\n * \n * The X-coordinate of the edge of the widest rank\n */\nmxCoordinateAssignment.prototype.widestRankValue = null;\n\n/**\n * Variable: rankWidths\n * \n * The width of all the ranks\n */\nmxCoordinateAssignment.prototype.rankWidths = null;\n\n/**\n * Variable: rankY\n * \n * The Y-coordinate of all the ranks\n */\nmxCoordinateAssignment.prototype.rankY = null;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxCoordinateAssignment.prototype.fineTuning = true;\n\n/**\n * Variable: nextLayerConnectedCache\n * \n * A store of connections to the layer above for speed\n */\nmxCoordinateAssignment.prototype.nextLayerConnectedCache = null;\n\n/**\n * Variable: previousLayerConnectedCache\n * \n * A store of connections to the layer below for speed\n */\nmxCoordinateAssignment.prototype.previousLayerConnectedCache = null;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents Default is 10.\n */\nmxCoordinateAssignment.prototype.groupPadding = 10;\n\n/**\n * Utility method to display current positions\n */\nmxCoordinateAssignment.prototype.printStatus = function()\n{\n\tvar model = this.layout.getModel();\n\tmxLog.show();\n\n\tmxLog.writeln('======Coord assignment debug=======');\n\n\tfor (var j = 0; j < model.ranks.length; j++)\n\t{\n\t\tmxLog.write('Rank ', j, ' : ' );\n\t\tvar rank = model.ranks[j];\n\t\t\n\t\tfor (var k = 0; k < rank.length; k++)\n\t\t{\n\t\t\tvar cell = rank[k];\n\t\t\t\n\t\t\tmxLog.write(cell.getGeneralPurposeVariable(j), '  ');\n\t\t}\n\t\tmxLog.writeln();\n\t}\n\t\n\tmxLog.writeln('====================================');\n};\n\n/**\n * Function: execute\n * \n * A basic horizontal coordinate assignment algorithm\n */\nmxCoordinateAssignment.prototype.execute = function(parent)\n{\n\tthis.jettyPositions = Object();\n\tvar model = this.layout.getModel();\n\tthis.currentXDelta = 0.0;\n\n\tthis.initialCoords(this.layout.getGraph(), model);\n\t\n//\tthis.printStatus();\n\t\n\tif (this.fineTuning)\n\t{\n\t\tthis.minNode(model);\n\t}\n\t\n\tvar bestXDelta = 100000000.0;\n\t\n\tif (this.fineTuning)\n\t{\n\t\tfor (var i = 0; i < this.maxIterations; i++)\n\t\t{\n//\t\t\tthis.printStatus();\n\t\t\n\t\t\t// Median Heuristic\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tthis.medianPos(i, model);\n\t\t\t\tthis.minNode(model);\n\t\t\t}\n\t\t\t\n\t\t\t// if the total offset is less for the current positioning,\n\t\t\t// there are less heavily angled edges and so the current\n\t\t\t// positioning is used\n\t\t\tif (this.currentXDelta < bestXDelta)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setX(j, cell.getGeneralPurposeVariable(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbestXDelta = this.currentXDelta;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Restore the best positions\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setGeneralPurposeVariable(j, cell.getX(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.minPath(this.layout.getGraph(), model);\n\t\t\t\n\t\t\tthis.currentXDelta = 0;\n\t\t}\n\t}\n\t\n\tthis.setCellLocations(this.layout.getGraph(), model);\n};\n\n/**\n * Function: minNode\n * \n * Performs one median positioning sweep in both directions\n */\nmxCoordinateAssignment.prototype.minNode = function(model)\n{\n\t// Queue all nodes\n\tvar nodeList = [];\n\t\n\t// Need to be able to map from cell to cellWrapper\n\tvar map = new mxDictionary();\n\tvar rank = [];\n\t\n\tfor (var i = 0; i <= model.maxRank; i++)\n\t{\n\t\trank[i] = model.ranks[i];\n\t\t\n\t\tfor (var j = 0; j < rank[i].length; j++)\n\t\t{\n\t\t\t// Use the weight to store the rank and visited to store whether\n\t\t\t// or not the cell is in the list\n\t\t\tvar node = rank[i][j];\n\t\t\tvar nodeWrapper = new WeightedCellSorter(node, i);\n\t\t\tnodeWrapper.rankIndex = j;\n\t\t\tnodeWrapper.visited = true;\n\t\t\tnodeList.push(nodeWrapper);\n\t\t\t\n\t\t\tmap.put(node, nodeWrapper);\n\t\t}\n\t}\n\t\n\t// Set a limit of the maximum number of times we will access the queue\n\t// in case a loop appears\n\tvar maxTries = nodeList.length * 10;\n\tvar count = 0;\n\t\n\t// Don't move cell within this value of their median\n\tvar tolerance = 1;\n\t\n\twhile (nodeList.length > 0 && count <= maxTries)\n\t{\n\t\tvar cellWrapper = nodeList.shift();\n\t\tvar cell = cellWrapper.cell;\n\t\t\n\t\tvar rankValue = cellWrapper.weightedValue;\n\t\tvar rankIndex = parseInt(cellWrapper.rankIndex);\n\t\t\n\t\tvar nextLayerConnectedCells = cell.getNextLayerConnectedCells(rankValue);\n\t\tvar previousLayerConnectedCells = cell.getPreviousLayerConnectedCells(rankValue);\n\t\t\n\t\tvar numNextLayerConnected = nextLayerConnectedCells.length;\n\t\tvar numPreviousLayerConnected = previousLayerConnectedCells.length;\n\n\t\tvar medianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\trankValue + 1);\n\t\tvar medianPreviousLevel = this.medianXValue(previousLayerConnectedCells,\n\t\t\t\trankValue - 1);\n\n\t\tvar numConnectedNeighbours = numNextLayerConnected\n\t\t\t\t+ numPreviousLayerConnected;\n\t\tvar currentPosition = cell.getGeneralPurposeVariable(rankValue);\n\t\tvar cellMedian = currentPosition;\n\t\t\n\t\tif (numConnectedNeighbours > 0)\n\t\t{\n\t\t\tcellMedian = (medianNextLevel * numNextLayerConnected + medianPreviousLevel\n\t\t\t\t\t* numPreviousLayerConnected)\n\t\t\t\t\t/ numConnectedNeighbours;\n\t\t}\n\n\t\t// Flag storing whether or not position has changed\n\t\tvar positionChanged = false;\n\t\t\n\t\tif (cellMedian < currentPosition - tolerance)\n\t\t{\n\t\t\tif (rankIndex == 0)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar leftCell = rank[rankValue][rankIndex - 1];\n\t\t\t\tvar leftLimit = leftCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\t\t\tif (leftLimit < cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (leftLimit < cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t- tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (cellMedian > currentPosition + tolerance)\n\t\t{\n\t\t\tvar rankSize = rank[rankValue].length;\n\t\t\t\n\t\t\tif (rankIndex == rankSize - 1)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar rightCell = rank[rankValue][rankIndex + 1];\n\t\t\t\tvar rightLimit = rightCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\t\t\t\t\n\t\t\t\tif (rightLimit > cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (rightLimit > cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t+ tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (positionChanged)\n\t\t{\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < nextLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = nextLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\t\t\t\t\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < previousLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = previousLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tcellWrapper.visited = false;\n\t\tcount++;\n\t}\n};\n\n/**\n * Function: medianPos\n * \n * Performs one median positioning sweep in one direction\n * \n * Parameters:\n * \n * i - the iteration of the whole process\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.medianPos = function(i, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (i % 2 == 0);\n\t\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank; j > 0; j--)\n\t\t{\n\t\t\tthis.rankMedianPosition(j - 1, model, j);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 0; j < model.maxRank - 1; j++)\n\t\t{\n\t\t\tthis.rankMedianPosition(j + 1, model, j);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankMedianPosition\n * \n * Performs median minimisation over one rank.\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * model - an internal model of the hierarchical layout\n * nextRankValue - the layer number whose connected cels are to be laid out\n * relative to\n */\nmxCoordinateAssignment.prototype.rankMedianPosition = function(rankValue, model, nextRankValue)\n{\n\tvar rank = model.ranks[rankValue];\n\n\t// Form an array of the order in which the cell are to be processed\n\t// , the order is given by the weighted sum of the in or out edges,\n\t// depending on whether we're traveling up or down the hierarchy.\n\tvar weightedValues = [];\n\tvar cellMap = new Object();\n\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar currentCell = rank[i];\n\t\tweightedValues[i] = new WeightedCellSorter();\n\t\tweightedValues[i].cell = currentCell;\n\t\tweightedValues[i].rankIndex = i;\n\t\tcellMap[currentCell.id] = weightedValues[i];\n\t\tvar nextLayerConnectedCells = null;\n\t\t\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\n\t\t// Calculate the weighing based on this node type and those this\n\t\t// node is connected to on the next layer\n\t\tweightedValues[i].weightedValue = this.calculatedWeightedValue(\n\t\t\t\tcurrentCell, nextLayerConnectedCells);\n\t}\n\n\tweightedValues.sort(WeightedCellSorter.prototype.compare);\n\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\t\n\tfor (var i = 0; i < weightedValues.length; i++)\n\t{\n\t\tvar numConnectionsNextLevel = 0;\n\t\tvar cell = weightedValues[i].cell;\n\t\tvar nextLayerConnectedCells = null;\n\t\tvar medianNextLevel = 0;\n\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getPreviousLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getNextLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\n\t\tif (nextLayerConnectedCells != null)\n\t\t{\n\t\t\tnumConnectionsNextLevel = nextLayerConnectedCells.length;\n\t\t\t\n\t\t\tif (numConnectionsNextLevel > 0)\n\t\t\t{\n\t\t\t\tmedianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\t\t\tnextRankValue);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// For case of no connections on the next level set the\n\t\t\t\t// median to be the current position and try to be\n\t\t\t\t// positioned there\n\t\t\t\tmedianNextLevel = cell.getGeneralPurposeVariable(rankValue);\n\t\t\t}\n\t\t}\n\n\t\tvar leftBuffer = 0.0;\n\t\tvar leftLimit = -100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex - 1; j >= 0;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar leftCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\tleftLimit = leftCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t+ leftCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t+ this.intraCellSpacing\n\t\t\t\t\t\t\t+ leftBuffer + cell.width / 2.0;\n\t\t\t\t\tj = -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftBuffer += leftCell.width + this.intraCellSpacing;\n\t\t\t\t\tj--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar rightBuffer = 0.0;\n\t\tvar rightLimit = 100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex + 1; j < weightedValues.length;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar rightCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\trightLimit = rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t- rightCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t- this.intraCellSpacing\n\t\t\t\t\t\t\t- rightBuffer - cell.width / 2.0;\n\t\t\t\t\tj = weightedValues.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trightBuffer += rightCell.width + this.intraCellSpacing;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (medianNextLevel >= leftLimit && medianNextLevel <= rightLimit)\n\t\t{\n\t\t\tcell.setGeneralPurposeVariable(rankValue, medianNextLevel);\n\t\t}\n\t\telse if (medianNextLevel < leftLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\tthis.currentXDelta += leftLimit - medianNextLevel;\n\t\t}\n\t\telse if (medianNextLevel > rightLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\tthis.currentXDelta += medianNextLevel - rightLimit;\n\t\t}\n\n\t\tweightedValues[i].visited = true;\n\t}\n};\n\n/**\n * Function: calculatedWeightedValue\n * \n * Calculates the priority the specified cell has based on the type of its\n * cell and the cells it is connected to on the next layer\n * \n * Parameters:\n * \n * currentCell - the cell whose weight is to be calculated\n * collection - the cells the specified cell is connected to\n */\nmxCoordinateAssignment.prototype.calculatedWeightedValue = function(currentCell, collection)\n{\n\tvar totalWeight = 0;\n\t\n\tfor (var i = 0; i < collection.length; i++)\n\t{\n\t\tvar cell = collection[i];\n\n\t\tif (currentCell.isVertex() && cell.isVertex())\n\t\t{\n\t\t\ttotalWeight++;\n\t\t}\n\t\telse if (currentCell.isEdge() && cell.isEdge())\n\t\t{\n\t\t\ttotalWeight += 8;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttotalWeight += 2;\n\t\t}\n\t}\n\n\treturn totalWeight;\n};\n\n/**\n * Function: medianXValue\n * \n * Calculates the median position of the connected cell on the specified\n * rank\n * \n * Parameters:\n * \n * connectedCells - the cells the candidate connects to on this level\n * rankValue - the layer number of this rank\n */\nmxCoordinateAssignment.prototype.medianXValue = function(connectedCells, rankValue)\n{\n\tif (connectedCells.length == 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar medianValues = [];\n\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tmedianValues[i] = connectedCells[i].getGeneralPurposeVariable(rankValue);\n\t}\n\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (connectedCells.length % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(connectedCells.length / 2)];\n\t}\n\telse\n\t{\n\t\tvar medianPoint = connectedCells.length / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1];\n\t\tvar rightMedian = medianValues[medianPoint];\n\n\t\treturn ((leftMedian + rightMedian) / 2);\n\t}\n};\n\n/**\n * Function: initialCoords\n * \n * Sets up the layout in an initial positioning. The ranks are all centered\n * as much as possible along the middle vertex in each rank. The other cells\n * are then placed as close as possible on either side.\n * \n * Parameters:\n * \n * facade - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.initialCoords = function(facade, model)\n{\n\tthis.calculateWidestRank(facade, model);\n\n\t// Sweep up and down from the widest rank\n\tfor (var i = this.widestRank; i >= 0; i--)\n\t{\n\t\tif (i < model.maxRank)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n\n\tfor (var i = this.widestRank+1; i <= model.maxRank; i++)\n\t{\n\t\tif (i > 0)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankCoordinates\n * \n * Sets up the layout in an initial positioning. All the first cells in each\n * rank are moved to the left and the rest of the rank inserted as close\n * together as their size and buffering permits. This method works on just\n * the specified rank.\n * \n * Parameters:\n * \n * rankValue - the current rank being processed\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.rankCoordinates = function(rankValue, graph, model)\n{\n\tvar rank = model.ranks[rankValue];\n\tvar maxY = 0.0;\n\tvar localX = this.initialX + (this.widestRankValue - this.rankWidths[rankValue])\n\t\t\t/ 2;\n\n\t// Store whether or not any of the cells' bounds were unavailable so\n\t// to only issue the warning once for all cells\n\tvar boundsWarning = false;\n\t\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar node = rank[i];\n\t\t\n\t\tif (node.isVertex())\n\t\t{\n\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tboundsWarning = true;\n\t\t\t}\n\n\t\t\tmaxY = Math.max(maxY, node.height);\n\t\t}\n\t\telse if (node.isEdge())\n\t\t{\n\t\t\t// The width is the number of additional parallel edges\n\t\t\t// time the parallel edge spacing\n\t\t\tvar numEdges = 1;\n\n\t\t\tif (node.edges != null)\n\t\t\t{\n\t\t\t\tnumEdges = node.edges.length;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t}\n\n\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t}\n\n\t\t// Set the initial x-value as being the best result so far\n\t\tlocalX += node.width / 2.0;\n\t\tnode.setX(rankValue, localX);\n\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\tlocalX += node.width / 2.0;\n\t\tlocalX += this.intraCellSpacing;\n\t}\n\n\tif (boundsWarning == true)\n\t{\n\t\tmxLog.warn('At least one cell has no bounds');\n\t}\n};\n\n/**\n * Function: calculateWidestRank\n * \n * Calculates the width rank in the hierarchy. Also set the y value of each\n * rank whilst performing the calculation\n * \n * Parameters:\n * \n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.calculateWidestRank = function(graph, model)\n{\n\t// Starting y co-ordinate\n\tvar y = -this.interRankCellSpacing;\n\t\n\t// Track the widest cell on the last rank since the y\n\t// difference depends on it\n\tvar lastRankMaxCellHeight = 0.0;\n\tthis.rankWidths = [];\n\tthis.rankY = [];\n\n\tfor (var rankValue = model.maxRank; rankValue >= 0; rankValue--)\n\t{\n\t\t// Keep track of the widest cell on this rank\n\t\tvar maxCellHeight = 0.0;\n\t\tvar rank = model.ranks[rankValue];\n\t\tvar localX = this.initialX;\n\n\t\t// Store whether or not any of the cells' bounds were unavailable so\n\t\t// to only issue the warning once for all cells\n\t\tvar boundsWarning = false;\n\t\t\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar node = rank[i];\n\n\t\t\tif (node.isVertex())\n\t\t\t{\n\t\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tboundsWarning = true;\n\t\t\t\t}\n\n\t\t\t\tmaxCellHeight = Math.max(maxCellHeight, node.height);\n\t\t\t}\n\t\t\telse if (node.isEdge())\n\t\t\t{\n\t\t\t\t// The width is the number of additional parallel edges\n\t\t\t\t// time the parallel edge spacing\n\t\t\t\tvar numEdges = 1;\n\n\t\t\t\tif (node.edges != null)\n\t\t\t\t{\n\t\t\t\t\tnumEdges = node.edges.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t\t}\n\n\t\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t\t}\n\n\t\t\t// Set the initial x-value as being the best result so far\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tnode.setX(rankValue, localX);\n\t\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tlocalX += this.intraCellSpacing;\n\n\t\t\tif (localX > this.widestRankValue)\n\t\t\t{\n\t\t\t\tthis.widestRankValue = localX;\n\t\t\t\tthis.widestRank = rankValue;\n\t\t\t}\n\n\t\t\tthis.rankWidths[rankValue] = localX;\n\t\t}\n\n\t\tif (boundsWarning == true)\n\t\t{\n\t\t\tmxLog.warn('At least one cell has no bounds');\n\t\t}\n\n\t\tthis.rankY[rankValue] = y;\n\t\tvar distanceToNextRank = maxCellHeight / 2.0\n\t\t\t\t+ lastRankMaxCellHeight / 2.0 + this.interRankCellSpacing;\n\t\tlastRankMaxCellHeight = maxCellHeight;\n\n\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.orientation == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\ty += distanceToNextRank;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty -= distanceToNextRank;\n\t\t}\n\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar cell = rank[i];\n\t\t\tcell.setY(rankValue, y);\n\t\t}\n\t}\n};\n\n/**\n * Function: minPath\n * \n * Straightens out chains of virtual nodes where possibleacade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.minPath = function(graph, model)\n{\n\t// Work down and up each edge with at least 2 control points\n\t// trying to straighten each one out. If the same number of\n\t// straight segments are formed in both directions, the \n\t// preferred direction used is the one where the final\n\t// control points have the least offset from the connectable \n\t// region of the terminating vertices\n\tvar edges = model.edgeMapper.getValues();\n\t\n\tfor (var j = 0; j < edges.length; j++)\n\t{\n\t\tvar cell = edges[j];\n\t\t\n\t\tif (cell.maxRank - cell.minRank - 1 < 1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// At least two virtual nodes in the edge\n\t\t// Check first whether the edge is already straight\n\t\tvar referenceX = cell\n\t\t\t\t.getGeneralPurposeVariable(cell.minRank + 1);\n\t\tvar edgeStraight = true;\n\t\tvar refSegCount = 0;\n\t\t\n\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t{\n\t\t\tvar x = cell.getGeneralPurposeVariable(i);\n\n\t\t\tif (referenceX != x)\n\t\t\t{\n\t\t\t\tedgeStraight = false;\n\t\t\t\treferenceX = x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trefSegCount++;\n\t\t\t}\n\t\t}\n\n\t\tif (!edgeStraight)\n\t\t{\n\t\t\tvar upSegCount = 0;\n\t\t\tvar downSegCount = 0;\n\t\t\tvar upXPositions = [];\n\t\t\tvar downXPositions = [];\n\n\t\t\tvar currentX = cell.getGeneralPurposeVariable(cell.minRank + 1);\n\n\t\t\tfor (var i = cell.minRank + 1; i < cell.maxRank - 1; i++)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment up with the current control point.\n\t\t\t\tvar nextX = cell.getX(i + 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i + 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = nextX;\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\tcurrentX = cell.getX(i);\n\n\t\t\tfor (var i = cell.maxRank - 1; i > cell.minRank + 1; i--)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment down with the current control point.\n\t\t\t\tvar nextX = cell.getX(i - 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i - 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = cell.getX(i-1);\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (downSegCount > refSegCount || upSegCount > refSegCount)\n\t\t\t{\n\t\t\t\tif (downSegCount >= upSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply down calculation values\n\t\t\t\t\tfor (var i = cell.maxRank - 2; i > cell.minRank; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, downXPositions[i - cell.minRank - 1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (upSegCount > downSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply up calculation values\n\t\t\t\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, upXPositions[i - cell.minRank - 2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Neither direction provided a favourable result\n\t\t\t\t\t// But both calculations are better than the\n\t\t\t\t\t// existing solution, so apply the one with minimal\n\t\t\t\t\t// offset to attached vertices at either end.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: repositionValid\n * \n * Determines whether or not a node may be moved to the specified x \n * position on the specified rank\n * \n * Parameters:\n *\n * model - the layout model\n * cell - the cell being analysed\n * rank - the layer of the cell\n * position - the x position being sought\n */\nmxCoordinateAssignment.prototype.repositionValid = function(model, cell, rank, position)\n{\n\tvar rankArray = model.ranks[rank];\n\tvar rankIndex = -1;\n\n\tfor (var i = 0; i < rankArray.length; i++)\n\t{\n\t\tif (cell == rankArray[i])\n\t\t{\n\t\t\trankIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (rankIndex < 0)\n\t{\n\t\treturn false;\n\t}\n\n\tvar currentX = cell.getGeneralPurposeVariable(rank);\n\n\tif (position < currentX)\n\t{\n\t\t// Trying to move node to the left.\n\t\tif (rankIndex == 0)\n\t\t{\n\t\t\t// Left-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar leftCell = rankArray[rankIndex - 1];\n\t\tvar leftLimit = leftCell.getGeneralPurposeVariable(rank);\n\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\tif (leftLimit <= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (position > currentX)\n\t{\n\t\t// Trying to move node to the right.\n\t\tif (rankIndex == rankArray.length - 1)\n\t\t{\n\t\t\t// Right-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar rightCell = rankArray[rankIndex + 1];\n\t\tvar rightLimit = rightCell.getGeneralPurposeVariable(rank);\n\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\n\t\tif (rightLimit >= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Function: setCellLocations\n * \n * Sets the cell locations in the facade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the input graph\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.setCellLocations = function(graph, model)\n{\n\tthis.rankTopY = [];\n\tthis.rankBottomY = [];\n\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.rankTopY[i] = Number.MAX_VALUE;\n\t\tthis.rankBottomY[i] = -Number.MAX_VALUE;\n\t}\n\t\n\tvar vertices = model.vertexMapper.getValues();\n\n\t// Process vertices all first, since they define the lower and \n\t// limits of each rank. Between these limits lie the channels\n\t// where the edges can be routed across the graph\n\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tthis.setVertexLocation(vertices[i]);\n\t}\n\t\n\t// Post process edge styles. Needs the vertex locations set for initial\n\t// values of the top and bottoms of each rank\n\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.ORTHOGONAL\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.POLYLINE\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t{\n\t\tthis.localEdgeProcessing(model);\n\t}\n\n\tvar edges = model.edgeMapper.getValues();\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.setEdgePosition(edges[i]);\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n * \n * Separates the x position of edges as they connect to vertices\n * \n * Parameters:\n *\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.localEdgeProcessing = function(model)\n{\n\t// Iterate through each vertex, look at the edges connected in\n\t// both directions.\n\tfor (var rankIndex = 0; rankIndex < model.ranks.length; rankIndex++)\n\t{\n\t\tvar rank = model.ranks[rankIndex];\n\n\t\tfor (var cellIndex = 0; cellIndex < rank.length; cellIndex++)\n\t\t{\n\t\t\tvar cell = rank[cellIndex];\n\n\t\t\tif (cell.isVertex())\n\t\t\t{\n\t\t\t\tvar currentCells = cell.getPreviousLayerConnectedCells(rankIndex);\n\n\t\t\t\tvar currentRank = rankIndex - 1;\n\n\t\t\t\t// Two loops, last connected cells, and next\n\t\t\t\tfor (var k = 0; k < 2; k++)\n\t\t\t\t{\n\t\t\t\t\tif (currentRank > -1\n\t\t\t\t\t\t\t&& currentRank < model.ranks.length\n\t\t\t\t\t\t\t&& currentCells != null\n\t\t\t\t\t\t\t&& currentCells.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sortedCells = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < currentCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar sorter = new WeightedCellSorter(\n\t\t\t\t\t\t\t\t\tcurrentCells[j], currentCells[j].getX(currentRank));\n\t\t\t\t\t\t\tsortedCells.push(sorter);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\t\t\t\t\t\tvar leftLimit = cell.x[0] - cell.width / 2;\n\t\t\t\t\t\tvar rightLimit = leftLimit + cell.width;\n\n\t\t\t\t\t\t// Connected edge count starts at 1 to allow for buffer\n\t\t\t\t\t\t// with edge of vertex\n\t\t\t\t\t\tvar connectedEdgeCount = 0;\n\t\t\t\t\t\tvar connectedEdgeGroupCount = 0;\n\t\t\t\t\t\tvar connectedEdges = [];\n\t\t\t\t\t\t// Calculate width requirements for all connected edges\n\t\t\t\t\t\tfor (var j = 0; j < sortedCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar innerCell = sortedCells[j].cell;\n\t\t\t\t\t\t\tvar connections;\n\n\t\t\t\t\t\t\tif (innerCell.isVertex())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Get the connecting edge\n\t\t\t\t\t\t\t\tif (k == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsSource;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsTarget;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor (var connIndex = 0; connIndex < connections.length; connIndex++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (connections[connIndex].source == innerCell\n\t\t\t\t\t\t\t\t\t\t\t|| connections[connIndex].target == innerCell)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeCount += connections[connIndex].edges\n\t\t\t\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\n\t\t\t\t\t\t\t\t\t\tconnectedEdges.push(connections[connIndex]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnectedEdgeCount += innerCell.edges.length;\n\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\t\t\t\t\t\t\t\tconnectedEdges.push(innerCell);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar requiredWidth = (connectedEdgeCount + 1)\n\t\t\t\t\t\t\t\t* this.prefHozEdgeSep;\n\n\t\t\t\t\t\t// Add a buffer on the edges of the vertex if the edge count allows\n\t\t\t\t\t\tif (cell.width > requiredWidth\n\t\t\t\t\t\t\t\t+ (2 * this.prefHozEdgeSep))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tleftLimit += this.prefHozEdgeSep;\n\t\t\t\t\t\t\trightLimit -= this.prefHozEdgeSep;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar availableWidth = rightLimit - leftLimit;\n\t\t\t\t\t\tvar edgeSpacing = availableWidth / connectedEdgeCount;\n\n\t\t\t\t\t\tvar currentX = leftLimit + edgeSpacing / 2.0;\n\t\t\t\t\t\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\t\t\t\t\t\tvar maxYOffset = 0;\n\n\t\t\t\t\t\tfor (var j = 0; j < connectedEdges.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar numActualEdges = connectedEdges[j].edges\n\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\tvar pos = this.jettyPositions[connectedEdges[j].ids[0]];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (pos == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos = [];\n\t\t\t\t\t\t\t\tthis.jettyPositions[connectedEdges[j].ids[0]] = pos;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (j < connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (j > connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Ignore the case if equals, this means the second of 2\n\t\t\t\t\t\t\t// jettys with the same y (even number of edges)\n\n\t\t\t\t\t\t\tfor (var m = 0; m < numActualEdges; m++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2] = currentX;\n\t\t\t\t\t\t\t\tcurrentX += edgeSpacing;\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2 + 1] = currentYOffset;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmaxYOffset = Math.max(maxYOffset,\n\t\t\t\t\t\t\t\t\tcurrentYOffset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentCells = cell.getNextLayerConnectedCells(rankIndex);\n\n\t\t\t\t\tcurrentRank = rankIndex + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setEdgePosition\n * \n * Fixes the control points\n */\nmxCoordinateAssignment.prototype.setEdgePosition = function(cell)\n{\n\t// For parallel edges we need to seperate out the points a\n\t// little\n\tvar offsetX = 0;\n\t// Only set the edge control points once\n\n\tif (cell.temp[0] != 101207)\n\t{\n\t\tvar maxRank = cell.maxRank;\n\t\tvar minRank = cell.minRank;\n\t\t\n\t\tif (maxRank == minRank)\n\t\t{\n\t\t\tmaxRank = cell.source.maxRank;\n\t\t\tminRank = cell.target.minRank;\n\t\t}\n\t\t\n\t\tvar parallelEdgeCount = 0;\n\t\tvar jettys = this.jettyPositions[cell.ids[0]];\n\n\t\tvar source = cell.isReversed ? cell.target.cell : cell.source.cell;\n\t\tvar graph = this.layout.graph;\n\t\tvar layoutReversed = this.orientation == mxConstants.DIRECTION_EAST\n\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH;\n\n\t\tfor (var i = 0; i < cell.edges.length; i++)\n\t\t{\n\t\t\tvar realEdge = cell.edges[i];\n\t\t\tvar realSource = this.layout.getVisibleTerminal(realEdge, true);\n\n\t\t\t//List oldPoints = graph.getPoints(realEdge);\n\t\t\tvar newPoints = [];\n\n\t\t\t// Single length reversed edges end up with the jettys in the wrong\n\t\t\t// places. Since single length edges only have jettys, not segment\n\t\t\t// control points, we just say the edge isn't reversed in this section\n\t\t\tvar reversed = cell.isReversed;\n\t\t\t\n\t\t\tif (realSource != source)\n\t\t\t{\n\t\t\t\t// The real edges include all core model edges and these can go\n\t\t\t\t// in both directions. If the source of the hierarchical model edge\n\t\t\t\t// isn't the source of the specific real edge in this iteration\n\t\t\t\t// treat if as reversed\n\t\t\t\treversed = !reversed;\n\t\t\t}\n\n\t\t\t// First jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar y = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 1 + arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ty += jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelSource = graph.model.getTerminal(realEdge, true);\n\n\t\t\t\tif (this.layout.isPort(modelSource) && graph.model.getParent(modelSource) == realSource)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelSource);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realSource.geometry.x + cell.source.width * modelSource.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH\n\t\t\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y + jetty));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y + jetty, x));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Declare variables to define loop through edge points and \n\t\t\t// change direction if edge is reversed\n\n\t\t\tvar loopStart = cell.x.length - 1;\n\t\t\tvar loopLimit = -1;\n\t\t\tvar loopDelta = -1;\n\t\t\tvar currentRank = cell.maxRank - 1;\n\n\t\t\tif (reversed)\n\t\t\t{\n\t\t\t\tloopStart = 0;\n\t\t\t\tloopLimit = cell.x.length;\n\t\t\t\tloopDelta = 1;\n\t\t\t\tcurrentRank = cell.minRank + 1;\n\t\t\t}\n\t\t\t// Reversed edges need the points inserted in\n\t\t\t// reverse order\n\t\t\tfor (var j = loopStart; (cell.maxRank != cell.minRank) && j != loopLimit; j += loopDelta)\n\t\t\t{\n\t\t\t\t// The horizontal position in a vertical layout\n\t\t\t\tvar positionX = cell.x[j] + offsetX;\n\n\t\t\t\t// Work out the vertical positions in a vertical layout\n\t\t\t\t// in the edge buffer channels above and below this rank\n\t\t\t\tvar topChannelY = (this.rankTopY[currentRank] + this.rankBottomY[currentRank + 1]) / 2.0;\n\t\t\t\tvar bottomChannelY = (this.rankTopY[currentRank - 1] + this.rankBottomY[currentRank]) / 2.0;\n\n\t\t\t\tif (reversed)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = topChannelY;\n\t\t\t\t\ttopChannelY = bottomChannelY;\n\t\t\t\t\tbottomChannelY = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, topChannelY));\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, bottomChannelY));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(topChannelY, positionX));\n\t\t\t\t\tnewPoints.push(new mxPoint(bottomChannelY, positionX));\n\t\t\t\t}\n\n\t\t\t\tthis.limitX = Math.max(this.limitX, positionX);\n\t\t\t\tcurrentRank += loopDelta;\n\t\t\t}\n\n\t\t\t// Second jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar rankY = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 3 - arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\tvar y = rankY - jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + 2 - arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelTarget = graph.model.getTerminal(realEdge, false);\n\t\t\t\tvar realTarget = this.layout.getVisibleTerminal(realEdge, false);\n\n\t\t\t\tif (this.layout.isPort(modelTarget) && graph.model.getParent(modelTarget) == realTarget)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelTarget);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realTarget.geometry.x + cell.target.width * modelTarget.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y - jetty));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y - jetty, x));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cell.isReversed)\n\t\t\t{\n\t\t\t\tthis.processReversedEdge(cell, realEdge);\n\t\t\t}\n\n\t\t\tthis.layout.setEdgePoints(realEdge, newPoints);\n\n\t\t\t// Increase offset so next edge is drawn next to\n\t\t\t// this one\n\t\t\tif (offsetX == 0.0)\n\t\t\t{\n\t\t\t\toffsetX = this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\telse if (offsetX > 0)\n\t\t\t{\n\t\t\t\toffsetX = -offsetX;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toffsetX = -offsetX + this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\t\n\t\t\tparallelEdgeCount++;\n\t\t}\n\n\t\tcell.temp[0] = 101207;\n\t}\n};\n\n\n/**\n * Function: setVertexLocation\n * \n * Fixes the position of the specified vertex.\n * \n * Parameters:\n * \n * cell - the vertex to position\n */\nmxCoordinateAssignment.prototype.setVertexLocation = function(cell)\n{\n\tvar realCell = cell.cell;\n\tvar positionX = cell.x[0] - cell.width / 2;\n\tvar positionY = cell.y[0] - cell.height / 2;\n\n\tthis.rankTopY[cell.minRank] = Math.min(this.rankTopY[cell.minRank], positionY);\n\tthis.rankBottomY[cell.minRank] = Math.max(this.rankBottomY[cell.minRank],\n\t\t\tpositionY + cell.height);\n\n\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionX, positionY);\n\t}\n\telse\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionY, positionX);\n\t}\n\n\tthis.limitX = Math.max(this.limitX, positionX + cell.width);\n};\n\n/**\n * Function: processReversedEdge\n * \n * Hook to add additional processing\n * \n * Parameters:\n * \n * edge - the hierarchical model edge\n * realEdge - the real edge in the graph\n */\nmxCoordinateAssignment.prototype.processReversedEdge = function(graph, model)\n{\n\t// hook for subclassers\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneOrdering\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxSwimlaneOrdering\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxSwimlaneOrdering(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxSwimlaneOrdering.prototype = new mxHierarchicalLayoutStage();\nmxSwimlaneOrdering.prototype.constructor = mxSwimlaneOrdering;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxSwimlaneOrdering.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxSwimlaneOrdering.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodes = mxUtils.clone(model.vertexMapper, null, true);\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\tvar nodeId = mxCellPath.create(modelRoots[i]);\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\t// Ancestor hashes only line up within a swimlane\n\t\tvar isAncestor = parent != null && parent.swimlaneIndex == node.swimlaneIndex && node.isAncestor(parent);\n\n\t\t// If the source->target swimlane indices go from higher to\n\t\t// lower, the edge is reverse\n\t\tvar reversedOverSwimlane = parent != null && connectingEdge != null &&\n\t\t\t\t\t\tparent.swimlaneIndex < node.swimlaneIndex && connectingEdge.source == node;\n\n\t\tif (isAncestor)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\telse if (reversedOverSwimlane)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsTarget);\n\t\t\tnode.connectsAsTarget.push(connectingEdge);\n\t\t\tparent.connectsAsSource.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsSource);\n\t\t}\n\t\t\n\t\tvar cellId = mxCellPath.create(node.cell);\n\t\tseenNodes[cellId] = node;\n\t\tdelete unseenNodes[cellId];\n\t}, rootsArray, true, null);\n};\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxHierarchicalLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxHierarchicalLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\nvar mxHierarchicalEdgeStyle =\n{\n\tORTHOGONAL: 1,\n\tPOLYLINE: 2,\n\tSTRAIGHT: 3,\n\tCURVE: 4\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxHierarchicalLayout.prototype = new mxGraphLayout();\nmxHierarchicalLayout.prototype.constructor = mxHierarchicalLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxHierarchicalLayout.prototype.roots = null;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxHierarchicalLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxHierarchicalLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxHierarchicalLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 0.\n */\nmxHierarchicalLayout.prototype.parentBorder = 0;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxHierarchicalLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxHierarchicalLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxHierarchicalLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxHierarchicalLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxHierarchicalLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxHierarchicalLayout.prototype.fineTuning = true;\n\n/**\n * \n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxHierarchicalLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxHierarchicalLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same \n * ancestry chain. Default is true.\n */\nmxHierarchicalLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxGraphHierarchyModel> formed of the layout.\n */\nmxHierarchicalLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxGraphHierarchyModel> for this layout algorithm.\n */\nmxHierarchicalLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * roots - Optional starting roots of the layout.\n */\nmxHierarchicalLayout.prototype.execute = function(parent, roots)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\tif (roots != null && !(roots instanceof Array))\n\t{\n\t\troots = [roots];\n\t}\n\t\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (roots == null && parent == null)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\t\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\t\n\tif (roots != null)\n\t{\n\t\tvar rootsCopy = [];\n\n\t\tfor (var i = 0; i < roots.length; i++)\n\t\t{\n\t\t\tvar ancestor = parent != null ? model.isAncestor(parent, roots[i]) : true;\n\t\t\t\n\t\t\tif (ancestor && model.isVertex(roots[i]))\n\t\t\t{\n\t\t\t\trootsCopy.push(roots[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.roots = rootsCopy;\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxHierarchicalLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (model.isVertex(cell) && this.graph.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxHierarchicalLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) ||\n\t\t\t\t((source != target) &&\n\t\t\t\t\t\t((target == cell && (this.parent == null || this.isAncestor(this.parent, source, this.traverseAncestors))) ||\n\t\t\t\t\t\t \t(source == cell && (this.parent == null || this.isAncestor(this.parent, target, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxHierarchicalLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxHierarchicalLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = [];\n\n\tif (this.roots == null && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\tthis.filterDescendants(parent, filledVertexSet);\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twhile (!filledVertexSetEmpty)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(parent, filledVertexSet);\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\t\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\t// Iterate through the result removing parents who have children in this layout\n\t\n\t// Perform a layout for each seperate hierarchy\n\t// Track initial coordinate x-positioning\n\tvar initialX = 0;\n\n\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t{\n\t\tvar vertexSet = hierarchyVertices[i];\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var key in vertexSet)\n\t\t{\n\t\t\ttmp.push(vertexSet[key]);\n\t\t}\n\t\t\n\t\tthis.model = new mxGraphHierarchyModel(this, tmp, this.roots,\n\t\t\tparent, this.tightenToSource);\n\n\t\tthis.cycleStage(parent);\n\t\tthis.layeringStage();\n\t\t\n\t\tthis.crossingStage(parent);\n\t\tinitialX = this.placementStage(initialX, parent);\n\t}\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxHierarchicalLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxHierarchicalLayout.prototype.isPort = function(cell)\n{\n\tif (cell != null && cell.geometry != null)\n\t{\n\t\treturn cell.geometry.relative;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxHierarchicalLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n */\nmxHierarchicalLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar edgeIsSource = [];\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tedgeIsSource[i] = (this.getVisibleTerminal(edges[i], true) == vertex);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tif (!directed || edgeIsSource[i])\n\t\t\t\t{\n\t\t\t\t\tvar next = this.getVisibleTerminal(edges[i], !edgeIsSource[i]);\n\t\t\t\t\t\n\t\t\t\t\t// Check whether there are more edges incoming from the target vertex than outgoing\n\t\t\t\t\t// The hierarchical model treats bi-directional parallel edges as being sourced\n\t\t\t\t\t// from the more \"sourced\" terminal. If the directions are equal in number, the direction\n\t\t\t\t\t// is that of the natural direction from the roots of the layout.\n\t\t\t\t\t// The checks below are slightly more verbose than need be for performance reasons\n\t\t\t\t\tvar netCount = 1;\n\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (j == i)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar isSource2 = edgeIsSource[j];\n\t\t\t\t\t\t\tvar otherTerm = this.getVisibleTerminal(edges[j], !isSource2);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (otherTerm == next)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (isSource2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (netCount >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentComp = this.traverse(next, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxHierarchicalLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxMinimumCycleRemover(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxHierarchicalLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxHierarchicalLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxHierarchicalLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxSwimlaneLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxSwimlaneLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxSwimlaneLayout.prototype = new mxGraphLayout();\nmxSwimlaneLayout.prototype.constructor = mxSwimlaneLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxSwimlaneLayout.prototype.roots = null;\n\n/**\n * Variable: swimlanes\n * \n * Holds the array of <mxCell> of the ordered swimlanes to lay out\n */\nmxSwimlaneLayout.prototype.swimlanes = null;\n\n/**\n * Variable: dummyVertexWidth\n * \n * The cell width of any dummy vertices inserted\n */\nmxSwimlaneLayout.prototype.dummyVertexWidth = 50;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxSwimlaneLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxSwimlaneLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxSwimlaneLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 30.\n */\nmxSwimlaneLayout.prototype.parentBorder = 30;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxSwimlaneLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 100.\n */\nmxSwimlaneLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxSwimlaneLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxSwimlaneLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxSwimlaneLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxSwimlaneLayout.prototype.fineTuning = true;\n\n/**\n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells. Default is true.\n */\nmxSwimlaneLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxSwimlaneLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same\n * ancestry chain. Default is true.\n */\nmxSwimlaneLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxSwimlaneModel> formed of the layout.\n */\nmxSwimlaneLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxSwimlaneLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments.\n * Default is <mxHierarchicalEdgeStyle.POLYLINE>.\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxSwimlaneModel> for this layout algorithm.\n */\nmxSwimlaneLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * swimlanes - Ordered array of swimlanes to be laid out\n */\nmxSwimlaneLayout.prototype.execute = function(parent, swimlanes)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (swimlanes == null || swimlanes.length < 1)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\n\tif (parent == null)\n\t{\n\t\tparent = model.getParent(swimlanes[0]);\n\t}\n\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\n\tthis.swimlanes = swimlanes;\n\tvar dummyVertices = [];\n\t// Check the swimlanes all have vertices\n\t// in them\n\tfor (var i = 0; i < swimlanes.length; i++)\n\t{\n\t\tvar children = this.graph.getChildCells(swimlanes[i]);\n\t\t\n\t\tif (children == null || children.length == 0)\n\t\t{\n\t\t\tvar vertex = this.graph.insertVertex(swimlanes[i], null, null, 0, 0, this.dummyVertexWidth, 0);\n\t\t\tdummyVertices.push(vertex);\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\n\t\tthis.graph.removeCells(dummyVertices);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given array of groups so that it includes\n * all child vertices.\n * \n */\nmxSwimlaneLayout.prototype.updateGroupBounds = function()\n{\n\t// Get all vertices and edge in the layout\n\tvar cells = [];\n\tvar model = this.model;\n\t\n\tfor (var key in model.edgeMapper)\n\t{\n\t\tvar edge = model.edgeMapper[key];\n\t\t\n\t\tfor (var i = 0; i < edge.edges.length; i++)\n\t\t{\n\t\t\tcells.push(edge.edges[i]);\n\t\t}\n\t}\n\t\n\tvar layoutBounds = this.graph.getBoundingBoxFromGeometry(cells, true);\n\tvar childBounds = [];\n\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar bounds = this.graph.getBoundingBoxFromGeometry(children);\n\t\t\tchildBounds[i] = bounds;\n\t\t\tvar childrenY = bounds.y + geo.y - size.height - this.parentBorder;\n\t\t\tvar maxChildrenY = bounds.y + geo.y + bounds.height;\n\n\t\t\tif (layoutBounds == null)\n\t\t\t{\n\t\t\t\tlayoutBounds = new mxRectangle(0, childrenY, 0, maxChildrenY - childrenY);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlayoutBounds.y = Math.min(layoutBounds.y, childrenY);\n\t\t\t\tvar maxY = Math.max(layoutBounds.y + layoutBounds.height, maxChildrenY);\n\t\t\t\tlayoutBounds.height = maxY - layoutBounds.y;\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar newGeo = geo.clone();\n\t\t\t\n\t\t\tvar leftGroupBorder = (i == 0) ? this.parentBorder : this.interRankCellSpacing/2;\n\t\t\tvar w = size.width + leftGroupBorder;\n\t\t\tvar x = childBounds[i].x - w;\n\t\t\tvar y = layoutBounds.y - this.parentBorder;\n\n\t\t\tnewGeo.x += x;\n\t\t\tnewGeo.y = y;\n\t\t\t\n\t\t\tnewGeo.width = childBounds[i].width + w + this.interRankCellSpacing/2;\n\t\t\tnewGeo.height = layoutBounds.height + size.height + 2 * this.parentBorder;\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(lane, newGeo);\n\t\t\tthis.graph.moveCells(children, -x, geo.y - y);\n\t\t}\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxSwimlaneLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (cell != null && model.isVertex(cell) && this.graph.isCellVisible(cell) && model.isAncestor(parent, cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Only count connection within this swimlane\n\t\t\t\t\t\tvar other = this.getVisibleTerminal(conns[k], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (model.isAncestor(parent, other))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (model.isAncestor(parent, src))\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxSwimlaneLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) || ((source != target) && ((target == cell && (this.parent == null || this.graph.isValidAncestor(source, this.parent, this.traverseAncestors))) ||\n\t\t\t(source == cell && (this.parent == null ||\n\t\t\t\t\tthis.graph.isValidAncestor(target, this.parent, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxSwimlaneLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxSwimlaneLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = Object();\n\n\tif (this.swimlanes != null && this.swimlanes.length > 0 && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\t\n\t\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t\t{\n\t\t\tthis.filterDescendants(this.swimlanes[i], filledVertexSet);\n\t\t}\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Only test for candidates in each swimlane in order\n\t\tvar laneCounter = 0;\n\n\t\twhile (!filledVertexSetEmpty && laneCounter < this.swimlanes.length)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(this.swimlanes[laneCounter], filledVertexSet);\n\t\t\t\n\t\t\tif (candidateRoots.length == 0)\n\t\t\t{\n\t\t\t\tlaneCounter++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet, laneCounter);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\tvar tmp = [];\n\t\n\tfor (var key in allVertexSet)\n\t{\n\t\ttmp.push(allVertexSet[key]);\n\t}\n\t\n\tthis.model = new mxSwimlaneModel(this, tmp, this.roots,\n\t\tparent, this.tightenToSource);\n\n\tthis.cycleStage(parent);\n\tthis.layeringStage();\n\t\n\tthis.crossingStage(parent);\n\tthis.placementStage(0, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxSwimlaneLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && model.getParent(cell) != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxSwimlaneLayout.prototype.isPort = function(cell)\n{\n\tif (cell.geometry.relative)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxSwimlaneLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n * swimlaneIndex - the laid out order index of the swimlane vertex is contained in\n */\nmxSwimlaneLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet, swimlaneIndex)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar model = this.graph.model;\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar otherVertex = this.getVisibleTerminal(edges[i], true);\n\t\t\t\tvar isSource = otherVertex == vertex;\n\t\t\t\t\n\t\t\t\tif (isSource)\n\t\t\t\t{\n\t\t\t\t\totherVertex = this.getVisibleTerminal(edges[i], false);\n\t\t\t\t}\n\n\t\t\t\tvar otherIndex = 0;\n\t\t\t\t// Get the swimlane index of the other terminal\n\t\t\t\tfor (otherIndex = 0; otherIndex < this.swimlanes.length; otherIndex++)\n\t\t\t\t{\n\t\t\t\t\tif (model.isAncestor(this.swimlanes[otherIndex], otherVertex))\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (otherIndex >= this.swimlanes.length)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Traverse if the other vertex is within the same swimlane as\n\t\t\t\t// as the current vertex, or if the swimlane index of the other\n\t\t\t\t// vertex is greater than that of this vertex\n\t\t\t\tif ((otherIndex > swimlaneIndex) ||\n\t\t\t\t\t\t((!directed || isSource) && otherIndex == swimlaneIndex))\n\t\t\t\t{\n\t\t\t\t\tcurrentComp = this.traverse(otherVertex, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet, otherIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxSwimlaneLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxSwimlaneOrdering(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxSwimlaneLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxSwimlaneLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxSwimlaneLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphModel\n * \n * Extends <mxEventSource> to implement a graph model. The graph model acts as\n * a wrapper around the cells which are in charge of storing the actual graph\n * datastructure. The model acts as a transactional wrapper with event\n * notification for all changes, whereas the cells contain the atomic\n * operations for updating the actual datastructure.\n * \n * Layers:\n * \n * The cell hierarchy in the model must have a top-level root cell which\n * contains the layers (typically one default layer), which in turn contain the\n * top-level cells of the layers. This means each cell is contained in a layer.\n * If no layers are required, then all new cells should be added to the default\n * layer.\n * \n * Layers are useful for hiding and showing groups of cells, or for placing\n * groups of cells on top of other cells in the display. To identify a layer,\n * the <isLayer> function is used. It returns true if the parent of the given\n * cell is the root of the model.\n * \n * Events:\n * \n * See events section for more details. There is a new set of events for\n * tracking transactional changes as they happen. The events are called\n * startEdit for the initial beginUpdate, executed for each executed change\n * and endEdit for the terminal endUpdate. The executed event contains a\n * property called change which represents the change after execution.\n * \n * Encoding the model:\n * \n * To encode a graph model, use the following code:\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will create an XML node that contains all the model information.\n * \n * Encoding and decoding changes:\n * \n * For the encoding of changes, a graph model listener is required that encodes\n * each change from the given array of changes.\n * \n * (code)\n * model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n *   var nodes = [];\n *   var codec = new mxCodec();\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     nodes.push(codec.encode(changes[i]));\n *   }\n *   // do something with the nodes\n * });\n * (end)\n * \n * For the decoding and execution of changes, the codec needs a lookup function\n * that allows it to resolve cell IDs as follows:\n * \n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * }\n * (end)\n * \n * For each encoded change (represented by a node), the following code can be\n * used to carry out the decoding and create a change object.\n * \n * (code)\n * var changes = [];\n * var change = codec.decode(node);\n * change.model = model;\n * change.execute();\n * changes.push(change);\n * (end)\n * \n * The changes can then be dispatched using the model as follows.\n * \n * (code)\n * var edit = new mxUndoableEdit(model, false);\n * edit.changes = changes;\n * \n * edit.notify = function()\n * {\n *   edit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n *   \t'edit', edit, 'changes', edit.changes));\n *   edit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n *   \t'edit', edit, 'changes', edit.changes));\n * }\n * \n * model.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n * model.fireEvent(new mxEventObject(mxEvent.CHANGE,\n * \t\t'edit', edit, 'changes', changes));\n * (end)\n *\n * Event: mxEvent.CHANGE\n *\n * Fires when an undoable edit is dispatched. The <code>edit</code> property\n * contains the <mxUndoableEdit>. The <code>changes</code> property contains\n * the array of atomic changes inside the undoable edit. The changes property\n * is <strong>deprecated</strong>, please use edit.changes instead.\n *\n * Example:\n * \n * For finding newly inserted cells, the following code can be used:\n * \n * (code)\n * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     var change = changes[i];\n *     \n *     if (change instanceof mxChildChange &&\n *       change.change.previous == null)\n *     {\n *       graph.startEditingAtCell(change.child);\n *       break;\n *     }\n *   }\n * });\n * (end)\n * \n * \n * Event: mxEvent.NOTIFY\n *\n * Same as <mxEvent.CHANGE>, this event can be used for classes that need to\n * implement a sync mechanism between this model and, say, a remote model. In\n * such a setup, only local changes should trigger a notify event and all\n * changes should trigger a change event.\n * \n * Event: mxEvent.EXECUTE\n * \n * Fires between begin- and endUpdate and after an atomic change was executed\n * in the model. The <code>change</code> property contains the atomic change\n * that was executed.\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n *\n * Event: mxEvent.BEGIN_UPDATE\n *\n * Fires after the <updateLevel> was incremented in <beginUpdate>. This event\n * contains no properties.\n * \n * Event: mxEvent.START_EDIT\n *\n * Fires after the <updateLevel> was changed from 0 to 1. This event\n * contains no properties.\n * \n * Event: mxEvent.END_UPDATE\n * \n * Fires after the <updateLevel> was decreased in <endUpdate> but before any\n * notification or change dispatching. The <code>edit</code> property contains\n * the <currentEdit>.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after the <updateLevel> was changed from 1 to 0. This event\n * contains no properties.\n * \n * Event: mxEvent.BEFORE_UNDO\n * \n * Fires before the change is dispatched after the update level has reached 0\n * in <endUpdate>. The <code>edit</code> property contains the <curreneEdit>.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the change was dispatched in <endUpdate>. The <code>edit</code>\n * property contains the <currentEdit>.\n * \n * Constructor: mxGraphModel\n * \n * Constructs a new graph model. If no root is specified then a new root\n * <mxCell> with a default layer is created.\n * \n * Parameters:\n * \n * root - <mxCell> that represents the root cell.\n */\nfunction mxGraphModel(root)\n{\n\tthis.currentEdit = this.createUndoableEdit();\n\t\n\tif (root != null)\n\t{\n\t\tthis.setRoot(root);\n\t}\n\telse\n\t{\n\t\tthis.clear();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphModel.prototype = new mxEventSource();\nmxGraphModel.prototype.constructor = mxGraphModel;\n\n/**\n * Variable: root\n * \n * Holds the root cell, which in turn contains the cells that represent the\n * layers of the diagram as child cells. That is, the actual elements of the\n * diagram are supposed to live in the third generation of cells and below.\n */\nmxGraphModel.prototype.root = null;\n\n/**\n * Variable: cells\n * \n * Maps from Ids to cells.\n */\nmxGraphModel.prototype.cells = null;\n\n/**\n * Variable: maintainEdgeParent\n * \n * Specifies if edges should automatically be moved into the nearest common\n * ancestor of their terminals. Default is true.\n */\nmxGraphModel.prototype.maintainEdgeParent = true;\n\n/**\n * Variable: ignoreRelativeEdgeParent\n * \n * Specifies if relative edge parents should be ignored for finding the nearest\n * common ancestors of an edge's terminals. Default is true.\n */\nmxGraphModel.prototype.ignoreRelativeEdgeParent = true;\n\n/**\n * Variable: createIds\n * \n * Specifies if the model should automatically create Ids for new cells.\n * Default is true.\n */\nmxGraphModel.prototype.createIds = true;\n\n/**\n * Variable: prefix\n * \n * Defines the prefix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.prefix = '';\n\n/**\n * Variable: postfix\n * \n * Defines the postfix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.postfix = '';\n\n/**\n * Variable: nextId\n * \n * Specifies the next Id to be created. Initial value is 0.\n */\nmxGraphModel.prototype.nextId = 0;\n\n/**\n * Variable: currentEdit\n * \n * Holds the changes for the current transaction. If the transaction is\n * closed then a new object is created for this variable using\n * <createUndoableEdit>.\n */\nmxGraphModel.prototype.currentEdit = null;\n\n/**\n * Variable: updateLevel\n * \n * Counter for the depth of nested transactions. Each call to <beginUpdate>\n * will increment this number and each call to <endUpdate> will decrement\n * it. When the counter reaches 0, the transaction is closed and the\n * respective events are fired. Initial value is 0.\n */\nmxGraphModel.prototype.updateLevel = 0;\n\n/**\n * Variable: endingUpdate\n * \n * True if the program flow is currently inside endUpdate.\n */\nmxGraphModel.prototype.endingUpdate = false;\n\n/**\n * Function: clear\n *\n * Sets a new root using <createRoot>.\n */\nmxGraphModel.prototype.clear = function()\n{\n\tthis.setRoot(this.createRoot());\n};\n\n/**\n * Function: isCreateIds\n *\n * Returns <createIds>.\n */\nmxGraphModel.prototype.isCreateIds = function()\n{\n\treturn this.createIds;\n};\n\n/**\n * Function: setCreateIds\n *\n * Sets <createIds>.\n */\nmxGraphModel.prototype.setCreateIds = function(value)\n{\n\tthis.createIds = value;\n};\n\n/**\n * Function: createRoot\n *\n * Creates a new root cell with a default layer (child 0).\n */\nmxGraphModel.prototype.createRoot = function()\n{\n\tvar cell = new mxCell();\n\tcell.insert(new mxCell());\n\t\n\treturn cell;\n};\n\n/**\n * Function: getCell\n *\n * Returns the <mxCell> for the specified Id or null if no cell can be\n * found for the given Id.\n *\n * Parameters:\n * \n * id - A string representing the Id of the cell.\n */\nmxGraphModel.prototype.getCell = function(id)\n{\n\treturn (this.cells != null) ? this.cells[id] : null;\n};\n\n/**\n * Function: filterCells\n * \n * Returns the cells from the given array where the given filter function\n * returns true.\n */\nmxGraphModel.prototype.filterCells = function(cells, filter)\n{\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (filter(cells[i]))\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getDescendants\n * \n * Returns all descendants of the given cell and the cell itself in an array.\n * \n * Parameters:\n * \n * parent - <mxCell> whose descendants should be returned.\n */\nmxGraphModel.prototype.getDescendants = function(parent)\n{\n\treturn this.filterDescendants(null, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Visits all cells recursively and applies the specified filter function\n * to each cell. If the function returns true then the cell is added\n * to the resulting array. The parent and result paramters are optional.\n * If parent is not specified then the recursion starts at <root>.\n * \n * Example:\n * The following example extracts all vertices from a given model:\n * (code)\n * var filter = function(cell)\n * {\n * \treturn model.isVertex(cell);\n * }\n * var vertices = model.filterDescendants(filter);\n * (end)\n * \n * Parameters:\n * \n * filter - JavaScript function that takes an <mxCell> as an argument\n * and returns a boolean.\n * parent - Optional <mxCell> that is used as the root of the recursion.\n */\nmxGraphModel.prototype.filterDescendants = function(filter, parent)\n{\n\t// Creates a new array for storing the result\n\tvar result = [];\n\n\t// Recursion starts at the root of the model\n\tparent = parent || this.getRoot();\n\t\n\t// Checks if the filter returns true for the cell\n\t// and adds it to the result array\n\tif (filter == null || filter(parent))\n\t{\n\t\tresult.push(parent);\n\t}\n\t\n\t// Visits the children of the cell\n\tvar childCount = this.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\t\tresult = result.concat(this.filterDescendants(filter, child));\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root of the model or the topmost parent of the given cell.\n *\n * Parameters:\n * \n * cell - Optional <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.getRoot = function(cell)\n{\n\tvar root = cell || this.root;\n\t\n\tif (cell != null)\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\troot = cell;\n\t\t\tcell = this.getParent(cell);\n\t\t}\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: setRoot\n * \n * Sets the <root> of the model using <mxRootChange> and adds the change to\n * the current transaction. This resets all datastructures in the model and\n * is the preferred way of clearing an existing model. Returns the new\n * root.\n * \n * Example:\n * \n * (code)\n * var root = new mxCell();\n * root.insert(new mxCell());\n * model.setRoot(root);\n * (end)\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.setRoot = function(root)\n{\n\tthis.execute(new mxRootChange(this, root));\n\t\n\treturn root;\n};\n\n/**\n * Function: rootChanged\n * \n * Inner callback to change the root of the model and update the internal\n * datastructures, such as <cells> and <nextId>. Returns the previous root.\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.rootChanged = function(root)\n{\n\tvar oldRoot = this.root;\n\tthis.root = root;\n\t\n\t// Resets counters and datastructures\n\tthis.nextId = 0;\n\tthis.cells = null;\n\tthis.cellAdded(root);\n\t\n\treturn oldRoot;\n};\n\n/**\n * Function: isRoot\n * \n * Returns true if the given cell is the root of the model and a non-null\n * value.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible root.\n */\nmxGraphModel.prototype.isRoot = function(cell)\n{\n\treturn cell != null && this.root == cell;\n};\n\n/**\n * Function: isLayer\n * \n * Returns true if <isRoot> returns true for the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible layer.\n */\nmxGraphModel.prototype.isLayer = function(cell)\n{\n\treturn this.isRoot(this.getParent(cell));\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child. Note \n * returns true if child == parent.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.isAncestor = function(parent, child)\n{\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: contains\n * \n * Returns true if the model contains the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n */\nmxGraphModel.prototype.contains = function(cell)\n{\n\treturn this.isAncestor(this.root, cell);\n};\n\n/**\n * Function: getParent\n * \n * Returns the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose parent should be returned.\n */\nmxGraphModel.prototype.getParent = function(cell)\n{\n\treturn (cell != null) ? cell.getParent() : null;\n};\n\n/**\n * Function: add\n * \n * Adds the specified child to the parent at the given index using\n * <mxChildChange> and adds the change to the current transaction. If no\n * index is specified then the child is appended to the parent's array of\n * children. Returns the inserted child.\n * \n * Parameters:\n * \n * parent - <mxCell> that specifies the parent to contain the child.\n * child - <mxCell> that specifies the child to be inserted.\n * index - Optional integer that specifies the index of the child.\n */\nmxGraphModel.prototype.add = function(parent, child, index)\n{\n\tif (child != parent && parent != null && child != null)\n\t{\t\n\t\t// Appends the child if no index was specified\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount(parent);\n\t\t}\n\t\t\n\t\tvar parentChanged = parent != this.getParent(child);\n\t\tthis.execute(new mxChildChange(this, parent, child, index));\n\n\t\t// Maintains the edges parents by moving the edges\n\t\t// into the nearest common ancestor of its terminals\n\t\tif (this.maintainEdgeParent && parentChanged)\n\t\t{\n\t\t\tthis.updateEdgeParents(child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: cellAdded\n * \n * Inner callback to update <cells> when a cell has been added. This\n * implementation resolves collisions by creating new Ids. To change the\n * ID of a cell after it was inserted into the model, use the following\n * code:\n * \n * (code\n * delete model.cells[cell.getId()];\n * cell.setId(newId);\n * model.cells[cell.getId()] = cell;\n * (end)\n *\n * If the change of the ID should be part of the command history, then the\n * cell should be removed from the model and a clone with the new ID should\n * be reinserted into the model instead.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been added.\n */\nmxGraphModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\t// Creates an Id for the cell if not Id exists\n\t\tif (cell.getId() == null && this.createIds)\n\t\t{\n\t\t\tcell.setId(this.createId(cell));\n\t\t}\n\t\t\n\t\tif (cell.getId() != null)\n\t\t{\n\t\t\tvar collision = this.getCell(cell.getId());\n\t\t\t\n\t\t\tif (collision != cell)\n\t\t\t{\t\n\t\t\t\t// Creates new Id for the cell\n\t\t\t\t// as long as there is a collision\n\t\t\t\twhile (collision != null)\n\t\t\t\t{\n\t\t\t\t\tcell.setId(this.createId(cell));\n\t\t\t\t\tcollision = this.getCell(cell.getId());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Lazily creates the cells dictionary\n\t\t\t\tif (this.cells == null)\n\t\t\t\t{\n\t\t\t\t\tthis.cells = new Object();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.cells[cell.getId()] = cell;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Makes sure IDs of deleted cells are not reused\n\t\tif (mxUtils.isNumeric(cell.getId()))\n\t\t{\n\t\t\tthis.nextId = Math.max(this.nextId, cell.getId());\n\t\t}\n\t\t\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tthis.cellAdded(this.getChildAt(cell, i));\n\t\t}\n\t}\n};\n\n/**\n * Function: createId\n * \n * Hook method to create an Id for the specified cell. This implementation\n * concatenates <prefix>, id and <postfix> to create the Id and increments\n * <nextId>. The cell is ignored by this implementation, but can be used in\n * overridden methods to prefix the Ids with eg. the cell type.\n *\n * Parameters:\n *\n * cell - <mxCell> to create the Id for.\n */\nmxGraphModel.prototype.createId = function(cell)\n{\n\tvar id = this.nextId;\n\tthis.nextId++;\n\t\n\treturn this.prefix + id + this.postfix;\n};\n\n/**\n * Function: updateEdgeParents\n * \n * Updates the parent for all edges that are connected to cell or one of\n * its descendants using <updateEdgeParent>.\n */\nmxGraphModel.prototype.updateEdgeParents = function(cell, root)\n{\n\t// Gets the topmost node of the hierarchy\n\troot = root || this.getRoot(cell);\n\t\n\t// Updates edges on children first\n\tvar childCount = this.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(cell, i);\n\t\tthis.updateEdgeParents(child, root);\n\t}\n\t\n\t// Updates the parents of all connected edges\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar edges = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tedges.push(this.getEdgeAt(cell, i));\n\t}\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar edge = edges[i];\n\t\t\n\t\t// Updates edge parent if edge and child have\n\t\t// a common root node (does not need to be the\n\t\t// model root node)\n\t\tif (this.isAncestor(root, edge))\n\t\t{\n\t\t\tthis.updateEdgeParent(edge, root);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateEdgeParent\n *\n * Inner callback to update the parent of the specified <mxCell> to the\n * nearest-common-ancestor of its two terminals.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * root - <mxCell> that represents the current root of the model.\n */\nmxGraphModel.prototype.updateEdgeParent = function(edge, root)\n{\n\tvar source = this.getTerminal(edge, true);\n\tvar target = this.getTerminal(edge, false);\n\tvar cell = null;\n\t\n\t// Uses the first non-relative descendants of the source terminal\n\twhile (source != null && !this.isEdge(source) &&\n\t\tsource.geometry != null && source.geometry.relative)\n\t{\n\t\tsource = this.getParent(source);\n\t}\n\t\n\t// Uses the first non-relative descendants of the target terminal\n\twhile (target != null && this.ignoreRelativeEdgeParent &&\n\t\t!this.isEdge(target) && target.geometry != null && \n\t\ttarget.geometry.relative)\n\t{\n\t\ttarget = this.getParent(target);\n\t}\n\t\n\tif (this.isAncestor(root, source) && this.isAncestor(root, target))\n\t{\n\t\tif (source == target)\n\t\t{\n\t\t\tcell = this.getParent(source);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcell = this.getNearestCommonAncestor(source, target);\n\t\t}\n\n\t\tif (cell != null && (this.getParent(cell) != this.root ||\n\t\t\tthis.isAncestor(cell, edge)) && this.getParent(edge) != cell)\n\t\t{\n\t\t\tvar geo = this.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar origin1 = this.getOrigin(this.getParent(edge));\n\t\t\t\tvar origin2 = this.getOrigin(cell);\n\t\t\t\t\n\t\t\t\tvar dx = origin2.x - origin1.x;\n\t\t\t\tvar dy = origin2.y - origin1.y;\n\t\t\t\t\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.translate(-dx, -dy);\n\t\t\t\tthis.setGeometry(edge, geo);\n\t\t\t}\n\n\t\t\tthis.add(cell, edge, this.getChildCount(cell));\n\t\t}\n\t}\n};\n\n/**\n * Function: getOrigin\n * \n * Returns the absolute, accumulated origin for the children inside the\n * given parent as an <mxPoint>.\n */\nmxGraphModel.prototype.getOrigin = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tresult = this.getOrigin(this.getParent(cell));\n\t\t\n\t\tif (!this.isEdge(cell))\n\t\t{\n\t\t\tvar geo = this.getGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint();\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getNearestCommonAncestor\n * \n * Returns the nearest common ancestor for the specified cells.\n *\n * Parameters:\n * \n * cell1 - <mxCell> that specifies the first cell in the tree.\n * cell2 - <mxCell> that specifies the second cell in the tree.\n */\nmxGraphModel.prototype.getNearestCommonAncestor = function(cell1, cell2)\n{\n\tif (cell1 != null && cell2 != null)\n\t{\t\t\n\t\t// Creates the cell path for the second cell\n\t\tvar path = mxCellPath.create(cell2);\n\n\t\tif (path != null && path.length > 0)\n\t\t{\n\t\t\t// Bubbles through the ancestors of the first\n\t\t\t// cell to find the nearest common ancestor.\n\t\t\tvar cell = cell1;\n\t\t\tvar current = mxCellPath.create(cell);\n\t\t\t\n\t\t\t// Inverts arguments\n\t\t\tif (path.length < current.length)\n\t\t\t{\n\t\t\t\tcell = cell2;\n\t\t\t\tvar tmp = current;\n\t\t\t\tcurrent = path;\n\t\t\t\tpath = tmp;\n\t\t\t}\n\t\t\t\n\t\t\twhile (cell != null)\n\t\t\t{\n\t\t\t\tvar parent = this.getParent(cell);\n\t\t\t\t\n\t\t\t\t// Checks if the cell path is equal to the beginning of the given cell path\n\t\t\t\tif (path.indexOf(current + mxCellPath.PATH_SEPARATOR) == 0 && parent != null)\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrent = mxCellPath.getParentPath(current);\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: remove\n * \n * Removes the specified cell from the model using <mxChildChange> and adds\n * the change to the current transaction. This operation will remove the\n * cell and all of its children from the model. Returns the removed cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be removed.\n */\nmxGraphModel.prototype.remove = function(cell)\n{\n\tif (cell == this.root)\n\t{\n\t\tthis.setRoot(null);\n\t}\n\telse if (this.getParent(cell) != null)\n\t{\n\t\tthis.execute(new mxChildChange(this, null, cell));\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellRemoved\n * \n * Inner callback to update <cells> when a cell has been removed.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been removed.\n */\nmxGraphModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null && this.cells != null)\n\t{\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tthis.cellRemoved(this.getChildAt(cell, i));\n\t\t}\n\t\t\n\t\t// Removes the dictionary entry for the cell\n\t\tif (this.cells != null && cell.getId() != null)\n\t\t{\n\t\t\tdelete this.cells[cell.getId()];\n\t\t}\n\t}\n};\n\n/**\n * Function: parentForCellChanged\n * \n * Inner callback to update the parent of a cell using <mxCell.insert>\n * on the parent and return the previous parent.\n *\n * Parameters:\n * \n * cell - <mxCell> to update the parent for.\n * parent - <mxCell> that specifies the new parent of the cell.\n * index - Optional integer that defines the index of the child\n * in the parent's child array.\n */\nmxGraphModel.prototype.parentForCellChanged = function(cell, parent, index)\n{\n\tvar previous = this.getParent(cell);\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent != previous || previous.getIndex(cell) != index)\n\t\t{\n\t\t\tparent.insert(cell, index);\n\t\t}\n\t}\n\telse if (previous != null)\n\t{\n\t\tvar oldIndex = previous.getIndex(cell);\n\t\tprevious.remove(oldIndex);\n\t}\n\t\n\t// Adds or removes the cell from the model\n\tvar par = this.contains(parent);\n\tvar pre = this.contains(previous);\n\t\n\tif (par && !pre)\n\t{\n\t\tthis.cellAdded(cell);\n\t}\n\telse if (pre && !par)\n\t{\n\t\tthis.cellRemoved(cell);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of children in the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose number of children should be returned.\n */\nmxGraphModel.prototype.getChildCount = function(cell)\n{\n\treturn (cell != null) ? cell.getChildCount() : 0;\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child of the given <mxCell> at the given index.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the parent.\n * index - Integer that specifies the index of the child to be returned.\n */\nmxGraphModel.prototype.getChildAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getChildAt(index) : null;\n};\n\n/**\n * Function: getChildren\n * \n * Returns all children of the given <mxCell> as an array of <mxCells>. The\n * return value should be only be read.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n */\nmxGraphModel.prototype.getChildren = function(cell)\n{\n\treturn (cell != null) ? cell.children : null;\n};\n\t\n/**\n * Function: getChildVertices\n * \n * Returns the child vertices of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child vertices should be returned.\n */\nmxGraphModel.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\t\n/**\n * Function: getChildEdges\n * \n * Returns the child edges of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child edges should be returned.\n */\nmxGraphModel.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the children of the given cell that are vertices and/or edges\n * depending on the arguments.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n * vertices - Boolean indicating if child vertices should be returned.\n * Default is false.\n * edges - Boolean indicating if child edges should be returned.\n * Default is false.\n */\nmxGraphModel.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\t\n\tvar childCount = this.getChildCount(parent);\n\tvar result = [];\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\n\t\tif ((!edges && !vertices) || (edges && this.isEdge(child)) ||\n\t\t\t(vertices && this.isVertex(child)))\n\t\t{\n\t\t\tresult.push(child);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\t\n/**\n * Function: getTerminal\n * \n * Returns the source or target <mxCell> of the given edge depending on the\n * value of the boolean parameter.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * isSource - Boolean indicating which end of the edge should be returned.\n */\nmxGraphModel.prototype.getTerminal = function(edge, isSource)\n{\n\treturn (edge != null) ? edge.getTerminal(isSource) : null;\n};\n\n/**\n * Function: setTerminal\n * \n * Sets the source or target terminal of the given <mxCell> using\n * <mxTerminalChange> and adds the change to the current transaction.\n * This implementation updates the parent of the edge using <updateEdgeParent>\n * if required.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.setTerminal = function(edge, terminal, isSource)\n{\n\tvar terminalChanged = terminal != this.getTerminal(edge, isSource);\n\tthis.execute(new mxTerminalChange(this, edge, terminal, isSource));\n\t\n\tif (this.maintainEdgeParent && terminalChanged)\n\t{\n\t\tthis.updateEdgeParent(edge, this.getRoot());\n\t}\n\t\n\treturn terminal;\n};\n\t\n/**\n * Function: setTerminals\n * \n * Sets the source and target <mxCell> of the given <mxCell> in a single\n * transaction using <setTerminal> for each end of the edge.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * source - <mxCell> that specifies the new source terminal.\n * target - <mxCell> that specifies the new target terminal.\n */\nmxGraphModel.prototype.setTerminals = function(edge, source, target)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tthis.setTerminal(edge, source, true);\n\t\tthis.setTerminal(edge, target, false);\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: terminalForCellChanged\n * \n * Inner helper function to update the terminal of the edge using\n * <mxCell.insertEdge> and return the previous terminal.\n * \n * Parameters:\n * \n * edge - <mxCell> that specifies the edge to be updated.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.terminalForCellChanged = function(edge, terminal, isSource)\n{\n\tvar previous = this.getTerminal(edge, isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.insertEdge(edge, isSource);\n\t}\n\telse if (previous != null)\n\t{\n\t\tprevious.removeEdge(edge, isSource);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getEdgeCount\n * \n * Returns the number of distinct edges connected to the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the vertex.\n */\nmxGraphModel.prototype.getEdgeCount = function(cell)\n{\n\treturn (cell != null) ? cell.getEdgeCount() : 0;\n};\n\n/**\n * Function: getEdgeAt\n * \n * Returns the edge of cell at the given index.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the vertex.\n * index - Integer that specifies the index of the edge\n * to return.\n */\nmxGraphModel.prototype.getEdgeAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getEdgeAt(index) : null;\n};\n\t\n/**\n * Function: getDirectedEdgeCount\n * \n * Returns the number of incoming or outgoing edges, ignoring the given\n * edge.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edge count should be returned.\n * outgoing - Boolean that specifies if the number of outgoing or\n * incoming edges should be returned.\n * ignoredEdge - <mxCell> that represents an edge to be ignored.\n */\nmxGraphModel.prototype.getDirectedEdgeCount = function(cell, outgoing, ignoredEdge)\n{\n\tvar count = 0;\n\tvar edgeCount = this.getEdgeCount(cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\n\t\tif (edge != ignoredEdge && this.getTerminal(edge, outgoing) == cell)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n};\n\n/**\n * Function: getConnections\n * \n * Returns all edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * \n */\nmxGraphModel.prototype.getConnections = function(cell)\n{\n\treturn this.getEdges(cell, true, true, false);\n};\n\n/**\n * Function: getIncomingEdges\n * \n * Returns the incoming edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * \n */\nmxGraphModel.prototype.getIncomingEdges = function(cell)\n{\n\treturn this.getEdges(cell, true, false, false);\n};\n\n/**\n * Function: getOutgoingEdges\n * \n * Returns the outgoing edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * \n */\nmxGraphModel.prototype.getOutgoingEdges = function(cell)\n{\n\treturn this.getEdges(cell, false, true, false);\n};\n\n/**\n * Function: getEdges\n * \n * Returns all distinct edges connected to this cell as a new array of\n * <mxCells>. If at least one of incoming or outgoing is true, then loops\n * are ignored, otherwise if both are false, then all edges connected to\n * the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n * incoming - Optional boolean that specifies if incoming edges should be\n * returned. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should be\n * returned. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be returned.\n * Default is true. \n */\nmxGraphModel.prototype.getEdges = function(cell, incoming, outgoing, includeLoops)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\t\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar result = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\t\tvar source = this.getTerminal(edge, true);\n\t\tvar target = this.getTerminal(edge, false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming && target == cell) ||\n\t\t\t(outgoing && source == cell))))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns all edges between the given source and target pair. If directed\n * is true, then only edges from the source to the target are returned,\n * otherwise, all edges between the two cells are returned.\n * \n * Parameters:\n * \n * source - <mxCell> that defines the source terminal of the edge to be\n * returned.\n * target - <mxCell> that defines the target terminal of the edge to be\n * returned.\n * directed - Optional boolean that specifies if the direction of the\n * edge should be taken into account. Default is false.\n */\nmxGraphModel.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\t\n\tvar tmp1 = this.getEdgeCount(source);\n\tvar tmp2 = this.getEdgeCount(target);\n\t\n\t// Assumes the source has less connected edges\n\tvar terminal = source;\n\tvar edgeCount = tmp1;\n\t\n\t// Uses the smaller array of connected edges\n\t// for searching the edge\n\tif (tmp2 < tmp1)\n\t{\n\t\tedgeCount = tmp2;\n\t\tterminal = target;\n\t}\n\t\n\tvar result = [];\n\t\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(terminal, i);\n\t\tvar src = this.getTerminal(edge, true);\n\t\tvar trg = this.getTerminal(edge, false);\n\t\tvar directedMatch = (src == source) && (trg == target);\n\t\tvar oppositeMatch = (trg == source) && (src == target);\n\n\t\tif (directedMatch || (!directed && oppositeMatch))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all opposite vertices wrt terminal for the given edges, only\n * returning sources and/or targets as specified. The result is returned\n * as an array of <mxCells>.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contain the edges to be examined.\n * terminal - <mxCell> that specifies the known end of the edges.\n * sources - Boolean that specifies if source terminals should be contained\n * in the result. Default is true.\n * targets - Boolean that specifies if target terminals should be contained\n * in the result. Default is true.\n */\nmxGraphModel.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar source = this.getTerminal(edges[i], true);\n\t\t\tvar target = this.getTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of\n\t\t\t// the edge and if the target should be\n\t\t\t// stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tterminals.push(target);\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of\n\t\t\t// the edge and if the source should be\n\t\t\t// stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tterminals.push(source);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getTopmostCells\n * \n * Returns the topmost cells of the hierarchy in an array that contains no\n * descendants for each <mxCell> that it contains. Duplicates should be\n * removed in the cells array to improve performance.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose topmost ancestors should be returned.\n */\nmxGraphModel.prototype.getTopmostCells = function(cells)\n{\n\tvar dict = new mxDictionary();\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tdict.put(cells[i], true);\n\t}\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tvar cell = cells[i];\n\t\tvar topmost = true;\n\t\tvar parent = this.getParent(cell);\n\t\t\n\t\twhile (parent != null)\n\t\t{\n\t\t\tif (dict.get(parent))\n\t\t\t{\n\t\t\t\ttopmost = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tparent = this.getParent(parent);\n\t\t}\n\t\t\n\t\tif (topmost)\n\t\t{\n\t\t\ttmp.push(cell);\n\t\t}\n\t}\n\t\n\treturn tmp;\n};\n\n/**\n * Function: isVertex\n * \n * Returns true if the given cell is a vertex.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible vertex.\n */\nmxGraphModel.prototype.isVertex = function(cell)\n{\n\treturn (cell != null) ? cell.isVertex() : false;\n};\n\n/**\n * Function: isEdge\n * \n * Returns true if the given cell is an edge.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible edge.\n */\nmxGraphModel.prototype.isEdge = function(cell)\n{\n\treturn (cell != null) ? cell.isEdge() : false;\n};\n\n/**\n * Function: isConnectable\n * \n * Returns true if the given <mxCell> is connectable. If <edgesConnectable>\n * is false, then this function returns false for all edges else it returns\n * the return value of <mxCell.isConnectable>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraphModel.prototype.isConnectable = function(cell)\n{\n\treturn (cell != null) ? cell.isConnectable() : false;\n};\n\n/**\n * Function: getValue\n * \n * Returns the user object of the given <mxCell> using <mxCell.getValue>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be returned.\n */\nmxGraphModel.prototype.getValue = function(cell)\n{\n\treturn (cell != null) ? cell.getValue() : null;\n};\n\n/**\n * Function: setValue\n * \n * Sets the user object of then given <mxCell> using <mxValueChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be changed.\n * value - Object that defines the new user object.\n */\nmxGraphModel.prototype.setValue = function(cell, value)\n{\n\tthis.execute(new mxValueChange(this, cell, value));\n\t\n\treturn value;\n};\n\n/**\n * Function: valueForCellChanged\n * \n * Inner callback to update the user object of the given <mxCell>\n * using <mxCell.valueChanged> and return the previous value,\n * that is, the return value of <mxCell.valueChanged>.\n * \n * To change a specific attribute in an XML node, the following code can be\n * used.\n * \n * (code)\n * graph.getModel().valueForCellChanged = function(cell, value)\n * {\n *   var previous = cell.value.getAttribute('label');\n *   cell.value.setAttribute('label', value);\n *   \n *   return previous;\n * };\n * (end) \n */\nmxGraphModel.prototype.valueForCellChanged = function(cell, value)\n{\n\treturn cell.valueChanged(value);\n};\n\n/**\n * Function: getGeometry\n * \n * Returns the <mxGeometry> of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraphModel.prototype.getGeometry = function(cell)\n{\n\treturn (cell != null) ? cell.getGeometry() : null;\n};\n\n/**\n * Function: setGeometry\n * \n * Sets the <mxGeometry> of the given <mxCell>. The actual update\n * of the cell is carried out in <geometryForCellChanged>. The\n * <mxGeometryChange> action is used to encapsulate the change.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be changed.\n * geometry - <mxGeometry> that defines the new geometry.\n */\nmxGraphModel.prototype.setGeometry = function(cell, geometry)\n{\n\tif (geometry != this.getGeometry(cell))\n\t{\n\t\tthis.execute(new mxGeometryChange(this, cell, geometry));\n\t}\n\t\n\treturn geometry;\n};\n\n/**\n * Function: geometryForCellChanged\n * \n * Inner callback to update the <mxGeometry> of the given <mxCell> using\n * <mxCell.setGeometry> and return the previous <mxGeometry>.\n */\nmxGraphModel.prototype.geometryForCellChanged = function(cell, geometry)\n{\n\tvar previous = this.getGeometry(cell);\n\tcell.setGeometry(geometry);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getStyle\n * \n * Returns the style of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be returned.\n */\nmxGraphModel.prototype.getStyle = function(cell)\n{\n\treturn (cell != null) ? cell.getStyle() : null;\n};\n\n/**\n * Function: setStyle\n * \n * Sets the style of the given <mxCell> using <mxStyleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be changed.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.setStyle = function(cell, style)\n{\n\tif (style != this.getStyle(cell))\n\t{\n\t\tthis.execute(new mxStyleChange(this, cell, style));\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: styleForCellChanged\n * \n * Inner callback to update the style of the given <mxCell>\n * using <mxCell.setStyle> and return the previous style.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.styleForCellChanged = function(cell, style)\n{\n\tvar previous = this.getStyle(cell);\n\tcell.setStyle(style);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isCollapsed\n * \n * Returns true if the given <mxCell> is collapsed.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraphModel.prototype.isCollapsed = function(cell)\n{\n\treturn (cell != null) ? cell.isCollapsed() : false;\n};\n\n/**\n * Function: setCollapsed\n * \n * Sets the collapsed state of the given <mxCell> using <mxCollapseChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be changed.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.setCollapsed = function(cell, collapsed)\n{\n\tif (collapsed != this.isCollapsed(cell))\n\t{\n\t\tthis.execute(new mxCollapseChange(this, cell, collapsed));\n\t}\n\t\n\treturn collapsed;\n};\n\t\n/**\n * Function: collapsedStateForCellChanged\n *\n * Inner callback to update the collapsed state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous collapsed state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.collapsedStateForCellChanged = function(cell, collapsed)\n{\n\tvar previous = this.isCollapsed(cell);\n\tcell.setCollapsed(collapsed);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the given <mxCell> is visible.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraphModel.prototype.isVisible = function(cell)\n{\n\treturn (cell != null) ? cell.isVisible() : false;\n};\n\n/**\n * Function: setVisible\n * \n * Sets the visible state of the given <mxCell> using <mxVisibleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose visible state should be changed.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.setVisible = function(cell, visible)\n{\n\tif (visible != this.isVisible(cell))\n\t{\n\t\tthis.execute(new mxVisibleChange(this, cell, visible));\n\t}\n\t\n\treturn visible;\n};\n\t\n/**\n * Function: visibleStateForCellChanged\n *\n * Inner callback to update the visible state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous visible state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.visibleStateForCellChanged = function(cell, visible)\n{\n\tvar previous = this.isVisible(cell);\n\tcell.setVisible(visible);\n\t\n\treturn previous;\n};\n\n/**\n * Function: execute\n * \n * Executes the given edit and fires events if required. The edit object\n * requires an execute function which is invoked. The edit is added to the\n * <currentEdit> between <beginUpdate> and <endUpdate> calls, so that\n * events will be fired if this execute is an individual transaction, that\n * is, if no previous <beginUpdate> calls have been made without calling\n * <endUpdate>. This implementation fires an <execute> event before\n * executing the given change.\n * \n * Parameters:\n * \n * change - Object that described the change.\n */\nmxGraphModel.prototype.execute = function(change)\n{\n\tchange.execute();\n\tthis.beginUpdate();\n\tthis.currentEdit.add(change);\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE, 'change', change));\n\t// New global executed event\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\tthis.endUpdate();\n};\n\n/**\n * Function: beginUpdate\n * \n * Increments the <updateLevel> by one. The event notification\n * is queued until <updateLevel> reaches 0 by use of\n * <endUpdate>.\n *\n * All changes on <mxGraphModel> are transactional,\n * that is, they are executed in a single undoable change\n * on the model (without transaction isolation).\n * Therefore, if you want to combine any\n * number of changes into a single undoable change,\n * you should group any two or more API calls that\n * modify the graph model between <beginUpdate>\n * and <endUpdate> calls as shown here:\n * \n * (code)\n * var model = graph.getModel();\n * var parent = graph.getDefaultParent();\n * var index = model.getChildCount(parent);\n * model.beginUpdate();\n * try\n * {\n *   model.add(parent, v1, index);\n *   model.add(parent, v2, index+1);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n * \n * Of course there is a shortcut for appending a\n * sequence of cells into the default parent:\n * \n * (code)\n * graph.addCells([v1, v2]).\n * (end)\n */\nmxGraphModel.prototype.beginUpdate = function()\n{\n\tthis.updateLevel++;\n\tthis.fireEvent(new mxEventObject(mxEvent.BEGIN_UPDATE));\n\t\n\tif (this.updateLevel == 1)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t}\n};\n\n/**\n * Function: endUpdate\n * \n * Decrements the <updateLevel> by one and fires an <undo>\n * event if the <updateLevel> reaches 0. This function\n * indirectly fires a <change> event by invoking the notify\n * function on the <currentEdit> und then creates a new\n * <currentEdit> using <createUndoableEdit>.\n *\n * The <undo> event is fired only once per edit, whereas\n * the <change> event is fired whenever the notify\n * function is invoked, that is, on undo and redo of\n * the edit.\n */\nmxGraphModel.prototype.endUpdate = function()\n{\n\tthis.updateLevel--;\n\t\n\tif (this.updateLevel == 0)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tif (!this.endingUpdate)\n\t{\n\t\tthis.endingUpdate = this.updateLevel == 0;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_UPDATE, 'edit', this.currentEdit));\n\n\t\ttry\n\t\t{\t\t\n\t\t\tif (this.endingUpdate && !this.currentEdit.isEmpty())\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_UNDO, 'edit', this.currentEdit));\n\t\t\t\tvar tmp = this.currentEdit;\n\t\t\t\tthis.currentEdit = this.createUndoableEdit();\n\t\t\t\ttmp.notify();\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', tmp));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.endingUpdate = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: createUndoableEdit\n * \n * Creates a new <mxUndoableEdit> that implements the\n * notify function to fire a <change> and <notify> event\n * through the <mxUndoableEdit>'s source.\n * \n * Parameters:\n * \n * significant - Optional boolean that specifies if the edit to be created is\n * significant. Default is true.\n */\nmxGraphModel.prototype.createUndoableEdit = function(significant)\n{\n\tvar edit = new mxUndoableEdit(this, (significant != null) ? significant : true);\n\t\n\tedit.notify = function()\n\t{\n\t\t// LATER: Remove changes property (deprecated)\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t};\n\t\n\treturn edit;\n};\n\n/**\n * Function: mergeChildren\n * \n * Merges the children of the given cell into the given target cell inside\n * this model. All cells are cloned unless there is a corresponding cell in\n * the model with the same id, in which case the source cell is ignored and\n * all edges are connected to the corresponding cell in this model. Edges\n * are considered to have no identity and are always cloned unless the\n * cloneAllEdges flag is set to false, in which case edges with the same\n * id in the target model are reconnected to reflect the terminals of the\n * source edges.\n */\nmxGraphModel.prototype.mergeChildren = function(from, to, cloneAllEdges)\n{\n\tcloneAllEdges = (cloneAllEdges != null) ? cloneAllEdges : true;\n\t\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar mapping = new Object();\n\t\tthis.mergeChildrenImpl(from, to, cloneAllEdges, mapping);\n\t\t\n\t\t// Post-processes all edges in the mapping and\n\t\t// reconnects the terminals to the corresponding\n\t\t// cells in the target model\n\t\tfor (var key in mapping)\n\t\t{\n\t\t\tvar cell = mapping[key];\n\t\t\tvar terminal = this.getTerminal(cell, true);\n\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, true);\n\t\t\t}\n\t\t\t\n\t\t\tterminal = this.getTerminal(cell, false);\n\t\t\t\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, false);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: mergeChildren\n * \n * Clones the children of the source cell into the given target cell in\n * this model and adds an entry to the mapping that maps from the source\n * cell to the target cell with the same id or the clone of the source cell\n * that was inserted into this model.\n */\nmxGraphModel.prototype.mergeChildrenImpl = function(from, to, cloneAllEdges, mapping)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar childCount = from.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = from.getChildAt(i);\n\t\t\t\n\t\t\tif (typeof(cell.getId) == 'function')\n\t\t\t{\n\t\t\t\tvar id = cell.getId();\n\t\t\t\tvar target = (id != null && (!this.isEdge(cell) || !cloneAllEdges)) ?\n\t\t\t\t\t\tthis.getCell(id) : null;\n\t\t\t\t\n\t\t\t\t// Clones and adds the child if no cell exists for the id\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar clone = cell.clone();\n\t\t\t\t\tclone.setId(id);\n\t\t\t\t\t\n\t\t\t\t\t// Sets the terminals from the original cell to the clone\n\t\t\t\t\t// because the lookup uses strings not cells in JS\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(true), true);\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(false), false);\n\t\t\t\t\t\n\t\t\t\t\t// Do *NOT* use model.add as this will move the edge away\n\t\t\t\t\t// from the parent in updateEdgeParent if maintainEdgeParent\n\t\t\t\t\t// is enabled in the target model\n\t\t\t\t\ttarget = to.insert(clone);\n\t\t\t\t\tthis.cellAdded(target);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Stores the mapping for later reconnecting edges\n\t\t\t\tmapping[mxCellPath.create(cell)] = target;\n\t\t\t\t\n\t\t\t\t// Recurses\n\t\t\t\tthis.mergeChildrenImpl(cell, target, cloneAllEdges, mapping);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: getParents\n * \n * Returns an array that represents the set (no duplicates) of all parents\n * for the given array of cells.\n * \n * Parameters:\n * \n * cells - Array of cells whose parents should be returned.\n */\nmxGraphModel.prototype.getParents = function(cells)\n{\n\tvar parents = [];\n\t\n\tif (cells != null)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = this.getParent(cells[i]);\n\t\t\t\n\t\t\tif (parent != null && !dict.get(parent))\n\t\t\t{\n\t\t\t\tdict.put(parent, true);\n\t\t\t\tparents.push(parent);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn parents;\n};\n\n//\n// Cell Cloning\n//\n\n/**\n * Function: cloneCell\n * \n * Returns a deep clone of the given <mxCell> (including\n * the children) which is created using <cloneCells>.\n *\n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n */\nmxGraphModel.prototype.cloneCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn this.cloneCells([cell], true)[0];\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: cloneCells\n * \n * Returns an array of clones for the given array of <mxCells>.\n * Depending on the value of includeChildren, a deep clone is created for\n * each cell. Connections are restored based if the corresponding\n * cell is contained in the passed in array.\n *\n * Parameters:\n * \n * cells - Array of <mxCell> to be cloned.\n * includeChildren - Boolean indicating if the cells should be cloned\n * with all descendants.\n * mapping - Optional mapping for existing clones.\n */\nmxGraphModel.prototype.cloneCells = function(cells, includeChildren, mapping)\n{\n\tmapping = (mapping != null) ? mapping : new Object();\n\tvar clones = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (cells[i] != null)\n\t\t{\n\t\t\tclones.push(this.cloneCellImpl(cells[i], mapping, includeChildren));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones.push(null);\n\t\t}\n\t}\n\t\n\tfor (var i = 0; i < clones.length; i++)\n\t{\n\t\tif (clones[i] != null)\n\t\t{\n\t\t\tthis.restoreClone(clones[i], cells[i], mapping);\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\t\t\t\n/**\n * Function: cloneCellImpl\n * \n * Inner helper method for cloning cells recursively.\n */\nmxGraphModel.prototype.cloneCellImpl = function(cell, mapping, includeChildren)\n{\n\tvar ident = mxObjectIdentity.get(cell);\n\tvar clone = mapping[ident];\n\t\n\tif (clone == null)\n\t{\n\t\tclone = this.cellCloned(cell);\n\t\tmapping[ident] = clone;\n\n\t\tif (includeChildren)\n\t\t{\n\t\t\tvar childCount = this.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cloneChild = this.cloneCellImpl(\n\t\t\t\t\tthis.getChildAt(cell, i), mapping, true);\n\t\t\t\tclone.insert(cloneChild);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn clone;\n};\n\n/**\n * Function: cellCloned\n * \n * Hook for cloning the cell. This returns cell.clone() or\n * any possible exceptions.\n */\nmxGraphModel.prototype.cellCloned = function(cell)\n{\n\treturn cell.clone();\n};\n\n/**\n * Function: restoreClone\n * \n * Inner helper method for restoring the connections in\n * a network of cloned cells.\n */\nmxGraphModel.prototype.restoreClone = function(clone, cell, mapping)\n{\n\tvar source = this.getTerminal(cell, true);\n\t\n\tif (source != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(source)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\ttmp.insertEdge(clone, true);\n\t\t}\n\t}\n\t\n\tvar target = this.getTerminal(cell, false);\n\t\n\tif (target != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(target)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\t\n\t\t\ttmp.insertEdge(clone, false);\n\t\t}\n\t}\n\t\n\tvar childCount = this.getChildCount(clone);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.restoreClone(this.getChildAt(clone, i),\n\t\t\tthis.getChildAt(cell, i), mapping);\n\t}\n};\n\n//\n// Atomic changes\n//\n\n/**\n * Class: mxRootChange\n * \n * Action to change the root in a model.\n *\n * Constructor: mxRootChange\n * \n * Constructs a change of the root in the\n * specified model.\n */\nfunction mxRootChange(model, root)\n{\n\tthis.model = model;\n\tthis.root = root;\n\tthis.previous = root;\n};\n\n/**\n * Function: execute\n * \n * Carries out a change of the root using\n * <mxGraphModel.rootChanged>.\n */\nmxRootChange.prototype.execute = function()\n{\n\tthis.root = this.previous;\n\tthis.previous = this.model.rootChanged(this.previous);\n};\n\n/**\n * Class: mxChildChange\n * \n * Action to add or remove a child in a model.\n *\n * Constructor: mxChildChange\n * \n * Constructs a change of a child in the\n * specified model.\n */\nfunction mxChildChange(model, parent, child, index)\n{\n\tthis.model = model;\n\tthis.parent = parent;\n\tthis.previous = parent;\n\tthis.child = child;\n\tthis.index = index;\n\tthis.previousIndex = index;\n};\n\n/**\n * Function: execute\n * \n * Changes the parent of <child> using\n * <mxGraphModel.parentForCellChanged> and\n * removes or restores the cell's\n * connections.\n */\nmxChildChange.prototype.execute = function()\n{\n\tif (this.child != null)\n\t{\n\t\tvar tmp = this.model.getParent(this.child);\n\t\tvar tmp2 = (tmp != null) ? tmp.getIndex(this.child) : 0;\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.connect(this.child, false);\n\t\t}\n\t\t\n\t\ttmp = this.model.parentForCellChanged(\n\t\t\tthis.child, this.previous, this.previousIndex);\n\t\t\t\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.connect(this.child, true);\n\t\t}\n\t\t\n\t\tthis.parent = this.previous;\n\t\tthis.previous = tmp;\n\t\tthis.index = this.previousIndex;\n\t\tthis.previousIndex = tmp2;\n\t}\n};\n\n/**\n * Function: disconnect\n * \n * Disconnects the given cell recursively from its\n * terminals and stores the previous terminal in the\n * cell's terminals.\n */\nmxChildChange.prototype.connect = function(cell, isConnect)\n{\n\tisConnect = (isConnect != null) ? isConnect : true;\n\t\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\t\n\tif (source != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, source, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, true);\n\t\t}\n\t}\n\t\n\tif (target != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, target, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, false);\n\t\t}\n\t}\n\t\n\tcell.setTerminal(source, true);\n\tcell.setTerminal(target, false);\n\t\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i=0; i<childCount; i++)\n\t{\n\t\tthis.connect(this.model.getChildAt(cell, i), isConnect);\n\t}\n};\n\n/**\n * Class: mxTerminalChange\n * \n * Action to change a terminal in a model.\n *\n * Constructor: mxTerminalChange\n * \n * Constructs a change of a terminal in the \n * specified model.\n */\nfunction mxTerminalChange(model, cell, terminal, source)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.terminal = terminal;\n\tthis.previous = terminal;\n\tthis.source = source;\n};\n\n/**\n * Function: execute\n * \n * Changes the terminal of <cell> to <previous> using\n * <mxGraphModel.terminalForCellChanged>.\n */\nmxTerminalChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.terminal = this.previous;\n\t\tthis.previous = this.model.terminalForCellChanged(\n\t\t\tthis.cell, this.previous, this.source);\n\t}\n};\n\n/**\n * Class: mxValueChange\n * \n * Action to change a user object in a model.\n *\n * Constructor: mxValueChange\n * \n * Constructs a change of a user object in the \n * specified model.\n */\nfunction mxValueChange(model, cell, value)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the value of <cell> to <previous> using\n * <mxGraphModel.valueForCellChanged>.\n */\nmxValueChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.value = this.previous;\n\t\tthis.previous = this.model.valueForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxStyleChange\n * \n * Action to change a cell's style in a model.\n *\n * Constructor: mxStyleChange\n * \n * Constructs a change of a style in the\n * specified model.\n */\nfunction mxStyleChange(model, cell, style)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.style = style;\n\tthis.previous = style;\n};\n\n/**\n * Function: execute\n * \n * Changes the style of <cell> to <previous> using\n * <mxGraphModel.styleForCellChanged>.\n */\nmxStyleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.style = this.previous;\n\t\tthis.previous = this.model.styleForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxGeometryChange\n * \n * Action to change a cell's geometry in a model.\n *\n * Constructor: mxGeometryChange\n * \n * Constructs a change of a geometry in the\n * specified model.\n */\nfunction mxGeometryChange(model, cell, geometry)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.geometry = geometry;\n\tthis.previous = geometry;\n};\n\n/**\n * Function: execute\n * \n * Changes the geometry of <cell> ro <previous> using\n * <mxGraphModel.geometryForCellChanged>.\n */\nmxGeometryChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.geometry = this.previous;\n\t\tthis.previous = this.model.geometryForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCollapseChange\n * \n * Action to change a cell's collapsed state in a model.\n *\n * Constructor: mxCollapseChange\n * \n * Constructs a change of a collapsed state in the\n * specified model.\n */\nfunction mxCollapseChange(model, cell, collapsed)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.collapsed = collapsed;\n\tthis.previous = collapsed;\n};\n\n/**\n * Function: execute\n * \n * Changes the collapsed state of <cell> to <previous> using\n * <mxGraphModel.collapsedStateForCellChanged>.\n */\nmxCollapseChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.collapsed = this.previous;\n\t\tthis.previous = this.model.collapsedStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxVisibleChange\n * \n * Action to change a cell's visible state in a model.\n *\n * Constructor: mxVisibleChange\n * \n * Constructs a change of a visible state in the\n * specified model.\n */\nfunction mxVisibleChange(model, cell, visible)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.visible = visible;\n\tthis.previous = visible;\n};\n\n/**\n * Function: execute\n * \n * Changes the visible state of <cell> to <previous> using\n * <mxGraphModel.visibleStateForCellChanged>.\n */\nmxVisibleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.visible = this.previous;\n\t\tthis.previous = this.model.visibleStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCellAttributeChange\n * \n * Action to change the attribute of a cell's user object.\n * There is no method on the graph model that uses this\n * action. To use the action, you can use the code shown\n * in the example below.\n * \n * Example:\n * \n * To change the attributeName in the cell's user object\n * to attributeValue, use the following code:\n * \n * (code)\n * model.beginUpdate();\n * try\n * {\n *   var edit = new mxCellAttributeChange(\n *     cell, attributeName, attributeValue);\n *   model.execute(edit);\n * }\n * finally\n * {\n *   model.endUpdate();\n * } \n * (end)\n *\n * Constructor: mxCellAttributeChange\n * \n * Constructs a change of a attribute of the DOM node\n * stored as the value of the given <mxCell>.\n */\nfunction mxCellAttributeChange(cell, attribute, value)\n{\n\tthis.cell = cell;\n\tthis.attribute = attribute;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the attribute of the cell's user object by\n * using <mxCell.setAttribute>.\n */\nmxCellAttributeChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tvar tmp = this.cell.getAttribute(this.attribute);\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.cell.value.removeAttribute(this.attribute);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.cell.setAttribute(this.attribute, this.previous);\n\t\t}\n\t\t\n\t\tthis.previous = tmp;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCell\n *\n * Cells are the elements of the graph model. They represent the state\n * of the groups, vertices and edges in a graph.\n * \n * Custom attributes:\n * \n * For custom attributes we recommend using an XML node as the value of a cell.\n * The following code can be used to create a cell with an XML node as the\n * value:\n * \n * (code)\n * var doc = mxUtils.createXmlDocument();\n * var node = doc.createElement('MyNode')\n * node.setAttribute('label', 'MyLabel');\n * node.setAttribute('attribute1', 'value1');\n * graph.insertVertex(graph.getDefaultParent(), null, node, 40, 40, 80, 30);\n * (end)\n * \n * For the label to work, <mxGraph.convertValueToString> and\n * <mxGraph.cellLabelChanged> should be overridden as follows:\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     return cell.getAttribute('label', '')\n *   }\n * };\n * \n * var cellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     // Clones the value for correct undo/redo\n *     var elt = cell.value.cloneNode(true);\n *     elt.setAttribute('label', newValue);\n *     newValue = elt;\n *   }\n *   \n *   cellLabelChanged.apply(this, arguments);\n * };\n * (end)\n * \n * Callback: onInit\n *\n * Called from within the constructor.\n * \n * Constructor: mxCell\n *\n * Constructs a new cell to be used in a graph model.\n * This method invokes <onInit> upon completion.\n * \n * Parameters:\n * \n * value - Optional object that represents the cell value.\n * geometry - Optional <mxGeometry> that specifies the geometry.\n * style - Optional formatted string that defines the style.\n */\nfunction mxCell(value, geometry, style)\n{\n\tthis.value = value;\n\tthis.setGeometry(geometry);\n\tthis.setStyle(style);\n\t\n\tif (this.onInit != null)\n\t{\n\t\tthis.onInit();\n\t}\n};\n\n/**\n * Variable: id\n *\n * Holds the Id. Default is null.\n */\nmxCell.prototype.id = null;\n\n/**\n * Variable: value\n *\n * Holds the user object. Default is null.\n */\nmxCell.prototype.value = null;\n\n/**\n * Variable: geometry\n *\n * Holds the <mxGeometry>. Default is null.\n */\nmxCell.prototype.geometry = null;\n\n/**\n * Variable: style\n *\n * Holds the style as a string of the form [(stylename|key=value);]. Default is\n * null.\n */\nmxCell.prototype.style = null;\n\n/**\n * Variable: vertex\n *\n * Specifies whether the cell is a vertex. Default is false.\n */\nmxCell.prototype.vertex = false;\n\n/**\n * Variable: edge\n *\n * Specifies whether the cell is an edge. Default is false.\n */\nmxCell.prototype.edge = false;\n\n/**\n * Variable: connectable\n *\n * Specifies whether the cell is connectable. Default is true.\n */\nmxCell.prototype.connectable = true;\n\n/**\n * Variable: visible\n *\n * Specifies whether the cell is visible. Default is true.\n */\nmxCell.prototype.visible = true;\n\n/**\n * Variable: collapsed\n *\n * Specifies whether the cell is collapsed. Default is false.\n */\nmxCell.prototype.collapsed = false;\n\n/**\n * Variable: parent\n *\n * Reference to the parent cell.\n */\nmxCell.prototype.parent = null;\n\n/**\n * Variable: source\n *\n * Reference to the source terminal.\n */\nmxCell.prototype.source = null;\n\n/**\n * Variable: target\n *\n * Reference to the target terminal.\n */\nmxCell.prototype.target = null;\n\n/**\n * Variable: children\n *\n * Holds the child cells.\n */\nmxCell.prototype.children = null;\n\n/**\n * Variable: edges\n *\n * Holds the edges.\n */\nmxCell.prototype.edges = null;\n\n/**\n * Variable: mxTransient\n *\n * List of members that should not be cloned inside <clone>. This field is\n * passed to <mxUtils.clone> and is not made persistent in <mxCellCodec>.\n * This is not a convention for all classes, it is only used in this class\n * to mark transient fields since transient modifiers are not supported by\n * the language.\n */\nmxCell.prototype.mxTransient = ['id', 'value', 'parent', 'source',\n                                'target', 'children', 'edges'];\n\n/**\n * Function: getId\n *\n * Returns the Id of the cell as a string.\n */\nmxCell.prototype.getId = function()\n{\n\treturn this.id;\n};\n\t\t\n/**\n * Function: setId\n *\n * Sets the Id of the cell to the given string.\n */\nmxCell.prototype.setId = function(id)\n{\n\tthis.id = id;\n};\n\n/**\n * Function: getValue\n *\n * Returns the user object of the cell. The user\n * object is stored in <value>.\n */\nmxCell.prototype.getValue = function()\n{\n\treturn this.value;\n};\n\t\t\n/**\n * Function: setValue\n *\n * Sets the user object of the cell. The user object\n * is stored in <value>.\n */\nmxCell.prototype.setValue = function(value)\n{\n\tthis.value = value;\n};\n\n/**\n * Function: valueChanged\n *\n * Changes the user object after an in-place edit\n * and returns the previous value. This implementation\n * replaces the user object with the given value and\n * returns the old user object.\n */\nmxCell.prototype.valueChanged = function(newValue)\n{\n\tvar previous = this.getValue();\n\tthis.setValue(newValue);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getGeometry\n *\n * Returns the <mxGeometry> that describes the <geometry>.\n */\nmxCell.prototype.getGeometry = function()\n{\n\treturn this.geometry;\n};\n\n/**\n * Function: setGeometry\n *\n * Sets the <mxGeometry> to be used as the <geometry>.\n */\nmxCell.prototype.setGeometry = function(geometry)\n{\n\tthis.geometry = geometry;\n};\n\n/**\n * Function: getStyle\n *\n * Returns a string that describes the <style>.\n */\nmxCell.prototype.getStyle = function()\n{\n\treturn this.style;\n};\n\n/**\n * Function: setStyle\n *\n * Sets the string to be used as the <style>.\n */\nmxCell.prototype.setStyle = function(style)\n{\n\tthis.style = style;\n};\n\n/**\n * Function: isVertex\n *\n * Returns true if the cell is a vertex.\n */\nmxCell.prototype.isVertex = function()\n{\n\treturn this.vertex != 0;\n};\n\n/**\n * Function: setVertex\n *\n * Specifies if the cell is a vertex. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * vertex - Boolean that specifies if the cell is a vertex.\n */\nmxCell.prototype.setVertex = function(vertex)\n{\n\tthis.vertex = vertex;\n};\n\n/**\n * Function: isEdge\n *\n * Returns true if the cell is an edge.\n */\nmxCell.prototype.isEdge = function()\n{\n\treturn this.edge != 0;\n};\n\t\n/**\n * Function: setEdge\n * \n * Specifies if the cell is an edge. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * edge - Boolean that specifies if the cell is an edge.\n */\nmxCell.prototype.setEdge = function(edge)\n{\n\tthis.edge = edge;\n};\n\n/**\n * Function: isConnectable\n *\n * Returns true if the cell is connectable.\n */\nmxCell.prototype.isConnectable = function()\n{\n\treturn this.connectable != 0;\n};\n\n/**\n * Function: setConnectable\n *\n * Sets the connectable state.\n * \n * Parameters:\n * \n * connectable - Boolean that specifies the new connectable state.\n */\nmxCell.prototype.setConnectable = function(connectable)\n{\n\tthis.connectable = connectable;\n};\n\n/**\n * Function: isVisible\n *\n * Returns true if the cell is visibile.\n */\nmxCell.prototype.isVisible = function()\n{\n\treturn this.visible != 0;\n};\n\n/**\n * Function: setVisible\n *\n * Specifies if the cell is visible.\n * \n * Parameters:\n * \n * visible - Boolean that specifies the new visible state.\n */\nmxCell.prototype.setVisible = function(visible)\n{\n\tthis.visible = visible;\n};\n\n/**\n * Function: isCollapsed\n *\n * Returns true if the cell is collapsed.\n */\nmxCell.prototype.isCollapsed = function()\n{\n\treturn this.collapsed != 0;\n};\n\n/**\n * Function: setCollapsed\n *\n * Sets the collapsed state.\n * \n * Parameters:\n * \n * collapsed - Boolean that specifies the new collapsed state.\n */\nmxCell.prototype.setCollapsed = function(collapsed)\n{\n\tthis.collapsed = collapsed;\n};\n\n/**\n * Function: getParent\n *\n * Returns the cell's parent.\n */\nmxCell.prototype.getParent = function()\n{\n\treturn this.parent;\n};\n\n/**\n * Function: setParent\n *\n * Sets the parent cell.\n * \n * Parameters:\n * \n * parent - <mxCell> that represents the new parent.\n */\nmxCell.prototype.setParent = function(parent)\n{\n\tthis.parent = parent;\n};\n\n/**\n * Function: getTerminal\n *\n * Returns the source or target terminal.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source terminal should be\n * returned.\n */\nmxCell.prototype.getTerminal = function(source)\n{\n\treturn (source) ? this.source : this.target;\n};\n\n/**\n * Function: setTerminal\n *\n * Sets the source or target terminal and returns the new terminal.\n * \n * Parameters:\n * \n * terminal - <mxCell> that represents the new source or target terminal.\n * isSource - Boolean that specifies if the source or target terminal\n * should be set.\n */\nmxCell.prototype.setTerminal = function(terminal, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.source = terminal;\n\t}\n\telse\n\t{\n\t\tthis.target = terminal;\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of child cells.\n */\nmxCell.prototype.getChildCount = function()\n{\n\treturn (this.children == null) ? 0 : this.children.length;\n};\n\n/**\n * Function: getIndex\n *\n * Returns the index of the specified child in the child array.\n * \n * Parameters:\n * \n * child - Child whose index should be returned.\n */\nmxCell.prototype.getIndex = function(child)\n{\n\treturn mxUtils.indexOf(this.children, child);\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child at the specified index.\n * \n * Parameters:\n * \n * index - Integer that specifies the child to be returned.\n */\nmxCell.prototype.getChildAt = function(index)\n{\n\treturn (this.children == null) ? null : this.children[index];\n};\n\n/**\n * Function: insert\n *\n * Inserts the specified child into the child array at the specified index\n * and updates the parent reference of the child. If not childIndex is\n * specified then the child is appended to the child array. Returns the\n * inserted child.\n * \n * Parameters:\n * \n * child - <mxCell> to be inserted or appended to the child array.\n * index - Optional integer that specifies the index at which the child\n * should be inserted into the child array.\n */\nmxCell.prototype.insert = function(child, index)\n{\n\tif (child != null)\n\t{\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount();\n\t\t\t\n\t\t\tif (child.getParent() == this)\n\t\t\t{\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\n\t\tchild.removeFromParent();\n\t\tchild.setParent(this);\n\t\t\n\t\tif (this.children == null)\n\t\t{\n\t\t\tthis.children = [];\n\t\t\tthis.children.push(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.children.splice(index, 0, child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: remove\n *\n * Removes the child at the specified index from the child array and\n * returns the child that was removed. Will remove the parent reference of\n * the child.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the child to be\n * removed.\n */\nmxCell.prototype.remove = function(index)\n{\n\tvar child = null;\n\t\n\tif (this.children != null && index >= 0)\n\t{\n\t\tchild = this.getChildAt(index);\n\t\t\n\t\tif (child != null)\n\t\t{\n\t\t\tthis.children.splice(index, 1);\n\t\t\tchild.setParent(null);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: removeFromParent\n *\n * Removes the cell from its parent.\n */\nmxCell.prototype.removeFromParent = function()\n{\n\tif (this.parent != null)\n\t{\n\t\tvar index = this.parent.getIndex(this);\n\t\tthis.parent.remove(index);\n\t}\n};\n\n/**\n * Function: getEdgeCount\n *\n * Returns the number of edges in the edge array.\n */\nmxCell.prototype.getEdgeCount = function()\n{\n\treturn (this.edges == null) ? 0 : this.edges.length;\n};\n\n/**\n * Function: getEdgeIndex\n *\n * Returns the index of the specified edge in <edges>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose index in <edges> should be returned.\n */\nmxCell.prototype.getEdgeIndex = function(edge)\n{\n\treturn mxUtils.indexOf(this.edges, edge);\n};\n\n/**\n * Function: getEdgeAt\n *\n * Returns the edge at the specified index in <edges>.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the edge to be returned.\n */\nmxCell.prototype.getEdgeAt = function(index)\n{\n\treturn (this.edges == null) ? null : this.edges[index];\n};\n\n/**\n * Function: insertEdge\n *\n * Inserts the specified edge into the edge array and returns the edge.\n * Will update the respective terminal reference of the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.insertEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tedge.removeFromTerminal(isOutgoing);\n\t\tedge.setTerminal(this, isOutgoing);\n\t\t\n\t\tif (this.edges == null ||\n\t\t\tedge.getTerminal(!isOutgoing) != this ||\n\t\t\tmxUtils.indexOf(this.edges, edge) < 0)\n\t\t{\n\t\t\tif (this.edges == null)\n\t\t\t{\n\t\t\t\tthis.edges = [];\n\t\t\t}\n\t\t\t\n\t\t\tthis.edges.push(edge);\n\t\t}\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeEdge\n *\n * Removes the specified edge from the edge array and returns the edge.\n * Will remove the respective terminal reference from the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be removed from the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.removeEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tif (edge.getTerminal(!isOutgoing) != this &&\n\t\t\tthis.edges != null)\n\t\t{\n\t\t\tvar index = this.getEdgeIndex(edge);\n\t\t\t\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\tthis.edges.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge.setTerminal(null, isOutgoing);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeFromTerminal\n *\n * Removes the edge from its source or target terminal.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the edge should be removed from its\n * source or target terminal.\n */\nmxCell.prototype.removeFromTerminal = function(isSource)\n{\n\tvar terminal = this.getTerminal(isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.removeEdge(this, isSource);\n\t}\n};\n\n/**\n * Function: hasAttribute\n * \n * Returns true if the user object is an XML node that contains the given\n * attribute.\n * \n * Parameters:\n * \n * name - Name of the attribute.\n */\nmxCell.prototype.hasAttribute = function(name)\n{\n\tvar userObject = this.getValue();\n\t\n\treturn (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT && userObject.hasAttribute) ?\n\t\tuserObject.hasAttribute(name) : userObject.getAttribute(name) != null;\n};\n\n/**\n * Function: getAttribute\n *\n * Returns the specified attribute from the user object if it is an XML\n * node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be returned.\n * defaultValue - Optional default value to use if the attribute has no\n * value.\n */\nmxCell.prototype.getAttribute = function(name, defaultValue)\n{\n\tvar userObject = this.getValue();\n\t\n\tvar val = (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT) ?\n\t\tuserObject.getAttribute(name) : null;\n\t\t\n\treturn (val != null) ? val : defaultValue;\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the specified attribute on the user object if it is an XML node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be set.\n * value - New value of the attribute.\n */\nmxCell.prototype.setAttribute = function(name, value)\n{\n\tvar userObject = this.getValue();\n\t\n\tif (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tuserObject.setAttribute(name, value);\n\t}\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of the cell. Uses <cloneValue> to clone\n * the user object. All fields in <mxTransient> are ignored\n * during the cloning.\n */\nmxCell.prototype.clone = function()\n{\n\tvar clone = mxUtils.clone(this, this.mxTransient);\n\tclone.setValue(this.cloneValue());\n\t\n\treturn clone;\n};\n\n/**\n * Function: cloneValue\n *\n * Returns a clone of the cell's user object.\n */\nmxCell.prototype.cloneValue = function()\n{\n\tvar value = this.getValue();\n\t\n\tif (value != null)\n\t{\n\t\tif (typeof(value.clone) == 'function')\n\t\t{\n\t\t\tvalue = value.clone();\n\t\t}\n\t\telse if (!isNaN(value.nodeType))\n\t\t{\n\t\t\tvalue = value.cloneNode(true);\n\t\t}\n\t}\n\t\n\treturn value;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGeometry\n * \n * Extends <mxRectangle> to represent the geometry of a cell.\n * \n * For vertices, the geometry consists of the x- and y-location, and the width\n * and height. For edges, the geometry consists of the optional terminal- and\n * control points. The terminal points are only required if an edge is\n * unconnected, and are stored in the sourcePoint> and <targetPoint>\n * variables, respectively.\n * \n * Example:\n * \n * If an edge is unconnected, that is, it has no source or target terminal,\n * then a geometry with terminal points for a new edge can be defined as\n * follows.\n * \n * (code)\n * geometry.setTerminalPoint(new mxPoint(x1, y1), true);\n * geometry.points = [new mxPoint(x2, y2)];\n * geometry.setTerminalPoint(new mxPoint(x3, y3), false);\n * (end)\n * \n * Control points are used regardless of the connected state of an edge and may\n * be ignored or interpreted differently depending on the edge's <mxEdgeStyle>.\n * \n * To disable automatic reset of control points after a cell has been moved or\n * resized, the the <mxGraph.resizeEdgesOnMove> and\n * <mxGraph.resetEdgesOnResize> may be used.\n *\n * Edge Labels:\n * \n * Using the x- and y-coordinates of a cell's geometry, it is possible to\n * position the label on edges on a specific location on the actual edge shape\n * as it appears on the screen. The x-coordinate of an edge's geometry is used\n * to describe the distance from the center of the edge from -1 to 1 with 0\n * being the center of the edge and the default value. The y-coordinate of an\n * edge's geometry is used to describe the absolute, orthogonal distance in\n * pixels from that point. In addition, the <mxGeometry.offset> is used as an\n * absolute offset vector from the resulting point.\n * \n * This coordinate system is applied if <relative> is true, otherwise the\n * offset defines the absolute vector from the edge's center point to the\n * label and the values for <x> and <y> are ignored.\n * \n * The width and height parameter for edge geometries can be used to set the\n * label width and height (eg. for word wrapping).\n * \n * Ports:\n * \n * The term \"port\" refers to a relatively positioned, connectable child cell,\n * which is used to specify the connection between the parent and another cell\n * in the graph. Ports are typically modeled as vertices with relative\n * geometries.\n * \n * Offsets:\n * \n * The <offset> field is interpreted in 3 different ways, depending on the cell\n * and the geometry. For edges, the offset defines the absolute offset for the\n * edge label. For relative geometries, the offset defines the absolute offset\n * for the origin (top, left corner) of the vertex, otherwise the offset\n * defines the absolute offset for the label inside the vertex or group.\n * \n * Constructor: mxGeometry\n *\n * Constructs a new object to describe the size and location of a vertex or\n * the control points of an edge.\n */\nfunction mxGeometry(x, y, width, height)\n{\n\tmxRectangle.call(this, x, y, width, height);\n};\n\n/**\n * Extends mxRectangle.\n */\nmxGeometry.prototype = new mxRectangle();\nmxGeometry.prototype.constructor = mxGeometry;\n\n/**\n * Variable: TRANSLATE_CONTROL_POINTS\n * \n * Global switch to translate the points in translate. Default is true.\n */\nmxGeometry.prototype.TRANSLATE_CONTROL_POINTS = true;\n\n/**\n * Variable: alternateBounds\n *\n * Stores alternate values for x, y, width and height in a rectangle. See\n * <swap> to exchange the values. Default is null.\n */\nmxGeometry.prototype.alternateBounds = null;\n\n/**\n * Variable: sourcePoint\n *\n * Defines the source <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a source vertex. Otherwise it is\n * ignored. Default is  null.\n */\nmxGeometry.prototype.sourcePoint = null;\n\n/**\n * Variable: targetPoint\n *\n * Defines the target <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a target vertex. Otherwise it is\n * ignored. Default is null.\n */\nmxGeometry.prototype.targetPoint = null;\n\n/**\n * Variable: points\n *\n * Array of <mxPoints> which specifies the control points along the edge.\n * These points are the intermediate points on the edge, for the endpoints\n * use <targetPoint> and <sourcePoint> or set the terminals of the edge to\n * a non-null value. Default is null.\n */\nmxGeometry.prototype.points = null;\n\n/**\n * Variable: offset\n *\n * For edges, this holds the offset (in pixels) from the position defined\n * by <x> and <y> on the edge. For relative geometries (for vertices), this\n * defines the absolute offset from the point defined by the relative\n * coordinates. For absolute geometries (for vertices), this defines the\n * offset for the label. Default is null.\n */\nmxGeometry.prototype.offset = null;\n\n/**\n * Variable: relative\n *\n * Specifies if the coordinates in the geometry are to be interpreted as\n * relative coordinates. For edges, this is used to define the location of\n * the edge label relative to the edge as rendered on the display. For\n * vertices, this specifies the relative location inside the bounds of the\n * parent cell.\n * \n * If this is false, then the coordinates are relative to the origin of the\n * parent cell or, for edges, the edge label position is relative to the\n * center of the edge as rendered on screen.\n * \n * Default is false.\n */\nmxGeometry.prototype.relative = false;\n\n/**\n * Function: swap\n * \n * Swaps the x, y, width and height with the values stored in\n * <alternateBounds> and puts the previous values into <alternateBounds> as\n * a rectangle. This operation is carried-out in-place, that is, using the\n * existing geometry instance. If this operation is called during a graph\n * model transactional change, then the geometry should be cloned before\n * calling this method and setting the geometry of the cell using\n * <mxGraphModel.setGeometry>.\n */\nmxGeometry.prototype.swap = function()\n{\n\tif (this.alternateBounds != null)\n\t{\n\t\tvar old = new mxRectangle(\n\t\t\tthis.x, this.y, this.width, this.height);\n\n\t\tthis.x = this.alternateBounds.x;\n\t\tthis.y = this.alternateBounds.y;\n\t\tthis.width = this.alternateBounds.width;\n\t\tthis.height = this.alternateBounds.height;\n\n\t\tthis.alternateBounds = old;\n\t}\n};\n\n/**\n * Function: getTerminalPoint\n * \n * Returns the <mxPoint> representing the source or target point of this\n * edge. This is only used if the edge has no source or target vertex.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the source or target point\n * should be returned.\n */\nmxGeometry.prototype.getTerminalPoint = function(isSource)\n{\n\treturn (isSource) ? this.sourcePoint : this.targetPoint;\n};\n\n/**\n * Function: setTerminalPoint\n * \n * Sets the <sourcePoint> or <targetPoint> to the given <mxPoint> and\n * returns the new point.\n * \n * Parameters:\n * \n * point - Point to be used as the new source or target point.\n * isSource - Boolean that specifies if the source or target point\n * should be set.\n */\nmxGeometry.prototype.setTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.sourcePoint = point;\n\t}\n\telse\n\t{\n\t\tthis.targetPoint = point;\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the geometry by the given angle around the given center. That is,\n * <x> and <y> of the geometry, the <sourcePoint>, <targetPoint> and all\n * <points> are translated by the given amount. <x> and <y> are only\n * translated if <relative> is false.\n * \n * Parameters:\n * \n * angle - Number that specifies the rotation angle in degrees.\n * cx - <mxPoint> that specifies the center of the rotation.\n */\nmxGeometry.prototype.rotate = function(angle, cx)\n{\n\tvar rad = mxUtils.toRadians(angle);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\t\n\t// Rotates the geometry\n\tif (!this.relative)\n\t{\n\t\tvar ct = new mxPoint(this.getCenterX(), this.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\n\t\tthis.x = Math.round(pt.x - this.width / 2);\n\t\tthis.y = Math.round(pt.y - this.height / 2);\n\t}\n\n\t// Rotates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.sourcePoint, cos, sin, cx);\n\t\tthis.sourcePoint.x = Math.round(pt.x);\n\t\tthis.sourcePoint.y = Math.round(pt.y);\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.targetPoint, cos, sin, cx);\n\t\tthis.targetPoint.x = Math.round(pt.x);\n\t\tthis.targetPoint.y = Math.round(pt.y);\t\n\t}\n\t\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(this.points[i], cos, sin, cx);\n\t\t\t\tthis.points[i].x = Math.round(pt.x);\n\t\t\t\tthis.points[i].y = Math.round(pt.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: translate\n * \n * Translates the geometry by the specified amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are translated\n * by the given amount. <x> and <y> are only translated if <relative> is false.\n * If <TRANSLATE_CONTROL_POINTS> is false, then <points> are not modified by\n * this function.\n * \n * Parameters:\n * \n * dx - Number that specifies the x-coordinate of the translation.\n * dy - Number that specifies the y-coordinate of the translation.\n */\nmxGeometry.prototype.translate = function(dx, dy)\n{\n\tdx = parseFloat(dx);\n\tdy = parseFloat(dy);\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) + dx;\n\t\tthis.y = parseFloat(this.y) + dy;\n\t}\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) + dx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) + dy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) + dx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) + dy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.TRANSLATE_CONTROL_POINTS && this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) + dx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) + dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: scale\n * \n * Scales the geometry by the given amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are scaled\n * by the given amount. <x>, <y>, <width> and <height> are only scaled if\n * <relative> is false. If <fixedAspect> is true, then the smaller value\n * is used to scale the width and the height.\n * \n * Parameters:\n * \n * sx - Number that specifies the horizontal scale factor.\n * sy - Number that specifies the vertical scale factor.\n * fixedAspect - Optional boolean to keep the aspect ratio fixed.\n */\nmxGeometry.prototype.scale = function(sx, sy, fixedAspect)\n{\n\tsx = parseFloat(sx);\n\tsy = parseFloat(sy);\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) * sx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) * sy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) * sx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) * sy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) * sx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) * sy;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) * sx;\n\t\tthis.y = parseFloat(this.y) * sy;\n\n\t\tif (fixedAspect)\n\t\t{\n\t\t\tsy = sx = Math.min(sx, sy);\n\t\t}\n\t\t\n\t\tthis.width = parseFloat(this.width) * sx;\n\t\tthis.height = parseFloat(this.height) * sy;\n\t}\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this geometry.\n */\nmxGeometry.prototype.equals = function(obj)\n{\n\treturn mxRectangle.prototype.equals.apply(this, arguments) &&\n\t\tthis.relative == obj.relative &&\n\t\t((this.sourcePoint == null && obj.sourcePoint == null) || (this.sourcePoint != null && this.sourcePoint.equals(obj.sourcePoint))) &&\n\t\t((this.targetPoint == null && obj.targetPoint == null) || (this.targetPoint != null && this.targetPoint.equals(obj.targetPoint))) &&\n\t\t((this.points == null && obj.points == null) || (this.points != null && mxUtils.equalPoints(this.points, obj.points))) &&\n\t\t((this.alternateBounds == null && obj.alternateBounds == null) || (this.alternateBounds != null && this.alternateBounds.equals(obj.alternateBounds))) &&\n\t\t((this.offset == null && obj.offset == null) || (this.offset != null && this.offset.equals(obj.offset)));\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCellPath =\n{\n\n\t/**\n\t * Class: mxCellPath\n\t * \n\t * Implements a mechanism for temporary cell Ids.\n\t * \n\t * Variable: PATH_SEPARATOR\n\t * \n\t * Defines the separator between the path components. Default is \".\".\n\t */\n\tPATH_SEPARATOR: '.',\n\t\n\t/**\n\t * Function: create\n\t * \n\t * Creates the cell path for the given cell. The cell path is a\n\t * concatenation of the indices of all ancestors on the (finite) path to\n\t * the root, eg. \"0.0.0.1\".\n\t * \n\t * Parameters:\n\t * \n\t * cell - Cell whose path should be returned.\n\t */\n\tcreate: function(cell)\n\t{\n\t\tvar result = '';\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tvar parent = cell.getParent();\n\t\t\t\n\t\t\twhile (parent != null)\n\t\t\t{\n\t\t\t\tvar index = parent.getIndex(cell);\n\t\t\t\tresult = index + mxCellPath.PATH_SEPARATOR + result;\n\t\t\t\t\n\t\t\t\tcell = parent;\n\t\t\t\tparent = cell.getParent();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes trailing separator\n\t\tvar n = result.length;\n\t\t\n\t\tif (n > 1)\n\t\t{\n\t\t\tresult = result.substring(0, n - 1);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getParentPath\n\t * \n\t * Returns the path for the parent of the cell represented by the given\n\t * path. Returns null if the given path has no parent.\n\t * \n\t * Parameters:\n\t * \n\t * path - Path whose parent path should be returned.\n\t */\n\tgetParentPath: function(path)\n\t{\n\t\tif (path != null)\n\t\t{\n\t\t\tvar index = path.lastIndexOf(mxCellPath.PATH_SEPARATOR);\n\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\treturn path.substring(0, index);\n\t\t\t}\n\t\t\telse if (path.length > 0)\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: resolve\n\t * \n\t * Returns the cell for the specified cell path using the given root as the\n\t * root of the path.\n\t * \n\t * Parameters:\n\t * \n\t * root - Root cell of the path to be resolved.\n\t * path - String that defines the path.\n\t */\n\tresolve: function(root, path)\n\t{\n\t\tvar parent = root;\n\t\t\n\t\tif (path != null)\n\t\t{\n\t\t\tvar tokens = path.split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\n\t\t\tfor (var i=0; i<tokens.length; i++)\n\t\t\t{\n\t\t\t\tparent = parent.getChildAt(parseInt(tokens[i]));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn parent;\n\t},\n\t\n\t/**\n\t * Function: compare\n\t * \n\t * Compares the given cell paths and returns -1 if p1 is smaller, 0 if\n\t * p1 is equal and 1 if p1 is greater than p2.\n\t */\n\tcompare: function(p1, p2)\n\t{\n\t\tvar min = Math.min(p1.length, p2.length);\n\t\tvar comp = 0;\n\t\t\n\t\tfor (var i = 0; i < min; i++)\n\t\t{\n\t\t\tif (p1[i] != p2[i])\n\t\t\t{\n\t\t\t\tif (p1[i].length == 0 ||\n\t\t\t\t\tp2[i].length == 0)\n\t\t\t\t{\n\t\t\t\t\tcomp = (p1[i] == p2[i]) ? 0 : ((p1[i] > p2[i]) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar t1 = parseInt(p1[i]);\n\t\t\t\t\tvar t2 = parseInt(p2[i]);\n\t\t\t\t\t\n\t\t\t\t\tcomp = (t1 == t2) ? 0 : ((t1 > t2) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Compares path length if both paths are equal to this point\n\t\tif (comp == 0)\n\t\t{\n\t\t\tvar t1 = p1.length;\n\t\t\tvar t2 = p2.length;\n\t\t\t\n\t\t\tif (t1 != t2)\n\t\t\t{\n\t\t\t\tcomp = (t1 > t2) ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn comp;\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxPerimeter =\n{\n\t/**\n\t * Class: mxPerimeter\n\t * \n\t * Provides various perimeter functions to be used in a style\n\t * as the value of <mxConstants.STYLE_PERIMETER>. Perimeters for\n\t * rectangle, circle, rhombus and triangle are available.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t * (end)\n\t * \n\t * Or programmatically:\n\t * \n\t * (code)\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\t * (end)\n\t * \n\t * When adding new perimeter functions, it is recommended to use the \n\t * mxPerimeter-namespace as follows:\n\t * \n\t * (code)\n\t * mxPerimeter.CustomPerimeter = function (bounds, vertex, next, orthogonal)\n\t * {\n\t *   var x = 0; // Calculate x-coordinate\n\t *   var y = 0; // Calculate y-coordainte\n\t *   \n\t *   return new mxPoint(x, y);\n\t * }\n\t * (end)\n\t * \n\t * The new perimeter should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('customPerimeter', mxPerimeter.CustomPerimeter);\n\t * (end)\n\t * \n\t * The custom perimeter above can now be used in a specific vertex as follows:\n\t * \n\t * (code)\n\t * model.setStyle(vertex, 'perimeter=customPerimeter');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxPerimeter.CustomPerimeter for the value in\n\t * the cell style above.\n\t * \n\t * Or it can be used for all vertices in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultVertexStyle();\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.CustomPerimeter;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * The parameters are explained in <RectanglePerimeter>.\n\t * \n\t * Function: RectanglePerimeter\n\t * \n\t * Describes a rectangular perimeter for the given bounds.\n\t *\n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the absolute bounds of the\n\t * vertex.\n\t * vertex - <mxCellState> that represents the vertex.\n\t * next - <mxPoint> that represents the nearest neighbour point on the\n\t * given edge.\n\t * orthogonal - Boolean that specifies if the orthogonal projection onto\n\t * the perimeter should be returned. If this is false then the intersection\n\t * of the perimeter and the line between the next and the center point is\n\t * returned.\n\t */\n\tRectanglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\t\tvar alpha = Math.atan2(dy, dx);\n\t\tvar p = new mxPoint(0, 0);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI/2;\n\t\tvar beta = pi2 - alpha;\n\t\tvar t = Math.atan2(bounds.height, bounds.width);\n\t\t\n\t\tif (alpha < -pi + t || alpha > pi - t)\n\t\t{\n\t\t\t// Left edge\n\t\t\tp.x = bounds.x;\n\t\t\tp.y = cy - bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse if (alpha < -t)\n\t\t{\n\t\t\t// Top Edge\n\t\t\tp.y = bounds.y;\n\t\t\tp.x = cx - bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\telse if (alpha < t)\n\t\t{\n\t\t\t// Right Edge\n\t\t\tp.x = bounds.x + bounds.width;\n\t\t\tp.y = cy + bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Bottom Edge\n\t\t\tp.y = bounds.y + bounds.height;\n\t\t\tp.x = cx + bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (next.x >= bounds.x &&\n\t\t\t\tnext.x <= bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = next.x;\n\t\t\t}\n\t\t\telse if (next.y >= bounds.y &&\n\t\t\t\t\t   next.y <= bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = next.y;\n\t\t\t}\n\t\t\tif (next.x < bounds.x)\n\t\t\t{\n\t\t\t\tp.x = bounds.x;\n\t\t\t}\n\t\t\telse if (next.x > bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = bounds.x + bounds.width;\n\t\t\t}\n\t\t\tif (next.y < bounds.y)\n\t\t\t{\n\t\t\t\tp.y = bounds.y;\n\t\t\t}\n\t\t\telse if (next.y > bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = bounds.y + bounds.height;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: EllipsePerimeter\n\t * \n\t * Describes an elliptic perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tEllipsePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar a = bounds.width / 2;\n\t\tvar b = bounds.height / 2;\n\t\tvar cx = x + a;\n\t\tvar cy = y + b;\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\t\n\t\t// Calculates straight line equation through\n\t\t// point and ellipse center y = d * x + h\n\t\tvar dx = parseInt(px - cx);\n\t\tvar dy = parseInt(py - cy);\n\t\t\n\t\tif (dx == 0 && dy != 0)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy + b * dy / Math.abs(dy));\n\t\t}\n\t\telse if (dx == 0 && dy == 0)\n\t\t{\n\t\t\treturn new mxPoint(px, py);\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (py >= y && py <= y + bounds.height)\n\t\t\t{\n\t\t\t\tvar ty = py - cy;\n\t\t\t\tvar tx = Math.sqrt(a*a*(1-(ty*ty)/(b*b))) || 0;\n\t\t\t\t\n\t\t\t\tif (px <= x)\n\t\t\t\t{\n\t\t\t\t\ttx = -tx;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(cx+tx, py);\n\t\t\t}\n\t\t\t\n\t\t\tif (px >= x && px <= x + bounds.width)\n\t\t\t{\n\t\t\t\tvar tx = px - cx;\n\t\t\t\tvar ty = Math.sqrt(b*b*(1-(tx*tx)/(a*a))) || 0;\n\t\t\t\t\n\t\t\t\tif (py <= y)\n\t\t\t\t{\n\t\t\t\t\tty = -ty;\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(px, cy+ty);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Calculates intersection\n\t\tvar d = dy / dx;\n\t\tvar h = cy - d * cx;\n\t\tvar e = a * a * d * d + b * b;\n\t\tvar f = -2 * cx * e;\n\t\tvar g = a * a * d * d * cx * cx +\n\t\t\t\tb * b * cx * cx -\n\t\t\t\ta * a * b * b;\n\t\tvar det = Math.sqrt(f * f - 4 * e * g);\n\t\t\n\t\t// Two solutions (perimeter points)\n\t\tvar xout1 = (-f + det) / (2 * e);\n\t\tvar xout2 = (-f - det) / (2 * e);\n\t\tvar yout1 = d * xout1 + h;\n\t\tvar yout2 = d * xout2 + h;\n\t\tvar dist1 = Math.sqrt(Math.pow((xout1 - px), 2)\n\t\t\t\t\t+ Math.pow((yout1 - py), 2));\n\t\tvar dist2 = Math.sqrt(Math.pow((xout2 - px), 2)\n\t\t\t\t\t+ Math.pow((yout2 - py), 2));\n\t\t\t\t\t\n\t\t// Correct solution\n\t\tvar xout = 0;\n\t\tvar yout = 0;\n\t\t\n\t\tif (dist1 < dist2)\n\t\t{\n\t\t\txout = xout1;\n\t\t\tyout = yout1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\txout = xout2;\n\t\t\tyout = yout2;\n\t\t}\n\t\t\n\t\treturn new mxPoint(xout, yout);\n\t},\n\n\t/**\n\t * Function: RhombusPerimeter\n\t * \n\t * Describes a rhombus (aka diamond) perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tRhombusPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\n\t\t// Special case for intersecting the diamond's corners\n\t\tif (cx == px)\n\t\t{\n\t\t\tif (cy > py)\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y); // top\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y + h); // bottom\n\t\t\t}\n\t\t}\n\t\telse if (cy == py)\n\t\t{\n\t\t\tif (cx > px)\n\t\t\t{\n\t\t\t\treturn new mxPoint(x, cy); // left\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(x + w, cy); // right\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tx = cx;\n\t\tvar ty = cy;\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// In which quadrant will the intersection be?\n\t\t// set the slope and offset of the border line accordingly\n\t\tif (px < cx)\n\t\t{\n\t\t\tif (py < cy)\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x, cy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x, cy);\n\t\t\t}\n\t\t}\n\t\telse if (py < cy)\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x + w, cy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x + w, cy);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: TrianglePerimeter\n\t * \n\t * Describes a triangle perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tTrianglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar direction = (vertex != null) ?\n\t\t\tvertex.style[mxConstants.STYLE_DIRECTION] : null;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_SOUTH;\n\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\t\t\n\t\tvar start = new mxPoint(x, y);\n\t\tvar corner = new mxPoint(x + w, cy);\n\t\tvar end = new mxPoint(x, y + h);\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tstart = end;\n\t\t\tcorner = new mxPoint(cx, y);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tcorner = new mxPoint(cx, y + h);\n\t\t\tend = new mxPoint(x + w, y);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tstart = new mxPoint(x + w, y);\n\t\t\tcorner = new mxPoint(x, cy);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\n\t\tvar alpha = (vertical) ? Math.atan2(dx, dy) : Math.atan2(dy, dx);\n\t\tvar t = (vertical) ? Math.atan2(w, h) : Math.atan2(h, w);\n\t\t\n\t\tvar base = false;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tbase = alpha > -t && alpha < t;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbase = alpha < -Math.PI + t || alpha > Math.PI - t;\t\n\t\t}\n\n\t\tvar result = null;\t\t\t\n\n\t\tif (base)\n\t\t{\n\t\t\tif (orthogonal && ((vertical && next.x >= start.x && next.x <= end.x) ||\n\t\t\t\t(!vertical && next.y >= start.y && next.y <= end.y)))\n\t\t\t{\n\t\t\t\tif (vertical)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(next.x, start.y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(start.x, next.y);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 + h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty + h);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 - h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w, y + h / 2 +\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x, y + h / 2 -\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (orthogonal)\n\t\t\t{\n\t\t\t\tvar pt = new mxPoint(cx, cy);\n\t\t\n\t\t\t\tif (next.y >= y && next.y <= y + h)\n\t\t\t\t{\n\t\t\t\t\tpt.x = (vertical) ? cx : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_WEST) ?\n\t\t\t\t\t\t\tx + w : x);\n\t\t\t\t\tpt.y = next.y;\n\t\t\t\t}\n\t\t\t\telse if (next.x >= x && next.x <= x + w)\n\t\t\t\t{\n\t\t\t\t\tpt.x = next.x;\n\t\t\t\t\tpt.y = (!vertical) ? cy : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_NORTH) ?\n\t\t\t\t\t\t\ty + h : y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Compute angle\n\t\t\t\tdx = next.x - pt.x;\n\t\t\t\tdy = next.y - pt.y;\n\t\t\t\t\n\t\t\t\tcx = pt.x;\n\t\t\t\tcy = pt.y;\n\t\t\t}\n\n\t\t\tif ((vertical && next.x <= x + w / 2) ||\n\t\t\t\t(!vertical && next.y <= y + h / 2))\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tstart.x, start.y, corner.x, corner.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tcorner.x, corner.y, end.x, end.y);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\tresult = new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: HexagonPerimeter\n\t * \n\t * Describes a hexagon perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tHexagonPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\tvar dx = px - cx;\n\t\tvar dy = py - cy;\n\t\tvar alpha = -Math.atan2(dy, dx);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI / 2;\n\n\t\tvar result = new mxPoint(cx, cy);\n\n\t\tvar direction = (vertex != null) ? mxUtils.getValue(\n\t\t\t\tvertex.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_EAST) : mxConstants.DIRECTION_EAST;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH\n\t\t\t\t|| direction == mxConstants.DIRECTION_SOUTH;\n\t\tvar a = new mxPoint();\n\t\tvar b = new mxPoint();\n\n\t\t//Only consider corrects quadrants for the orthogonal case.\n\t\tif ((px < x) && (py < y) || (px < x) && (py > y + h)\n\t\t\t\t|| (px > x + w) && (py < y) || (px > x + w) && (py > y + h))\n\t\t{\n\t\t\torthogonal = false;\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (px == cx)\n\t\t\t\t{\n\t\t\t\t\tif (py <= y)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py >= y + h)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px < x)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (py == y)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t}\n\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (py == cy)\n\t\t\t\t{\n\t\t\t\t\tif (px <= x)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px >= x + w)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py < y)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (px == x)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, cy);\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, cy);\n\t\t\t\t}\n\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tx = cx;\n\t\t\tvar ty = cy;\n\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t\t\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tty = y + h;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tty = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t\t\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\ttx = x + w;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttx = x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 4, w / 2);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == pi2)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi2))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\n\t\t\t\tif ((alpha < beta) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha > pi2) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (((alpha > (pi - beta)) && (alpha <= pi))\n\t\t\t\t\t\t|| ((alpha < (-pi + beta)) && (alpha >= -pi)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > -pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -pi2) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 2, w / 4);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha == pi) || (alpha == -pi))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == 0)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y + h);\n\t\t\t\t}\n\n\t\t\t\tif ((alpha > 0) && (alpha < beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > (pi - beta)) && (alpha < pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < 0) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < (-pi + beta)) && (alpha > -pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2017, draw.io AG\n */\n/**\n * Class: mxPrintPreview\n * \n * Implements printing of a diagram across multiple pages. The following opens\n * a print preview for an existing graph:\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.open();\n * (end)\n * \n * Use <mxUtils.getScaleForPageCount> as follows in order to print the graph\n * across a given number of pages:\n * \n * (code)\n * var pageCount = mxUtils.prompt('Enter page count', '1');\n * \n * if (pageCount != null)\n * {\n *   var scale = mxUtils.getScaleForPageCount(pageCount, graph);\n *   var preview = new mxPrintPreview(graph, scale);\n *   preview.open();\n * }\n * (end)\n * \n * Additional pages:\n * \n * To add additional pages before and after the output, <getCoverPages> and\n * <getAppendices> can be used, respectively.\n * \n * (code)\n * var preview = new mxPrintPreview(graph, 1);\n * \n * preview.getCoverPages = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Cover Page</p>'\n *   }))];\n * };\n * \n * preview.getAppendices = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Appendix</p>'\n *   }))];\n * };\n * \n * preview.open();\n * (end)\n * \n * CSS:\n * \n * The CSS from the original page is not carried over to the print preview.\n * To add CSS to the page, use the css argument in the <open> function or\n * override <writeHead> to add the respective link tags as follows:\n * \n * (code)\n * var writeHead = preview.writeHead;\n * preview.writeHead = function(doc, css)\n * {\n *   writeHead.apply(this, arguments);\n *   doc.writeln('<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">');\n * };\n * (end)\n * \n * Padding:\n * \n * To add a padding to the page in the preview (but not the print output), use\n * the following code:\n * \n * (code)\n * preview.writeHead = function(doc)\n * {\n *   writeHead.apply(this, arguments);\n *   \n *   doc.writeln('<style type=\"text/css\">');\n *   doc.writeln('@media screen {');\n *   doc.writeln('  body > div { padding-top:30px;padding-left:40px;box-sizing:content-box; }');\n *   doc.writeln('}');\n *   doc.writeln('</style>');\n * };\n * (end)\n * \n * Headers:\n * \n * Apart from setting the title argument in the mxPrintPreview constructor you\n * can override <renderPage> as follows to add a header to any page:\n * \n * (code)\n * var oldRenderPage = mxPrintPreview.prototype.renderPage;\n * mxPrintPreview.prototype.renderPage = function(w, h, x, y, content, pageNumber)\n * {\n *   var div = oldRenderPage.apply(this, arguments);\n *   \n *   var header = document.createElement('div');\n *   header.style.position = 'absolute';\n *   header.style.top = '0px';\n *   header.style.width = '100%';\n *   header.style.textAlign = 'right';\n *   mxUtils.write(header, 'Your header here');\n *   div.firstChild.appendChild(header);\n *   \n *   return div;\n * };\n * (end)\n * \n * The pageNumber argument contains the number of the current page, starting at\n * 1. To display a header on the first page only, check pageNumber and add a\n * vertical offset in the constructor call for the height of the header.\n * \n * Page Format:\n * \n * For landscape printing, use <mxConstants.PAGE_FORMAT_A4_LANDSCAPE> as\n * the pageFormat in <mxUtils.getScaleForPageCount> and <mxPrintPreview>.\n * Keep in mind that one can not set the defaults for the print dialog\n * of the operating system from JavaScript so the user must manually choose\n * a page format that matches this setting.\n * \n * You can try passing the following CSS directive to <open> to set the\n * page format in the print dialog to landscape. However, this CSS\n * directive seems to be ignored in most major browsers, including IE.\n * \n * (code)\n * @page {\n *   size: landscape;\n * }\n * (end)\n * \n * Note that the print preview behaves differently in IE when used from the\n * filesystem or via HTTP so printing should always be tested via HTTP.\n * \n * If you are using a DOCTYPE in the source page you can override <getDoctype>\n * and provide the same DOCTYPE for the print preview if required. Here is\n * an example for IE8 standards mode.\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.getDoctype = function()\n * {\n *   return '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=5,IE=8\" ><![endif]-->';\n * };\n * preview.open();\n * (end)\n * \n * Constructor: mxPrintPreview\n *\n * Constructs a new print preview for the given parameters.\n * \n * Parameters:\n * \n * graph - <mxGraph> to be previewed.\n * scale - Optional scale of the output. Default is 1 / <mxGraph.pageScale>.\n * pageFormat - <mxRectangle> that specifies the page format (in pixels).\n * border - Border in pixels along each side of every page. Note that the\n * actual print function in the browser will add another border for\n * printing.\n * This should match the page format of the printer. Default uses the\n * <mxGraph.pageFormat> of the given graph.\n * x0 - Optional left offset of the output. Default is 0.\n * y0 - Optional top offset of the output. Default is 0.\n * borderColor - Optional color of the page border. Default is no border.\n * Note that a border is sometimes useful to highlight the printed page\n * border in the print preview of the browser.\n * title - Optional string that is used for the window title. Default\n * is 'Printer-friendly version'.\n * pageSelector - Optional boolean that specifies if the page selector\n * should appear in the window with the print preview. Default is true.\n */\nfunction mxPrintPreview(graph, scale, pageFormat, border, x0, y0, borderColor, title, pageSelector)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.border = (border != null) ? border : 0;\n\tthis.pageFormat = mxRectangle.fromRectangle((pageFormat != null) ? pageFormat : graph.pageFormat);\n\tthis.title = (title != null) ? title : 'Printer-friendly version';\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.borderColor = borderColor;\n\tthis.pageSelector = (pageSelector != null) ? pageSelector : true;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> that should be previewed.\n */\nmxPrintPreview.prototype.graph = null;\n\n/**\n * Variable: pageFormat\n *\n * Holds the <mxRectangle> that defines the page format.\n */\nmxPrintPreview.prototype.pageFormat = null;\n\n/**\n * Variable: scale\n * \n * Holds the scale of the print preview.\n */\nmxPrintPreview.prototype.scale = null;\n\n/**\n * Variable: border\n * \n * The border inset around each side of every page in the preview. This is set\n * to 0 if autoOrigin is false.\n */\nmxPrintPreview.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * The margin at the top of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginTop = 0;\n\n/**\n * Variable: marginBottom\n * \n * The margin at the bottom of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginBottom = 0;\n\n/**\n * Variable: x0\n * \n * Holds the horizontal offset of the output.\n */\nmxPrintPreview.prototype.x0 = 0;\n\n/**\n * Variable: y0\n *\n * Holds the vertical offset of the output.\n */\nmxPrintPreview.prototype.y0 = 0;\n\n/**\n * Variable: autoOrigin\n * \n * Specifies if the origin should be automatically computed based on the top,\n * left corner of the actual diagram contents. The required offset will be added\n * to <x0> and <y0> in <open>. Default is true.\n */\nmxPrintPreview.prototype.autoOrigin = true;\n\n/**\n * Variable: printOverlays\n * \n * Specifies if overlays should be printed. Default is false.\n */\nmxPrintPreview.prototype.printOverlays = false;\n\n/**\n * Variable: printControls\n * \n * Specifies if controls (such as folding icons) should be printed. Default is\n * false.\n */\nmxPrintPreview.prototype.printControls = false;\n\n/**\n * Variable: printBackgroundImage\n * \n * Specifies if the background image should be printed. Default is false.\n */\nmxPrintPreview.prototype.printBackgroundImage = false;\n\n/**\n * Variable: backgroundColor\n * \n * Holds the color value for the page background color. Default is #ffffff.\n */\nmxPrintPreview.prototype.backgroundColor = '#ffffff';\n\n/**\n * Variable: borderColor\n * \n * Holds the color value for the page border.\n */\nmxPrintPreview.prototype.borderColor = null;\n\n/**\n * Variable: title\n * \n * Holds the title of the preview window.\n */\nmxPrintPreview.prototype.title = null;\n\n/**\n * Variable: pageSelector\n * \n * Boolean that specifies if the page selector should be\n * displayed. Default is true.\n */\nmxPrintPreview.prototype.pageSelector = null;\n\n/**\n * Variable: wnd\n * \n * Reference to the preview window.\n */\nmxPrintPreview.prototype.wnd = null;\n\n/**\n * Variable: targetWindow\n * \n * Assign any window here to redirect the rendering in <open>.\n */\nmxPrintPreview.prototype.targetWindow = null;\n\n/**\n * Variable: pageCount\n * \n * Holds the actual number of pages in the preview.\n */\nmxPrintPreview.prototype.pageCount = 0;\n\n/**\n * Variable: clipping\n * \n * Specifies is clipping should be used to avoid creating too many cell states\n * in large diagrams. The bounding box of the cells in the original diagram is\n * used if this is enabled. Default is true.\n */\nmxPrintPreview.prototype.clipping = true;\n\n/**\n * Function: getWindow\n * \n * Returns <wnd>.\n */\nmxPrintPreview.prototype.getWindow = function()\n{\n\treturn this.wnd;\n};\n\n/**\n * Function: getDocType\n * \n * Returns the string that should go before the HTML tag in the print preview\n * page. This implementation returns an X-UA meta tag for IE5 in quirks mode,\n * IE8 in IE8 standards mode and edge in IE9 standards mode.\n */\nmxPrintPreview.prototype.getDoctype = function()\n{\n\tvar dt = '';\n\t\n\tif (document.documentMode == 5)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=5\">';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\">';\n\t}\n\telse if (document.documentMode > 8)\n\t{\n\t\t// Comment needed to make standards doctype apply in IE\n\t\tdt = '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><![endif]-->';\n\t}\n\t\n\treturn dt;\n};\n\n/**\n * Function: appendGraph\n * \n * Adds the given graph to the existing print preview.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.appendGraph = function(graph, scale, x0, y0, forcePageBreaks, keepOpen)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.x0 = x0;\n\tthis.y0 = y0;\n\tthis.open(null, null, forcePageBreaks, keepOpen);\n};\n\n/**\n * Function: open\n * \n * Shows the print preview window. The window is created here if it does\n * not exist.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.open = function(css, targetWindow, forcePageBreaks, keepOpen)\n{\n\t// Closing the window while the page is being rendered may cause an\n\t// exception in IE. This and any other exceptions are simply ignored.\n\tvar previousInitializeOverlay = this.graph.cellRenderer.initializeOverlay;\n\tvar div = null;\n\t\n\ttry\n\t{\n\t\t// Temporarily overrides the method to redirect rendering of overlays\n\t\t// to the draw pane so that they are visible in the printout\n\t\tif (this.printOverlays)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initializeOverlay = function(state, overlay)\n\t\t\t{\n\t\t\t\toverlay.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (this.printControls)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initControl = function(state, control, handleEvents, clickHandler)\n\t\t\t{\n\t\t\t\tcontrol.dialect = state.view.graph.dialect;\n\t\t\t\tcontrol.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tthis.wnd = (targetWindow != null) ? targetWindow : this.wnd;\n\t\tvar isNewWindow = false;\n\t\t\n\t\tif (this.wnd == null)\n\t\t{\n\t\t\tisNewWindow = true;\n\t\t\tthis.wnd = window.open();\n\t\t}\n\t\t\n\t\tvar doc = this.wnd.document;\n\t\t\n\t\tif (isNewWindow)\n\t\t{\n\t\t\tvar dt = this.getDoctype();\n\t\t\t\n\t\t\tif (dt != null && dt.length > 0)\n\t\t\t{\n\t\t\t\tdoc.writeln(dt);\n\t\t\t}\n\t\t\t\n\t\t\tif (mxClient.IS_VML)\n\t\t\t{\n\t\t\t\tdoc.writeln('<html xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (document.compatMode === 'CSS1Compat')\n\t\t\t\t{\n\t\t\t\t\tdoc.writeln('<!DOCTYPE html>');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdoc.writeln('<html>');\n\t\t\t}\n\t\t\t\n\t\t\tdoc.writeln('<head>');\n\t\t\tthis.writeHead(doc, css);\n\t\t\tdoc.writeln('</head>');\n\t\t\tdoc.writeln('<body class=\"mxPage\">');\n\t\t}\n\n\t\t// Computes the horizontal and vertical page count\n\t\tvar bounds = this.graph.getGraphBounds().clone();\n\t\tvar currentScale = this.graph.getView().getScale();\n\t\tvar sc = currentScale / this.scale;\n\t\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\t\t// Uses the absolute origin with no offset for all printing\n\t\tif (!this.autoOrigin)\n\t\t{\n\t\t\tthis.x0 -= tr.x * this.scale;\n\t\t\tthis.y0 -= tr.y * this.scale;\n\t\t\tbounds.width += bounds.x;\n\t\t\tbounds.height += bounds.y;\n\t\t\tbounds.x = 0;\n\t\t\tbounds.y = 0;\n\t\t\tthis.border = 0;\n\t\t}\n\t\t\n\t\t// Store the available page area\n\t\tvar availableWidth = this.pageFormat.width - (this.border * 2);\n\t\tvar availableHeight = this.pageFormat.height - (this.border * 2);\n\t\n\t\t// Adds margins to page format\n\t\tthis.pageFormat.height += this.marginTop + this.marginBottom;\n\n\t\t// Compute the unscaled, untranslated bounds to find\n\t\t// the number of vertical and horizontal pages\n\t\tbounds.width /= sc;\n\t\tbounds.height /= sc;\n\n\t\tvar hpages = Math.max(1, Math.ceil((bounds.width + this.x0) / availableWidth));\n\t\tvar vpages = Math.max(1, Math.ceil((bounds.height + this.y0) / availableHeight));\n\t\tthis.pageCount = hpages * vpages;\n\t\t\n\t\tvar writePageSelector = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.pageSelector && (vpages > 1 || hpages > 1))\n\t\t\t{\n\t\t\t\tvar table = this.createPageSelector(vpages, hpages);\n\t\t\t\tdoc.body.appendChild(table);\n\t\t\t\t\n\t\t\t\t// Implements position: fixed in IE quirks mode\n\t\t\t\tif (mxClient.IS_IE && doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7)\n\t\t\t\t{\n\t\t\t\t\ttable.style.position = 'absolute';\n\t\t\t\t\t\n\t\t\t\t\tvar update = function()\n\t\t\t\t\t{\n\t\t\t\t\t\ttable.style.top = ((doc.body.scrollTop || doc.documentElement.scrollTop) + 10) + 'px';\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'scroll', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'resize', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar addPage = mxUtils.bind(this, function(div, addBreak)\n\t\t{\n\t\t\t// Border of the DIV (aka page) inside the document\n\t\t\tif (this.borderColor != null)\n\t\t\t{\n\t\t\t\tdiv.style.borderColor = this.borderColor;\n\t\t\t\tdiv.style.borderStyle = 'solid';\n\t\t\t\tdiv.style.borderWidth = '1px';\n\t\t\t}\n\t\t\t\n\t\t\t// Needs to be assigned directly because IE doesn't support\n\t\t\t// child selectors, eg. body > div { background: white; }\n\t\t\tdiv.style.background = this.backgroundColor;\n\t\t\t\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tdiv.style.pageBreakAfter = 'always';\n\t\t\t}\n\n\t\t\t// NOTE: We are dealing with cross-window DOM here, which\n\t\t\t// is a problem in IE, so we copy the HTML markup instead.\n\t\t\t// The underlying problem is that the graph display markup\n\t\t\t// creation (in mxShape, mxGraphView) is hardwired to using\n\t\t\t// document.createElement and hence we must use this document\n\t\t\t// to create the complete page and then copy it over to the\n\t\t\t// new window.document. This can be fixed later by using the\n\t\t\t// ownerDocument of the container in mxShape and mxGraphView.\n\t\t\tif (isNewWindow && (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE))\n\t\t\t{\n\t\t\t\t// For some obscure reason, removing the DIV from the\n\t\t\t\t// parent before fetching its outerHTML has missing\n\t\t\t\t// fillcolor properties and fill children, so the div\n\t\t\t\t// must be removed afterwards to keep the fillcolors.\n\t\t\t\tdoc.writeln(div.outerHTML);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse if (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE)\n\t\t\t{\n\t\t\t\tvar clone = doc.createElement('div');\n\t\t\t\tclone.innerHTML = div.outerHTML;\n\t\t\t\tclone = clone.getElementsByTagName('div')[0];\n\t\t\t\tdoc.body.appendChild(clone);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tthis.addPageBreak(doc);\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar cov = this.getCoverPages(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\tif (cov != null)\n\t\t{\n\t\t\tfor (var i = 0; i < cov.length; i++)\n\t\t\t{\n\t\t\t\taddPage(cov[i], true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar apx = this.getAppendices(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\t// Appends each page to the page output for printing, making\n\t\t// sure there will be a page break after each page (ie. div)\n\t\tfor (var i = 0; i < vpages; i++)\n\t\t{\n\t\t\tvar dy = i * availableHeight / this.scale - this.y0 / this.scale +\n\t\t\t\t\t(bounds.y - tr.y * currentScale) / currentScale;\n\t\t\t\n\t\t\tfor (var j = 0; j < hpages; j++)\n\t\t\t{\n\t\t\t\tif (this.wnd == null)\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = j * availableWidth / this.scale - this.x0 / this.scale +\n\t\t\t\t\t\t(bounds.x - tr.x * currentScale) / currentScale;\n\t\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\t\tvar clip = new mxRectangle(dx, dy, availableWidth, availableHeight);\n\t\t\t\tdiv = this.renderPage(this.pageFormat.width, this.pageFormat.height, 0, 0, mxUtils.bind(this, function(div)\n\t\t\t\t{\n\t\t\t\t\tthis.addGraphFragment(-dx, -dy, this.scale, pageNum, div, clip);\n\t\t\t\t\t\n\t\t\t\t\tif (this.printBackgroundImage)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.insertBackgroundImage(div, -dx, -dy);\n\t\t\t\t\t}\n\t\t\t\t}), pageNum);\n\n\t\t\t\t// Gives the page a unique ID for later accessing the page\n\t\t\t\tdiv.setAttribute('id', 'mxPage-'+pageNum);\n\n\t\t\t\taddPage(div, apx != null || i < vpages - 1 || j < hpages - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (apx != null)\n\t\t{\n\t\t\tfor (var i = 0; i < apx.length; i++)\n\t\t\t{\n\t\t\t\taddPage(apx[i], i < apx.length - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (isNewWindow && !keepOpen)\n\t\t{\n\t\t\tthis.closeDocument();\n\t\t\twritePageSelector();\n\t\t}\n\t\t\n\t\tthis.wnd.focus();\n\t}\n\tcatch (e)\n\t{\n\t\t// Removes the DIV from the document in case of an error\n\t\tif (div != null && div.parentNode != null)\n\t\t{\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.cellRenderer.initializeOverlay = previousInitializeOverlay;\n\t}\n\n\treturn this.wnd;\n};\n\n/**\n * Function: addPageBreak\n * \n * Adds a page break to the given document.\n */\nmxPrintPreview.prototype.addPageBreak = function(doc)\n{\n\tvar hr = doc.createElement('hr');\n\thr.className = 'mxPageBreak';\n\tdoc.body.appendChild(hr);\n};\n\n/**\n * Function: closeDocument\n * \n * Writes the closing tags for body and page after calling <writePostfix>.\n */\nmxPrintPreview.prototype.closeDocument = function()\n{\n\ttry\n\t{\n\t\tif (this.wnd != null && this.wnd.document != null)\n\t\t{\n\t\t\tvar doc = this.wnd.document;\n\t\t\t\n\t\t\tthis.writePostfix(doc);\n\t\t\tdoc.writeln('</body>');\n\t\t\tdoc.writeln('</html>');\n\t\t\tdoc.close();\n\t\t\t\n\t\t\t// Removes all event handlers in the print output\n\t\t\tmxEvent.release(doc.body);\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore any errors resulting from wnd no longer being available\n\t}\n};\n\n/**\n * Function: writeHead\n * \n * Writes the HEAD section into the given document, without the opening\n * and closing HEAD tags.\n */\nmxPrintPreview.prototype.writeHead = function(doc, css)\n{\n\tif (this.title != null)\n\t{\n\t\tdoc.writeln('<title>' + this.title + '</title>');\n\t}\n\t\n\t// Adds required namespaces\n\tif (mxClient.IS_VML)\n\t{\n\t\tdoc.writeln('<style type=\"text/css\">v\\\\:*{behavior:url(#default#VML)}o\\\\:*{behavior:url(#default#VML)}</style>');\n\t}\n\n\t// Adds all required stylesheets\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css', doc);\n\n\t// Removes horizontal rules and page selector from print output\n\tdoc.writeln('<style type=\"text/css\">');\n\tdoc.writeln('@media print {');\n\tdoc.writeln('  * { -webkit-print-color-adjust: exact; }');\n\tdoc.writeln('  table.mxPageSelector { display: none; }');\n\tdoc.writeln('  hr.mxPageBreak { display: none; }');\n\tdoc.writeln('}');\n\tdoc.writeln('@media screen {');\n\t\n\t// NOTE: position: fixed is not supported in IE, so the page selector\n\t// position (absolute) needs to be updated in IE (see below)\n\tdoc.writeln('  table.mxPageSelector { position: fixed; right: 10px; top: 10px;' +\n\t\t\t'font-family: Arial; font-size:10pt; border: solid 1px darkgray;' +\n\t\t\t'background: white; border-collapse:collapse; }');\n\tdoc.writeln('  table.mxPageSelector td { border: solid 1px gray; padding:4px; }');\n\tdoc.writeln('  body.mxPage { background: gray; }');\n\tdoc.writeln('}');\n\t\n\tif (css != null)\n\t{\n\t\tdoc.writeln(css);\n\t}\n\t\n\tdoc.writeln('</style>');\n};\n\n/**\n * Function: writePostfix\n * \n * Called before closing the body of the page. This implementation is empty.\n */\nmxPrintPreview.prototype.writePostfix = function(doc)\n{\n\t// empty\n};\n\n/**\n * Function: createPageSelector\n * \n * Creates the page selector table.\n */\nmxPrintPreview.prototype.createPageSelector = function(vpages, hpages)\n{\n\tvar doc = this.wnd.document;\n\tvar table = doc.createElement('table');\n\ttable.className = 'mxPageSelector';\n\ttable.setAttribute('border', '0');\n\n\tvar tbody = doc.createElement('tbody');\n\t\n\tfor (var i = 0; i < vpages; i++)\n\t{\n\t\tvar row = doc.createElement('tr');\n\t\t\n\t\tfor (var j = 0; j < hpages; j++)\n\t\t{\n\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\tvar cell = doc.createElement('td');\n\t\t\tvar a = doc.createElement('a');\n\t\t\ta.setAttribute('href', '#mxPage-' + pageNum);\n\n\t\t\t// Workaround for FF where the anchor is appended to the URL of the original document\n\t\t\tif (mxClient.IS_NS && !mxClient.IS_SF && !mxClient.IS_GC)\n\t\t\t{\n\t\t\t\tvar js = 'var page = document.getElementById(\\'mxPage-' + pageNum + '\\');page.scrollIntoView(true);event.preventDefault();';\n\t\t\t\ta.setAttribute('onclick', js);\n\t\t\t}\n\t\t\t\n\t\t\tmxUtils.write(a, pageNum, doc);\n\t\t\tcell.appendChild(a);\n\t\t\trow.appendChild(cell);\n\t\t}\n\t\t\n\t\ttbody.appendChild(row);\n\t}\n\t\n\ttable.appendChild(tbody);\n\t\n\treturn table;\n};\n\n/**\n * Function: renderPage\n * \n * Creates a DIV that prints a single page of the given\n * graph using the given scale and returns the DIV that\n * represents the page.\n * \n * Parameters:\n * \n * w - Width of the page in pixels.\n * h - Height of the page in pixels.\n * dx - Optional horizontal page offset in pixels (used internally).\n * dy - Optional vertical page offset in pixels (used internally).\n * content - Callback that adds the HTML content to the inner div of a page.\n * Takes the inner div as the argument.\n * pageNumber - Integer representing the page number.\n */\nmxPrintPreview.prototype.renderPage = function(w, h, dx, dy, content, pageNumber)\n{\n\tvar doc = this.wnd.document;\n\tvar div = document.createElement('div');\n\tvar arg = null;\n\n\ttry\n\t{\n\t\t// Workaround for ignored clipping in IE 9 standards\n\t\t// when printing with page breaks and HTML labels.\n\t\tif (dx != 0 || dy != 0)\n\t\t{\n\t\t\tdiv.style.position = 'relative';\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.position = 'relative';\n\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\t\t\t\n\t\t\tvar viewport = document.createElement('div');\n\t\t\tviewport.style.position = 'relative';\n\t\t\tviewport.style.marginLeft = dx + 'px';\n\t\t\tviewport.style.marginTop = dy + 'px';\n\n\t\t\t// FIXME: IE8 standards output problems\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t\tviewport.style.position = 'absolute';\n\t\t\t}\n\t\t\n\t\t\tif (doc.documentMode == 10)\n\t\t\t{\n\t\t\t\tviewport.style.width = '100%';\n\t\t\t\tviewport.style.height = '100%';\n\t\t\t}\n\t\t\t\n\t\t\tinnerDiv.appendChild(viewport);\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = viewport;\n\t\t}\n\t\t// FIXME: IE10/11 too many pages\n\t\telse\n\t\t{\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.overflow = 'hidden';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\t// IE8 uses above branch currently\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tdiv.style.position = 'relative';\n\t\t\t}\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\n\t\t\tif (mxClient.IS_IE && (doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7))\n\t\t\t{\n\t\t\t\tinnerDiv.style.marginTop = this.border + 'px';\n\t\t\t\tinnerDiv.style.marginLeft = this.border + 'px';\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\t}\n\t\n\t\t\tif (this.graph.dialect == mxConstants.DIALECT_VML)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t}\n\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = innerDiv;\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\tdiv.parentNode.removeChild(div);\n\t\tdiv = null;\n\t\t\n\t\tthrow e;\n\t}\n\n\tcontent(arg);\n\t \n\treturn div;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root cell for painting the graph.\n */\nmxPrintPreview.prototype.getRoot = function()\n{\n\tvar root = this.graph.view.currentRoot;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.graph.getModel().getRoot();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: addGraphFragment\n * \n * Adds a graph fragment to the given div.\n * \n * Parameters:\n * \n * dx - Horizontal translation for the diagram.\n * dy - Vertical translation for the diagram.\n * scale - Scale for the diagram.\n * pageNumber - Number of the page to be rendered.\n * div - Div that contains the output.\n * clip - Contains the clipping rectangle as an <mxRectangle>.\n */\nmxPrintPreview.prototype.addGraphFragment = function(dx, dy, scale, pageNumber, div, clip)\n{\n\tvar view = this.graph.getView();\n\tvar previousContainer = this.graph.container;\n\tthis.graph.container = div;\n\t\n\tvar canvas = view.getCanvas();\n\tvar backgroundPane = view.getBackgroundPane();\n\tvar drawPane = view.getDrawPane();\n\tvar overlayPane = view.getOverlayPane();\n\tvar realScale = scale;\n\n\tif (this.graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tview.createSvg();\n\t\t\n\t\t// Uses CSS transform for scaling\n\t\tif (!mxClient.NO_FO)\n\t\t{\n\t\t\tvar g = view.getDrawPane().parentNode;\n\t\t\tvar prev = g.getAttribute('transform');\n\t\t\tg.setAttribute('transformOrigin', '0 0');\n\t\t\tg.setAttribute('transform', 'scale(' + scale + ',' + scale + ')' +\n\t\t\t\t'translate(' + dx + ',' + dy + ')');\n\t\t\t\n\t\t\tscale = 1;\n\t\t\tdx = 0;\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse if (this.graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tview.createVml();\n\t}\n\telse\n\t{\n\t\tview.createHtml();\n\t}\n\t\n\t// Disables events on the view\n\tvar eventsEnabled = view.isEventsEnabled();\n\tview.setEventsEnabled(false);\n\t\n\t// Disables the graph to avoid cursors\n\tvar graphEnabled = this.graph.isEnabled();\n\tthis.graph.setEnabled(false);\n\n\t// Resets the translation\n\tvar translate = view.getTranslate();\n\tview.translate = new mxPoint(dx, dy);\n\t\n\t// Redraws only states that intersect the clip\n\tvar redraw = this.graph.cellRenderer.redraw;\n\tvar states = view.states;\n\tvar s = view.scale;\n\n\t// Gets the transformed clip for intersection check below\n\tif (this.clipping)\n\t{\n\t\tvar tempClip = new mxRectangle((clip.x + translate.x) * s, (clip.y + translate.y) * s,\n\t\t\t\tclip.width * s / realScale, clip.height * s / realScale);\n\n\t\t// Checks clipping rectangle for speedup\n\t\t// Must create terminal states for edge clipping even if terminal outside of clip\n\t\tthis.graph.cellRenderer.redraw = function(state, force, rendering)\n\t\t{\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\t// Gets original state from graph to find bounding box\n\t\t\t\tvar orig = states.get(state.cell);\n\t\t\t\t\n\t\t\t\tif (orig != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = view.getBoundingBox(orig, false);\n\t\t\t\t\t\n\t\t\t\t\t// Stops rendering if outside clip for speedup\n\t\t\t\t\tif (bbox != null && !mxUtils.intersects(tempClip, bbox))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tredraw.apply(this, arguments);\n\t\t};\n\t}\n\t\n\tvar temp = null;\n\t\n\ttry\n\t{\n\t\t// Creates the temporary cell states in the view and\n\t\t// draws them onto the temporary DOM nodes in the view\n\t\tvar cells = [this.getRoot()];\n\t\ttemp = new mxTemporaryCellStates(view, scale, cells, null, mxUtils.bind(this, function(state)\n\t\t{\n\t\t\treturn this.getLinkForCellState(state);\n\t\t}));\n\t}\n\tfinally\n\t{\n\t\t// Removes overlay pane with selection handles\n\t\t// controls and icons from the print output\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tview.overlayPane.innerHTML = '';\n\t\t\tview.canvas.style.overflow = 'hidden';\n\t\t\tview.canvas.style.position = 'relative';\n\t\t\tview.canvas.style.top = this.marginTop + 'px';\n\t\t\tview.canvas.style.width = clip.width + 'px';\n\t\t\tview.canvas.style.height = clip.height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Removes everything but the SVG node\n\t\t\tvar tmp = div.firstChild;\n\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\tvar next = tmp.nextSibling;\n\t\t\t\tvar name = tmp.nodeName.toLowerCase();\n\n\t\t\t\t// Note: Width and height are required in FF 11\n\t\t\t\tif (name == 'svg')\n\t\t\t\t{\n\t\t\t\t\ttmp.style.overflow = 'hidden';\n\t\t\t\t\ttmp.style.position = 'relative';\n\t\t\t\t\ttmp.style.top = this.marginTop + 'px';\n\t\t\t\t\ttmp.setAttribute('width', clip.width);\n\t\t\t\t\ttmp.setAttribute('height', clip.height);\n\t\t\t\t\ttmp.style.width = '';\n\t\t\t\t\ttmp.style.height = '';\n\t\t\t\t}\n\t\t\t\t// Tries to fetch all text labels and only text labels\n\t\t\t\telse if (tmp.style.cursor != 'default' && name != 'div')\n\t\t\t\t{\n\t\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp = next;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Puts background image behind SVG output\n\t\tif (this.printBackgroundImage)\n\t\t{\n\t\t\tvar svgs = div.getElementsByTagName('svg');\n\t\t\t\n\t\t\tif (svgs.length > 0)\n\t\t\t{\n\t\t\t\tsvgs[0].style.position = 'absolute';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Completely removes the overlay pane to remove more handles\n\t\tview.overlayPane.parentNode.removeChild(view.overlayPane);\n\n\t\t// Restores the state of the view\n\t\tthis.graph.setEnabled(graphEnabled);\n\t\tthis.graph.container = previousContainer;\n\t\tthis.graph.cellRenderer.redraw = redraw;\n\t\tview.canvas = canvas;\n\t\tview.backgroundPane = backgroundPane;\n\t\tview.drawPane = drawPane;\n\t\tview.overlayPane = overlayPane;\n\t\tview.translate = translate;\n\t\ttemp.destroy();\n\t\tview.setEventsEnabled(eventsEnabled);\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state. This returns null.\n */\nmxPrintPreview.prototype.getLinkForCellState = function(state)\n{\n\treturn this.graph.getLinkForCell(state.cell);\n};\n\n/**\n * Function: insertBackgroundImage\n * \n * Inserts the background image into the given div.\n */\nmxPrintPreview.prototype.insertBackgroundImage = function(div, dx, dy)\n{\n\tvar bg = this.graph.backgroundImage;\n\t\n\tif (bg != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.style.position = 'absolute';\n\t\timg.style.marginLeft = Math.round(dx * this.scale) + 'px';\n\t\timg.style.marginTop = Math.round(dy * this.scale) + 'px';\n\t\timg.setAttribute('width', Math.round(this.scale * bg.width));\n\t\timg.setAttribute('height', Math.round(this.scale * bg.height));\n\t\timg.src = bg.src;\n\t\t\n\t\tdiv.insertBefore(img, div.firstChild);\n\t}\n};\n\n/**\n * Function: getCoverPages\n * \n * Returns the pages to be added before the print output. This returns null.\n */\nmxPrintPreview.prototype.getCoverPages = function()\n{\n\treturn null;\n};\n\n/**\n * Function: getAppendices\n * \n * Returns the pages to be added after the print output. This returns null.\n */\nmxPrintPreview.prototype.getAppendices = function()\n{\n\treturn null;\n};\n\n/**\n * Function: print\n * \n * Opens the print preview and shows the print dialog.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n */\nmxPrintPreview.prototype.print = function(css)\n{\n\tvar wnd = this.open(css);\n\t\n\tif (wnd != null)\n\t{\n\t\twnd.print();\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the print preview window.\n */\nmxPrintPreview.prototype.close = function()\n{\n\tif (this.wnd != null)\n\t{\n\t\tthis.wnd.close();\n\t\tthis.wnd = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheet\n * \n * Defines the appearance of the cells in a graph. See <putCellStyle> for an\n * example of creating a new cell style. It is recommended to use objects, not\n * arrays for holding cell styles. Existing styles can be cloned using\n * <mxUtils.clone> and turned into a string for debugging using\n * <mxUtils.toString>.\n *\n * Default Styles:\n * \n * The stylesheet contains two built-in styles, which are used if no style is\n * defined for a cell:\n *\n *   defaultVertex - Default style for vertices\n *   defaultEdge - Default style for edges\n * \n * Example:\n * \n * (code)\n * var vertexStyle = stylesheet.getDefaultVertexStyle();\n * vertexStyle[mxConstants.ROUNDED] = true;\n * var edgeStyle = stylesheet.getDefaultEdgeStyle();\n * edgeStyle[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\n * (end)\n * \n * Modifies the built-in default styles.\n * \n * To avoid the default style for a cell, add a leading semicolon\n * to the style definition, eg.\n * \n * (code)\n * ;shadow=1\n * (end)\n * \n * Removing keys:\n * \n * For removing a key in a cell style of the form [stylename;|key=value;] the\n * special value none can be used, eg. highlight;fillColor=none\n * \n * See also the helper methods in mxUtils to modify strings of this format,\n * namely <mxUtils.setStyle>, <mxUtils.indexOfStylename>,\n * <mxUtils.addStylename>, <mxUtils.removeStylename>,\n * <mxUtils.removeAllStylenames> and <mxUtils.setStyleFlag>.\n * \n * Constructor: mxStylesheet\n * \n * Constructs a new stylesheet and assigns default styles.\n */\nfunction mxStylesheet()\n{\n\tthis.styles = new Object();\n\t\n\tthis.putDefaultVertexStyle(this.createDefaultVertexStyle());\n\tthis.putDefaultEdgeStyle(this.createDefaultEdgeStyle());\n};\n\n/**\n * Function: styles\n * \n * Maps from names to cell styles. Each cell style is a map of key,\n * value pairs.\n */\nmxStylesheet.prototype.styles;\n\n/**\n * Function: createDefaultVertexStyle\n * \n * Creates and returns the default vertex style.\n */\nmxStylesheet.prototype.createDefaultVertexStyle = function()\n{\n\tvar style = new Object();\n\t\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n\tstyle[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_FILLCOLOR] = '#C3D9FF';\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#774400';\n\t\n\treturn style;\n};\n\n/**\n * Function: createDefaultEdgeStyle\n * \n * Creates and returns the default edge style.\n */\nmxStylesheet.prototype.createDefaultEdgeStyle = function()\n{\n\tvar style = new Object();\n\t\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_CONNECTOR;\n\tstyle[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#446299';\n\t\n\treturn style;\n};\n\n/**\n * Function: putDefaultVertexStyle\n * \n * Sets the default style for vertices using defaultVertex as the\n * stylename.\n * \n * Parameters:\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putDefaultVertexStyle = function(style)\n{\n\tthis.putCellStyle('defaultVertex', style);\n};\n\n/**\n * Function: putDefaultEdgeStyle\n * \n * Sets the default style for edges using defaultEdge as the stylename.\n */\nmxStylesheet.prototype.putDefaultEdgeStyle = function(style)\n{\n\tthis.putCellStyle('defaultEdge', style);\n};\n\n/**\n * Function: getDefaultVertexStyle\n * \n * Returns the default style for vertices.\n */\nmxStylesheet.prototype.getDefaultVertexStyle = function()\n{\n\treturn this.styles['defaultVertex'];\n};\n\n/**\n * Function: getDefaultEdgeStyle\n * \n * Sets the default style for edges.\n */\nmxStylesheet.prototype.getDefaultEdgeStyle = function()\n{\n\treturn this.styles['defaultEdge'];\n};\n\n/**\n * Function: putCellStyle\n * \n * Stores the given map of key, value pairs under the given name in\n * <styles>.\n *\n * Example:\n * \n * The following example adds a new style called 'rounded' into an\n * existing stylesheet:\n * \n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n * style[mxConstants.STYLE_ROUNDED] = true;\n * graph.getStylesheet().putCellStyle('rounded', style);\n * (end)\n * \n * In the above example, the new style is an object. The possible keys of\n * the object are all the constants in <mxConstants> that start with STYLE\n * and the values are either JavaScript objects, such as\n * <mxPerimeter.RightAngleRectanglePerimeter> (which is in fact a function)\n * or expressions, such as true. Note that not all keys will be\n * interpreted by all shapes (eg. the line shape ignores the fill color).\n * The final call to this method associates the style with a name in the\n * stylesheet. The style is used in a cell with the following code:\n * \n * (code)\n * model.setStyle(cell, 'rounded');\n * (end)\n * \n * Parameters:\n * \n * name - Name for the style to be stored.\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putCellStyle = function(name, style)\n{\n\tthis.styles[name] = style;\n};\n\n/**\n * Function: getCellStyle\n * \n * Returns the cell style for the specified stylename or the given\n * defaultStyle if no style can be found for the given stylename.\n * \n * Parameters:\n * \n * name - String of the form [(stylename|key=value);] that represents the\n * style.\n * defaultStyle - Default style to be returned if no style can be found.\n */\nmxStylesheet.prototype.getCellStyle = function(name, defaultStyle)\n{\n\tvar style = defaultStyle;\n\t\n\tif (name != null && name.length > 0)\n\t{\n\t\tvar pairs = name.split(';');\n\n\t\tif (style != null &&\n\t\t\tname.charAt(0) != ';')\n\t\t{\n\t\t\tstyle = mxUtils.clone(style);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle = new Object();\n\t\t}\n\n\t\t// Parses each key, value pair into the existing style\n\t \tfor (var i = 0; i < pairs.length; i++)\n\t \t{\n\t \t\tvar tmp = pairs[i];\n\t \t\tvar pos = tmp.indexOf('=');\n\t \t\t\n\t \t\tif (pos >= 0)\n\t \t\t{\n\t\t \t\tvar key = tmp.substring(0, pos);\n\t\t \t\tvar value = tmp.substring(pos + 1);\n\n\t\t \t\tif (value == mxConstants.NONE)\n\t\t \t\t{\n\t\t \t\t\tdelete style[key];\n\t\t \t\t}\n\t\t \t\telse if (mxUtils.isNumeric(value))\n\t\t \t\t{\n\t\t \t\t\tstyle[key] = parseFloat(value);\n\t\t \t\t}\n\t\t \t\telse\n\t\t \t\t{\n\t\t\t \t\tstyle[key] = value;\n\t\t \t\t}\n\t\t\t}\n\t \t\telse\n\t \t\t{\n\t \t\t\t// Merges the entries from a named style\n\t\t\t\tvar tmpStyle = this.styles[tmp];\n\t\t\t\t\n\t\t\t\tif (tmpStyle != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var key in tmpStyle)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle[key] = tmpStyle[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t \t\t}\n\t\t}\n\t}\n\t\n\treturn style;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellState\n * \n * Represents the current state of a cell in a given <mxGraphView>.\n * \n * For edges, the edge label position is stored in <absoluteOffset>.\n * \n * The size for oversize labels can be retrieved using the boundingBox property\n * of the <text> field as shown below.\n * \n * (code)\n * var bbox = (state.text != null) ? state.text.boundingBox : null;\n * (end)\n * \n * Constructor: mxCellState\n * \n * Constructs a new object that represents the current state of the given\n * cell in the specified view.\n * \n * Parameters:\n * \n * view - <mxGraphView> that contains the state.\n * cell - <mxCell> that this state represents.\n * style - Array of key, value pairs that constitute the style.\n */\nfunction mxCellState(view, cell, style)\n{\n\tthis.view = view;\n\tthis.cell = cell;\n\tthis.style = (style != null) ? style : {};\n\t\n\tthis.origin = new mxPoint();\n\tthis.absoluteOffset = new mxPoint();\n};\n\n/**\n * Extends mxRectangle.\n */\nmxCellState.prototype = new mxRectangle();\nmxCellState.prototype.constructor = mxCellState;\n\n/**\n * Variable: view\n * \n * Reference to the enclosing <mxGraphView>.\n */\nmxCellState.prototype.view = null;\n\n/**\n * Variable: cell\n *\n * Reference to the <mxCell> that is represented by this state.\n */\nmxCellState.prototype.cell = null;\n\n/**\n * Variable: style\n * \n * Contains an array of key, value pairs that represent the style of the\n * cell.\n */\nmxCellState.prototype.style = null;\n\n/**\n * Variable: invalidStyle\n * \n * Specifies if the style is invalid. Default is false.\n */\nmxCellState.prototype.invalidStyle = false;\n\n/**\n * Variable: invalid\n * \n * Specifies if the state is invalid. Default is true.\n */\nmxCellState.prototype.invalid = true;\n\n/**\n * Variable: origin\n *\n * <mxPoint> that holds the origin for all child cells. Default is a new\n * empty <mxPoint>.\n */\nmxCellState.prototype.origin = null;\n\n/**\n * Variable: absolutePoints\n * \n * Holds an array of <mxPoints> that represent the absolute points of an\n * edge.\n */\nmxCellState.prototype.absolutePoints = null;\n\n/**\n * Variable: absoluteOffset\n *\n * <mxPoint> that holds the absolute offset. For edges, this is the\n * absolute coordinates of the label position. For vertices, this is the\n * offset of the label relative to the top, left corner of the vertex. \n */\nmxCellState.prototype.absoluteOffset = null;\n\n/**\n * Variable: visibleSourceState\n * \n * Caches the visible source terminal state.\n */\nmxCellState.prototype.visibleSourceState = null;\n\n/**\n * Variable: visibleTargetState\n * \n * Caches the visible target terminal state.\n */\nmxCellState.prototype.visibleTargetState = null;\n\n/**\n * Variable: terminalDistance\n * \n * Caches the distance between the end points for an edge.\n */\nmxCellState.prototype.terminalDistance = 0;\n\n/**\n * Variable: length\n *\n * Caches the length of an edge.\n */\nmxCellState.prototype.length = 0;\n\n/**\n * Variable: segments\n * \n * Array of numbers that represent the cached length of each segment of the\n * edge.\n */\nmxCellState.prototype.segments = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the cell graphically.\n */\nmxCellState.prototype.shape = null;\n\n/**\n * Variable: text\n * \n * Holds the <mxText> that represents the label of the cell. Thi smay be\n * null if the cell has no label.\n */\nmxCellState.prototype.text = null;\n\n/**\n * Variable: unscaledWidth\n * \n * Holds the unscaled width of the state.\n */\nmxCellState.prototype.unscaledWidth = null;\n\n/**\n * Function: getPerimeterBounds\n * \n * Returns the <mxRectangle> that should be used as the perimeter of the\n * cell.\n * \n * Parameters:\n * \n * border - Optional border to be added around the perimeter bounds.\n * bounds - Optional <mxRectangle> to be used as the initial bounds.\n */\nmxCellState.prototype.getPerimeterBounds = function(border, bounds)\n{\n\tborder = border || 0;\n\tbounds = (bounds != null) ? bounds : new mxRectangle(this.x, this.y, this.width, this.height);\n\t\n\tif (this.shape != null && this.shape.stencil != null && this.shape.stencil.aspect == 'fixed')\n\t{\n\t\tvar aspect = this.shape.stencil.computeAspect(this.style, bounds.x, bounds.y, bounds.width, bounds.height);\n\t\t\n\t\tbounds.x = aspect.x;\n\t\tbounds.y = aspect.y;\n\t\tbounds.width = this.shape.stencil.w0 * aspect.width;\n\t\tbounds.height = this.shape.stencil.h0 * aspect.height;\n\t}\n\t\n\tif (border != 0)\n\t{\n\t\tbounds.grow(border);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: setAbsoluteTerminalPoint\n * \n * Sets the first or last point in <absolutePoints> depending on isSource.\n * \n * Parameters:\n * \n * point - <mxPoint> that represents the terminal point.\n * isSource - Boolean that specifies if the first or last point should\n * be assigned.\n */\nmxCellState.prototype.setAbsoluteTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t}\n\t\t\n\t\tif (this.absolutePoints.length == 0)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[0] = point;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t\tthis.absolutePoints.push(null);\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse if (this.absolutePoints.length == 1)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[this.absolutePoints.length - 1] = point;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the given cursor on the shape and text shape.\n */\nmxCellState.prototype.setCursor = function(cursor)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.setCursor(cursor);\n\t}\n\t\n\tif (this.text != null)\n\t{\n\t\tthis.text.setCursor(cursor);\n\t}\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Returns the visible source or target terminal cell.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target cell should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminal = function(source)\n{\n\tvar tmp = this.getVisibleTerminalState(source);\n\t\n\treturn (tmp != null) ? tmp.cell : null;\n};\n\n/**\n * Function: getVisibleTerminalState\n * \n * Returns the visible source or target terminal state.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target state should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminalState = function(source)\n{\n\treturn (source) ? this.visibleSourceState : this.visibleTargetState;\n};\n\n/**\n * Function: setVisibleTerminalState\n * \n * Sets the visible source or target terminal state.\n * \n * Parameters:\n * \n * terminalState - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the source or target state should be set.\n */\nmxCellState.prototype.setVisibleTerminalState = function(terminalState, source)\n{\n\tif (source)\n\t{\n\t\tthis.visibleSourceState = terminalState;\n\t}\n\telse\n\t{\n\t\tthis.visibleTargetState = terminalState;\n\t}\n};\n\n/**\n * Function: getCellBounds\n * \n * Returns the unscaled, untranslated bounds.\n */\nmxCellState.prototype.getCellBounds = function()\n{\n\treturn this.cellBounds;\n};\n\n/**\n * Function: getPaintBounds\n * \n * Returns the unscaled, untranslated paint bounds. This is the same as\n * <getCellBounds> but with a 90 degree rotation if the shape's\n * isPaintBoundsInverted returns true.\n */\nmxCellState.prototype.getPaintBounds = function()\n{\n\treturn this.paintBounds;\n};\n\n/**\n * Function: updateCachedBounds\n * \n * Updates the cellBounds and paintBounds.\n */\nmxCellState.prototype.updateCachedBounds = function()\n{\n\tvar tr = this.view.translate;\n\tvar s = this.view.scale;\n\tthis.cellBounds = new mxRectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n\tthis.paintBounds = mxRectangle.fromRectangle(this.cellBounds);\n\t\n\tif (this.shape != null && this.shape.isPaintBoundsInverted())\n\t{\n\t\tthis.paintBounds.rotate90();\n\t}\n};\n\n/**\n * Destructor: setState\n * \n * Copies all fields from the given state to this state.\n */\nmxCellState.prototype.setState = function(state)\n{\n\tthis.view = state.view;\n\tthis.cell = state.cell;\n\tthis.style = state.style;\n\tthis.absolutePoints = state.absolutePoints;\n\tthis.origin = state.origin;\n\tthis.absoluteOffset = state.absoluteOffset;\n\tthis.boundingBox = state.boundingBox;\n\tthis.terminalDistance = state.terminalDistance;\n\tthis.segments = state.segments;\n\tthis.length = state.length;\n\tthis.x = state.x;\n\tthis.y = state.y;\n\tthis.width = state.width;\n\tthis.height = state.height;\n\tthis.unscaledWidth = state.unscaledWidth;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxCellState.prototype.clone = function()\n{\n \tvar clone = new mxCellState(this.view, this.cell, this.style);\n\n\t// Clones the absolute points\n\tif (this.absolutePoints != null)\n\t{\n\t\tclone.absolutePoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.absolutePoints.length; i++)\n\t\t{\n\t\t\tclone.absolutePoints[i] = this.absolutePoints[i].clone();\n\t\t}\n\t}\n\n\tif (this.origin != null)\n\t{\n\t\tclone.origin = this.origin.clone();\n\t}\n\n\tif (this.absoluteOffset != null)\n\t{\n\t\tclone.absoluteOffset = this.absoluteOffset.clone();\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tclone.boundingBox = this.boundingBox.clone();\n\t}\n\n\tclone.terminalDistance = this.terminalDistance;\n\tclone.segments = this.segments;\n\tclone.length = this.length;\n\tclone.x = this.x;\n\tclone.y = this.y;\n\tclone.width = this.width;\n\tclone.height = this.height;\n\tclone.unscaledWidth = this.unscaledWidth;\n\t\n\treturn clone;\n};\n\n/**\n * Destructor: destroy\n * \n * Destroys the state and all associated resources.\n */\nmxCellState.prototype.destroy = function()\n{\n\tthis.view.graph.cellRenderer.destroy(this);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphSelectionModel\n *\n * Implements the selection model for a graph. Here is a listener that handles\n * all removed selection cells.\n * \n * (code)\n * graph.getSelectionModel().addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var cells = evt.getProperty('added');\n *   \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     // Handle cells[i]...\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the selection was changed in <changeSelection>. The\n * <code>edit</code> property contains the <mxUndoableEdit> which contains the\n * <mxSelectionChange>.\n * \n * Event: mxEvent.CHANGE\n * \n * Fires after the selection changes by executing an <mxSelectionChange>. The\n * <code>added</code> and <code>removed</code> properties contain arrays of\n * cells that have been added to or removed from the selection, respectively.\n * The names are inverted due to historic reasons. This cannot be changed.\n * \n * Constructor: mxGraphSelectionModel\n *\n * Constructs a new graph selection model for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphSelectionModel(graph)\n{\n\tthis.graph = graph;\n\tthis.cells = [];\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphSelectionModel.prototype = new mxEventSource();\nmxGraphSelectionModel.prototype.constructor = mxGraphSelectionModel;\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphSelectionModel.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Variable: updatingSelectionResource\n *\n * Specifies the resource key for the status message while the selection is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingSelection'.\n */\nmxGraphSelectionModel.prototype.updatingSelectionResource = (mxClient.language != 'none') ? 'updatingSelection' : '';\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphSelectionModel.prototype.graph = null;\n\n/**\n * Variable: singleSelection\n *\n * Specifies if only one selected item at a time is allowed.\n * Default is false.\n */\nmxGraphSelectionModel.prototype.singleSelection = false;\n\n/**\n * Function: isSingleSelection\n *\n * Returns <singleSelection> as a boolean.\n */\nmxGraphSelectionModel.prototype.isSingleSelection = function()\n{\n\treturn this.singleSelection;\n};\n\n/**\n * Function: setSingleSelection\n *\n * Sets the <singleSelection> flag.\n * \n * Parameters:\n * \n * singleSelection - Boolean that specifies the new value for\n * <singleSelection>.\n */\nmxGraphSelectionModel.prototype.setSingleSelection = function(singleSelection)\n{\n\tthis.singleSelection = singleSelection;\n};\n\n/**\n * Function: isSelected\n *\n * Returns true if the given <mxCell> is selected.\n */\nmxGraphSelectionModel.prototype.isSelected = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn mxUtils.indexOf(this.cells, cell) >= 0;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isEmpty\n *\n * Returns true if no cells are currently selected.\n */\nmxGraphSelectionModel.prototype.isEmpty = function()\n{\n\treturn this.cells.length == 0;\n};\n\n/**\n * Function: clear\n *\n * Clears the selection and fires a <change> event if the selection was not\n * empty.\n */\nmxGraphSelectionModel.prototype.clear = function()\n{\n\tthis.changeSelection(null, this.cells);\n};\n\n/**\n * Function: setCell\n *\n * Selects the specified <mxCell> using <setCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraphSelectionModel.prototype.setCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.setCells([cell]);\n\t}\n};\n\n/**\n * Function: setCells\n *\n * Selects the given array of <mxCells> and fires a <change> event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraphSelectionModel.prototype.setCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\t\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, this.cells);\n\t}\n};\n\n/**\n * Function: getFirstSelectableCell\n *\n * Returns the first selectable cell in the given array of cells.\n */\nmxGraphSelectionModel.prototype.getFirstSelectableCell = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\treturn cells[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: addCell\n * \n * Adds the given <mxCell> to the selection and fires a <select> event.\n * \n * Parameters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.addCells([cell]);\n\t}\n};\n\n/**\n * Function: addCells\n * \n * Adds the given array of <mxCells> to the selection and fires a <select>\n * event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar remove = null;\n\t\t\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tremove = this.cells;\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (!this.isSelected(cells[i]) &&\n\t\t\t\tthis.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, remove);\n\t}\n};\n\n/**\n * Function: removeCell\n *\n * Removes the specified <mxCell> from the selection and fires a <select>\n * event for the remaining cells.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.removeCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.removeCells([cell]);\n\t}\n};\n\n/**\n * Function: removeCells\n */\nmxGraphSelectionModel.prototype.removeCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSelected(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.changeSelection(null, tmp);\t\n\t}\n};\n\n/**\n * Function: changeSelection\n *\n * Adds/removes the specified arrays of <mxCell> to/from the selection.\n * \n * Parameters:\n * \n * added - Array of <mxCell> to add to the selection.\n * remove - Array of <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.changeSelection = function(added, removed)\n{\n\tif ((added != null &&\n\t\tadded.length > 0 &&\n\t\tadded[0] != null) ||\n\t\t(removed != null &&\n\t\tremoved.length > 0 &&\n\t\tremoved[0] != null))\n\t{\n\t\tvar change = new mxSelectionChange(this, added, removed);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, false);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t}\n};\n\n/**\n * Function: cellAdded\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n * \n * Paramters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null &&\n\t\t!this.isSelected(cell))\n\t{\n\t\tthis.cells.push(cell);\n\t}\n};\n\n/**\n * Function: cellRemoved\n *\n * Inner callback to remove the specified <mxCell> from the selection. No\n * event is fired in this implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar index = mxUtils.indexOf(this.cells, cell);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tthis.cells.splice(index, 1);\n\t\t}\n\t}\n};\n\n/**\n * Class: mxSelectionChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxSelectionChange(selectionModel, added, removed)\n{\n\tthis.selectionModel = selectionModel;\n\tthis.added = (added != null) ? added.slice() : null;\n\tthis.removed = (removed != null) ? removed.slice() : null;\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxSelectionChange.prototype.execute = function()\n{\n\tvar t0 = mxLog.enter('mxSelectionChange.execute');\n\twindow.status = mxResources.get(\n\t\tthis.selectionModel.updatingSelectionResource) ||\n\t\tthis.selectionModel.updatingSelectionResource;\n\n\tif (this.removed != null)\n\t{\n\t\tfor (var i = 0; i < this.removed.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellRemoved(this.removed[i]);\n\t\t}\n\t}\n\n\tif (this.added != null)\n\t{\n\t\tfor (var i = 0; i < this.added.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellAdded(this.added[i]);\n\t\t}\n\t}\n\t\n\tvar tmp = this.added;\n\tthis.added = this.removed;\n\tthis.removed = tmp;\n\n\twindow.status = mxResources.get(this.selectionModel.doneResource) ||\n\t\tthis.selectionModel.doneResource;\n\tmxLog.leave('mxSelectionChange.execute', t0);\n\t\n\tthis.selectionModel.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'added', this.added, 'removed', this.removed));\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellEditor\n *\n * In-place editor for the graph. To control this editor, use\n * <mxGraph.invokesStopCellEditing>, <mxGraph.enterStopsCellEditing> and\n * <mxGraph.escapeEnabled>. If <mxGraph.enterStopsCellEditing> is true then\n * ctrl-enter or shift-enter can be used to create a linefeed. The F2 and\n * escape keys can always be used to stop editing.\n * \n * To customize the location of the textbox in the graph, override\n * <getEditorBounds> as follows:\n * \n * (code)\n * graph.cellEditor.getEditorBounds = function(state)\n * {\n *   var result = mxCellEditor.prototype.getEditorBounds.apply(this, arguments);\n *   \n *   if (this.graph.getModel().isEdge(state.cell))\n *   {\n *     result.x = state.getCenterX() - result.width / 2;\n *     result.y = state.getCenterY() - result.height / 2;\n *   }\n *   \n *   return result;\n * };\n * (end)\n * \n * Note that this hook is only called if <autoSize> is false. If <autoSize> is true,\n * then <mxShape.getLabelBounds> is used to compute the current bounds of the textbox.\n * \n * The textarea uses the mxCellEditor CSS class. You can modify this class in\n * your custom CSS. Note: You should modify the CSS after loading the client\n * in the page.\n *\n * Example:\n * \n * To only allow numeric input in the in-place editor, use the following code.\n *\n * (code)\n * var text = graph.cellEditor.textarea;\n * \n * mxEvent.addListener(text, 'keydown', function (evt)\n * {\n *   if (!(evt.keyCode >= 48 && evt.keyCode <= 57) &&\n *       !(evt.keyCode >= 96 && evt.keyCode <= 105))\n *   {\n *     mxEvent.consume(evt);\n *   }\n * }); \n * (end)\n * \n * Placeholder:\n * \n * To implement a placeholder for cells without a label, use the\n * <emptyLabelText> variable.\n * \n * Resize in Chrome:\n * \n * Resize of the textarea is disabled by default. If you want to enable\n * this feature extend <init> and set this.textarea.style.resize = ''.\n * \n * To start editing on a key press event, the container of the graph\n * should have focus or a focusable parent should be used to add the\n * key press handler as follows.\n * \n * (code)\n * mxEvent.addListener(graph.container, 'keypress', mxUtils.bind(this, function(evt)\n * {\n *   if (!graph.isEditing() && !graph.isSelectionEmpty() && evt.which !== 0 &&\n *       !mxEvent.isAltDown(evt) && !mxEvent.isControlDown(evt) && !mxEvent.isMetaDown(evt))\n *   {\n *     graph.startEditing();\n *     \n *     if (mxClient.IS_FF)\n *     {\n *       graph.cellEditor.textarea.value = String.fromCharCode(evt.which);\n *     }\n *   }\n * }));\n * (end)\n * \n * To allow focus for a DIV, and hence to receive key press events, some browsers\n * require it to have a valid tabindex attribute. In this case the following\n * code may be used to keep the container focused.\n * \n * (code)\n * var graphFireMouseEvent = graph.fireMouseEvent;\n * graph.fireMouseEvent = function(evtName, me, sender)\n * {\n *   if (evtName == mxEvent.MOUSE_DOWN)\n *   {\n *     this.container.focus();\n *   }\n *   \n *   graphFireMouseEvent.apply(this, arguments);\n * };\n * (end)\n *\n * Constructor: mxCellEditor\n *\n * Constructs a new in-place editor for the specified graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellEditor(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Stops editing after zoom changes\n\tthis.zoomHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (this.graph.isEditing())\n\t\t{\n\t\t\tthis.resize();\n\t\t}\n\t});\n\t\n\tthis.graph.view.addListener(mxEvent.SCALE, this.zoomHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.zoomHandler);\n\t\n\t// Adds handling of deleted cells while editing\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.editingCell != null && this.graph.getView().getState(this.editingCell) == null)\n\t\t{\n\t\t\tthis.stopEditing(true);\n\t\t}\n\t});\n\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellEditor.prototype.graph = null;\n\n/**\n * Variable: textarea\n *\n * Holds the DIV that is used for text editing. Note that this may be null before the first\n * edit. Instantiated in <init>.\n */\nmxCellEditor.prototype.textarea = null;\n\n/**\n * Variable: editingCell\n * \n * Reference to the <mxCell> that is currently being edited.\n */\nmxCellEditor.prototype.editingCell = null;\n\n/**\n * Variable: trigger\n * \n * Reference to the event that was used to start editing.\n */\nmxCellEditor.prototype.trigger = null;\n\n/**\n * Variable: modified\n * \n * Specifies if the label has been modified.\n */\nmxCellEditor.prototype.modified = false;\n\n/**\n * Variable: autoSize\n * \n * Specifies if the textarea should be resized while the text is being edited.\n * Default is true.\n */\nmxCellEditor.prototype.autoSize = true;\n\n/**\n * Variable: selectText\n * \n * Specifies if the text should be selected when editing starts. Default is\n * true.\n */\nmxCellEditor.prototype.selectText = true;\n\n/**\n * Variable: emptyLabelText\n * \n * Text to be displayed for empty labels. Default is '' or '<br>' in Firefox as\n * a workaround for the missing cursor bug for empty content editable. This can\n * be set to eg. \"[Type Here]\" to easier visualize editing of empty labels. The\n * value is only displayed before the first keystroke and is never used as the\n * actual editing value.\n */\nmxCellEditor.prototype.emptyLabelText = (mxClient.IS_FF) ? '<br>' : '';\n\n/**\n * Variable: escapeCancelsEditing\n * \n * If true, pressing the escape key will stop editing and not accept the new\n * value. Change this to false to accept the new value on escape, and cancel\n * editing on Shift+Escape instead. Default is true.\n */\nmxCellEditor.prototype.escapeCancelsEditing = true;\n\n/**\n * Variable: textNode\n * \n * Reference to the label DOM node that has been hidden.\n */\nmxCellEditor.prototype.textNode = '';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the textarea. Default is 5.\n */\nmxCellEditor.prototype.zIndex = 5;\n\n/**\n * Variable: minResize\n * \n * Defines the minimum width and height to be used in <resize>. Default is 0x20px.\n */\nmxCellEditor.prototype.minResize = new mxRectangle(0, 20);\n\n/**\n * Variable: wordWrapPadding\n * \n * Correction factor for word wrapping width. Default is 2 in quirks, 0 in IE\n * 11 and 1 in all other browsers and modes.\n */\nmxCellEditor.prototype.wordWrapPadding = (mxClient.IS_QUIRKS) ? 2 : (!mxClient.IS_IE11) ? 1 : 0;\n\n/**\n * Variable: blurEnabled\n *\n * If <focusLost> should be called if <textarea> loses the focus. Default is false.\n */\nmxCellEditor.prototype.blurEnabled = false;\n\n/**\n * Variable: initialValue\n * \n * Holds the initial editing value to check if the current value was modified.\n */\nmxCellEditor.prototype.initialValue = null;\n\n/**\n * Variable: align\n * \n * Holds the current temporary horizontal alignment for the cell style. If this\n * is modified then the current text alignment is changed and the cell style is\n * updated when the value is applied.\n */\nmxCellEditor.prototype.align = null;\n\n/**\n * Function: init\n *\n * Creates the <textarea> and installs the event listeners. The key handler\n * updates the <modified> state.\n */\nmxCellEditor.prototype.init = function ()\n{\n\tthis.textarea = document.createElement('div');\n\tthis.textarea.className = 'mxCellEditor mxPlainTextEditor';\n\tthis.textarea.contentEditable = true;\n\t\n\t// Workaround for selection outside of DIV if height is 0\n\tif (mxClient.IS_GC)\n\t{\n\t\tthis.textarea.style.minHeight = '1em';\n\t}\n\n\tthis.textarea.style.position = ((this.isLegacyEditor())) ? 'absolute' : 'relative';\n\tthis.installListeners(this.textarea);\n};\n\n/**\n * Function: applyValue\n * \n * Called in <stopEditing> if cancel is false to invoke <mxGraph.labelChanged>.\n */\nmxCellEditor.prototype.applyValue = function(state, value)\n{\n\tthis.graph.labelChanged(state.cell, value, this.trigger);\n};\n\n/**\n * Function: setAlign\n * \n * Sets the temporary horizontal alignment for the current editing session.\n */\nmxCellEditor.prototype.setAlign = function (align)\n{\n\tif (this.textarea != null)\n\t{\n\t\tthis.textarea.style.textAlign = align;\n\t}\n\t\n\tthis.align = align;\n\tthis.resize();\n};\n\n/**\n * Function: getInitialValue\n * \n * Gets the initial editing value for the given cell.\n */\nmxCellEditor.prototype.getInitialValue = function(state, trigger)\n{\n\tvar result = mxUtils.htmlEntities(this.graph.getEditingValue(state.cell, trigger), false);\n\t\n    // Workaround for trailing line breaks being ignored in the editor\n\tif (!mxClient.IS_QUIRKS && document.documentMode != 8 && document.documentMode != 9 &&\n\t\tdocument.documentMode != 10)\n\t{\n\t\tresult = mxUtils.replaceTrailingNewlines(result, '<div><br></div>');\n\t}\n    \n    return result.replace(/\\n/g, '<br>');\n};\n\n/**\n * Function: getCurrentValue\n * \n * Returns the current editing value.\n */\nmxCellEditor.prototype.getCurrentValue = function(state)\n{\n\treturn mxUtils.extractTextWithWhitespace(this.textarea.childNodes);\n};\n\n/**\n * Function: isCancelEditingKeyEvent\n * \n * Returns true if <escapeCancelsEditing> is true and shift, control and meta\n * are not pressed.\n */\nmxCellEditor.prototype.isCancelEditingKeyEvent = function(evt)\n{\n\treturn this.escapeCancelsEditing || mxEvent.isShiftDown(evt) || mxEvent.isControlDown(evt) || mxEvent.isMetaDown(evt);\n};\n\n/**\n * Function: installListeners\n * \n * Installs listeners for focus, change and standard key event handling.\n */\nmxCellEditor.prototype.installListeners = function(elt)\n{\n\t// Applies value if text is dragged\n\t// LATER: Gesture mouse events ignored for starting move\n\tmxEvent.addListener(elt, 'dragstart', mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.stopEditing(false);\n\t\tmxEvent.consume(evt);\n\t}));\n\n\t// Applies value if focus is lost\n\tmxEvent.addListener(elt, 'blur', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.blurEnabled)\n\t\t{\n\t\t\tthis.focusLost(evt);\n\t\t}\n\t}));\n\n\t// Updates modified state and handles placeholder text\n\tmxEvent.addListener(elt, 'keydown', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt))\n\t\t{\n\t\t\tif (this.isStopEditingEvent(evt))\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(false);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t\telse if (evt.keyCode == 27 /* Escape */)\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(this.isCancelEditingKeyEvent(evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}));\n\n\t// Keypress only fires if printable key was pressed and handles removing the empty placeholder\n\tvar keypressHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Clears the initial empty label on the first keystroke\n\t\t\t// and workaround for FF which fires keypress for delete and backspace\n\t\t\tif (this.clearOnChange && elt.innerHTML == this.getEmptyLabelText() &&\n\t\t\t\t(!mxClient.IS_FF || (evt.keyCode != 8 /* Backspace */ && evt.keyCode != 46 /* Delete */)))\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t\telt.innerHTML = '';\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, 'keypress', keypressHandler);\n\tmxEvent.addListener(elt, 'paste', keypressHandler);\n\t\n\t// Handler for updating the empty label text value after a change\n\tvar keyupHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Uses an optional text value for sempty labels which is cleared\n\t\t\t// when the first keystroke appears. This makes it easier to see\n\t\t\t// that a label is being edited even if the label is empty.\n\t\t\t// In Safari and FF, an empty text is represented by <BR> which isn't enough to force a valid size\n\t\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t\t{\n\t\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\t\tthis.clearOnChange = this.textarea.innerHTML.length > 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keyup', keyupHandler);\n\tmxEvent.addListener(elt, 'cut', keyupHandler);\n\tmxEvent.addListener(elt, 'paste', keyupHandler);\n\n\t// Adds automatic resizing of the textbox while typing using input, keyup and/or DOM change events\n\tvar evtName = (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keydown';\n\t\n\tvar resizeHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null && this.autoSize && !mxEvent.isConsumed(evt))\n\t\t{\n\t\t\t// Asynchronous is needed for keydown and shows better results for input events overall\n\t\t\t// (ie non-blocking and cases where the offsetWidth/-Height was wrong at this time)\n\t\t\tif (this.resizeThread != null)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.resizeThread);\n\t\t\t}\n\t\t\t\n\t\t\tthis.resizeThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resizeThread = null;\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(elt, evtName, resizeHandler);\n\tmxEvent.addListener(window, 'resize', resizeHandler);\n\n\tif (document.documentMode >= 9)\n\t{\n\t\tmxEvent.addListener(elt, 'DOMNodeRemoved', resizeHandler);\n\t\tmxEvent.addListener(elt, 'DOMNodeInserted', resizeHandler);\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(elt, 'cut', resizeHandler);\n\t\tmxEvent.addListener(elt, 'paste', resizeHandler);\n\t}\n};\n\n/**\n * Function: isStopEditingEvent\n * \n * Returns true if the given keydown event should stop cell editing. This\n * returns true if F2 is pressed of if <mxGraph.enterStopsCellEditing> is true\n * and enter is pressed without control or shift.\n */\nmxCellEditor.prototype.isStopEditingEvent = function(evt)\n{\n\treturn evt.keyCode == 113 /* F2 */ || (this.graph.isEnterStopsCellEditing() &&\n\t\tevt.keyCode == 13 /* Enter */ && !mxEvent.isControlDown(evt) &&\n\t\t!mxEvent.isShiftDown(evt));\n};\n\n/**\n * Function: isEventSource\n * \n * Returns true if this editor is the source for the given native event.\n */\nmxCellEditor.prototype.isEventSource = function(evt)\n{\n\treturn mxEvent.getSource(evt) == this.textarea;\n};\n\n/**\n * Function: resize\n * \n * Returns <modified>.\n */\nmxCellEditor.prototype.resize = function()\n{\n\tvar state = this.graph.getView().getState(this.editingCell);\n\t\n\tif (state == null)\n\t{\n\t\tthis.stopEditing(true);\n\t}\n\telse if (this.textarea != null)\n\t{\n\t\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n \t\tvar scale = this.graph.getView().scale;\n \t\tvar m = null;\n\t\t\n\t\tif (!this.autoSize || (state.style[mxConstants.STYLE_OVERFLOW] == 'fill'))\n\t\t{\n\t\t\t// Specifies the bounds of the editor box\n\t\t\tthis.bounds = this.getEditorBounds(state);\n\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + 'px';\n\t\t\tthis.textarea.style.height = Math.round(this.bounds.height / scale) + 'px';\n\t\t\t\n\t\t\t// FIXME: Offset when scaled\n\t\t\tif (document.documentMode == 8 || mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.round(this.bounds.x) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.round(this.bounds.y) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x + 1)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y + 1)) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\t// Installs native word wrapping and avoids word wrap for empty label placeholder\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + this.wordWrapPadding + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t \t{\n\t \t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\tm = (state.text != null && this.align == null) ? state.text.margin : null;\n\t\t\t\n\t\t\tif (m == null)\n\t\t\t{\n\t\t\t\tm = mxUtils.getAlignmentAsPoint(this.align || mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER),\n\t\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE));\n\t\t\t}\n\t\t\t\n\t \t\tif (isEdge)\n\t\t\t{\n\t\t\t\tthis.bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y, 0, 0);\n\t\t\t\t\n\t\t\t\tif (lw != null)\n\t\t\t \t{\n\t\t\t\t\tvar tmp = (parseFloat(lw) + 2) * scale;\n\t\t\t\t\tthis.bounds.width = tmp;\n\t\t\t\t\tthis.bounds.x += m.x * tmp;\n\t\t\t \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar bds = mxRectangle.fromRectangle(state);\n\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\tbds = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(bds) : bds;\n\t\t\t \t\n\t\t\t \tif (lw != null)\n\t\t\t \t{\n\t\t\t \t\tbds.width = parseFloat(lw) * scale;\n\t\t\t \t}\n\t\t\t \t\n\t\t\t \tif (!state.view.graph.cellRenderer.legacySpacing || state.style[mxConstants.STYLE_OVERFLOW] != 'width')\n\t\t\t \t{\n\t\t\t\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 2) * scale;\n\t\t\t\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\t\t\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\t\t\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\t\t\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\t\t\t\t\n\t\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\t\tbds = new mxRectangle(bds.x + spacingLeft, bds.y + spacingTop,\n\t\t\t\t\t\tbds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (spacingLeft + spacingRight) : 0),\n\t\t\t\t\t\tbds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (spacingTop + spacingBottom) : 0));\n\t\t\t \t}\n\n\t\t\t\tthis.bounds = new mxRectangle(bds.x + state.absoluteOffset.x, bds.y + state.absoluteOffset.y, bds.width, bds.height);\n\t\t\t}\n\n\t\t\t// Needed for word wrap inside text blocks with oversize lines to match the final result where\n\t \t\t// the width of the longest line is used as the reference for text alignment in the cell\n\t \t\t// TODO: Fix word wrapping preview for edge labels in helloworld.html\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t \t\t// Forces automatic reflow if text is removed from an oversize label and normal word wrap\n\t\t\t\tvar tmp = Math.round(this.bounds.width / ((document.documentMode == 8) ? scale : scale)) + this.wordWrapPadding;\n\n\t\t\t\tif (this.textarea.style.position != 'relative')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = tmp + 'px';\n\t\t\t\t\t\n\t\t\t\t\tif (this.textarea.scrollWidth > tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.textarea.style.width = this.textarea.scrollWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.maxWidth = tmp + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// KNOWN: Trailing cursor in IE9 quirks mode is not visible\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\tthis.textarea.style.width = '';\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\t// Workaround for wrong measuring in IE8 standards\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tthis.textarea.style.zoom = '1';\n\t\t\t\tthis.textarea.style.height = 'auto';\n\t\t\t}\n\t\t\t\n\t\t\tvar ow = this.textarea.scrollWidth;\n\t\t\tvar oh = this.textarea.scrollHeight;\n\t\t\t\n\t\t\t// TODO: Update CSS width and height if smaller than minResize or remove minResize\n\t\t\t//if (this.minResize != null)\n\t\t\t//{\n\t\t\t//\tow = Math.max(ow, this.minResize.width);\n\t\t\t//\toh = Math.max(oh, this.minResize.height);\n\t\t\t//}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\t// LATER: Scaled wrapping and position is wrong in IE8\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil((this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2) / scale)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil((this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1) / scale)) + 'px';\n\t\t\t\t// Workaround for wrong event handling width and height\n\t\t\t\tthis.textarea.style.width = Math.round(ow * scale) + 'px';\n\t\t\t\tthis.textarea.style.height = Math.round(oh * scale) + 'px';\n\t\t\t}\n\t\t\telse if (mxClient.IS_QUIRKS)\n\t\t\t{\t\t\t\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil(this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil(this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1)) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x - m.x * (this.bounds.width - 2)) + 1) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y - m.y * (this.bounds.height - 4) + ((m.y == -1) ? 3 : 0)) + 1) + 'px';\n\t\t\t}\n\t \t}\n\n\t\tif (mxClient.IS_VML)\n\t\t{\n\t\t\tthis.textarea.style.zoom = scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transformOrigin', '0px 0px');\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transform',\n\t\t\t\t'scale(' + scale + ',' + scale + ')' + ((m == null) ? '' :\n\t\t\t\t' translate(' + (m.x * 100) + '%,' + (m.y * 100) + '%)'));\n\t\t}\n\t}\n};\n\n/**\n * Function: focusLost\n *\n * Called if the textarea has lost focus.\n */\nmxCellEditor.prototype.focusLost = function()\n{\n\tthis.stopEditing(!this.graph.isInvokesStopCellEditing());\n};\n\n/**\n * Function: getBackgroundColor\n * \n * Returns the background color for the in-place editor. This implementation\n * always returns null.\n */\nmxCellEditor.prototype.getBackgroundColor = function(state)\n{\n\treturn null;\n};\n\n/**\n * Function: isLegacyEditor\n * \n * Returns true if max-width is not supported or if the SVG root element in\n * in the graph does not have CSS position absolute. In these cases the text\n * editor must use CSS position absolute to avoid an offset but it will have\n * a less accurate line wrapping width during the text editing preview. This\n * implementation returns true for IE8- and quirks mode or if the CSS position\n * of the SVG element is not absolute.\n */\nmxCellEditor.prototype.isLegacyEditor = function()\n{\n\tif (mxClient.IS_VML)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tvar absoluteRoot = false;\n\t\t\n\t\tif (mxClient.IS_SVG)\n\t\t{\n\t\t\tvar root = this.graph.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\tabsoluteRoot = mxUtils.getCurrentStyle(root).position == 'absolute';\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn !absoluteRoot;\n\t}\n};\n\n/**\n * Function: startEditing\n *\n * Starts the editor for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to start editing.\n * trigger - Optional mouse event that triggered the editor.\n */\nmxCellEditor.prototype.startEditing = function(cell, trigger)\n{\n\tthis.stopEditing(true);\n\tthis.align = null;\n\t\n\t// Creates new textarea instance\n\tif (this.textarea == null)\n\t{\n\t\tthis.init();\n\t}\n\t\n\tif (this.graph.tooltipHandler != null)\n\t{\n\t\tthis.graph.tooltipHandler.hideTooltip();\n\t}\n\t\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\t// Configures the style of the in-place editor\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar size = mxUtils.getValue(state.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n\t\tvar family = mxUtils.getValue(state.style, mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY);\n\t\tvar color = mxUtils.getValue(state.style, mxConstants.STYLE_FONTCOLOR, 'black');\n\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_LEFT);\n\t\tvar bold = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_BOLD) == mxConstants.FONT_BOLD;\n\t\tvar italic = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC;\n\t\tvar uline = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE;\n\t\t\n\t\tthis.textarea.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? Math.round(size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\tthis.textarea.style.backgroundColor = this.getBackgroundColor(state);\n\t\tthis.textarea.style.textDecoration = (uline) ? 'underline' : '';\n\t\tthis.textarea.style.fontWeight = (bold) ? 'bold' : 'normal';\n\t\tthis.textarea.style.fontStyle = (italic) ? 'italic' : '';\n\t\tthis.textarea.style.fontSize = Math.round(size) + 'px';\n\t\tthis.textarea.style.zIndex = this.zIndex;\n\t\tthis.textarea.style.fontFamily = family;\n\t\tthis.textarea.style.textAlign = align;\n\t\tthis.textarea.style.outline = 'none';\n\t\tthis.textarea.style.color = color;\n\t\t\n\t\tvar dir = this.textDirection = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO)\n\t\t{\n\t\t\tif (state != null && state.text != null && state.text.dialect != mxConstants.DIALECT_STRICTHTML &&\n\t\t\t\t!mxUtils.isNode(state.text.value))\n\t\t\t{\n\t\t\t\tdir = state.text.getAutoDirection();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tthis.textarea.setAttribute('dir', dir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.textarea.removeAttribute('dir');\n\t\t}\n\n\t\t// Sets the initial editing value\n\t\tthis.textarea.innerHTML = this.getInitialValue(state, trigger) || '';\n\t\tthis.initialValue = this.textarea.innerHTML;\n\n\t\t// Uses an optional text value for empty labels which is cleared\n\t\t// when the first keystroke appears. This makes it easier to see\n\t\t// that a label is being edited even if the label is empty.\n\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t{\n\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\tthis.clearOnChange = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.clearOnChange = this.textarea.innerHTML == this.getEmptyLabelText();\n\t\t}\n\n\t\tthis.graph.container.appendChild(this.textarea);\n\t\t\n\t\t// Update this after firing all potential events that could update the cleanOnChange flag\n\t\tthis.editingCell = cell;\n\t\tthis.trigger = trigger;\n\t\tthis.textNode = null;\n\n\t\tif (state.text != null && this.isHideLabel(state))\n\t\t{\n\t\t\tthis.textNode = state.text.node;\n\t\t\tthis.textNode.style.visibility = 'hidden';\n\t\t}\n\n\t\t// Workaround for initial offsetHeight not ready for heading in markup\n\t\tif (this.autoSize && (this.graph.model.isEdge(state.cell) || state.style[mxConstants.STYLE_OVERFLOW] != 'fill'))\n\t\t{\n\t\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t\t\n\t\tthis.resize();\n\t\t\n\t\t// Workaround for NS_ERROR_FAILURE in FF\n\t\ttry\n\t\t{\n\t\t\t// Prefers blinking cursor over no selected text if empty\n\t\t\tthis.textarea.focus();\n\t\t\t\n\t\t\tif (this.isSelectText() && this.textarea.innerHTML.length > 0 &&\n\t\t\t\t(this.textarea.innerHTML != this.getEmptyLabelText() || !this.clearOnChange))\n\t\t\t{\n\t\t\t\tdocument.execCommand('selectAll', false, null);\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t}\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.isSelectText = function()\n{\n\treturn this.selectText;\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.clearSelection = function()\n{\n\tvar selection = null;\n\t\n\tif (window.getSelection)\n\t{\n\t\tselection = window.getSelection();\n\t}\n\telse if (document.selection)\n\t{\n\t\tselection = document.selection;\n\t}\n\t\n\tif (selection != null)\n\t{\n\t\tif (selection.empty)\n\t\t{\n\t\t\tselection.empty();\n\t\t}\n\t\telse if (selection.removeAllRanges)\n\t\t{\n\t\t\tselection.removeAllRanges();\n\t\t}\n\t}\n};\n\n/**\n * Function: stopEditing\n *\n * Stops the editor and applies the value if cancel is false.\n */\nmxCellEditor.prototype.stopEditing = function(cancel)\n{\n\tcancel = cancel || false;\n\t\n\tif (this.editingCell != null)\n\t{\n\t\tif (this.textNode != null)\n\t\t{\n\t\t\tthis.textNode.style.visibility = 'visible';\n\t\t\tthis.textNode = null;\n\t\t}\n\n\t\tvar state = (!cancel) ? this.graph.view.getState(this.editingCell) : null;\n\n\t\tvar initial = this.initialValue;\n\t\tthis.initialValue = null;\n\t\tthis.editingCell = null;\n\t\tthis.trigger = null;\n\t\tthis.bounds = null;\n\t\tthis.textarea.blur();\n\t\tthis.clearSelection();\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tif (this.clearOnChange && this.textarea.innerHTML == this.getEmptyLabelText())\n\t\t{\n\t\t\tthis.textarea.innerHTML = '';\n\t\t\tthis.clearOnChange = false;\n\t\t}\n\n\t\tif (state != null && (this.textarea.innerHTML != initial || this.align != null))\n\t\t{\n\t\t\tthis.prepareTextarea();\n\t\t\tvar value = this.getCurrentValue(state);\n\t\t\t\n\t\t\tthis.graph.getModel().beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (value != null)\n\t\t\t\t{\n\t\t\t\t\tthis.applyValue(state, value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.align != null)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ALIGN, this.align, [state.cell]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.graph.getModel().endUpdate();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Forces new instance on next edit for undo history reset\n\t\tmxEvent.release(this.textarea);\n\t\tthis.textarea = null;\n\t\tthis.align = null;\n\t}\n};\n\n/**\n * Function: prepareTextarea\n * \n * Prepares the textarea for getting its value in <stopEditing>.\n * This implementation removes the extra trailing linefeed in Firefox.\n */\nmxCellEditor.prototype.prepareTextarea = function()\n{\n\tif (this.textarea.lastChild != null &&\n\t\tthis.textarea.lastChild.nodeName == 'BR')\n\t{\n\t\tthis.textarea.removeChild(this.textarea.lastChild);\n\t}\n};\n\n/**\n * Function: isHideLabel\n * \n * Returns true if the label should be hidden while the cell is being\n * edited.\n */\nmxCellEditor.prototype.isHideLabel = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns the minimum width and height for editing the given state.\n */\nmxCellEditor.prototype.getMinimumSize = function(state)\n{\n\tvar scale = this.graph.getView().scale;\n\t\n\treturn new mxRectangle(0, 0, (state.text == null) ? 30 : state.text.size * scale + 20,\n\t\t\t(this.textarea.style.textAlign == 'left') ? 120 : 40);\n};\n\n/**\n * Function: getEditorBounds\n * \n * Returns the <mxRectangle> that defines the bounds of the editor.\n */\nmxCellEditor.prototype.getEditorBounds = function(state)\n{\n\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n\tvar scale = this.graph.getView().scale;\n\tvar minSize = this.getMinimumSize(state);\n\tvar minWidth = minSize.width;\n \tvar minHeight = minSize.height;\n \tvar result = null;\n \t\n \tif (!isEdge && state.view.graph.cellRenderer.legacySpacing && state.style[mxConstants.STYLE_OVERFLOW] == 'fill')\n \t{\n \t\tresult = state.shape.getLabelBounds(mxRectangle.fromRectangle(state));\n \t}\n \telse\n \t{\n\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 0) * scale;\n\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\n\t \tresult = new mxRectangle(state.x, state.y,\n\t \t\t Math.max(minWidth, state.width - spacingLeft - spacingRight),\n\t \t\t Math.max(minHeight, state.height - spacingTop - spacingBottom));\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tresult = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(result) : result;\n\t\n\t\tif (isEdge)\n\t\t{\n\t\t\tresult.x = state.absoluteOffset.x;\n\t\t\tresult.y = state.absoluteOffset.y;\n\t\n\t\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\t// Workaround for label containing just spaces in which case\n\t\t\t\t// the bounding box location contains negative numbers \n\t\t\t\tif (state.text.boundingBox.x > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.x = state.text.boundingBox.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.y = state.text.boundingBox.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tresult.x = Math.min(result.x, state.text.boundingBox.x);\n\t\t\tresult.y = Math.min(result.y, state.text.boundingBox.y);\n\t\t}\n\t\n\t\tresult.x += spacingLeft;\n\t\tresult.y += spacingTop;\n\t\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (!isEdge)\n\t\t\t{\n\t\t\t\tresult.width = Math.max(result.width, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(result.height, state.text.boundingBox.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.width = Math.max(minWidth, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(minHeight, state.text.boundingBox.height);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Applies the horizontal and vertical label positions\n\t\tif (this.graph.getModel().isVertex(state.cell))\n\t\t{\n\t\t\tvar horizontal = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\n\t\t\tif (horizontal == mxConstants.ALIGN_LEFT)\n\t\t\t{\n\t\t\t\tresult.x -= state.width;\n\t\t\t}\n\t\t\telse if (horizontal == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tresult.x += state.width;\n\t\t\t}\n\t\n\t\t\tvar vertical = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\t\t\tif (vertical == mxConstants.ALIGN_TOP)\n\t\t\t{\n\t\t\t\tresult.y -= state.height;\n\t\t\t}\n\t\t\telse if (vertical == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tresult.y += state.height;\n\t\t\t}\n\t\t}\n \t}\n \t\n \treturn new mxRectangle(Math.round(result.x), Math.round(result.y), Math.round(result.width), Math.round(result.height));\n};\n\n/**\n * Function: getEmptyLabelText\n *\n * Returns the initial label value to be used of the label of the given\n * cell is empty. This label is displayed and cleared on the first keystroke.\n * This implementation returns <emptyLabelText>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a text for an empty editing box should be\n * returned.\n */\nmxCellEditor.prototype.getEmptyLabelText = function (cell)\n{\n\treturn this.emptyLabelText;\n};\n\n/**\n * Function: getEditingCell\n *\n * Returns the cell that is currently being edited or null if no cell is\n * being edited.\n */\nmxCellEditor.prototype.getEditingCell = function ()\n{\n\treturn this.editingCell;\n};\n\n/**\n * Function: destroy\n *\n * Destroys the editor and removes all associated resources.\n */\nmxCellEditor.prototype.destroy = function ()\n{\n\tif (this.textarea != null)\n\t{\n\t\tmxEvent.release(this.textarea);\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tthis.textarea = null;\n\n\t}\n\t\t\t\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\n\tif (this.zoomHandler)\n\t{\n\t\tthis.graph.view.removeListener(this.zoomHandler);\n\t\tthis.zoomHandler = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxCellRenderer\n * \n * Renders cells into a document object model. The <defaultShapes> is a global\n * map of shapename, constructor pairs that is used in all instances. You can\n * get a list of all available shape names using the following code.\n * \n * In general the cell renderer is in charge of creating, redrawing and\n * destroying the shape and label associated with a cell state, as well as\n * some other graphical objects, namely controls and overlays. The shape\n * hieararchy in the display (ie. the hierarchy in which the DOM nodes\n * appear in the document) does not reflect the cell hierarchy. The shapes\n * are a (flat) sequence of shapes and labels inside the draw pane of the\n * graph view, with some exceptions, namely the HTML labels being placed\n * directly inside the graph container for certain browsers.\n * \n * (code)\n * mxLog.show();\n * for (var i in mxCellRenderer.defaultShapes)\n * {\n *   mxLog.debug(i);\n * }\n * (end)\n *\n * Constructor: mxCellRenderer\n * \n * Constructs a new cell renderer with the following built-in shapes:\n * arrow, rectangle, ellipse, rhombus, image, line, label, cylinder,\n * swimlane, connector, actor and cloud.\n */\nfunction mxCellRenderer() { };\n\n/**\n * Variable: defaultShapes\n * \n * Static array that contains the globally registered shapes which are\n * known to all instances of this class. For adding new shapes you should\n * use the static <mxCellRenderer.registerShape> function.\n */\nmxCellRenderer.defaultShapes = new Object();\n\n/**\n * Variable: defaultEdgeShape\n * \n * Defines the default shape for edges. Default is <mxConnector>.\n */\nmxCellRenderer.prototype.defaultEdgeShape = mxConnector;\n\n/**\n * Variable: defaultVertexShape\n * \n * Defines the default shape for vertices. Default is <mxRectangleShape>.\n */\nmxCellRenderer.prototype.defaultVertexShape = mxRectangleShape;\n\n/**\n * Variable: defaultTextShape\n * \n * Defines the default shape for labels. Default is <mxText>.\n */\nmxCellRenderer.prototype.defaultTextShape = mxText;\n\n/**\n * Variable: legacyControlPosition\n * \n * Specifies if the folding icon should ignore the horizontal\n * orientation of a swimlane. Default is true.\n */\nmxCellRenderer.prototype.legacyControlPosition = true;\n\n/**\n * Variable: legacySpacing\n * \n * Specifies if spacing and label position should be ignored if overflow is\n * fill or width. Default is true for backwards compatiblity.\n */\nmxCellRenderer.prototype.legacySpacing = true;\n\n/**\n * Variable: antiAlias\n * \n * Anti-aliasing option for new shapes. Default is true.\n */\nmxCellRenderer.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxCellRenderer.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: forceControlClickHandler\n * \n * Specifies if the enabled state of the graph should be ignored in the control\n * click handler (to allow folding in disabled graphs). Default is false.\n */\nmxCellRenderer.prototype.forceControlClickHandler = false;\n\n/**\n * Function: registerShape\n * \n * Registers the given constructor under the specified key in this instance\n * of the renderer.\n * \n * Example:\n * \n * (code)\n * mxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\n * (end)\n * \n * Parameters:\n * \n * key - String representing the shape name.\n * shape - Constructor of the <mxShape> subclass.\n */\nmxCellRenderer.registerShape = function(key, shape)\n{\n\tmxCellRenderer.defaultShapes[key] = shape;\n};\n\n// Adds default shapes into the default shapes array\nmxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ELLIPSE, mxEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_RHOMBUS, mxRhombus);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CYLINDER, mxCylinder);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CONNECTOR, mxConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ACTOR, mxActor);\nmxCellRenderer.registerShape(mxConstants.SHAPE_TRIANGLE, mxTriangle);\nmxCellRenderer.registerShape(mxConstants.SHAPE_HEXAGON, mxHexagon);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CLOUD, mxCloud);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LINE, mxLine);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW, mxArrow);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW_CONNECTOR, mxArrowConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_DOUBLE_ELLIPSE, mxDoubleEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_SWIMLANE, mxSwimlane);\nmxCellRenderer.registerShape(mxConstants.SHAPE_IMAGE, mxImageShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LABEL, mxLabel);\n\n/**\n * Function: initializeShape\n * \n * Initializes the shape in the given state by calling its init method with\n * the correct container after configuring it using <configureShape>.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be initialized.\n */\nmxCellRenderer.prototype.initializeShape = function(state)\n{\n\tstate.shape.dialect = state.view.graph.dialect;\n\tthis.configureShape(state);\n\tstate.shape.init(state.view.getDrawPane());\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be created.\n */\nmxCellRenderer.prototype.createShape = function(state)\n{\n\tvar shape = null;\n\t\n\tif (state.style != null)\n\t{\n\t\t// Checks if there is a stencil for the name and creates\n\t\t// a shape instance for the stencil if one exists\n\t\tvar stencil = mxStencilRegistry.getStencil(state.style[mxConstants.STYLE_SHAPE]);\n\t\t\n\t\tif (stencil != null)\n\t\t{\n\t\t\tshape = new mxShape(stencil);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar ctor = this.getShapeConstructor(state);\n\t\t\tshape = new ctor();\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: createIndicatorShape\n * \n * Creates the indicator shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the indicator shape should be created.\n */\nmxCellRenderer.prototype.createIndicatorShape = function(state)\n{\n\tstate.shape.indicatorShape = this.getShape(state.view.graph.getIndicatorShape(state));\n};\n\n/**\n * Function: getShape\n * \n * Returns the shape for the given name from <defaultShapes>.\n */\nmxCellRenderer.prototype.getShape = function(name)\n{\n\treturn (name != null) ? mxCellRenderer.defaultShapes[name] : null;\n};\n\n/**\n * Function: getShapeConstructor\n * \n * Returns the constructor to be used for creating the shape.\n */\nmxCellRenderer.prototype.getShapeConstructor = function(state)\n{\n\tvar ctor = this.getShape(state.style[mxConstants.STYLE_SHAPE]);\n\t\n\tif (ctor == null)\n\t{\n\t\tctor = (state.view.graph.getModel().isEdge(state.cell)) ?\n\t\t\tthis.defaultEdgeShape : this.defaultVertexShape;\n\t}\n\t\n\treturn ctor;\n};\n\n/**\n * Function: configureShape\n * \n * Configures the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be configured.\n */\nmxCellRenderer.prototype.configureShape = function(state)\n{\n\tstate.shape.apply(state);\n\tstate.shape.image = state.view.graph.getImage(state);\n\tstate.shape.indicatorColor = state.view.graph.getIndicatorColor(state);\n\tstate.shape.indicatorStrokeColor = state.style[mxConstants.STYLE_INDICATOR_STROKECOLOR];\n\tstate.shape.indicatorGradientColor = state.view.graph.getIndicatorGradientColor(state);\n\tstate.shape.indicatorDirection = state.style[mxConstants.STYLE_INDICATOR_DIRECTION];\n\tstate.shape.indicatorImage = state.view.graph.getIndicatorImage(state);\n\n\tthis.postConfigureShape(state);\n};\n\n/**\n * Function: postConfigureShape\n * \n * Replaces any reserved words used for attributes, eg. inherit,\n * indicated or swimlane for colors in the shape for the given state.\n * This implementation resolves these keywords on the fill, stroke\n * and gradient color keys.\n */\nmxCellRenderer.prototype.postConfigureShape = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tthis.resolveColor(state, 'indicatorColor', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'indicatorGradientColor', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'fill', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'stroke', mxConstants.STYLE_STROKECOLOR);\n\t\tthis.resolveColor(state, 'gradient', mxConstants.STYLE_GRADIENTCOLOR);\n\t}\n};\n\n/**\n * Function: checkPlaceholderStyles\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.checkPlaceholderStyles = function(state)\n{\n\t// LATER: Check if the color has actually changed\n\tif (state.style != null)\n\t{\n\t\tvar values = ['inherit', 'swimlane', 'indicated'];\n\t\tvar styles = [mxConstants.STYLE_FILLCOLOR, mxConstants.STYLE_STROKECOLOR, mxConstants.STYLE_GRADIENTCOLOR];\n\t\t\n\t\tfor (var i = 0; i < styles.length; i++)\n\t\t{\n\t\t\tif (mxUtils.indexOf(values, state.style[styles[i]]) >= 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: resolveColor\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.resolveColor = function(state, field, key)\n{\n\tvar value = state.shape[field];\n\tvar graph = state.view.graph;\n\tvar referenced = null;\n\t\n\tif (value == 'inherit')\n\t{\n\t\treferenced = graph.model.getParent(state.cell);\n\t}\n\telse if (value == 'swimlane')\n\t{\n\t\tstate.shape[field] = (key == mxConstants.STYLE_STROKECOLOR) ? '#000000' : '#ffffff';\n\t\t\n\t\tif (graph.model.getTerminal(state.cell, false) != null)\n\t\t{\n\t\t\treferenced = graph.model.getTerminal(state.cell, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treferenced = state.cell;\n\t\t}\n\t\t\n\t\treferenced = graph.getSwimlane(referenced);\n\t\tkey = graph.swimlaneIndicatorColorAttribute;\n\t}\n\telse if (value == 'indicated')\n\t{\n\t\tstate.shape[field] = state.shape.indicatorColor;\n\t}\n\t\n\tif (referenced != null)\n\t{\n\t\tvar rstate = graph.getView().getState(referenced);\n\t\tstate.shape[field] = null;\n\n\t\tif (rstate != null)\n\t\t{\n\t\t\tif (rstate.shape != null && field != 'indicatorColor')\n\t\t\t{\n\t\t\t\tstate.shape[field] = rstate.shape[field];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape[field] = rstate.style[key];\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelValue\n * \n * Returns the value to be used for the label.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.getLabelValue = function(state)\n{\n\treturn state.view.graph.getLabel(state.cell);\n};\n\n/**\n * Function: createLabel\n * \n * Creates the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.createLabel = function(state, value)\n{\n\tvar graph = state.view.graph;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\t\n\tif (state.style[mxConstants.STYLE_FONTSIZE] > 0 || state.style[mxConstants.STYLE_FONTSIZE] == null)\n\t{\n\t\t// Avoids using DOM node for empty labels\n\t\tvar isForceHtml = (graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\n\t\tstate.text = new this.defaultTextShape(value, new mxRectangle(),\n\t\t\t\t(state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER),\n\t\t\t\tgraph.getVerticalAlign(state),\n\t\t\t\tstate.style[mxConstants.STYLE_FONTCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTFAMILY],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSIZE],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSTYLE],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_TOP],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_RIGHT],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_BOTTOM],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_LEFT],\n\t\t\t\tstate.style[mxConstants.STYLE_HORIZONTAL],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BORDERCOLOR],\n\t\t\t\tgraph.isWrapping(state.cell) && graph.isHtmlLabel(state.cell),\n\t\t\t\tgraph.isLabelClipped(state.cell),\n\t\t\t\tstate.style[mxConstants.STYLE_OVERFLOW],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_PADDING],\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION));\n\t\tstate.text.opacity = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tstate.text.dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\t\tstate.text.style = state.style;\n\t\tstate.text.state = state;\n\t\tthis.initializeLabel(state, state.text);\n\t\t\n\t\t// Workaround for touch devices routing all events for a mouse gesture\n\t\t// (down, move, up) via the initial DOM node. IE additionally redirects\n\t\t// the event via the initial DOM node but the event source is the node\n\t\t// under the mouse, so we need to check if this is the case and force\n\t\t// getCellAt for the subsequent mouseMoves and the final mouseUp.\n\t\tvar forceGetCell = false;\n\t\t\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar result = state;\n\n\t\t\tif (mxClient.IS_TOUCH || forceGetCell)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t};\n\t\t\n\t\t// TODO: Add handling for special touch device gestures\n\t\tmxEvent.addGestureListeners(state.text.node,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\t\tforceGetCell = graph.dialect != mxConstants.DIALECT_SVG &&\n\t\t\t\t\t\tmxEvent.getSource(evt).nodeName == 'IMG';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t\tforceGetCell = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// Uses double click timeout in mxGraph for quirks mode\n\t\tif (graph.nativeDblClickEnabled)\n\t\t{\n\t\t\tmxEvent.addListener(state.text.node, 'dblclick',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Function: initializeLabel\n * \n * Initiailzes the label with a suitable container.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be initialized.\n */\nmxCellRenderer.prototype.initializeLabel = function(state, shape)\n{\n\tif (mxClient.IS_SVG && mxClient.NO_FO && shape.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.init(state.view.graph.container);\n\t}\n\telse\n\t{\n\t\tshape.init(state.view.getDrawPane());\n\t}\n};\n\n/**\n * Function: createCellOverlays\n * \n * Creates the actual shape for showing the overlay for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n */\nmxCellRenderer.prototype.createCellOverlays = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar overlays = graph.getCellOverlays(state.cell);\n\tvar dict = null;\n\t\n\tif (overlays != null)\n\t{\n\t\tdict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tvar shape = (state.overlays != null) ? state.overlays.remove(overlays[i]) : null;\n\t\t\t\n\t\t\tif (shape == null)\n\t\t\t{\n\t\t\t\tvar tmp = new mxImageShape(new mxRectangle(), overlays[i].image.src);\n\t\t\t\ttmp.dialect = state.view.graph.dialect;\n\t\t\t\ttmp.preserveImageAspect = false;\n\t\t\t\ttmp.overlay = overlays[i];\n\t\t\t\tthis.initializeOverlay(state, tmp);\n\t\t\t\tthis.installCellOverlayListeners(state, overlays[i], tmp);\n\t\n\t\t\t\tif (overlays[i].cursor != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.node.style.cursor = overlays[i].cursor;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdict.put(overlays[i], tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdict.put(overlays[i], shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Removes unused\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tshape.destroy();\n\t\t});\n\t}\n\t\n\tstate.overlays = dict;\n};\n\n/**\n * Function: initializeOverlay\n * \n * Initializes the given overlay.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n * overlay - <mxImageShape> that represents the overlay.\n */\nmxCellRenderer.prototype.initializeOverlay = function(state, overlay)\n{\n\toverlay.init(state.view.getOverlayPane());\n};\n\n/**\n * Function: installOverlayListeners\n * \n * Installs the listeners for the given <mxCellState>, <mxCellOverlay> and\n * <mxShape> that represents the overlay.\n */\nmxCellRenderer.prototype.installCellOverlayListeners = function(state, overlay, shape)\n{\n\tvar graph  = state.view.graph;\n\t\n\tmxEvent.addListener(shape.node, 'click', function (evt)\n\t{\n\t\tif (graph.isEditing())\n\t\t{\n\t\t\tgraph.stopEditing(!graph.isInvokesStopCellEditing());\n\t\t}\n\t\t\n\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t'event', evt, 'cell', state.cell));\n\t});\n\t\n\tmxEvent.addGestureListeners(shape.node,\n\t\tfunction (evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE,\n\t\t\t\tnew mxMouseEvent(evt, state));\n\t\t});\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tmxEvent.addListener(shape.node, 'touchend', function (evt)\n\t\t{\n\t\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t\t'event', evt, 'cell', state.cell));\n\t\t});\n\t}\n};\n\n/**\n * Function: createControl\n * \n * Creates the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be created.\n */\nmxCellRenderer.prototype.createControl = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar image = graph.getFoldingImage(state);\n\t\n\tif (graph.foldingEnabled && image != null)\n\t{\n\t\tif (state.control == null)\n\t\t{\n\t\t\tvar b = new mxRectangle(0, 0, image.width, image.height);\n\t\t\tstate.control = new mxImageShape(b, image.src);\n\t\t\tstate.control.preserveImageAspect = false;\n\t\t\tstate.control.dialect = graph.dialect;\n\n\t\t\tthis.initControl(state, state.control, true, this.createControlClickHandler(state));\n\t\t}\n\t}\n\telse if (state.control != null)\n\t{\n\t\tstate.control.destroy();\n\t\tstate.control = null;\n\t}\n};\n\n/**\n * Function: createControlClickHandler\n * \n * Hook for creating the click handler for the folding icon.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control click handler should be returned.\n */\nmxCellRenderer.prototype.createControlClickHandler = function(state)\n{\n\tvar graph = state.view.graph;\n\t\n\treturn mxUtils.bind(this, function (evt)\n\t{\n\t\tif (this.forceControlClickHandler || graph.isEnabled())\n\t\t{\n\t\t\tvar collapse = !graph.isCellCollapsed(state.cell);\n\t\t\tgraph.foldCells(collapse, false, [state.cell], null, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n};\n\n/**\n * Function: initControl\n * \n * Initializes the given control and returns the corresponding DOM node.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be initialized.\n * control - <mxShape> to be initialized.\n * handleEvents - Boolean indicating if mousedown and mousemove should fire events via the graph.\n * clickHandler - Optional function to implement clicks on the control.\n */\nmxCellRenderer.prototype.initControl = function(state, control, handleEvents, clickHandler)\n{\n\tvar graph = state.view.graph;\n\t\n\t// In the special case where the label is in HTML and the display is SVG the image\n\t// should go into the graph container directly in order to be clickable. Otherwise\n\t// it is obscured by the HTML label that overlaps the cell.\n\tvar isForceHtml = graph.isHtmlLabel(state.cell) && mxClient.NO_FO &&\n\t\tgraph.dialect == mxConstants.DIALECT_SVG;\n\n\tif (isForceHtml)\n\t{\n\t\tcontrol.dialect = mxConstants.DIALECT_PREFERHTML;\n\t\tcontrol.init(graph.container);\n\t\tcontrol.node.style.zIndex = 1;\n\t}\n\telse\n\t{\n\t\tcontrol.init(state.view.getOverlayPane());\n\t}\n\n\tvar node = control.innerNode || control.node;\n\t\n\t// Workaround for missing click event on iOS is to check tolerance below\n\tif (clickHandler != null && !mxClient.IS_IOS)\n\t{\n\t\tif (graph.isEnabled())\n\t\t{\n\t\t\tnode.style.cursor = 'pointer';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(node, 'click', clickHandler);\n\t}\n\t\n\tif (handleEvents)\n\t{\n\t\tvar first = null;\n\n\t\tmxEvent.addGestureListeners(node,\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tfirst = new mxPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, state));\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\n\t\t// Uses capture phase for event interception to stop bubble phase\n\t\tif (clickHandler != null && mxClient.IS_IOS)\n\t\t{\n\t\t\tnode.addEventListener('touchend', function(evt)\n\t\t\t{\n\t\t\t\tif (first != null)\n\t\t\t\t{\n\t\t\t\t\tvar tol = graph.tolerance;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(first.x - mxEvent.getClientX(evt)) < tol &&\n\t\t\t\t\t\tMath.abs(first.y - mxEvent.getClientY(evt)) < tol)\n\t\t\t\t\t{\n\t\t\t\t\t\tclickHandler.call(clickHandler, evt);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, true);\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: isShapeEvent\n * \n * Returns true if the event is for the shape of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shape fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isShapeEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: isLabelEvent\n * \n * Returns true if the event is for the label of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isLabelEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: installListeners\n * \n * Installs the event listeners for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the event listeners should be isntalled.\n */\nmxCellRenderer.prototype.installListeners = function(state)\n{\n\tvar graph = state.view.graph;\n\n\t// Workaround for touch devices routing all events for a mouse\n\t// gesture (down, move, up) via the initial DOM node. Same for\n\t// HTML images in all IE versions (VML images are working).\n\tvar getState = function(evt)\n\t{\n\t\tvar result = state;\n\t\t\n\t\tif ((graph.dialect != mxConstants.DIALECT_SVG && mxEvent.getSource(evt).nodeName == 'IMG') || mxClient.IS_TOUCH)\n\t\t{\n\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\n\t\t\t// Dispatches the drop event to the graph which\n\t\t\t// consumes and executes the source function\n\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\tmxEvent.addGestureListeners(state.shape.node,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t})\n\t);\n\t\n\t// Uses double click timeout in mxGraph for quirks mode\n\tif (graph.nativeDblClickEnabled)\n\t{\n\t\tmxEvent.addListener(state.shape.node, 'dblclick',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n};\n\n/**\n * Function: redrawLabel\n * \n * Redraws the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawLabel = function(state, forced)\n{\n\tvar graph = state.view.graph;\n\tvar value = this.getLabelValue(state);\n\tvar wrapping = graph.isWrapping(state.cell);\n\tvar clipping = graph.isLabelClipped(state.cell);\n\tvar isForceHtml = (state.view.graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\tvar dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\tvar overflow = state.style[mxConstants.STYLE_OVERFLOW] || 'visible';\n\n\tif (state.text != null && (state.text.wrap != wrapping || state.text.clipped != clipping ||\n\t\tstate.text.overflow != overflow || state.text.dialect != dialect))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\t\n\tif (state.text == null && value != null && (mxUtils.isNode(value) || value.length > 0))\n\t{\n\t\tthis.createLabel(state, value);\n\t}\n\telse if (state.text != null && (value == null || value.length == 0))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\n\tif (state.text != null)\n\t{\n\t\t// Forced is true if the style has changed, so to get the updated\n\t\t// result in getLabelBounds we apply the new style to the shape\n\t\tif (forced)\n\t\t{\n\t\t\t// Checks if a full repaint is needed\n\t\t\tif (state.text.lastValue != null && this.isTextShapeInvalid(state, state.text))\n\t\t\t{\n\t\t\t\t// Forces a full repaint\n\t\t\t\tstate.text.lastValue = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.resetStyles();\n\t\t\tstate.text.apply(state);\n\t\t\t\n\t\t\t// Special case where value is obtained via hook in graph\n\t\t\tstate.text.valign = graph.getVerticalAlign(state);\n\t\t}\n\t\t\n\t\tvar bounds = this.getLabelBounds(state);\n\t\tvar nextScale = this.getTextScale(state);\n\t\t\n\t\tif (forced || state.text.value != value || state.text.isWrapping != wrapping ||\n\t\t\tstate.text.overflow != overflow || state.text.isClipping != clipping ||\n\t\t\tstate.text.scale != nextScale || state.text.dialect != dialect ||\n\t\t\t!state.text.bounds.equals(bounds))\n\t\t{\n\t\t\t// Forces an update of the text bounding box\n\t\t\tif (state.text.bounds.width != 0 && state.unscaledWidth != null &&\n\t\t\t\tMath.round((state.text.bounds.width /\n\t\t\t\tstate.text.scale * nextScale) - bounds.width) != 0)\n\t\t\t{\n\t\t\t\tstate.unscaledWidth = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.dialect = dialect;\n\t\t\tstate.text.value = value;\n\t\t\tstate.text.bounds = bounds;\n\t\t\tstate.text.scale = nextScale;\n\t\t\tstate.text.wrap = wrapping;\n\t\t\tstate.text.clipped = clipping;\n\t\t\tstate.text.overflow = overflow;\n\t\t\t\n\t\t\t// Preserves visible state\n\t\t\tvar vis = state.text.node.style.visibility;\n\t\t\tthis.redrawLabelShape(state.text);\n\t\t\tstate.text.node.style.visibility = vis;\n\t\t}\n\t}\n};\n\n/**\n * Function: isTextShapeInvalid\n * \n * Returns true if the style for the text shape has changed.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be checked.\n * shape - <mxText> shape to be checked.\n */\nmxCellRenderer.prototype.isTextShapeInvalid = function(state, shape)\n{\n\tfunction check(property, stylename, defaultValue)\n\t{\n\t\tvar result = false;\n\t\t\n\t\t// Workaround for spacing added to directional spacing\n\t\tif (stylename == 'spacingTop' || stylename == 'spacingRight' ||\n\t\t\tstylename == 'spacingBottom' || stylename == 'spacingLeft')\n\t\t{\n\t\t\tresult = parseFloat(shape[property]) - parseFloat(shape.spacing) !=\n\t\t\t\t(state.style[stylename] || defaultValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = shape[property] != (state.style[stylename] || defaultValue);\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\treturn check('fontStyle', mxConstants.STYLE_FONTSTYLE, mxConstants.DEFAULT_FONTSTYLE) ||\n\t\tcheck('family', mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY) ||\n\t\tcheck('size', mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE) ||\n\t\tcheck('color', mxConstants.STYLE_FONTCOLOR, 'black') ||\n\t\tcheck('align', mxConstants.STYLE_ALIGN, '') ||\n\t\tcheck('valign', mxConstants.STYLE_VERTICAL_ALIGN, '') ||\n\t\tcheck('spacing', mxConstants.STYLE_SPACING, 2) ||\n\t\tcheck('spacingTop', mxConstants.STYLE_SPACING_TOP, 0) ||\n\t\tcheck('spacingRight', mxConstants.STYLE_SPACING_RIGHT, 0) ||\n\t\tcheck('spacingBottom', mxConstants.STYLE_SPACING_BOTTOM, 0) ||\n\t\tcheck('spacingLeft', mxConstants.STYLE_SPACING_LEFT, 0) ||\n\t\tcheck('horizontal', mxConstants.STYLE_HORIZONTAL, true) ||\n\t\tcheck('background', mxConstants.STYLE_LABEL_BACKGROUNDCOLOR) ||\n\t\tcheck('border', mxConstants.STYLE_LABEL_BORDERCOLOR) ||\n\t\tcheck('opacity', mxConstants.STYLE_TEXT_OPACITY, 100) ||\n\t\tcheck('textDirection', mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n};\n\n/**\n * Function: redrawLabelShape\n * \n * Called to invoked redraw on the given text shape.\n * \n * Parameters:\n * \n * shape - <mxText> shape to be redrawn.\n */\nmxCellRenderer.prototype.redrawLabelShape = function(shape)\n{\n\tshape.redraw();\n};\n\n/**\n * Function: getTextScale\n * \n * Returns the scaling used for the label of the given state\n * \n * Parameters:\n * \n * state - <mxCellState> whose label scale should be returned.\n */\nmxCellRenderer.prototype.getTextScale = function(state)\n{\n\treturn state.view.scale;\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds to be used to draw the label of the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be returned.\n */\nmxCellRenderer.prototype.getLabelBounds = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar scale = state.view.scale;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\tvar bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y);\n\n\tif (isEdge)\n\t{\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * scale;\n\t\tbounds.y += spacing.y * scale;\n\t\t\n\t\tvar geo = graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tbounds.width = Math.max(0, geo.width * scale);\n\t\t\tbounds.height = Math.max(0, geo.height * scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Inverts label position\n\t\tif (state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = bounds.x;\n\t\t\tbounds.x = bounds.y;\n\t\t\tbounds.y = tmp;\n\t\t}\n\t\t\n\t\tbounds.x += state.x;\n\t\tbounds.y += state.y;\n\t\t\n\t\t// Minimum of 1 fixes alignment bug in HTML labels\n\t\tbounds.width = Math.max(1, state.width);\n\t\tbounds.height = Math.max(1, state.height);\n\n\t\tvar sc = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\t\t\n\t\tif (sc != mxConstants.NONE && sc != '')\n\t\t{\n\t\t\tvar s = parseFloat(mxUtils.getValue(state.style, mxConstants.STYLE_STROKEWIDTH, 1)) * scale;\n\t\t\tvar dx = 1 + Math.floor((s - 1) / 2);\n\t\t\tvar dh = Math.floor(s + 1);\n\t\t\t\n\t\t\tbounds.x += dx;\n\t\t\tbounds.y += dx;\n\t\t\tbounds.width -= dh;\n\t\t\tbounds.height -= dh;\n\t\t}\n\t}\n\n\tif (state.text.isPaintBoundsInverted())\n\t{\n\t\t// Rotates around center of state\n\t\tvar t = (state.width - state.height) / 2;\n\t\tbounds.x += t;\n\t\tbounds.y -= t;\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\n\t// Shape can modify its label bounds\n\tif (state.shape != null)\n\t{\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tif (hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tbounds = state.shape.getLabelBounds(bounds);\n\t\t}\n\t}\n\t\n\t// Label width style overrides actual label width\n\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\n\tif (lw != null)\n\t{\n\t\tbounds.width = parseFloat(lw) * scale;\n\t}\n\t\n\tif (!isEdge)\n\t{\n\t\tthis.rotateLabelBounds(state, bounds);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: rotateLabelBounds\n * \n * Adds the shape rotation to the given label bounds and\n * applies the alignment and offsets.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be rotated.\n * bounds - <mxRectangle> the rectangle to be rotated.\n */\nmxCellRenderer.prototype.rotateLabelBounds = function(state, bounds)\n{\n\tbounds.y -= state.text.margin.y * bounds.height;\n\tbounds.x -= state.text.margin.x * bounds.width;\n\t\n\tif (!this.legacySpacing || (state.style[mxConstants.STYLE_OVERFLOW] != 'fill' && state.style[mxConstants.STYLE_OVERFLOW] != 'width'))\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * s;\n\t\tbounds.y += spacing.y * s;\n\t\t\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tbounds.width = Math.max(0, bounds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (state.text.spacingLeft * s + state.text.spacingRight * s) : 0));\n\t\tbounds.height = Math.max(0, bounds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (state.text.spacingTop * s + state.text.spacingBottom * s) : 0));\n\t}\n\n\tvar theta = state.text.getTextRotation();\n\n\t// Only needed if rotated around another center\n\tif (theta != 0 && state != null && state.view.graph.model.isVertex(state.cell))\n\t{\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\t\n\t\tif (bounds.x != cx || bounds.y != cy)\n\t\t{\n\t\t\tvar rad = theta * (Math.PI / 180);\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(bounds.x, bounds.y),\n\t\t\t\t\tMath.cos(rad), Math.sin(rad), new mxPoint(cx, cy));\n\t\t\t\n\t\t\tbounds.x = pt.x;\n\t\t\tbounds.y = pt.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawCellOverlays\n * \n * Redraws the overlays for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose overlays should be redrawn.\n */\nmxCellRenderer.prototype.redrawCellOverlays = function(state, forced)\n{\n\tthis.createCellOverlays(state);\n\n\tif (state.overlays != null)\n\t{\n\t\tvar rot = mxUtils.mod(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0), 90);\n        var rad = mxUtils.toRadians(rot);\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n\t\t\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tvar bounds = shape.overlay.getBounds(state);\n\t\t\n\t\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t\t{\n\t\t\t\tif (state.shape != null && rot != 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = bounds.getCenterX();\n\t\t\t\t\tvar cy = bounds.getCenterY();\n\n\t\t\t\t\tvar point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t        bounds.x = Math.round(cx - bounds.width / 2);\n\t\t\t        bounds.y = Math.round(cy - bounds.height / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (forced || shape.bounds == null || shape.scale != state.view.scale ||\n\t\t\t\t!shape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tshape.bounds = bounds;\n\t\t\t\tshape.scale = state.view.scale;\n\t\t\t\tshape.redraw();\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Function: redrawControl\n * \n * Redraws the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control should be redrawn.\n */\nmxCellRenderer.prototype.redrawControl = function(state, forced)\n{\n\tvar image = state.view.graph.getFoldingImage(state);\n\t\n\tif (state.control != null && image != null)\n\t{\n\t\tvar bounds = this.getControlBounds(state, image.width, image.height);\n\t\tvar r = (this.legacyControlPosition) ?\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0) :\n\t\t\t\tstate.shape.getTextRotation();\n\t\tvar s = state.view.scale;\n\t\t\n\t\tif (forced || state.control.scale != s || !state.control.bounds.equals(bounds) ||\n\t\t\tstate.control.rotation != r)\n\t\t{\n\t\t\tstate.control.rotation = r;\n\t\t\tstate.control.bounds = bounds;\n\t\t\tstate.control.scale = s;\n\t\t\t\n\t\t\tstate.control.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getControlBounds\n * \n * Returns the bounds to be used to draw the control (folding icon) of the\n * given state.\n */\nmxCellRenderer.prototype.getControlBounds = function(state, w, h)\n{\n\tif (state.control != null)\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\n\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t{\n\t\t\tcx = state.x + w * s;\n\t\t\tcy = state.y + h * s;\n\t\t\t\n\t\t\tif (state.shape != null)\n\t\t\t{\n\t\t\t\t// TODO: Factor out common code\n\t\t\t\tvar rot = state.shape.getShapeRotation();\n\t\t\t\t\n\t\t\t\tif (this.legacyControlPosition)\n\t\t\t\t{\n\t\t\t\t\trot = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (state.shape.isPaintBoundsInverted())\n\t\t\t\t\t{\n\t\t\t\t\t\tvar t = (state.width - state.height) / 2;\n\t\t\t\t\t\tcx += t;\n\t\t\t\t\t\tcy -= t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (rot != 0)\n\t\t\t\t{\n\t\t\t        var rad = mxUtils.toRadians(rot);\n\t\t\t        var cos = Math.cos(rad);\n\t\t\t        var sin = Math.sin(rad);\n\t\t\t        \n\t\t\t        var point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (state.view.graph.getModel().isEdge(state.cell)) ? \n\t\t\tnew mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s))\n\t\t\t: new mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: insertStateAfter\n * \n * Inserts the given array of <mxShapes> after the given nodes in the DOM.\n * \n * Parameters:\n * \n * shapes - Array of <mxShapes> to be inserted.\n * node - Node in <drawPane> after which the shapes should be inserted.\n * htmlNode - Node in the graph container after which the shapes should be inserted that\n * will not go into the <drawPane> (eg. HTML labels without foreignObjects).\n */\nmxCellRenderer.prototype.insertStateAfter = function(state, node, htmlNode)\n{\n\tvar shapes = this.getShapesForState(state);\n\t\n\tfor (var i = 0; i < shapes.length; i++)\n\t{\n\t\tif (shapes[i] != null && shapes[i].node != null)\n\t\t{\n\t\t\tvar html = shapes[i].node.parentNode != state.view.getDrawPane() &&\n\t\t\t\tshapes[i].node.parentNode != state.view.getOverlayPane();\n\t\t\tvar temp = (html) ? htmlNode : node;\n\t\t\t\n\t\t\tif (temp != null && temp.nextSibling != shapes[i].node)\n\t\t\t{\n\t\t\t\tif (temp.nextSibling == null)\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.appendChild(shapes[i].node);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.insertBefore(shapes[i].node, temp.nextSibling);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (temp == null)\n\t\t\t{\n\t\t\t\t// Special case: First HTML node should be first sibling after canvas\n\t\t\t\tif (shapes[i].node.parentNode == state.view.graph.container)\n\t\t\t\t{\n\t\t\t\t\tvar canvas = state.view.canvas;\n\t\t\t\t\t\n\t\t\t\t\twhile (canvas != null && canvas.parentNode != state.view.graph.container)\n\t\t\t\t\t{\n\t\t\t\t\t\tcanvas = canvas.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (canvas != null && canvas.nextSibling != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (canvas.nextSibling != shapes[i].node)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, canvas.nextSibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshapes[i].node.parentNode.appendChild(shapes[i].node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (shapes[i].node.parentNode.firstChild != null && shapes[i].node.parentNode.firstChild != shapes[i].node)\n\t\t\t\t{\n\t\t\t\t\t// Inserts the node as the first child of the parent to implement the order\n\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, shapes[i].node.parentNode.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (html)\n\t\t\t{\n\t\t\t\thtmlNode = shapes[i].node;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode = shapes[i].node;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [node, htmlNode];\n};\n\n/**\n * Function: getShapesForState\n * \n * Returns the <mxShapes> for the given cell state in the order in which they should\n * appear in the DOM.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shapes should be returned.\n */\nmxCellRenderer.prototype.getShapesForState = function(state)\n{\n\treturn [state.shape, state.text, state.control];\n};\n\n/**\n * Function: redraw\n * \n * Updates the bounds or points and scale of the shapes for the given cell\n * state. This is called in mxGraphView.validatePoints as the last step of\n * updating all cells.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be updated.\n * force - Optional boolean that specifies if the cell should be reconfiured\n * and redrawn without any additional checks.\n * rendering - Optional boolean that specifies if the cell should actually\n * be drawn into the DOM. If this is false then redraw and/or reconfigure\n * will not be called on the shape.\n */\nmxCellRenderer.prototype.redraw = function(state, force, rendering)\n{\n\tvar shapeChanged = this.redrawShape(state, force, rendering);\n\t\n\tif (state.shape != null && (rendering == null || rendering))\n\t{\n\t\tthis.redrawLabel(state, shapeChanged);\n\t\tthis.redrawCellOverlays(state, shapeChanged);\n\t\tthis.redrawControl(state, shapeChanged);\n\t}\n};\n\n/**\n * Function: redrawShape\n * \n * Redraws the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawShape = function(state, force, rendering)\n{\n\tvar model = state.view.graph.model;\n\tvar shapeChanged = false;\n\n\t// Forces creation of new shape if shape style has changed\n\tif (state.shape != null && state.shape.style != null && state.style != null &&\n\t\tstate.shape.style[mxConstants.STYLE_SHAPE] != state.style[mxConstants.STYLE_SHAPE])\n\t{\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n\t\n\tif (state.shape == null && state.view.graph.container != null &&\n\t\tstate.cell != state.view.currentRoot &&\n\t\t(model.isVertex(state.cell) || model.isEdge(state.cell)))\n\t{\n\t\tstate.shape = this.createShape(state);\n\t\t\n\t\tif (state.shape != null)\n\t\t{\n\t\t\tstate.shape.minSvgStrokeWidth = this.minSvgStrokeWidth;\n\t\t\tstate.shape.antiAlias = this.antiAlias;\n\t\n\t\t\tthis.createIndicatorShape(state);\n\t\t\tthis.initializeShape(state);\n\t\t\tthis.createCellOverlays(state);\n\t\t\tthis.installListeners(state);\n\t\t\t\n\t\t\t// Forces a refresh of the handler if one exists\n\t\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\t}\n\t}\n\telse if (!force && state.shape != null && (!mxUtils.equalEntries(state.shape.style,\n\t\tstate.style) || this.checkPlaceholderStyles(state)))\n\t{\n\t\tstate.shape.resetStyles();\n\t\tthis.configureShape(state);\n\t\t// LATER: Ignore update for realtime to fix reset of current gesture\n\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\tforce = true;\n\t}\n\n\tif (state.shape != null)\n\t{\n\t\t// Handles changes of the collapse icon\n\t\tthis.createControl(state);\n\t\t\n\t\t// Redraws the cell if required, ignores changes to bounds if points are\n\t\t// defined as the bounds are updated for the given points inside the shape\n\t\tif (force || this.isShapeInvalid(state, state.shape))\n\t\t{\n\t\t\tif (state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tstate.shape.points = state.absolutePoints.slice();\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.points = null;\n\t\t\t\tstate.shape.bounds = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\t}\n\n\t\t\tstate.shape.scale = state.view.scale;\n\t\t\t\n\t\t\tif (rendering == null || rendering)\n\t\t\t{\n\t\t\t\tthis.doRedrawShape(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.updateBoundingBox();\n\t\t\t}\n\t\t\t\n\t\t\tshapeChanged = true;\n\t\t}\n\t}\n\n\treturn shapeChanged;\n};\n\n/**\n * Function: doRedrawShape\n * \n * Invokes redraw on the shape of the given state.\n */\nmxCellRenderer.prototype.doRedrawShape = function(state)\n{\n\tstate.shape.redraw();\n};\n\n/**\n * Function: isShapeInvalid\n * \n * Returns true if the given shape must be repainted.\n */\nmxCellRenderer.prototype.isShapeInvalid = function(state, shape)\n{\n\treturn shape.bounds == null || shape.scale != state.view.scale ||\n\t\t(state.absolutePoints == null && !shape.bounds.equals(state)) ||\n\t\t(state.absolutePoints != null && !mxUtils.equalPoints(shape.points, state.absolutePoints))\n};\n\n/**\n * Function: destroy\n * \n * Destroys the shapes associated with the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be destroyed.\n */\nmxCellRenderer.prototype.destroy = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tif (state.text != null)\n\t\t{\t\t\n\t\t\tstate.text.destroy();\n\t\t\tstate.text = null;\n\t\t}\n\t\t\n\t\tif (state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\tshape.destroy();\n\t\t\t});\n\t\t\t\n\t\t\tstate.overlays = null;\n\t\t}\n\n\t\tif (state.control != null)\n\t\t{\n\t\t\tstate.control.destroy();\n\t\t\tstate.control = null;\n\t\t}\n\t\t\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEdgeStyle =\n{\n\t/**\n\t * Class: mxEdgeStyle\n\t * \n\t * Provides various edge styles to be used as the values for\n\t * <mxConstants.STYLE_EDGE> in a cell style.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * var style = stylesheet.getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;\n\t * (end)\n\t * \n\t * Sets the default edge style to <ElbowConnector>.\n\t * \n\t * Custom edge style:\n\t * \n\t * To write a custom edge style, a function must be added to the mxEdgeStyle\n\t * object as follows:\n\t * \n\t * (code)\n\t * mxEdgeStyle.MyStyle = function(state, source, target, points, result)\n\t * {\n\t *   if (source != null && target != null)\n\t *   {\n\t *     var pt = new mxPoint(target.getCenterX(), source.getCenterY());\n\t * \n\t *     if (mxUtils.contains(source, pt.x, pt.y))\n\t *     {\n\t *       pt.y = source.y + source.height;\n\t *     }\n\t * \n\t *     result.push(pt);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * In the above example, a right angle is created using a point on the\n\t * horizontal center of the target vertex and the vertical center of the source\n\t * vertex. The code checks if that point intersects the source vertex and makes\n\t * the edge straight if it does. The point is then added into the result array,\n\t * which acts as the return value of the function.\n\t *\n\t * The new edge style should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('myEdgeStyle', mxEdgeStyle.MyStyle);\n\t * (end)\n\t * \n\t * The custom edge style above can now be used in a specific edge as follows:\n\t * \n\t * (code)\n\t * model.setStyle(edge, 'edgeStyle=myEdgeStyle');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxEdgeStyle.MyStyle for the value in the\n\t * cell style above.\n\t * \n\t * Or it can be used for all edges in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.MyStyle;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * Function: EntityRelation\n\t * \n\t * Implements an entity relation style for edges (as used in database\n\t * schema diagrams). At the time the function is called, the result\n\t * array contains a placeholder (null) for the first absolute point,\n\t * that is, the point where the edge and source terminal are connected.\n\t * The implementation of the style then adds all intermediate waypoints\n\t * except for the last point, that is, the connection point between the\n\t * edge and the target terminal. The first ant the last point in the\n\t * result array are then replaced with mxPoints that take into account\n\t * the terminal's perimeter and next point on the edge.\n\t *\n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t */\n\t EntityRelation: function (state, source, target, points, result)\n\t {\n\t\tvar view = state.view;\n\t \tvar graph = view.graph;\n\t \tvar segment = mxUtils.getValue(state.style,\n\t \t\t\tmxConstants.STYLE_SEGMENT,\n\t \t\t\tmxConstants.ENTITY_SEGMENT) * view.scale;\n\t \t\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t \tvar isSourceLeft = false;\n\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\telse if (source != null)\n\t\t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(source, state, true, mxConstants.DIRECTION_MASK_NONE);\n\t\t\t\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisSourceLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t \tvar sourceGeometry = graph.getCellGeometry(source.cell);\n\t\t\n\t\t\t \tif (sourceGeometry.relative)\n\t\t\t \t{\n\t\t\t \t\tisSourceLeft = sourceGeometry.x <= 0.5;\n\t\t\t \t}\n\t\t\t \telse if (target != null)\n\t\t\t \t{\n\t\t\t \t\tisSourceLeft = target.x + target.width < source.x;\n\t\t\t \t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\t \t\n\t \tvar isTargetLeft = true;\n\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\telse if (target != null)\n\t \t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(target, state, false, mxConstants.DIRECTION_MASK_NONE);\n\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisTargetLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t \tvar targetGeometry = graph.getCellGeometry(target.cell);\n\t\n\t\t\t \tif (targetGeometry.relative)\n\t\t\t \t{\n\t\t\t \t\tisTargetLeft = targetGeometry.x <= 0.5;\n\t\t\t \t}\n\t\t\t \telse if (source != null)\n\t\t\t \t{\n\t\t\t \t\tisTargetLeft = source.x + source.width < target.x;\n\t\t\t \t}\n\t\t\t}\n\t \t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar x0 = (isSourceLeft) ? source.x : source.x + source.width;\n\t\t\tvar y0 = view.getRoutingCenterY(source);\n\t\t\t\n\t\t\tvar xe = (isTargetLeft) ? target.x : target.x + target.width;\n\t\t\tvar ye = view.getRoutingCenterY(target);\n\t\n\t\t\tvar seg = segment;\n\t\n\t\t\tvar dx = (isSourceLeft) ? -seg : seg;\n\t\t\tvar dep = new mxPoint(x0 + dx, y0);\n\t\t\t\t\t\n\t\t\tdx = (isTargetLeft) ? -seg : seg;\n\t\t\tvar arr = new mxPoint(xe + dx, ye);\n\t\n\t\t\t// Adds intermediate points if both go out on same side\n\t\t\tif (isSourceLeft == isTargetLeft)\n\t\t\t{\n\t\t\t\tvar x = (isSourceLeft) ?\n\t\t\t\t\tMath.min(x0, xe)-segment :\n\t\t\t\t\tMath.max(x0, xe)+segment;\n\t\n\t\t\t\tresult.push(new mxPoint(x, y0));\n\t\t\t\tresult.push(new mxPoint(x, ye));\n\t\t\t}\n\t\t\telse if ((dep.x < arr.x) == isSourceLeft)\n\t\t\t{\n\t\t\t\tvar midY = y0 + (ye - y0) / 2;\n\t\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(new mxPoint(dep.x, midY));\n\t\t\t\tresult.push(new mxPoint(arr.x, midY));\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t}\n\t },\n\n\t /**\n\t * Function: Loop\n\t * \n\t * Implements a self-reference, aka. loop.\n\t */\n\tLoop: function (state, source, target, points, result)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tif (points != null && points.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = points[i];\n\t\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\tresult.push(new mxPoint(pt.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tvar view = state.view;\n\t\t\tvar graph = view.graph;\n\t\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tif (mxUtils.contains(source, pt.x, pt.y))\n\t\t\t\t{\n\t\t\t\t\tpt = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = 0;\n\t\t\tvar dx = 0;\n\t\t\tvar y = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t \tvar seg = mxUtils.getValue(state.style, mxConstants.STYLE_SEGMENT,\n\t\t \t\tgraph.gridSize) * view.scale;\n\t\t\tvar dir = mxUtils.getValue(state.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_WEST);\n\t\t\t\n\t\t\tif (dir == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdir == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = seg;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ty = view.getRoutingCenterY(source);\n\t\t\t\tdy = seg;\n\t\t\t}\n\t\t\t\n\t\t\tif (pt == null ||\n\t\t\t\tpt.x < source.x ||\n\t\t\t\tpt.x > source.x + source.width)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tx = pt.x;\n\t\t\t\t\tdy = Math.max(Math.abs(y - pt.y), dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y - 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y + source.height + 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_EAST)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x - 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x + source.width + 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (pt != null)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = Math.max(Math.abs(x - pt.x), dy);\n\t\t\t\ty = pt.y;\n\t\t\t\tdy = 0;\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(x - dx, y - dy));\n\t\t\tresult.push(new mxPoint(x + dx, y + dy));\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: ElbowConnector\n\t * \n\t * Uses either <SideToSide> or <TopToBottom> depending on the horizontal\n\t * flag in the cell style. <SideToSide> is used if horizontal is true or\n\t * unspecified. See <EntityRelation> for a description of the\n\t * parameters.\n\t */\n\tElbowConnector: function (state, source, target, points, result)\n\t{\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\tvar vertical = false;\n\t\tvar horizontal = false;\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar left = Math.min(source.x, target.x);\n\t\t\t\tvar right = Math.max(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\n\t\t\t\tvar top = Math.min(source.y, target.y);\n\t\t\t\tvar bottom = Math.max(source.y + source.height,\n\t\t\t\t\ttarget.y + target.height);\n\n\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tvertical = pt.y < top || pt.y > bottom;\n\t\t\t\thorizontal = pt.x < left || pt.x > right;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar left = Math.max(source.x, target.x);\n\t\t\t\tvar right = Math.min(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\t\t\t\t\n\t\t\t\tvertical = left == right;\n\t\t\t\t\n\t\t\t\tif (!vertical)\n\t\t\t\t{\n\t\t\t\t\tvar top = Math.max(source.y, target.y);\n\t\t\t\t\tvar bottom = Math.min(source.y + source.height,\n\t\t\t\t\t\ttarget.y + target.height);\n\t\t\t\t\t\t\n\t\t\t\t\thorizontal = top == bottom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!horizontal && (vertical ||\n\t\t\tstate.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL))\n\t\t{\n\t\t\tmxEdgeStyle.TopToBottom(state, source, target, points, result);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxEdgeStyle.SideToSide(state, source, target, points, result);\n\t\t}\n\t},\n\n\t/**\n\t * Function: SideToSide\n\t * \n\t * Implements a vertical elbow edge. See <EntityRelation> for a description\n\t * of the parameters.\n\t */\n\tSideToSide: function (state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\n\t\t\tvar x = (pt != null) ? pt.x : Math.round(r + (l - r) / 2);\n\t\n\t\t\tvar y1 = view.getRoutingCenterY(source);\n\t\t\tvar y2 = view.getRoutingCenterY(target);\n\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tif (pt.y >= source.y && pt.y <= source.y + source.height)\n\t\t\t\t{\n\t\t\t\t\ty1 = pt.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (pt.y >= target.y && pt.y <= target.y + target.height)\n\t\t\t\t{\n\t\t\t\t\ty2 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y1) &&\n\t\t\t\t!mxUtils.contains(source, x, y1))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x,  y1));\n\t\t\t}\n\t\n\t\t\tif (!mxUtils.contains(target, x, y2) &&\n\t\t\t\t!mxUtils.contains(source, x, y2))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y2));\n\t\t\t}\n\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, x, pt.y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, x, pt.y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(x, pt.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\n\t\t\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(x, t + (b - t) / 2));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: TopToBottom\n\t * \n\t * Implements a horizontal elbow edge. See <EntityRelation> for a\n\t * description of the parameters.\n\t */\n\tTopToBottom: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\n\t\t\tvar x = view.getRoutingCenterX(source);\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= source.x &&\n\t\t\t\tpt.x <= source.x + source.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\t\n\t\t\tvar y = (pt != null) ? pt.y : Math.round(b + (t - b) / 2);\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= target.x &&\n\t\t\t\tpt.x <= target.x + target.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(target);\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null && result.length == 1)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, pt.x, y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, pt.x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(pt.x, y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(l + (r - l) / 2, y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: SegmentConnector\n\t * \n\t * Implements an orthogonal edge style. Use <mxEdgeSegmentHandler>\n\t * as an interactive handler for this style.\n\t */\n\tSegmentConnector: function(state, source, target, hints, result)\n\t{\n\t\t// Creates array of all way- and terminalpoints\n\t\tvar pts = state.absolutePoints;\n\t\tvar tol = Math.max(1, state.view.scale);\n\t\t\n\t\t// Whether the first segment outgoing from the source end is horizontal\n\t\tvar lastPushed = (result.length > 0) ? result[0] : null;\n\t\tvar horizontal = true;\n\t\tvar hint = null;\n\t\t\n\t\t// Adds waypoints only if outside of tolerance\n\t\tfunction pushPoint(pt)\n\t\t{\n\t\t\tif (lastPushed == null || Math.abs(lastPushed.x - pt.x) >= tol || Math.abs(lastPushed.y - pt.y) >= tol)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t\tlastPushed = pt;\n\t\t\t}\n\t\t\t\n\t\t\treturn lastPushed;\n\t\t};\n\n\t\t// Adds the first point\n\t\tvar pt = pts[0];\n\t\t\n\t\tif (pt == null && source != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));\n\t\t}\n\t\telse if (pt != null)\n\t\t{\n\t\t\tpt = pt.clone();\n\t\t}\n\t\t\n\t\tpt.x = Math.round(pt.x);\n\t\tpt.y = Math.round(pt.y);\n\t\t\n\t\tvar lastInx = pts.length - 1;\n\n\t\t// Adds the waypoints\n\t\tif (hints != null && hints.length > 0)\n\t\t{\n\t\t\t// Converts all hints and removes nulls\n\t\t\tvar newHints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\tvar tmp = state.view.transformControlPoint(state, hints[i]);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.x = Math.round(tmp.x);\n\t\t\t\t\ttmp.y = Math.round(tmp.y);\n\t\t\t\t\tnewHints.push(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (newHints.length == 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\thints = newHints;\n\t\t\t\n\t\t\t// Aligns source and target hint to fixed points\n\t\t\tif (pt != null && hints[0] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[0].x - pt.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].x = pt.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[0].y - pt.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].y = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pe = pts[lastInx];\n\t\t\t\n\t\t\tif (pe != null && hints[hints.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[hints.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[hints.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\thint = hints[0];\n\n\t\t\tvar currentTerm = source;\n\t\t\tvar currentPt = pts[0];\n\t\t\tvar hozChan = false;\n\t\t\tvar vertChan = false;\n\t\t\tvar currentHint = hint;\n\t\t\t\n\t\t\tif (currentPt != null)\n\t\t\t{\n\t\t\t\tcurrentPt.x = Math.round(currentPt.x);\n\t\t\t\tcurrentPt.y = Math.round(currentPt.y);\n\t\t\t\tcurrentTerm = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Check for alignment with fixed points and with channels\n\t\t\t// at source and target segments only\n\t\t\tfor (var i = 0; i < 2; i++)\n\t\t\t{\n\t\t\t\tvar fixedVertAlign = currentPt != null && currentPt.x == currentHint.x;\n\t\t\t\tvar fixedHozAlign = currentPt != null && currentPt.y == currentHint.y;\n\t\t\t\t\n\t\t\t\tvar inHozChan = currentTerm != null && (currentHint.y >= currentTerm.y &&\n\t\t\t\t\t\tcurrentHint.y <= currentTerm.y + currentTerm.height);\n\t\t\t\tvar inVertChan = currentTerm != null && (currentHint.x >= currentTerm.x &&\n\t\t\t\t\t\tcurrentHint.x <= currentTerm.x + currentTerm.width);\n\n\t\t\t\thozChan = fixedHozAlign || (currentPt == null && inHozChan);\n\t\t\t\tvertChan = fixedVertAlign || (currentPt == null && inVertChan);\n\t\t\t\t\n\t\t\t\t// If the current hint falls in both the hor and vert channels in the case\n\t\t\t\t// of a floating port, or if the hint is exactly co-incident with a \n\t\t\t\t// fixed point, ignore the source and try to work out the orientation\n\t\t\t\t// from the target end\n\t\t\t\tif (i==0 && ((hozChan && vertChan) || (fixedVertAlign && fixedHozAlign)))\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (currentPt != null && (!fixedHozAlign && !fixedVertAlign) && (inHozChan || inVertChan)) \n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = inHozChan ? false : true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tif (vertChan || hozChan)\n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = hozChan;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (i == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Work back from target end\n\t\t\t\t\t\t\thorizontal = hints.length % 2 == 0 ? hozChan : vertChan;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentTerm = target;\n\t\t\t\tcurrentPt = pts[lastInx];\n\t\t\t\t\n\t\t\t\tif (currentPt != null)\n\t\t\t\t{\n\t\t\t\t\tcurrentPt.x = Math.round(currentPt.x);\n\t\t\t\t\tcurrentPt.y = Math.round(currentPt.y);\n\t\t\t\t\tcurrentTerm = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentHint = hints[hints.length - 1];\n\t\t\t\t\n\t\t\t\tif (fixedVertAlign && fixedHozAlign)\n\t\t\t\t{\n\t\t\t\t\thints = hints.slice(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (horizontal && ((pts[0] != null && pts[0].y != hint.y) ||\n\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t(hint.y < source.y || hint.y > source.y + source.height))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t}\n\t\t\telse if (!horizontal && ((pts[0] != null && pts[0].x != hint.x) ||\n\t\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t\t(hint.x < source.x || hint.x > source.x + source.width))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal)\n\t\t\t{\n\t\t\t\tpt.y = hint.y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpt.x = hint.x;\n\t\t\t}\n\t\t\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\thorizontal = !horizontal;\n\t\t\t\thint = hints[i];\n\t\t\t\t\n//\t\t\t\tmxLog.show();\n//\t\t\t\tmxLog.debug('hint', i, hint.x, hint.y);\n\t\t\t\t\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tpt.y = hint.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpt.x = hint.x;\n\t\t\t\t}\n\t\t\n\t\t\t\tpushPoint(pt.clone());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\thint = pt;\n\t\t\t// FIXME: First click in connect preview toggles orientation\n\t\t\thorizontal = true;\n\t\t}\n\n\t\t// Adds the last point\n\t\tpt = pts[lastInx];\n\n\t\tif (pt == null && target != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));\n\t\t}\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt.x = Math.round(pt.x);\n\t\t\tpt.y = Math.round(pt.y);\n\t\t\t\n\t\t\tif (hint != null)\n\t\t\t{\n\t\t\t\tif (horizontal && ((pts[lastInx] != null && pts[lastInx].y != hint.y) ||\n\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t(hint.y < target.y || hint.y > target.y + target.height))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t\t}\n\t\t\t\telse if (!horizontal && ((pts[lastInx] != null && pts[lastInx].x != hint.x) ||\n\t\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t\t(hint.x < target.x || hint.x > target.x + target.width))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the source terminal for floating ports\n\t\tif (pts[0] == null && source != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[1] != null &&\n\t\t\t\tmxUtils.contains(source, result[1].x, result[1].y))\n\t\t\t{\n\t\t\t\tresult.splice(1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the target terminal\n\t\tif (pts[lastInx] == null && target != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[result.length - 1] != null &&\n\t\t\t\tmxUtils.contains(target, result[result.length - 1].x, result[result.length - 1].y))\n\t\t\t{\n\t\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes last point if inside tolerance with end point\n\t\tif (pe != null && result[result.length - 1] != null &&\n\t\t\tMath.abs(pe.x - result[result.length - 1].x) <= tol &&\n\t\t\tMath.abs(pe.y - result[result.length - 1].y) <= tol)\n\t\t{\n\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t\n\t\t\t// Lines up second last point in result with end point\n\t\t\tif (result[result.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(result[result.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(result[result.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\torthBuffer: 10,\n\t\n\torthPointsFallback: true,\n\n\tdirVectors: [ [ -1, 0 ],\n\t\t\t[ 0, -1 ], [ 1, 0 ], [ 0, 1 ], [ -1, 0 ], [ 0, -1 ], [ 1, 0 ] ],\n\n\twayPoints1: [ [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0], [ 0, 0],  [ 0, 0],\n\t              [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0] ],\n\n\troutePatterns: [\n\t\t[ [ 513, 2308, 2081, 2562 ], [ 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 513, 1090, 514, 2564, 2184, 2562 ],\n\t\t\t[ 513, 2308, 2561, 1090, 514, 2568, 2308 ] ],\n\t[ [ 514, 1057, 513, 2308, 2081, 2562 ], [ 514, 2184, 2114, 2561 ],\n\t\t\t[ 514, 2184, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 514, 1057, 513, 2568, 2308, 2561 ] ],\n\t[ [ 1090, 514, 1057, 513, 2308, 2081, 2562 ], [ 2114, 2561 ],\n\t\t\t[ 1090, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 1090, 514, 1057, 513, 2308, 2561, 2568 ] ],\n\t[ [ 2081, 2562 ], [ 1057, 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 1057, 513, 1090, 514, 2184, 2562, 2564 ],\n\t\t\t[ 1057, 2561, 1090, 514, 2568, 2308 ] ] ],\n\t\n\tinlineRoutePatterns: [\n\t\t\t[ null, [ 2114, 2568 ], null, null ],\n\t\t\t[ null, [ 514, 2081, 2114, 2568 ] , null, null ],\n\t\t\t[ null, [ 2114, 2561 ], null, null ],\n\t\t\t[ [ 2081, 2562 ], [ 1057, 2114, 2568 ],\n\t\t\t\t\t[ 2184, 2562 ],\n\t\t\t\t\tnull ] ],\n\tvertexSeperations: [],\n\n\tlimits: [\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ],\n\n\tLEFT_MASK: 32,\n\n\tTOP_MASK: 64,\n\n\tRIGHT_MASK: 128,\n\n\tBOTTOM_MASK: 256,\n\n\tLEFT: 1,\n\n\tTOP: 2,\n\n\tRIGHT: 4,\n\n\tBOTTOM: 8,\n\n\t// TODO remove magic numbers\n\tSIDE_MASK: 480,\n\t//mxEdgeStyle.LEFT_MASK | mxEdgeStyle.TOP_MASK | mxEdgeStyle.RIGHT_MASK\n\t//| mxEdgeStyle.BOTTOM_MASK,\n\n\tCENTER_MASK: 512,\n\n\tSOURCE_MASK: 1024,\n\n\tTARGET_MASK: 2048,\n\n\tVERTEX_MASK: 3072,\n\t// mxEdgeStyle.SOURCE_MASK | mxEdgeStyle.TARGET_MASK,\n\t\n\tgetJettySize: function(state, source, target, points, isSource)\n\t{\n\t\tvar value = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_SOURCE_JETTY_SIZE :\n\t\t\tmxConstants.STYLE_TARGET_JETTY_SIZE, mxUtils.getValue(state.style,\n\t\t\t\t\tmxConstants.STYLE_JETTY_SIZE, mxEdgeStyle.orthBuffer));\n\t\t\n\t\tif (value == 'auto')\n\t\t{\n\t\t\t// Computes the automatic jetty size\n\t\t\tvar type = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW, mxConstants.NONE);\n\t\t\t\n\t\t\tif (type != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tvar size = mxUtils.getNumber(state.style, (isSource) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\t\tvalue = Math.max(2, Math.ceil((size + mxEdgeStyle.orthBuffer) / mxEdgeStyle.orthBuffer)) * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = 2 * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: OrthConnector\n\t * \n\t * Implements a local orthogonal router between the given\n\t * cells.\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t * \n\t */\n\tOrthConnector: function(state, source, target, points, result)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar sourceEdge = source == null ? false : graph.getModel().isEdge(source.cell);\n\t\tvar targetEdge = target == null ? false : graph.getModel().isEdge(target.cell);\n\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tvar sourceX = source != null ? source.x : p0.x;\n\t\tvar sourceY = source != null ? source.y : p0.y;\n\t\tvar sourceWidth = source != null ? source.width : 0;\n\t\tvar sourceHeight = source != null ? source.height : 0;\n\t\t\n\t\tvar targetX = target != null ? target.x : pe.x;\n\t\tvar targetY = target != null ? target.y : pe.y;\n\t\tvar targetWidth = target != null ? target.width : 0;\n\t\tvar targetHeight = target != null ? target.height : 0;\n\n\t\tvar scaledSourceBuffer = state.view.scale * mxEdgeStyle.getJettySize(state, source, target, points, true);\n\t\tvar scaledTargetBuffer = state.view.scale * mxEdgeStyle.getJettySize(state, source, target, points, false);\n\t\t\n\t\t// Workaround for loop routing within buffer zone\n\t\tif (source != null && target == source)\n\t\t{\n\t\t\tscaledTargetBuffer = Math.max(scaledSourceBuffer, scaledTargetBuffer);\n\t\t\tscaledSourceBuffer = scaledTargetBuffer;\n\t\t}\n\t\t\n\t\tvar totalBuffer = scaledTargetBuffer + scaledSourceBuffer;\n\t\tvar tooShort = false;\n\t\t\n\t\t// Checks minimum distance for fixed points and falls back to segment connector\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\n\t\t\ttooShort = dx * dx + dy * dy < totalBuffer * totalBuffer;\n\t\t}\n\n\t\tif (tooShort || (mxEdgeStyle.orthPointsFallback && (points != null &&\n\t\t\tpoints.length > 0)) || sourceEdge || targetEdge)\n\t\t{\n\t\t\tmxEdgeStyle.SegmentConnector(state, source, target, points, result);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine the side(s) of the source and target vertices\n\t\t// that the edge may connect to\n\t\t// portConstraint [source, target]\n\t\tvar portConstraint = [mxConstants.DIRECTION_MASK_ALL, mxConstants.DIRECTION_MASK_ALL];\n\t\tvar rotation = 0;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tportConstraint[0] = mxUtils.getPortConstraints(source, state, true, \n\t\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(source.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(sourceX, sourceY, sourceWidth, sourceHeight), rotation);\n\t\t\t\tsourceX = newRect.x; \n\t\t\t\tsourceY = newRect.y;\n\t\t\t\tsourceWidth = newRect.width;\n\t\t\t\tsourceHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\tif (target != null)\n\t\t{\n\t\t\tportConstraint[1] = mxUtils.getPortConstraints(target, state, false,\n\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(target.style, mxConstants.STYLE_ROTATION, 0);\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(targetX, targetY, targetWidth, targetHeight), rotation);\n\t\t\t\ttargetX = newRect.x;\n\t\t\t\ttargetY = newRect.y;\n\t\t\t\ttargetWidth = newRect.width;\n\t\t\t\ttargetHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\t// Avoids floating point number errors\n\t\tsourceX = Math.round(sourceX * 10) / 10;\n\t\tsourceY = Math.round(sourceY * 10) / 10;\n\t\tsourceWidth = Math.round(sourceWidth * 10) / 10;\n\t\tsourceHeight = Math.round(sourceHeight * 10) / 10;\n\t\t\n\t\ttargetX = Math.round(targetX * 10) / 10;\n\t\ttargetY = Math.round(targetY * 10) / 10;\n\t\ttargetWidth = Math.round(targetWidth * 10) / 10;\n\t\ttargetHeight = Math.round(targetHeight * 10) / 10;\n\t\t\n\t\tvar dir = [0, 0];\n\n\t\t// Work out which faces of the vertices present against each other\n\t\t// in a way that would allow a 3-segment connection if port constraints\n\t\t// permitted.\n\t\t// geo -> [source, target] [x, y, width, height]\n\t\tvar geo = [ [sourceX, sourceY, sourceWidth, sourceHeight] ,\n\t\t            [targetX, targetY, targetWidth, targetHeight] ];\n\t\tvar buffer = [scaledSourceBuffer, scaledTargetBuffer];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tmxEdgeStyle.limits[i][1] = geo[i][0] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][2] = geo[i][1] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][4] = geo[i][0] + geo[i][2] + buffer[i];\n\t\t\tmxEdgeStyle.limits[i][8] = geo[i][1] + geo[i][3] + buffer[i];\n\t\t}\n\t\t\n\t\t// Work out which quad the target is in\n\t\tvar sourceCenX = geo[0][0] + geo[0][2] / 2.0;\n\t\tvar sourceCenY = geo[0][1] + geo[0][3] / 2.0;\n\t\tvar targetCenX = geo[1][0] + geo[1][2] / 2.0;\n\t\tvar targetCenY = geo[1][1] + geo[1][3] / 2.0;\n\t\t\n\t\tvar dx = sourceCenX - targetCenX;\n\t\tvar dy = sourceCenY - targetCenY;\n\n\t\tvar quad = 0;\n\n\t\tif (dx < 0)\n\t\t{\n\t\t\tif (dy < 0)\n\t\t\t{\n\t\t\t\tquad = 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (dy <= 0)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\t// Special case on x = 0 and negative y\n\t\t\t\tif (dx == 0)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for connection constraints\n\t\tvar currentTerm = null;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tcurrentTerm = p0;\n\t\t}\n\n\t\tvar constraint = [ [0.5, 0.5] , [0.5, 0.5] ];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (currentTerm != null)\n\t\t\t{\n\t\t\t\tconstraint[i][0] = (currentTerm.x - geo[i][0]) / geo[i][2];\n\t\t\t\t\n\t\t\t\tif (Math.abs(currentTerm.x - geo[i][0]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.x - geo[i][0] - geo[i][2]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t}\n\n\t\t\t\tconstraint[i][1] = (currentTerm.y - geo[i][1]) / geo[i][3];\n\n\t\t\t\tif (Math.abs(currentTerm.y - geo[i][1]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.y - geo[i][1] - geo[i][3]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentTerm = null;\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = pe;\n\t\t\t}\n\t\t}\n\n\t\tvar sourceTopDist = geo[0][1] - (geo[1][1] + geo[1][3]);\n\t\tvar sourceLeftDist = geo[0][0] - (geo[1][0] + geo[1][2]);\n\t\tvar sourceBottomDist = geo[1][1] - (geo[0][1] + geo[0][3]);\n\t\tvar sourceRightDist = geo[1][0] - (geo[0][0] + geo[0][2]);\n\n\t\tmxEdgeStyle.vertexSeperations[1] = Math.max(sourceLeftDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[2] = Math.max(sourceTopDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[4] = Math.max(sourceBottomDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[3] = Math.max(sourceRightDist - totalBuffer, 0);\n\t\t\t\t\n\t\t//==============================================================\n\t\t// Start of source and target direction determination\n\n\t\t// Work through the preferred orientations by relative positioning\n\t\t// of the vertices and list them in preferred and available order\n\t\t\n\t\tvar dirPref = [];\n\t\tvar horPref = [];\n\t\tvar vertPref = [];\n\n\t\thorPref[0] = (sourceLeftDist >= sourceRightDist) ? mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t: mxConstants.DIRECTION_MASK_EAST;\n\t\tvertPref[0] = (sourceTopDist >= sourceBottomDist) ? mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t: mxConstants.DIRECTION_MASK_SOUTH;\n\n\t\thorPref[1] = mxUtils.reversePortConstraints(horPref[0]);\n\t\tvertPref[1] = mxUtils.reversePortConstraints(vertPref[0]);\n\t\t\n\t\tvar preferredHorizDist = sourceLeftDist >= sourceRightDist ? sourceLeftDist\n\t\t\t\t: sourceRightDist;\n\t\tvar preferredVertDist = sourceTopDist >= sourceBottomDist ? sourceTopDist\n\t\t\t\t: sourceBottomDist;\n\n\t\tvar prefOrdering = [ [0, 0] , [0, 0] ];\n\t\tvar preferredOrderSet = false;\n\n\t\t// If the preferred port isn't available, switch it\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((horPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\thorPref[i] = mxUtils.reversePortConstraints(horPref[i]);\n\t\t\t}\n\n\t\t\tif ((vertPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tvertPref[i] = mxUtils\n\t\t\t\t\t\t.reversePortConstraints(vertPref[i]);\n\t\t\t}\n\n\t\t\tprefOrdering[i][0] = vertPref[i];\n\t\t\tprefOrdering[i][1] = horPref[i];\n\t\t}\n\n\t\tif (preferredVertDist > 0\n\t\t\t\t&& preferredHorizDist > 0)\n\t\t{\n\t\t\t// Possibility of two segment edge connection\n\t\t\tif (((horPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((vertPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t\telse if (((vertPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((horPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (preferredVertDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\tpreferredOrderSet = true;\n\n\t\t}\n\t\t\n\t\tif (preferredHorizDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\tpreferredOrderSet = true;\n\t\t}\n\n\t\t// The source and target prefs are now an ordered list of\n\t\t// the preferred port selections\n\t\t// If the list contains gaps, compact it\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((prefOrdering[i][0] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tprefOrdering[i][0] = prefOrdering[i][1];\n\t\t\t}\n\n\t\t\tdirPref[i] = prefOrdering[i][0] & portConstraint[i];\n\t\t\tdirPref[i] |= (prefOrdering[i][1] & portConstraint[i]) << 8;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][i] & portConstraint[i]) << 16;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][1 - i] & portConstraint[i]) << 24;\n\n\t\t\tif ((dirPref[i] & 0xF) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = dirPref[i] << 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF00) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xF) | dirPref[i] >> 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF0000) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xFFFF)\n\t\t\t\t\t\t| ((dirPref[i] & 0xF000000) >> 8);\n\t\t\t}\n\n\t\t\tdir[i] = dirPref[i] & 0xF;\n\n\t\t\tif (portConstraint[i] == mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_EAST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_SOUTH)\n\t\t\t{\n\t\t\t\tdir[i] = portConstraint[i];\n\t\t\t}\n\t\t}\n\n\t\t//==============================================================\n\t\t// End of source and target direction determination\n\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\t\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar routePattern = mxEdgeStyle.routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tmxEdgeStyle.wayPoints1[0][0] = geo[0][0];\n\t\tmxEdgeStyle.wayPoints1[0][1] = geo[0][1];\n\n\t\tswitch (dir[0])\n\t\t{\n\t\t\tcase mxConstants.DIRECTION_MASK_WEST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] -= scaledSourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_SOUTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += geo[0][3] + scaledSourceBuffer;\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_EAST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += geo[0][2] + scaledSourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_NORTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] -= scaledSourceBuffer;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar currentIndex = 0;\n\n\t\t// Orientation, 0 horizontal, 1 vertical\n\t\tvar lastOrientation = (dir[0] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t: 1;\n\t\tvar initialOrientation = lastOrientation;\n\t\tvar currentOrientation = 0;\n\n\t\tfor (var i = 0; i < routePattern.length; i++)\n\t\t{\n\t\t\tvar nextDirection = routePattern[i] & 0xF;\n\n\t\t\t// Rotate the index of this direction by the quad\n\t\t\t// to get the real direction\n\t\t\tvar directionIndex = nextDirection == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t\t: nextDirection;\n\n\t\t\tdirectionIndex += quad;\n\n\t\t\tif (directionIndex > 4)\n\t\t\t{\n\t\t\t\tdirectionIndex -= 4;\n\t\t\t}\n\n\t\t\tvar direction = mxEdgeStyle.dirVectors[directionIndex - 1];\n\n\t\t\tcurrentOrientation = (directionIndex % 2 > 0) ? 0 : 1;\n\t\t\t// Only update the current index if the point moved\n\t\t\t// in the direction of the current segment move,\n\t\t\t// otherwise the same point is moved until there is \n\t\t\t// a segment direction change\n\t\t\tif (currentOrientation != lastOrientation)\n\t\t\t{\n\t\t\t\tcurrentIndex++;\n\t\t\t\t// Copy the previous way point into the new one\n\t\t\t\t// We can't base the new position on index - 1\n\t\t\t\t// because sometime elbows turn out not to exist,\n\t\t\t\t// then we'd have to rewind.\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] = mxEdgeStyle.wayPoints1[currentIndex - 1][0];\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] = mxEdgeStyle.wayPoints1[currentIndex - 1][1];\n\t\t\t}\n\n\t\t\tvar tar = (routePattern[i] & mxEdgeStyle.TARGET_MASK) > 0;\n\t\t\tvar sou = (routePattern[i] & mxEdgeStyle.SOURCE_MASK) > 0;\n\t\t\tvar side = (routePattern[i] & mxEdgeStyle.SIDE_MASK) >> 5;\n\t\t\tside = side << quad;\n\n\t\t\tif (side > 0xF)\n\t\t\t{\n\t\t\t\tside = side >> 4;\n\t\t\t}\n\n\t\t\tvar center = (routePattern[i] & mxEdgeStyle.CENTER_MASK) > 0;\n\n\t\t\tif ((sou || tar) && side < 9)\n\t\t\t{\n\t\t\t\tvar limit = 0;\n\t\t\t\tvar souTar = sou ? 0 : 1;\n\n\t\t\t\tif (center && currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][0] + constraint[souTar][0] * geo[souTar][2];\n\t\t\t\t}\n\t\t\t\telse if (center)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][1] + constraint[souTar][1] * geo[souTar][3];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlimit = mxEdgeStyle.limits[souTar][side];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tvar lastX = mxEdgeStyle.wayPoints1[currentIndex][0];\n\t\t\t\t\tvar deltaX = (limit - lastX) * direction[0];\n\n\t\t\t\t\tif (deltaX > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t\t\t* deltaX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar lastY = mxEdgeStyle.wayPoints1[currentIndex][1];\n\t\t\t\t\tvar deltaY = (limit - lastY) * direction[1];\n\n\t\t\t\t\tif (deltaY > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t\t\t* deltaY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (center)\n\t\t\t{\n\t\t\t\t// Which center we're travelling to depend on the current direction\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t}\n\n\t\t\tif (currentIndex > 0\n\t\t\t\t\t&& mxEdgeStyle.wayPoints1[currentIndex][currentOrientation] == mxEdgeStyle.wayPoints1[currentIndex - 1][currentOrientation])\n\t\t\t{\n\t\t\t\tcurrentIndex--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlastOrientation = currentOrientation;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i <= currentIndex; i++)\n\t\t{\n\t\t\tif (i == currentIndex)\n\t\t\t{\n\t\t\t\t// Last point can cause last segment to be in\n\t\t\t\t// same direction as jetty/approach. If so,\n\t\t\t\t// check the number of points is consistent\n\t\t\t\t// with the relative orientation of source and target\n\t\t\t\t// jx. Same orientation requires an even\n\t\t\t\t// number of turns (points), different requires\n\t\t\t\t// odd.\n\t\t\t\tvar targetOrientation = (dir[1] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t\t\t: 1;\n\t\t\t\tvar sameOrient = targetOrientation == initialOrientation ? 0 : 1;\n\n\t\t\t\t// (currentIndex + 1) % 2 is 0 for even number of points,\n\t\t\t\t// 1 for odd\n\t\t\t\tif (sameOrient != (currentIndex + 1) % 2)\n\t\t\t\t{\n\t\t\t\t\t// The last point isn't required\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(Math.round(mxEdgeStyle.wayPoints1[i][0]), Math.round(mxEdgeStyle.wayPoints1[i][1])));\n\t\t}\n\t\t\n\t\t// Removes duplicates\n\t\tvar index = 1;\n\t\t\n\t\twhile (index < result.length)\n\t\t{\n\t\t\tif (result[index - 1] == null || result[index] == null ||\n\t\t\t\tresult[index - 1].x != result[index].x ||\n\t\t\t\tresult[index - 1].y != result[index].y)\n\t\t\t{\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.splice(index, 1);\n\t\t\t}\n\t\t}\n\t},\n\t\n\tgetRoutePattern: function(dir, quad, dx, dy)\n\t{\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar result = routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tif (dx == 0 || dy == 0)\n\t\t{\n\t\t\tif (inlineRoutePatterns[sourceIndex - 1][targetIndex - 1] != null)\n\t\t\t{\n\t\t\t\tresult = inlineRoutePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxStyleRegistry =\n{\n\t/**\n\t * Class: mxStyleRegistry\n\t *\n\t * Singleton class that acts as a global converter from string to object values\n\t * in a style. This is currently only used to perimeters and edge styles.\n\t * \n\t * Variable: values\n\t *\n\t * Maps from strings to objects.\n\t */\n\tvalues: [],\n\n\t/**\n\t * Function: putValue\n\t *\n\t * Puts the given object into the registry under the given name.\n\t */\n\tputValue: function(name, obj)\n\t{\n\t\tmxStyleRegistry.values[name] = obj;\n\t},\n\n\t/**\n\t * Function: getValue\n\t *\n\t * Returns the value associated with the given name.\n\t */\n\tgetValue: function(name)\n\t{\n\t\treturn mxStyleRegistry.values[name];\n\t},\n\t\n\t/**\n\t * Function: getName\n\t * \n\t * Returns the name for the given value.\n\t */\n\tgetName: function(value)\n\t{\n\t\tfor (var key in mxStyleRegistry.values)\n\t\t{\n\t\t\tif (mxStyleRegistry.values[key] == value)\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n};\n\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ELBOW, mxEdgeStyle.ElbowConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ENTITY_RELATION, mxEdgeStyle.EntityRelation);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_LOOP, mxEdgeStyle.Loop);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SIDETOSIDE, mxEdgeStyle.SideToSide);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_TOPTOBOTTOM, mxEdgeStyle.TopToBottom);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ORTHOGONAL, mxEdgeStyle.OrthConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SEGMENT, mxEdgeStyle.SegmentConnector);\n\nmxStyleRegistry.putValue(mxConstants.PERIMETER_ELLIPSE, mxPerimeter.EllipsePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RECTANGLE, mxPerimeter.RectanglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RHOMBUS, mxPerimeter.RhombusPerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_TRIANGLE, mxPerimeter.TrianglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_HEXAGON, mxPerimeter.HexagonPerimeter);\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphView\n *\n * Extends <mxEventSource> to implement a view for a graph. This class is in\n * charge of computing the absolute coordinates for the relative child\n * geometries, the points for perimeters and edge styles and keeping them\n * cached in <mxCellStates> for faster retrieval. The states are updated\n * whenever the model or the view state (translate, scale) changes. The scale\n * and translate are honoured in the bounds.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the root was changed in <setCurrentRoot>. The <code>edit</code>\n * property contains the <mxUndoableEdit> which contains the\n * <mxCurrentRootChange>.\n * \n * Event: mxEvent.SCALE_AND_TRANSLATE\n * \n * Fires after the scale and translate have been changed in <scaleAndTranslate>.\n * The <code>scale</code>, <code>previousScale</code>, <code>translate</code>\n * and <code>previousTranslate</code> properties contain the new and previous\n * scale and translate, respectively.\n * \n * Event: mxEvent.SCALE\n * \n * Fires after the scale was changed in <setScale>. The <code>scale</code> and\n * <code>previousScale</code> properties contain the new and previous scale.\n * \n * Event: mxEvent.TRANSLATE\n * \n * Fires after the translate was changed in <setTranslate>. The\n * <code>translate</code> and <code>previousTranslate</code> properties contain\n * the new and previous value for translate.\n * \n * Event: mxEvent.DOWN and mxEvent.UP\n * \n * Fire if the current root is changed by executing an <mxCurrentRootChange>.\n * The event name depends on the location of the root in the cell hierarchy\n * with respect to the current root. The <code>root</code> and\n * <code>previous</code> properties contain the new and previous root,\n * respectively.\n * \n * Constructor: mxGraphView\n *\n * Constructs a new view for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphView(graph)\n{\n\tthis.graph = graph;\n\tthis.translate = new mxPoint();\n\tthis.graphBounds = new mxRectangle();\n\tthis.states = new mxDictionary();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphView.prototype = new mxEventSource();\nmxGraphView.prototype.constructor = mxGraphView;\n\n/**\n *\n */\nmxGraphView.prototype.EMPTY_POINT = new mxPoint();\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphView.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Function: updatingDocumentResource\n *\n * Specifies the resource key for the status message while the document is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingDocument'.\n */\nmxGraphView.prototype.updatingDocumentResource = (mxClient.language != 'none') ? 'updatingDocument' : '';\n\n/**\n * Variable: allowEval\n * \n * Specifies if string values in cell styles should be evaluated using\n * <mxUtils.eval>. This will only be used if the string values can't be mapped\n * to objects using <mxStyleRegistry>. Default is false. NOTE: Enabling this\n * switch carries a possible security risk.\n */\nmxGraphView.prototype.allowEval = false;\n\n/**\n * Variable: captureDocumentGesture\n * \n * Specifies if a gesture should be captured when it goes outside of the\n * graph container. Default is true.\n */\nmxGraphView.prototype.captureDocumentGesture = true;\n\n/**\n * Variable: optimizeVmlReflows\n * \n * Specifies if the <canvas> should be hidden while rendering in IE8 standards\n * mode and quirks mode. This will significantly improve rendering performance.\n * Default is true.\n */\nmxGraphView.prototype.optimizeVmlReflows = true;\n\n/**\n * Variable: rendering\n * \n * Specifies if shapes should be created, updated and destroyed using the\n * methods of <mxCellRenderer> in <graph>. Default is true.\n */\nmxGraphView.prototype.rendering = true;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphView.prototype.graph = null;\n\n/**\n * Variable: currentRoot\n *\n * <mxCell> that acts as the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.currentRoot = null;\n\n/**\n * Variable: graphBounds\n *\n * <mxRectangle> that caches the scales, translated bounds of the current view.\n */\nmxGraphView.prototype.graphBounds = null;\n\n/**\n * Variable: scale\n * \n * Specifies the scale. Default is 1 (100%).\n */\nmxGraphView.prototype.scale = 1;\n\t\n/**\n * Variable: translate\n *\n * <mxPoint> that specifies the current translation. Default is a new\n * empty <mxPoint>.\n */\nmxGraphView.prototype.translate = null;\n\n/**\n * Variable: states\n * \n * <mxDictionary> that maps from cell IDs to <mxCellStates>.\n */\nmxGraphView.prototype.states = null;\n\n/**\n * Variable: updateStyle\n * \n * Specifies if the style should be updated in each validation step. If this\n * is false then the style is only updated if the state is created or if the\n * style of the cell was changed. Default is false.\n */\nmxGraphView.prototype.updateStyle = false;\n\n/**\n * Variable: lastNode\n * \n * During validation, this contains the last DOM node that was processed.\n */\nmxGraphView.prototype.lastNode = null;\n\n/**\n * Variable: lastHtmlNode\n * \n * During validation, this contains the last HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastHtmlNode = null;\n\n/**\n * Variable: lastForegroundNode\n * \n * During validation, this contains the last edge's DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundNode = null;\n\n/**\n * Variable: lastForegroundHtmlNode\n * \n * During validation, this contains the last edge HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundHtmlNode = null;\n\n/**\n * Function: getGraphBounds\n *\n * Returns <graphBounds>.\n */\nmxGraphView.prototype.getGraphBounds = function()\n{\n\treturn this.graphBounds;\n};\n\n/**\n * Function: setGraphBounds\n *\n * Sets <graphBounds>.\n */\nmxGraphView.prototype.setGraphBounds = function(value)\n{\n\tthis.graphBounds = value;\n};\n\n/**\n * Function: getBounds\n * \n * Returns the union of all <mxCellStates> for the given array of <mxCells>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be returned.\n */\nmxGraphView.prototype.getBounds = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(state);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: setCurrentRoot\n *\n * Sets and returns the current root and fires an <undo> event before\n * calling <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * root - <mxCell> that specifies the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.setCurrentRoot = function(root)\n{\n\tif (this.currentRoot != root)\n\t{\n\t\tvar change = new mxCurrentRootChange(this, root);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, true);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t\tthis.graph.sizeDidChange();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: scaleAndTranslate\n *\n * Sets the scale and translation and fires a <scale> and <translate> event\n * before calling <revalidate> followed by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * scale - Decimal value that specifies the new scale (1 is 100%).\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.scaleAndTranslate = function(scale, dx, dy)\n{\n\tvar previousScale = this.scale;\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.scale != scale || this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.scale = scale;\n\t\t\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE_AND_TRANSLATE,\n\t\t'scale', scale, 'previousScale', previousScale,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: getScale\n * \n * Returns the <scale>.\n */\nmxGraphView.prototype.getScale = function()\n{\n\treturn this.scale;\n};\n\n/**\n * Function: setScale\n *\n * Sets the scale and fires a <scale> event before calling <revalidate> followed\n * by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * value - Decimal value that specifies the new scale (1 is 100%).\n */\nmxGraphView.prototype.setScale = function(value)\n{\n\tvar previousScale = this.scale;\n\t\n\tif (this.scale != value)\n\t{\n\t\tthis.scale = value;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE,\n\t\t'scale', value, 'previousScale', previousScale));\n};\n\n/**\n * Function: getTranslate\n * \n * Returns the <translate>.\n */\nmxGraphView.prototype.getTranslate = function()\n{\n\treturn this.translate;\n};\n\n/**\n * Function: setTranslate\n *\n * Sets the translation and fires a <translate> event before calling\n * <revalidate> followed by <mxGraph.sizeDidChange>. The translation is the\n * negative of the origin.\n *\n * Parameters:\n *\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.setTranslate = function(dx, dy)\n{\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.TRANSLATE,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: viewStateChanged\n * \n * Invoked after <scale> and/or <translate> has changed.\n */\nmxGraphView.prototype.viewStateChanged = function()\n{\n\tthis.revalidate();\n\tthis.graph.sizeDidChange();\n};\n\n/**\n * Function: refresh\n *\n * Clears the view if <currentRoot> is not null and revalidates.\n */\nmxGraphView.prototype.refresh = function()\n{\n\tif (this.currentRoot != null)\n\t{\n\t\tthis.clear();\n\t}\n\t\n\tthis.revalidate();\n};\n\n/**\n * Function: revalidate\n *\n * Revalidates the complete view with all cell states.\n */\nmxGraphView.prototype.revalidate = function()\n{\n\tthis.invalidate();\n\tthis.validate();\n};\n\n/**\n * Function: clear\n *\n * Removes the state of the given cell and all descendants if the given\n * cell is not the current root.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the state should be removed. Default\n * is the root of the model.\n * force - Boolean indicating if the current root should be ignored for\n * recursion.\n */\nmxGraphView.prototype.clear = function(cell, force, recurse)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\tforce = (force != null) ? force : false;\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tthis.removeState(cell);\n\t\n\tif (recurse && (force || cell != this.currentRoot))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.clear(model.getChildAt(cell, i), force);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.invalidate(cell);\n\t}\n};\n\n/**\n * Function: invalidate\n * \n * Invalidates the state of the given cell, all its descendants and\n * connected edges.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be invalidated. Default is the root of the\n * model.\n */\nmxGraphView.prototype.invalidate = function(cell, recurse, includeEdges)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\trecurse = (recurse != null) ? recurse : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar state = this.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tstate.invalid = true;\n\t}\n\t\n\t// Avoids infinite loops for invalid graphs\n\tif (!cell.invalidating)\n\t{\n\t\tcell.invalidating = true;\n\t\t\n\t\t// Recursively invalidates all descendants\n\t\tif (recurse)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\tthis.invalidate(child, recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Propagates invalidation to all connected edges\n\t\tif (includeEdges)\n\t\t{\n\t\t\tvar edgeCount = model.getEdgeCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t{\n\t\t\t\tthis.invalidate(model.getEdgeAt(cell, i), recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdelete cell.invalidating;\n\t}\n};\n\n/**\n * Function: validate\n * \n * Calls <validateCell> and <validateCellState> and updates the <graphBounds>\n * using <getBoundingBox>. Finally the background is validated using\n * <validateBackground>.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the root of the validation.\n * Default is <currentRoot> or the root of the model.\n */\nmxGraphView.prototype.validate = function(cell)\n{\n\tvar t0 = mxLog.enter('mxGraphView.validate');\n\twindow.status = mxResources.get(this.updatingDocumentResource) ||\n\t\tthis.updatingDocumentResource;\n\t\n\tthis.resetValidationState();\n\t\n\t// Improves IE rendering speed by minimizing reflows\n\tvar prevDisplay = null;\n\t\n\tif (this.optimizeVmlReflows && this.canvas != null && this.textDiv == null &&\n\t\t((document.documentMode == 8 && !mxClient.IS_EM) || mxClient.IS_QUIRKS))\n\t{\n\t\t// Placeholder keeps scrollbar positions when canvas is hidden\n\t\tthis.placeholder = document.createElement('div');\n\t\tthis.placeholder.style.position = 'absolute';\n\t\tthis.placeholder.style.width = this.canvas.clientWidth + 'px';\n\t\tthis.placeholder.style.height = this.canvas.clientHeight + 'px';\n\t\tthis.canvas.parentNode.appendChild(this.placeholder);\n\n\t\tprevDisplay = this.drawPane.style.display;\n\t\tthis.canvas.style.display = 'none';\n\t\t\n\t\t// Creates temporary DIV used for text measuring in mxText.updateBoundingBox\n\t\tthis.textDiv = document.createElement('div');\n\t\tthis.textDiv.style.position = 'absolute';\n\t\tthis.textDiv.style.whiteSpace = 'nowrap';\n\t\tthis.textDiv.style.visibility = 'hidden';\n\t\tthis.textDiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tthis.textDiv.style.zoom = '1';\n\t\t\n\t\tdocument.body.appendChild(this.textDiv);\n\t}\n\t\n\tvar graphBounds = this.getBoundingBox(this.validateCellState(\n\t\tthis.validateCell(cell || ((this.currentRoot != null) ?\n\t\t\tthis.currentRoot : this.graph.getModel().getRoot()))));\n\tthis.setGraphBounds((graphBounds != null) ? graphBounds : this.getEmptyBounds());\n\tthis.validateBackground();\n\t\n\tif (prevDisplay != null)\n\t{\n\t\tthis.canvas.style.display = prevDisplay;\n\t\tthis.textDiv.parentNode.removeChild(this.textDiv);\n\t\t\n\t\tif (this.placeholder != null)\n\t\t{\n\t\t\tthis.placeholder.parentNode.removeChild(this.placeholder);\n\t\t}\n\t\t\t\t\n\t\t// Textdiv cannot be reused\n\t\tthis.textDiv = null;\n\t}\n\t\n\tthis.resetValidationState();\n\t\n\twindow.status = mxResources.get(this.doneResource) ||\n\t\tthis.doneResource;\n\tmxLog.leave('mxGraphView.validate', t0);\n};\n\n/**\n * Function: getEmptyBounds\n * \n * Returns the bounds for an empty graph. This returns a rectangle at\n * <translate> with the size of 0 x 0.\n */\nmxGraphView.prototype.getEmptyBounds = function()\n{\n\treturn new mxRectangle(this.translate.x * this.scale, this.translate.y * this.scale);\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box of the shape and the label for the given\n * <mxCellState> and its children if recurse is true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounding box should be returned.\n * recurse - Optional boolean indicating if the children should be included.\n * Default is true.\n */\nmxGraphView.prototype.getBoundingBox = function(state, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar bbox = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (state.shape != null && state.shape.boundingBox != null)\n\t\t{\n\t\t\tbbox = state.shape.boundingBox.clone();\n\t\t}\n\t\t\n\t\t// Adds label bounding box to graph bounds\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (bbox != null)\n\t\t\t{\n\t\t\t\tbbox.add(state.text.boundingBox);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox = state.text.boundingBox.clone();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (recurse)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(state.cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar bounds = this.getBoundingBox(this.getState(model.getChildAt(state.cell, i)));\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (bbox == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = bounds;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox.add(bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bbox;\n};\n\n/**\n * Function: createBackgroundPageShape\n *\n * Creates and returns the shape used as the background page.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that represents the bounds of the shape.\n */\nmxGraphView.prototype.createBackgroundPageShape = function(bounds)\n{\n\treturn new mxRectangleShape(bounds, 'white', 'black');\n};\n\n/**\n * Function: validateBackground\n *\n * Calls <validateBackgroundImage> and <validateBackgroundPage>.\n */\nmxGraphView.prototype.validateBackground = function()\n{\n\tthis.validateBackgroundImage();\n\tthis.validateBackgroundPage();\n};\n\n/**\n * Function: validateBackgroundImage\n * \n * Validates the background image.\n */\nmxGraphView.prototype.validateBackgroundImage = function()\n{\n\tvar bg = this.graph.getBackgroundImage();\n\t\n\tif (bg != null)\n\t{\n\t\tif (this.backgroundImage == null || this.backgroundImage.image != bg.src)\n\t\t{\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tthis.backgroundImage.destroy();\n\t\t\t}\n\t\t\t\n\t\t\tvar bounds = new mxRectangle(0, 0, 1, 1);\n\t\t\t\n\t\t\tthis.backgroundImage = new mxImageShape(bounds, bg.src);\n\t\t\tthis.backgroundImage.dialect = this.graph.dialect;\n\t\t\tthis.backgroundImage.init(this.backgroundPane);\n\t\t\tthis.backgroundImage.redraw();\n\n\t\t\t// Workaround for ignored event on background in IE8 standards mode\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tmxEvent.addGestureListeners(this.backgroundImage.node,\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.redrawBackgroundImage(this.backgroundImage, bg);\n\t}\n\telse if (this.backgroundImage != null)\n\t{\n\t\tthis.backgroundImage.destroy();\n\t\tthis.backgroundImage = null;\n\t}\n};\n\n/**\n * Function: validateBackgroundPage\n * \n * Validates the background page.\n */\nmxGraphView.prototype.validateBackgroundPage = function()\n{\n\tif (this.graph.pageVisible)\n\t{\n\t\tvar bounds = this.getBackgroundPageBounds();\n\t\t\n\t\tif (this.backgroundPageShape == null)\n\t\t{\n\t\t\tthis.backgroundPageShape = this.createBackgroundPageShape(bounds);\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.isShadow = true;\n\t\t\tthis.backgroundPageShape.dialect = this.graph.dialect;\n\t\t\tthis.backgroundPageShape.init(this.backgroundPane);\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t\t\n\t\t\t// Adds listener for double click handling on background\n\t\t\tif (this.graph.nativeDblClickEnabled)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(this.backgroundPageShape.node, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.dblClick(evt);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t\t// container and finishing the handling of a single gesture\n\t\t\tmxEvent.addGestureListeners(this.backgroundPageShape.node,\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\t\t\tif (this.graph.tooltipHandler != null && this.graph.tooltipHandler.isHideOnHover())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.tooltipHandler.hide();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.graph.isMouseDown && !mxEvent.isConsumed(evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.bounds = bounds;\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t}\n\t}\n\telse if (this.backgroundPageShape != null)\n\t{\n\t\tthis.backgroundPageShape.destroy();\n\t\tthis.backgroundPageShape = null;\n\t}\n};\n\n/**\n * Function: getBackgroundPageBounds\n * \n * Returns the bounds for the background page.\n */\nmxGraphView.prototype.getBackgroundPageBounds = function()\n{\n\tvar fmt = this.graph.pageFormat;\n\tvar ps = this.scale * this.graph.pageScale;\n\tvar bounds = new mxRectangle(this.scale * this.translate.x, this.scale * this.translate.y,\n\t\t\tfmt.width * ps, fmt.height * ps);\n\t\n\treturn bounds;\n};\n\n/**\n * Function: redrawBackgroundImage\n *\n * Updates the bounds and redraws the background image.\n * \n * Example:\n * \n * If the background image should not be scaled, this can be replaced with\n * the following.\n * \n * (code)\n * mxGraphView.prototype.redrawBackground = function(backgroundImage, bg)\n * {\n *   backgroundImage.bounds.x = this.translate.x;\n *   backgroundImage.bounds.y = this.translate.y;\n *   backgroundImage.bounds.width = bg.width;\n *   backgroundImage.bounds.height = bg.height;\n *\n *   backgroundImage.redraw();\n * };\n * (end)\n * \n * Parameters:\n * \n * backgroundImage - <mxImageShape> that represents the background image.\n * bg - <mxImage> that specifies the image and its dimensions.\n */\nmxGraphView.prototype.redrawBackgroundImage = function(backgroundImage, bg)\n{\n\tbackgroundImage.scale = this.scale;\n\tbackgroundImage.bounds.x = this.scale * this.translate.x;\n\tbackgroundImage.bounds.y = this.scale * this.translate.y;\n\tbackgroundImage.bounds.width = this.scale * bg.width;\n\tbackgroundImage.bounds.height = this.scale * bg.height;\n\n\tbackgroundImage.redraw();\n};\n\n/**\n * Function: validateCell\n * \n * Recursively creates the cell state for the given cell if visible is true and\n * the given cell is visible. If the cell is not visible but the state exists\n * then it is removed using <removeState>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be created.\n * visible - Optional boolean indicating if the cell should be visible. Default\n * is true.\n */\nmxGraphView.prototype.validateCell = function(cell, visible)\n{\n\tvisible = (visible != null) ? visible : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvisible = visible && this.graph.isCellVisible(cell);\n\t\tvar state = this.getState(cell, visible);\n\t\t\n\t\tif (state != null && !visible)\n\t\t{\n\t\t\tthis.removeState(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tthis.validateCell(model.getChildAt(cell, i), visible &&\n\t\t\t\t\t(!this.isCellCollapsed(cell) || cell == this.currentRoot));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: validateCellState\n * \n * Validates and repaints the <mxCellState> for the given <mxCell>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be validated.\n * recurse - Optional boolean indicating if the children of the cell should be\n * validated. Default is true.\n */\nmxGraphView.prototype.validateCellState = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\t\n\t\t\tif (state.invalid)\n\t\t\t{\n\t\t\t\tstate.invalid = false;\n\t\t\t\t\n\t\t\t\tif (state.style == null || state.invalidStyle)\n\t\t\t\t{\n\t\t\t\t\tstate.style = this.graph.getCellStyle(state.cell);\n\t\t\t\t\tstate.invalidStyle = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (cell != this.currentRoot)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getParent(cell), false);\n\t\t\t\t}\n\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, true), false), true);\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, false), false), false);\n\t\t\t\t\n\t\t\t\tthis.updateCellState(state);\n\t\t\t\t\n\t\t\t\t// Repaint happens immediately after the cell is validated\n\t\t\t\tif (cell != this.currentRoot && !state.invalid)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.cellRenderer.redraw(state, false, this.isRendering());\n\n\t\t\t\t\t// Handles changes to invertex paintbounds after update of rendering shape\n\t\t\t\t\tstate.updateCachedBounds();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (recurse && !state.invalid)\n\t\t\t{\n\t\t\t\t// Updates order in DOM if recursively traversing\n\t\t\t\tif (state.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.stateValidated(state);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: updateCellState\n * \n * Updates the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to be updated.\n */\nmxGraphView.prototype.updateCellState = function(state)\n{\n\tstate.absoluteOffset.x = 0;\n\tstate.absoluteOffset.y = 0;\n\tstate.origin.x = 0;\n\tstate.origin.y = 0;\n\tstate.length = 0;\n\t\n\tif (state.cell != this.currentRoot)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar pState = this.getState(model.getParent(state.cell)); \n\t\t\n\t\tif (pState != null && pState.cell != this.currentRoot)\n\t\t{\n\t\t\tstate.origin.x += pState.origin.x;\n\t\t\tstate.origin.y += pState.origin.y;\n\t\t}\n\t\t\n\t\tvar offset = this.graph.getChildOffsetForCell(state.cell);\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tstate.origin.x += offset.x;\n\t\t\tstate.origin.y += offset.y;\n\t\t}\n\t\t\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\t\t\t\t\n\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (!model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\toffset = geo.offset || this.EMPTY_POINT;\n\t\n\t\t\t\tif (geo.relative && pState != null)\n\t\t\t\t{\n\t\t\t\t\tif (model.isEdge(pState.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar origin = this.getPoint(pState, geo);\n\n\t\t\t\t\t\tif (origin != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.origin.x += (origin.x / this.scale) - pState.origin.x - this.translate.x;\n\t\t\t\t\t\t\tstate.origin.y += (origin.y / this.scale) - pState.origin.y - this.translate.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.origin.x += geo.x * pState.width / this.scale + offset.x;\n\t\t\t\t\t\tstate.origin.y += geo.y * pState.height / this.scale + offset.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstate.absoluteOffset.x = this.scale * offset.x;\n\t\t\t\t\tstate.absoluteOffset.y = this.scale * offset.y;\n\t\t\t\t\tstate.origin.x += geo.x;\n\t\t\t\t\tstate.origin.y += geo.y;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tstate.x = this.scale * (this.translate.x + state.origin.x);\n\t\t\tstate.y = this.scale * (this.translate.y + state.origin.y);\n\t\t\tstate.width = this.scale * geo.width;\n\t\t\tstate.unscaledWidth = geo.width;\n\t\t\tstate.height = this.scale * geo.height;\n\t\t\t\n\t\t\tif (model.isVertex(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateVertexState(state, geo);\n\t\t\t}\n\t\t\t\n\t\t\tif (model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(state, geo);\n\t\t\t}\n\t\t}\n\t}\n\n\tstate.updateCachedBounds();\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the children of the given cell should not be visible in the\n * view. This implementation uses <mxGraph.isCellVisible> but it can be\n * overidden to use a separate condition.\n */\nmxGraphView.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.graph.isCellCollapsed(cell);\n};\n\n/**\n * Function: updateVertexState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateVertexState = function(state, geo)\n{\n\tvar model = this.graph.getModel();\n\tvar pState = this.getState(model.getParent(state.cell));\n\t\n\tif (geo.relative && pState != null && !model.isEdge(pState.cell))\n\t{\n\t\tvar alpha = mxUtils.toRadians(pState.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\tstate.x = pt.x - state.width / 2;\n\t\t\tstate.y = pt.y - state.height / 2;\n\t\t}\n\t}\n\t\n\tthis.updateVertexLabelOffset(state);\n};\n\n/**\n * Function: updateEdgeState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateEdgeState = function(state, geo)\n{\n\tvar source = state.getVisibleTerminalState(true);\n\tvar target = state.getVisibleTerminalState(false);\n\t\n\t// This will remove edges with no terminals and no terminal points\n\t// as such edges are invalid and produce NPEs in the edge styles.\n\t// Also removes connected edges that have no visible terminals.\n\tif ((this.graph.model.getTerminal(state.cell, true) != null && source == null) ||\n\t\t(source == null && geo.getTerminalPoint(true) == null) ||\n\t\t(this.graph.model.getTerminal(state.cell, false) != null && target == null) ||\n\t\t(target == null && geo.getTerminalPoint(false) == null))\n\t{\n\t\tthis.clear(state.cell, true);\n\t}\n\telse\n\t{\n\t\tthis.updateFixedTerminalPoints(state, source, target);\n\t\tthis.updatePoints(state, geo.points, source, target);\n\t\tthis.updateFloatingTerminalPoints(state, source, target);\n\t\t\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (state.cell != this.currentRoot && (pts == null || pts.length < 2 ||\n\t\t\tpts[0] == null || pts[pts.length - 1] == null))\n\t\t{\n\t\t\t// This will remove edges with invalid points from the list of states in the view.\n\t\t\t// Happens if the one of the terminals and the corresponding terminal point is null.\n\t\t\tthis.clear(state.cell, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateEdgeBounds(state);\n\t\t\tthis.updateEdgeLabelOffset(state);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateVertexLabelOffset\n * \n * Updates the absoluteOffset of the given vertex cell state. This takes\n * into account the label position styles.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateVertexLabelOffset = function(state)\n{\n\tvar h = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\n\tif (h == mxConstants.ALIGN_LEFT)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\tlw *= this.scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlw = state.width;\n\t\t}\n\t\t\n\t\tstate.absoluteOffset.x -= lw;\n\t}\n\telse if (h == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstate.absoluteOffset.x += state.width;\n\t}\n\telse if (h == mxConstants.ALIGN_CENTER)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\t// Aligns text block with given width inside the vertex width\n\t\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER);\n\t\t\tvar dx = 0;\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx = 0.5;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx = 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (dx != 0)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset.x -= (lw * this.scale - state.width) * dx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar v = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\tif (v == mxConstants.ALIGN_TOP)\n\t{\n\t\tstate.absoluteOffset.y -= state.height;\n\t}\n\telse if (v == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tstate.absoluteOffset.y += state.height;\n\t}\n};\n\n/**\n * Function: resetValidationState\n *\n * Resets the current validation state.\n */\nmxGraphView.prototype.resetValidationState = function()\n{\n\tthis.lastNode = null;\n\tthis.lastHtmlNode = null;\n\tthis.lastForegroundNode = null;\n\tthis.lastForegroundHtmlNode = null;\n};\n\n/**\n * Function: stateValidated\n * \n * Invoked when a state has been processed in <validatePoints>. This is used\n * to update the order of the DOM nodes of the shape.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n */\nmxGraphView.prototype.stateValidated = function(state)\n{\n\tvar fg = (this.graph.getModel().isEdge(state.cell) && this.graph.keepEdgesInForeground) ||\n\t\t(this.graph.getModel().isVertex(state.cell) && this.graph.keepEdgesInBackground);\n\tvar htmlNode = (fg) ? this.lastForegroundHtmlNode || this.lastHtmlNode : this.lastHtmlNode;\n\tvar node = (fg) ? this.lastForegroundNode || this.lastNode : this.lastNode;\n\tvar result = this.graph.cellRenderer.insertStateAfter(state, node, htmlNode);\n\n\tif (fg)\n\t{\n\t\tthis.lastForegroundHtmlNode = result[1];\n\t\tthis.lastForegroundNode = result[0];\n\t}\n\telse\n\t{\n\t\tthis.lastHtmlNode = result[1];\n\t\tthis.lastNode = result[0];\n\t}\n};\n\n/**\n * Function: updateFixedTerminalPoints\n *\n * Sets the initial absolute terminal points in the given state before the edge\n * style is computed.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose initial terminal points should be updated.\n * source - <mxCellState> which represents the source terminal.\n * target - <mxCellState> which represents the target terminal.\n */\nmxGraphView.prototype.updateFixedTerminalPoints = function(edge, source, target)\n{\n\tthis.updateFixedTerminalPoint(edge, source, true,\n\t\tthis.graph.getConnectionConstraint(edge, source, true));\n\tthis.updateFixedTerminalPoint(edge, target, false,\n\t\tthis.graph.getConnectionConstraint(edge, target, false));\n};\n\n/**\n * Function: updateFixedTerminalPoint\n *\n * Sets the fixed source or target terminal point on the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.updateFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFixedTerminalPoint(edge, terminal, source, constraint), source);\n};\n\n/**\n * Function: getFixedTerminalPoint\n *\n * Returns the fixed source or target terminal point for the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.getFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tvar pt = null;\n\t\n\tif (constraint != null)\n\t{\n\t\tpt = this.graph.getConnectionPoint(terminal, constraint, this.graph.isOrthogonal(edge));\n\t}\n\t\n\tif (pt == null && terminal == null)\n\t{\n\t\tvar s = this.scale;\n\t\tvar tr = this.translate;\n\t\tvar orig = edge.origin;\n\t\tvar geo = this.graph.getCellGeometry(edge.cell);\n\t\tpt = geo.getTerminalPoint(source);\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = new mxPoint(s * (tr.x + pt.x + orig.x),\n\t\t\t\t\t\t\t s * (tr.y + pt.y + orig.y));\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: updateBoundsFromStencil\n * \n * Updates the bounds of the given cell state to reflect the bounds of the stencil\n * if it has a fixed aspect and returns the previous bounds as an <mxRectangle> if\n * the bounds have been modified or null otherwise.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateBoundsFromStencil = function(state)\n{\n\tvar previous = null;\n\t\n\tif (state != null && state.shape != null && state.shape.stencil != null && state.shape.stencil.aspect == 'fixed')\n\t{\n\t\tprevious = mxRectangle.fromRectangle(state);\n\t\tvar asp = state.shape.stencil.computeAspect(state.style, state.x, state.y, state.width, state.height);\n\t\tstate.setRect(asp.x, asp.y, state.shape.stencil.w0 * asp.width, state.shape.stencil.h0 * asp.height);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: updatePoints\n *\n * Updates the absolute points in the given state using the specified array\n * of <mxPoints> as the relative points.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose absolute points should be updated.\n * points - Array of <mxPoints> that constitute the relative points.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updatePoints = function(edge, points, source, target)\n{\n\tif (edge != null)\n\t{\n\t\tvar pts = [];\n\t\tpts.push(edge.absolutePoints[0]);\n\t\tvar edgeStyle = this.getEdgeStyle(edge, points, source, target);\n\t\t\n\t\tif (edgeStyle != null)\n\t\t{\n\t\t\tvar src = this.getTerminalPort(edge, source, true);\n\t\t\tvar trg = this.getTerminalPort(edge, target, false);\n\t\t\t\n\t\t\t// Uses the stencil bounds for routing and restores after routing\n\t\t\tvar srcBounds = this.updateBoundsFromStencil(src);\n\t\t\tvar trgBounds = this.updateBoundsFromStencil(trg);\n\n\t\t\tedgeStyle(edge, src, trg, points, pts);\n\t\t\t\n\t\t\t// Restores previous bounds\n\t\t\tif (srcBounds != null)\n\t\t\t{\n\t\t\t\tsrc.setRect(srcBounds.x, srcBounds.y, srcBounds.width, srcBounds.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (trgBounds != null)\n\t\t\t{\n\t\t\t\ttrg.setRect(trgBounds.x, trgBounds.y, trgBounds.width, trgBounds.height);\n\t\t\t}\n\t\t}\n\t\telse if (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = mxUtils.clone(points[i]);\n\t\t\t\t\tpts.push(this.transformControlPoint(edge, pt));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tmp = edge.absolutePoints;\n\t\tpts.push(tmp[tmp.length-1]);\n\n\t\tedge.absolutePoints = pts;\n\t}\n};\n\n/**\n * Function: transformControlPoint\n *\n * Transforms the given control point to an absolute point.\n */\nmxGraphView.prototype.transformControlPoint = function(state, pt)\n{\n\tif (state != null && pt != null)\n\t{\n\t\tvar orig = state.origin;\n\t\t\n\t    return new mxPoint(this.scale * (pt.x + this.translate.x + orig.x),\n\t    \tthis.scale * (pt.y + this.translate.y + orig.y));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isLoopStyleEnabled\n * \n * Returns true if the given edge should be routed with <mxGraph.defaultLoopStyle>\n * or the <mxConstants.STYLE_LOOP> defined for the given edge. This implementation\n * returns true if the given edge is a loop and does not have connections constraints\n * associated.\n */\nmxGraphView.prototype.isLoopStyleEnabled = function(edge, points, source, target)\n{\n\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\n\tif ((points == null || points.length < 2) &&\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_ORTHOGONAL_LOOP, false) ||\n\t\t((sc == null || sc.point == null) && (tc == null || tc.point == null))))\n\t{\n\t\treturn source != null && source == target;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns the edge style function to be used to render the given edge state.\n */\nmxGraphView.prototype.getEdgeStyle = function(edge, points, source, target)\n{\n\tvar edgeStyle = this.isLoopStyleEnabled(edge, points, source, target) ?\n\t\tmxUtils.getValue(edge.style, mxConstants.STYLE_LOOP, this.graph.defaultLoopStyle) :\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_NOEDGESTYLE, false) ?\n\t\tedge.style[mxConstants.STYLE_EDGE] : null);\n\n\t// Converts string values to objects\n\tif (typeof(edgeStyle) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(edgeStyle);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(edgeStyle);\n\t\t}\n\t\t\n\t\tedgeStyle = tmp;\n\t}\n\t\n\tif (typeof(edgeStyle) == \"function\")\n\t{\n\t\treturn edgeStyle;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: updateFloatingTerminalPoints\n *\n * Updates the terminal points in the given state after the edge style was\n * computed for the edge.\n * \n * Parameters:\n * \n * state - <mxCellState> whose terminal points should be updated.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updateFloatingTerminalPoints = function(state, source, target)\n{\n\tvar pts = state.absolutePoints;\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\n\tif (pe == null && target != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, target, source, false);\n\t}\n\t\n\tif (p0 == null && source != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, source, target, true);\n\t}\n};\n\n/**\n * Function: updateFloatingTerminalPoint\n *\n * Updates the absolute terminal point in the given state for the given\n * start and end state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.updateFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFloatingTerminalPoint(edge, start, end, source), source);\n};\n\n/**\n * Function: getFloatingTerminalPoint\n * \n * Returns the floating terminal point for the given edge, start and end\n * state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.getFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tstart = this.getTerminalPort(edge, start, source);\n\tvar next = this.getNextPoint(edge, end, source);\n\t\n\tvar orth = this.graph.isOrthogonal(edge);\n\tvar alpha = mxUtils.toRadians(Number(start.style[mxConstants.STYLE_ROTATION] || '0'));\n\tvar center = new mxPoint(start.getCenterX(), start.getCenterY());\n\t\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(-alpha);\n\t\tvar sin = Math.sin(-alpha);\n\t\tnext = mxUtils.getRotatedPoint(next, cos, sin, center);\n\t}\n\t\n\tvar border = parseFloat(edge.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\tborder += parseFloat(edge.style[(source) ?\n\t\tmxConstants.STYLE_SOURCE_PERIMETER_SPACING :\n\t\tmxConstants.STYLE_TARGET_PERIMETER_SPACING] || 0);\n\tvar pt = this.getPerimeterPoint(start, next, alpha == 0 && orth, border);\n\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, center);\n\t}\n\n\treturn pt;\n};\n\n/**\n * Function: getTerminalPort\n * \n * Returns an <mxCellState> that represents the source or target terminal or\n * port for the given edge.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the given terminal is the source terminal.\n */\nmxGraphView.prototype.getTerminalPort = function(state, terminal, source)\n{\n\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\tmxConstants.STYLE_TARGET_PORT;\n\tvar id = mxUtils.getValue(state.style, key);\n\t\n\tif (id != null)\n\t{\n\t\tvar tmp = this.getState(this.graph.getModel().getCell(id));\n\t\t\n\t\t// Only uses ports where a cell state exists\n\t\tif (tmp != null)\n\t\t{\n\t\t\tterminal = tmp;\n\t\t}\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getPerimeterPoint\n *\n * Returns an <mxPoint> that defines the location of the intersection point between\n * the perimeter and the line between the center of the shape and the given point.\n * \n * Parameters:\n * \n * terminal - <mxCellState> for the source or target terminal.\n * next - <mxPoint> that lies outside of the given terminal.\n * orthogonal - Boolean that specifies if the orthogonal projection onto\n * the perimeter should be returned. If this is false then the intersection\n * of the perimeter and the line between the next and the center point is\n * returned.\n * border - Optional border between the perimeter and the shape.\n */\nmxGraphView.prototype.getPerimeterPoint = function(terminal, next, orthogonal, border)\n{\n\tvar point = null;\n\t\n\tif (terminal != null)\n\t{\n\t\tvar perimeter = this.getPerimeterFunction(terminal);\n\t\t\n\t\tif (perimeter != null && next != null)\n\t\t{\n\t\t\tvar bounds = this.getPerimeterBounds(terminal, border);\n\n\t\t\tif (bounds.width > 0 || bounds.height > 0)\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(next.x, next.y);\n\t\t\t\tvar flipH = false;\n\t\t\t\tvar flipV = false;\t\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isVertex(terminal.cell))\n\t\t\t\t{\n\t\t\t\t\tflipH = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tflipV = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\t\tif (terminal.shape != null && terminal.shape.stencil != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tflipH = (mxUtils.getValue(terminal.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\t\tflipV = (mxUtils.getValue(terminal.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpoint = perimeter(bounds, terminal, point, orthogonal);\n\n\t\t\t\tif (point != null)\n\t\t\t\t{\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (point == null)\n\t\t{\n\t\t\tpoint = this.getPoint(terminal);\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getRoutingCenterX\n * \n * Returns the x-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterX = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_X]) || 0 : 0;\n\n\treturn state.getCenterX() + f * state.width;\n};\n\n/**\n * Function: getRoutingCenterY\n * \n * Returns the y-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterY = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_Y]) || 0 : 0;\n\n\treturn state.getCenterY() + f * state.height;\n};\n\n/**\n * Function: getPerimeterBounds\n *\n * Returns the perimeter bounds for the given terminal, edge pair as an\n * <mxRectangle>.\n * \n * If you have a model where each terminal has a relative child that should\n * act as the graphical endpoint for a connection from/to the terminal, then\n * this method can be replaced as follows:\n * \n * (code)\n * var oldGetPerimeterBounds = mxGraphView.prototype.getPerimeterBounds;\n * mxGraphView.prototype.getPerimeterBounds = function(terminal, edge, isSource)\n * {\n *   var model = this.graph.getModel();\n *   var childCount = model.getChildCount(terminal.cell);\n * \n *   if (childCount > 0)\n *   {\n *     var child = model.getChildAt(terminal.cell, 0);\n *     var geo = model.getGeometry(child);\n *\n *     if (geo != null &&\n *         geo.relative)\n *     {\n *       var state = this.getState(child);\n *       \n *       if (state != null)\n *       {\n *         terminal = state;\n *       }\n *     }\n *   }\n *   \n *   return oldGetPerimeterBounds.apply(this, arguments);\n * };\n * (end)\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * border - Number that adds a border between the shape and the perimeter.\n */\nmxGraphView.prototype.getPerimeterBounds = function(terminal, border)\n{\n\tborder = (border != null) ? border : 0;\n\n\tif (terminal != null)\n\t{\n\t\tborder += parseFloat(terminal.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\t}\n\n\treturn terminal.getPerimeterBounds(border * this.scale);\n};\n\n/**\n * Function: getPerimeterFunction\n *\n * Returns the perimeter function for the given state.\n */\nmxGraphView.prototype.getPerimeterFunction = function(state)\n{\n\tvar perimeter = state.style[mxConstants.STYLE_PERIMETER];\n\n\t// Converts string values to objects\n\tif (typeof(perimeter) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(perimeter);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(perimeter);\n\t\t}\n\n\t\tperimeter = tmp;\n\t}\n\t\n\tif (typeof(perimeter) == \"function\")\n\t{\n\t\treturn perimeter;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getNextPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * opposite - <mxCellState> that represents the opposite terminal.\n * source - Boolean indicating if the next point for the source or target\n * should be returned.\n */\nmxGraphView.prototype.getNextPoint = function(edge, opposite, source)\n{\n\tvar pts = edge.absolutePoints;\n\tvar point = null;\n\t\n\tif (pts != null && pts.length >= 2)\n\t{\n\t\tvar count = pts.length;\n\t\tpoint = pts[(source) ? Math.min(1, count - 1) : Math.max(0, count - 2)];\n\t}\n\t\n\tif (point == null && opposite != null)\n\t{\n\t\tpoint = new mxPoint(opposite.getCenterX(), opposite.getCenterY());\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Returns the nearest ancestor terminal that is visible. The edge appears\n * to be connected to this terminal on the display. The result of this method\n * is cached in <mxCellState.getVisibleTerminalState>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose visible terminal should be returned.\n * source - Boolean that specifies if the source or target terminal\n * should be returned.\n */\nmxGraphView.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar model = this.graph.getModel();\n\tvar result = model.getTerminal(edge, source);\n\tvar best = result;\n\t\n\twhile (result != null && result != this.currentRoot)\n\t{\n\t\tif (!this.graph.isCellVisible(best) || this.isCellCollapsed(result))\n\t\t{\n\t\t\tbest = result;\n\t\t}\n\t\t\n\t\tresult = model.getParent(result);\n\t}\n\n\t// Checks if the result is valid for the current view state\n\tif (best != null && (!model.contains(best) ||\n\t\tmodel.getParent(best) == model.getRoot() ||\n\t\tbest == this.currentRoot))\n\t{\n\t\tbest = null;\n\t}\n\t\n\treturn best;\n};\n\n/**\n * Function: updateEdgeBounds\n *\n * Updates the given state using the bounding box of t\n * he absolute points.\n * Also updates <mxCellState.terminalDistance>, <mxCellState.length> and\n * <mxCellState.segments>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateEdgeBounds = function(state)\n{\n\tvar points = state.absolutePoints;\n\tvar p0 = points[0];\n\tvar pe = points[points.length - 1];\n\t\n\tif (p0.x != pe.x || p0.y != pe.y)\n\t{\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\tstate.terminalDistance = Math.sqrt(dx * dx + dy * dy);\n\t}\n\telse\n\t{\n\t\tstate.terminalDistance = 0;\n\t}\n\t\n\tvar length = 0;\n\tvar segments = [];\n\tvar pt = p0;\n\t\n\tif (pt != null)\n\t{\n\t\tvar minX = pt.x;\n\t\tvar minY = pt.y;\n\t\tvar maxX = minX;\n\t\tvar maxY = minY;\n\t\t\n\t\tfor (var i = 1; i < points.length; i++)\n\t\t{\n\t\t\tvar tmp = points[i];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar dx = pt.x - tmp.x;\n\t\t\t\tvar dy = pt.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar segment = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tsegments.push(segment);\n\t\t\t\tlength += segment;\n\t\t\t\t\n\t\t\t\tpt = tmp;\n\t\t\t\t\n\t\t\t\tminX = Math.min(pt.x, minX);\n\t\t\t\tminY = Math.min(pt.y, minY);\n\t\t\t\tmaxX = Math.max(pt.x, maxX);\n\t\t\t\tmaxY = Math.max(pt.y, maxY);\n\t\t\t}\n\t\t}\n\t\t\n\t\tstate.length = length;\n\t\tstate.segments = segments;\n\t\t\n\t\tvar markerSize = 1; // TODO: include marker size\n\t\t\n\t\tstate.x = minX;\n\t\tstate.y = minY;\n\t\tstate.width = Math.max(markerSize, maxX - minX);\n\t\tstate.height = Math.max(markerSize, maxY - minY);\n\t}\n};\n\n/**\n * Function: getPoint\n *\n * Returns the absolute point on the edge for the given relative\n * <mxGeometry> as an <mxPoint>. The edge is represented by the given\n * <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * geometry - <mxGeometry> that represents the relative location.\n */\nmxGraphView.prototype.getPoint = function(state, geometry)\n{\n\tvar x = state.getCenterX();\n\tvar y = state.getCenterY();\n\t\n\tif (state.segments != null && (geometry == null || geometry.relative))\n\t{\n\t\tvar gx = (geometry != null) ? geometry.x / 2 : 0;\n\t\tvar pointCount = state.absolutePoints.length;\n\t\tvar dist = Math.round((gx + 0.5) * state.length);\n\t\tvar segment = state.segments[0];\n\t\tvar length = 0;\t\t\t\t\n\t\tvar index = 1;\n\n\t\twhile (dist >= Math.round(length + segment) && index < pointCount - 1)\n\t\t{\n\t\t\tlength += segment;\n\t\t\tsegment = state.segments[index++];\n\t\t}\n\n\t\tvar factor = (segment == 0) ? 0 : (dist - length) / segment;\n\t\tvar p0 = state.absolutePoints[index-1];\n\t\tvar pe = state.absolutePoints[index];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar gy = 0;\n\t\t\tvar offsetX = 0;\n\t\t\tvar offsetY = 0;\n\n\t\t\tif (geometry != null)\n\t\t\t{\n\t\t\t\tgy = geometry.y;\n\t\t\t\tvar offset = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (offset != null)\n\t\t\t\t{\n\t\t\t\t\toffsetX = offset.x;\n\t\t\t\t\toffsetY = offset.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\tvar nx = (segment == 0) ? 0 : dy / segment;\n\t\t\tvar ny = (segment == 0) ? 0 : dx / segment;\n\t\t\t\n\t\t\tx = p0.x + dx * factor + (nx * gy + offsetX) * this.scale;\n\t\t\ty = p0.y + dy * factor - (ny * gy - offsetY) * this.scale;\n\t\t}\n\t}\n\telse if (geometry != null)\n\t{\n\t\tvar offset = geometry.offset;\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tx += offset.x;\n\t\t\ty += offset.y;\n\t\t}\n\t}\n\t\n\treturn new mxPoint(x, y);\t\t\n};\n\n/**\n * Function: getRelativePoint\n *\n * Gets the relative point that describes the given, absolute label\n * position for the given edge state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * x - Specifies the x-coordinate of the absolute label location.\n * y - Specifies the y-coordinate of the absolute label location.\n */\nmxGraphView.prototype.getRelativePoint = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar pointCount = edgeState.absolutePoints.length;\n\t\t\n\t\tif (geometry.relative && pointCount > 1)\n\t\t{\n\t\t\tvar totalLength = edgeState.length;\n\t\t\tvar segments = edgeState.segments;\n\n\t\t\t// Works which line segment the point of the label is closest to\n\t\t\tvar p0 = edgeState.absolutePoints[0];\n\t\t\tvar pe = edgeState.absolutePoints[1];\n\t\t\tvar minDist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tvar index = 0;\n\t\t\tvar tmp = 0;\n\t\t\tvar length = 0;\n\t\t\t\n\t\t\tfor (var i = 2; i < pointCount; i++)\n\t\t\t{\n\t\t\t\ttmp += segments[i - 2];\n\t\t\t\tpe = edgeState.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\t\tif (dist <= minDist)\n\t\t\t\t{\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t\tlength = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp0 = pe;\n\t\t\t}\n\t\t\t\n\t\t\tvar seg = segments[index];\n\t\t\tp0 = edgeState.absolutePoints[index];\n\t\t\tpe = edgeState.absolutePoints[index + 1];\n\t\t\t\n\t\t\tvar x2 = p0.x;\n\t\t\tvar y2 = p0.y;\n\t\t\t\n\t\t\tvar x1 = pe.x;\n\t\t\tvar y1 = pe.y;\n\t\t\t\n\t\t\tvar px = x;\n\t\t\tvar py = y;\n\t\t\t\n\t\t\tvar xSegment = x2 - x1;\n\t\t\tvar ySegment = y2 - y1;\n\t\t\t\n\t\t\tpx -= x1;\n\t\t\tpy -= y1;\n\t\t\tvar projlenSq = 0;\n\t\t\t\n\t\t\tpx = xSegment - px;\n\t\t\tpy = ySegment - py;\n\t\t\tvar dotprod = px * xSegment + py * ySegment;\n\n\t\t\tif (dotprod <= 0.0)\n\t\t\t{\n\t\t\t\tprojlenSq = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprojlenSq = dotprod * dotprod\n\t\t\t\t\t\t/ (xSegment * xSegment + ySegment * ySegment);\n\t\t\t}\n\n\t\t\tvar projlen = Math.sqrt(projlenSq);\n\n\t\t\tif (projlen > seg)\n\t\t\t{\n\t\t\t\tprojlen = seg;\n\t\t\t}\n\n\t\t\tvar yDistance = Math.sqrt(mxUtils.ptSegDistSq(p0.x, p0.y, pe\n\t\t\t\t\t.x, pe.y, x, y));\n\t\t\tvar direction = mxUtils.relativeCcw(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tif (direction == -1)\n\t\t\t{\n\t\t\t\tyDistance = -yDistance;\n\t\t\t}\n\n\t\t\t// Constructs the relative point for the label\n\t\t\treturn new mxPoint(((totalLength / 2 - length - projlen) / totalLength) * -2,\n\t\t\t\t\t\tyDistance / this.scale);\n\t\t}\n\t}\n\t\n\treturn new mxPoint();\n};\n\n/**\n * Function: updateEdgeLabelOffset\n *\n * Updates <mxCellState.absoluteOffset> for the given state. The absolute\n * offset is normally used for the position of the edge label. Is is\n * calculated from the geometry as an absolute offset from the center\n * between the two endpoints if the geometry is absolute, or as the\n * relative distance between the center along the line and the absolute\n * orthogonal distance if the geometry is relative.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateEdgeLabelOffset = function(state)\n{\n\tvar points = state.absolutePoints;\n\t\n\tstate.absoluteOffset.x = state.getCenterX();\n\tstate.absoluteOffset.y = state.getCenterY();\n\n\tif (points != null && points.length > 0 && state.segments != null)\n\t{\n\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\tvar offset = this.getPoint(state, geometry);\n\t\t\t\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset = offset;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar dx = pe.x - p0.x;\n\t\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\tvar x0 = 0;\n\t\t\t\tvar y0 = 0;\n\n\t\t\t\tvar off = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tx0 = off.x;\n\t\t\t\t\ty0 = off.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar x = p0.x + dx / 2 + x0 * this.scale;\n\t\t\t\tvar y = p0.y + dy / 2 + y0 * this.scale;\n\t\t\t\t\n\t\t\t\tstate.absoluteOffset.x = x;\n\t\t\t\tstate.absoluteOffset.y = y;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getState\n *\n * Returns the <mxCellState> for the given cell. If create is true, then\n * the state is created if it does not yet exist.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be returned.\n * create - Optional boolean indicating if a new state should be created\n * if it does not yet exist. Default is false.\n */\nmxGraphView.prototype.getState = function(cell, create)\n{\n\tcreate = create || false;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.get(cell);\n\t\t\n\t\tif (create && (state == null || this.updateStyle) && this.graph.isCellVisible(cell))\n\t\t{\n\t\t\tif (state == null)\n\t\t\t{\n\t\t\t\tstate = this.createState(cell);\n\t\t\t\tthis.states.put(cell, state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.style = this.graph.getCellStyle(cell);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: isRendering\n *\n * Returns <rendering>.\n */\nmxGraphView.prototype.isRendering = function()\n{\n\treturn this.rendering;\n};\n\n/**\n * Function: setRendering\n *\n * Sets <rendering>.\n */\nmxGraphView.prototype.setRendering = function(value)\n{\n\tthis.rendering = value;\n};\n\n/**\n * Function: isAllowEval\n *\n * Returns <allowEval>.\n */\nmxGraphView.prototype.isAllowEval = function()\n{\n\treturn this.allowEval;\n};\n\n/**\n * Function: setAllowEval\n *\n * Sets <allowEval>.\n */\nmxGraphView.prototype.setAllowEval = function(value)\n{\n\tthis.allowEval = value;\n};\n\n/**\n * Function: getStates\n *\n * Returns <states>.\n */\nmxGraphView.prototype.getStates = function()\n{\n\treturn this.states;\n};\n\n/**\n * Function: setStates\n *\n * Sets <states>.\n */\nmxGraphView.prototype.setStates = function(value)\n{\n\tthis.states = value;\n};\n\n/**\n * Function: getCellStates\n *\n * Returns the <mxCellStates> for the given array of <mxCells>. The array\n * contains all states that are not null, that is, the returned array may\n * have less elements than the given array. If no argument is given, then\n * this returns <states>.\n */\nmxGraphView.prototype.getCellStates = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\treturn this.states;\n\t}\n\telse\n\t{\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tresult.push(state);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: removeState\n *\n * Removes and returns the <mxCellState> for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be removed.\n */\nmxGraphView.prototype.removeState = function(cell)\n{\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.remove(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.graph.cellRenderer.destroy(state);\n\t\t\tstate.invalid = true;\n\t\t\tstate.destroy();\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: createState\n *\n * Creates and returns an <mxCellState> for the given cell and initializes\n * it using <mxCellRenderer.initialize>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a new <mxCellState> should be created.\n */\nmxGraphView.prototype.createState = function(cell)\n{\n\treturn new mxCellState(this, cell, this.graph.getCellStyle(cell));\n};\n\n/**\n * Function: getCanvas\n *\n * Returns the DOM node that contains the background-, draw- and\n * overlay- and decoratorpanes.\n */\nmxGraphView.prototype.getCanvas = function()\n{\n\treturn this.canvas;\n};\n\n/**\n * Function: getBackgroundPane\n *\n * Returns the DOM node that represents the background layer.\n */\nmxGraphView.prototype.getBackgroundPane = function()\n{\n\treturn this.backgroundPane;\n};\n\n/**\n * Function: getDrawPane\n *\n * Returns the DOM node that represents the main drawing layer.\n */\nmxGraphView.prototype.getDrawPane = function()\n{\n\treturn this.drawPane;\n};\n\n/**\n * Function: getOverlayPane\n *\n * Returns the DOM node that represents the layer above the drawing layer.\n */\nmxGraphView.prototype.getOverlayPane = function()\n{\n\treturn this.overlayPane;\n};\n\n/**\n * Function: getDecoratorPane\n *\n * Returns the DOM node that represents the topmost drawing layer.\n */\nmxGraphView.prototype.getDecoratorPane = function()\n{\n\treturn this.decoratorPane;\n};\n\n/**\n * Function: isContainerEvent\n * \n * Returns true if the event origin is one of the drawing panes or\n * containers of the view.\n */\nmxGraphView.prototype.isContainerEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\n\treturn (source == this.graph.container ||\n\t\tsource.parentNode == this.backgroundPane ||\n\t\t(source.parentNode != null &&\n\t\tsource.parentNode.parentNode == this.backgroundPane) ||\n\t\tsource == this.canvas.parentNode ||\n\t\tsource == this.canvas ||\n\t\tsource == this.backgroundPane ||\n\t\tsource == this.drawPane ||\n\t\tsource == this.overlayPane ||\n\t\tsource == this.decoratorPane);\n};\n\n/**\n * Function: isScrollEvent\n * \n * Returns true if the event origin is one of the scrollbars of the\n * container in IE. Such events are ignored.\n */\n mxGraphView.prototype.isScrollEvent = function(evt)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar pt = new mxPoint(evt.clientX - offset.x, evt.clientY - offset.y);\n\n\tvar outWidth = this.graph.container.offsetWidth;\n\tvar inWidth = this.graph.container.clientWidth;\n\n\tif (outWidth > inWidth && pt.x > inWidth + 2 && pt.x <= outWidth)\n\t{\n\t\treturn true;\n\t}\n\n\tvar outHeight = this.graph.container.offsetHeight;\n\tvar inHeight = this.graph.container.clientHeight;\n\t\n\tif (outHeight > inHeight && pt.y > inHeight + 2 && pt.y <= outHeight)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: init\n *\n * Initializes the graph event dispatch loop for the specified container\n * and invokes <create> to create the required DOM nodes for the display.\n */\nmxGraphView.prototype.init = function()\n{\n\tthis.installListeners();\n\t\n\t// Creates the DOM nodes for the respective display dialect\n\tvar graph = this.graph;\n\t\n\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tthis.createSvg();\n\t}\n\telse if (graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tthis.createVml();\n\t}\n\telse\n\t{\n\t\tthis.createHtml();\n\t}\n};\n\n/**\n * Function: installListeners\n *\n * Installs the required listeners in the container.\n */\nmxGraphView.prototype.installListeners = function()\n{\n\tvar graph = this.graph;\n\tvar container = graph.container;\n\t\n\tif (container != null)\n\t{\n\t\t// Support for touch device gestures (eg. pinch to zoom)\n\t\t// Double-tap handling is implemented in mxGraph.fireMouseEvent\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(container, 'gesturestart', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t\t\n\t\t\tmxEvent.addListener(container, 'gesturechange', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\n\t\t\tmxEvent.addListener(container, 'gestureend', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Adds basic listeners for graph event dispatching\n\t\tmxEvent.addGestureListeners(container, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Condition to avoid scrollbar events starting a rubberband selection\n\t\t\tif (this.isContainerEvent(evt) && ((!mxClient.IS_IE && !mxClient.IS_IE11 && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_OP && !mxClient.IS_SF) || !this.isScrollEvent(evt)))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Adds listener for double click handling on background, this does always\n\t\t// use native event handler, we assume that the DOM of the background\n\t\t// does not change during the double click\n\t\tmxEvent.addListener(container, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.dblClick(evt);\n\t\t\t}\n\t\t}));\n\n\t\t// Workaround for touch events which started on some DOM node\n\t\t// on top of the container, in which case the cells under the\n\t\t// mouse for the move and up events are not detected.\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar state = null;\n\t\t\t\n\t\t\t// Workaround for touch events which started on some DOM node\n\t\t\t// on top of the container, in which case the cells under the\n\t\t\t// mouse for the move and up events are not detected.\n\t\t\tif (mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(container, x, y);\n\t\t\t\tstate = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn state;\n\t\t};\n\t\t\n\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t// container and finishing the handling of a single gesture\n\t\t// Implemented via graph event dispatch loop to avoid duplicate events\n\t\t// in Firefox and Chrome\n\t\tgraph.addMouseListener(\n\t\t{\n\t\t\tmouseDown: function(sender, me)\n\t\t\t{\n\t\t\t\tgraph.popupMenuHandler.hideMenu();\n\t\t\t},\n\t\t\tmouseMove: function() { },\n\t\t\tmouseUp: function() { }\n\t\t});\n\t\t\n\t\tthis.moveHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\tif (graph.tooltipHandler != null && graph.tooltipHandler.isHideOnHover())\n\t\t\t{\n\t\t\t\tgraph.tooltipHandler.hide();\n\t\t\t}\n\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden' && !mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.endHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden')\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t}\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the HTML display.\n */\nmxGraphView.prototype.createHtml = function()\n{\n\tvar container = this.graph.container;\n\t\n\tif (container != null)\n\t{\n\t\tthis.canvas = this.createHtmlPane('100%', '100%');\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\n\t\t// Uses minimal size for inner DIVs on Canvas. This is required\n\t\t// for correct event processing in IE. If we have an overlapping\n\t\t// DIV then the events on the cells are only fired for labels.\n\t\tthis.backgroundPane = this.createHtmlPane('1px', '1px');\n\t\tthis.drawPane = this.createHtmlPane('1px', '1px');\n\t\tthis.overlayPane = this.createHtmlPane('1px', '1px');\n\t\tthis.decoratorPane = this.createHtmlPane('1px', '1px');\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\n\t\tcontainer.appendChild(this.canvas);\n\t\tthis.updateContainerStyle(container);\n\t\t\n\t\t// Implements minWidth/minHeight in quirks mode\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tvar onResize = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar bounds = this.getGraphBounds();\n\t\t\t\tvar width = bounds.x + bounds.width + this.graph.border;\n\t\t\t\tvar height = bounds.y + bounds.height + this.graph.border;\n\t\t\t\t\n\t\t\t\tthis.updateHtmlCanvasSize(width, height);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addListener(window, 'resize', onResize);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHtmlCanvasSize\n * \n * Updates the size of the HTML canvas.\n */\nmxGraphView.prototype.updateHtmlCanvasSize = function(width, height)\n{\n\tif (this.graph.container != null)\n\t{\n\t\tvar ow = this.graph.container.offsetWidth;\n\t\tvar oh = this.graph.container.offsetHeight;\n\n\t\tif (ow < width)\n\t\t{\n\t\t\tthis.canvas.style.width = width + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.width = '100%';\n\t\t}\n\n\t\tif (oh < height)\n\t\t{\n\t\t\tthis.canvas.style.height = height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.height = '100%';\n\t\t}\n\t}\n};\n\n/**\n * Function: createHtmlPane\n * \n * Creates and returns a drawing pane in HTML (DIV).\n */\nmxGraphView.prototype.createHtmlPane = function(width, height)\n{\n\tvar pane = document.createElement('DIV');\n\t\n\tif (width != null && height != null)\n\t{\n\t\tpane.style.position = 'absolute';\n\t\tpane.style.left = '0px';\n\t\tpane.style.top = '0px';\n\n\t\tpane.style.width = width;\n\t\tpane.style.height = height;\n\t}\n\telse\n\t{\n\t\tpane.style.position = 'relative';\n\t}\n\t\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the VML display.\n */\nmxGraphView.prototype.createVml = function()\n{\n\tvar container = this.graph.container;\n\n\tif (container != null)\n\t{\n\t\tvar width = container.offsetWidth;\n\t\tvar height = container.offsetHeight;\n\t\tthis.canvas = this.createVmlPane(width, height);\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\t\n\t\tthis.backgroundPane = this.createVmlPane(width, height);\n\t\tthis.drawPane = this.createVmlPane(width, height);\n\t\tthis.overlayPane = this.createVmlPane(width, height);\n\t\tthis.decoratorPane = this.createVmlPane(width, height);\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\t\t\n\t\tcontainer.appendChild(this.canvas);\n\t}\n};\n\n/**\n * Function: createVmlPane\n * \n * Creates a drawing pane in VML (group).\n */\nmxGraphView.prototype.createVmlPane = function(width, height)\n{\n\tvar pane = document.createElement(mxClient.VML_PREFIX + ':group');\n\t\n\t// At this point the width and height are potentially\n\t// uninitialized. That's OK.\n\tpane.style.position = 'absolute';\n\tpane.style.left = '0px';\n\tpane.style.top = '0px';\n\n\tpane.style.width = width + 'px';\n\tpane.style.height = height + 'px';\n\n\tpane.setAttribute('coordsize', width + ',' + height);\n\tpane.setAttribute('coordorigin', '0,0');\n\t\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM nodes for the SVG display.\n */\nmxGraphView.prototype.createSvg = function()\n{\n\tvar container = this.graph.container;\n\tthis.canvas = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\n\t// For background image\n\tthis.backgroundPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.backgroundPane);\n\n\t// Adds two layers (background is early feature)\n\tthis.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.drawPane);\n\n\tthis.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.overlayPane);\n\t\n\tthis.decoratorPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.decoratorPane);\n\t\n\tvar root = document.createElementNS(mxConstants.NS_SVG, 'svg');\n\troot.style.left = '0px';\n\troot.style.top = '0px';\n\troot.style.width = '100%';\n\troot.style.height = '100%';\n\t\n\t// NOTE: In standards mode, the SVG must have block layout\n\t// in order for the container DIV to not show scrollbars.\n\troot.style.display = 'block';\n\troot.appendChild(this.canvas);\n\t\n\t// Workaround for scrollbars in IE11 and below\n\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t{\n\t\troot.style.overflow = 'hidden';\n\t}\n\n\tif (container != null)\n\t{\n\t\tcontainer.appendChild(root);\n\t\tthis.updateContainerStyle(container);\n\t}\n};\n\n/**\n * Function: updateContainerStyle\n * \n * Updates the style of the container after installing the SVG DOM elements.\n */\nmxGraphView.prototype.updateContainerStyle = function(container)\n{\n\t// Workaround for offset of container\n\tvar style = mxUtils.getCurrentStyle(container);\n\t\n\tif (style != null && style.position == 'static')\n\t{\n\t\tcontainer.style.position = 'relative';\n\t}\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tcontainer.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the view and all its resources.\n */\nmxGraphView.prototype.destroy = function()\n{\n\tvar root = (this.canvas != null) ? this.canvas.ownerSVGElement : null;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.canvas;\n\t}\n\t\n\tif (root != null && root.parentNode != null)\n\t{\n\t\tthis.clear(this.currentRoot, true);\n\t\tmxEvent.removeGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t\tmxEvent.release(this.graph.container);\n\t\troot.parentNode.removeChild(root);\n\t\t\n\t\tthis.moveHandler = null;\n\t\tthis.endHandler = null;\n\t\tthis.canvas = null;\n\t\tthis.backgroundPane = null;\n\t\tthis.drawPane = null;\n\t\tthis.overlayPane = null;\n\t\tthis.decoratorPane = null;\n\t}\n};\n\n/**\n * Class: mxCurrentRootChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxCurrentRootChange(view, root)\n{\n\tthis.view = view;\n\tthis.root = root;\n\tthis.previous = root;\n\tthis.isUp = root == null;\n\t\n\tif (!this.isUp)\n\t{\n\t\tvar tmp = this.view.currentRoot;\n\t\tvar model = this.view.graph.getModel();\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp == root)\n\t\t\t{\n\t\t\t\tthis.isUp = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = model.getParent(tmp);\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxCurrentRootChange.prototype.execute = function()\n{\n\tvar tmp = this.view.currentRoot;\n\tthis.view.currentRoot = this.previous;\n\tthis.previous = tmp;\n\n\tvar translate = this.view.graph.getTranslateForRoot(this.view.currentRoot);\n\t\n\tif (translate != null)\n\t{\n\t\tthis.view.translate = new mxPoint(-translate.x, -translate.y);\n\t}\n\n\tif (this.isUp)\n\t{\n\t\tthis.view.clear(this.view.currentRoot, true);\n\t\tthis.view.validate();\n\t}\n\telse\n\t{\n\t\tthis.view.refresh();\n\t}\n\t\n\tvar name = (this.isUp) ? mxEvent.UP : mxEvent.DOWN;\n\tthis.view.fireEvent(new mxEventObject(name,\n\t\t'root', this.view.currentRoot, 'previous', this.previous));\n\tthis.isUp = !this.isUp;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraph\n *\n * Extends <mxEventSource> to implement a graph component for\n * the browser. This is the main class of the package. To activate\n * panning and connections use <setPanning> and <setConnectable>.\n * For rubberband selection you must create a new instance of\n * <mxRubberband>. The following listeners are added to\n * <mouseListeners> by default:\n * \n * - <tooltipHandler>: <mxTooltipHandler> that displays tooltips\n * - <panningHandler>: <mxPanningHandler> for panning and popup menus\n * - <connectionHandler>: <mxConnectionHandler> for creating connections\n * - <graphHandler>: <mxGraphHandler> for moving and cloning cells\n * \n * These listeners will be called in the above order if they are enabled.\n *\n * Background Images:\n * \n * To display a background image, set the image, image width and\n * image height using <setBackgroundImage>. If one of the\n * above values has changed then the <view>'s <mxGraphView.validate>\n * should be invoked.\n * \n * Cell Images:\n * \n * To use images in cells, a shape must be specified in the default\n * vertex style (or any named style). Possible shapes are\n * <mxConstants.SHAPE_IMAGE> and <mxConstants.SHAPE_LABEL>.\n * The code to change the shape used in the default vertex style,\n * the following code is used:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;\n * (end)\n * \n * For the default vertex style, the image to be displayed can be\n * specified in a cell's style using the <mxConstants.STYLE_IMAGE>\n * key and the image URL as a value, for example:\n * \n * (code)\n * image=http://www.example.com/image.gif\n * (end)\n * \n * For a named style, the the stylename must be the first element\n * of the cell style:\n * \n * (code)\n * stylename;image=http://www.example.com/image.gif\n * (end)\n * \n * A cell style can have any number of key=value pairs added, divided\n * by a semicolon as follows:\n * \n * (code)\n * [stylename;|key=value;]\n * (end)\n *\n * Labels:\n * \n * The cell labels are defined by <getLabel> which uses <convertValueToString>\n * if <labelsVisible> is true. If a label must be rendered as HTML markup, then\n * <isHtmlLabel> should return true for the respective cell. If all labels\n * contain HTML markup, <htmlLabels> can be set to true. NOTE: Enabling HTML\n * labels carries a possible security risk (see the section on security in\n * the manual).\n * \n * If wrapping is needed for a label, then <isHtmlLabel> and <isWrapping> must\n * return true for the cell whose label should be wrapped. See <isWrapping> for\n * an example.\n * \n * If clipping is needed to keep the rendering of a HTML label inside the\n * bounds of its vertex, then <isClipping> should return true for the\n * respective cell.\n * \n * By default, edge labels are movable and vertex labels are fixed. This can be\n * changed by setting <edgeLabelsMovable> and <vertexLabelsMovable>, or by\n * overriding <isLabelMovable>.\n *\n * In-place Editing:\n * \n * In-place editing is started with a doubleclick or by typing F2.\n * Programmatically, <edit> is used to check if the cell is editable\n * (<isCellEditable>) and call <startEditingAtCell>, which invokes\n * <mxCellEditor.startEditing>. The editor uses the value returned\n * by <getEditingValue> as the editing value.\n * \n * After in-place editing, <labelChanged> is called, which invokes\n * <mxGraphModel.setValue>, which in turn calls\n * <mxGraphModel.valueForCellChanged> via <mxValueChange>.\n * \n * The event that triggers in-place editing is passed through to the\n * <cellEditor>, which may take special actions depending on the type of the\n * event or mouse location, and is also passed to <getEditingValue>. The event\n * is then passed back to the event processing functions which can perform\n * specific actions based on the trigger event.\n * \n * Tooltips:\n * \n * Tooltips are implemented by <getTooltip>, which calls <getTooltipForCell>\n * if a cell is under the mousepointer. The default implementation checks if\n * the cell has a getTooltip function and calls it if it exists. Hence, in order\n * to provide custom tooltips, the cell must provide a getTooltip function, or \n * one of the two above functions must be overridden.\n * \n * Typically, for custom cell tooltips, the latter function is overridden as\n * follows:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * When using a config file, the function is overridden in the mxGraph section\n * using the following entry:\n * \n * (code)\n * <add as=\"getTooltipForCell\"><![CDATA[\n *   function(cell)\n *   {\n *     var label = this.convertValueToString(cell);\n *     return 'Tooltip for '+label;\n *   }\n * ]]></add>\n * (end)\n * \n * \"this\" refers to the graph in the implementation, so for example to check if \n * a cell is an edge, you use this.getModel().isEdge(cell)\n *\n * For replacing the default implementation of <getTooltipForCell> (rather than \n * replacing the function on a specific instance), the following code should be \n * used after loading the JavaScript files, but before creating a new mxGraph \n * instance using <mxGraph>:\n * \n * (code)\n * mxGraph.prototype.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * Shapes & Styles:\n * \n * The implementation of new shapes is demonstrated in the examples. We'll assume\n * that we have implemented a custom shape with the name BoxShape which we want\n * to use for drawing vertices. To use this shape, it must first be registered in\n * the cell renderer as follows:\n * \n * (code)\n * mxCellRenderer.registerShape('box', BoxShape);\n * (end)\n * \n * The code registers the BoxShape constructor under the name box in the cell\n * renderer of the graph. The shape can now be referenced using the shape-key in\n * a style definition. (The cell renderer contains a set of additional shapes,\n * namely one for each constant with a SHAPE-prefix in <mxConstants>.)\n *\n * Styles are a collection of key, value pairs and a stylesheet is a collection\n * of named styles. The names are referenced by the cellstyle, which is stored\n * in <mxCell.style> with the following format: [stylename;|key=value;]. The\n * string is resolved to a collection of key, value pairs, where the keys are\n * overridden with the values in the string.\n *\n * When introducing a new shape, the name under which the shape is registered\n * must be used in the stylesheet. There are three ways of doing this:\n * \n *   - By changing the default style, so that all vertices will use the new\n * \t\tshape\n *   - By defining a new style, so that only vertices with the respective\n * \t\tcellstyle will use the new shape\n *   - By using shape=box in the cellstyle's optional list of key, value pairs\n * \t\tto be overridden\n *\n * In the first case, the code to fetch and modify the default style for\n * vertices is as follows:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * (end)\n * \n * The code takes the default vertex style, which is used for all vertices that\n * do not have a specific cellstyle, and modifies the value for the shape-key\n * in-place to use the new BoxShape for drawing vertices. This is done by\n * assigning the box value in the second line, which refers to the name of the\n * BoxShape in the cell renderer.\n * \n * In the second case, a collection of key, value pairs is created and then\n * added to the stylesheet under a new name. In order to distinguish the\n * shapename and the stylename we'll use boxstyle for the stylename:\n * \n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * style[mxConstants.STYLE_STROKECOLOR] = '#000000';\n * style[mxConstants.STYLE_FONTCOLOR] = '#000000';\n * graph.getStylesheet().putCellStyle('boxstyle', style);\n * (end)\n * \n * The code adds a new style with the name boxstyle to the stylesheet. To use\n * this style with a cell, it must be referenced from the cellstyle as follows:\n * \n * (code)\n * var vertex = graph.insertVertex(parent, null, 'Hello, World!', 20, 20, 80, 20,\n * \t\t\t\t'boxstyle');\n * (end)\n * \n * To summarize, each new shape must be registered in the <mxCellRenderer> with\n * a unique name. That name is then used as the value of the shape-key in a\n * default or custom style. If there are multiple custom shapes, then there\n * should be a separate style for each shape.\n * \n * Inheriting Styles:\n * \n * For fill-, stroke-, gradient- and indicatorColors special keywords can be\n * used. The inherit keyword for one of these colors will inherit the color\n * for the same key from the parent cell. The swimlane keyword does the same,\n * but inherits from the nearest swimlane in the ancestor hierarchy. Finally,\n * the indicated keyword will use the color of the indicator as the color for\n * the given key.\n * \n * Scrollbars:\n * \n * The <containers> overflow CSS property defines if scrollbars are used to\n * display the graph. For values of 'auto' or 'scroll', the scrollbars will\n * be shown. Note that the <resizeContainer> flag is normally not used\n * together with scrollbars, as it will resize the container to match the\n * size of the graph after each change.\n * \n * Multiplicities and Validation:\n * \n * To control the possible connections in mxGraph, <getEdgeValidationError> is\n * used. The default implementation of the function uses <multiplicities>,\n * which is an array of <mxMultiplicity>. Using this class allows to establish\n * simple multiplicities, which are enforced by the graph.\n * \n * The <mxMultiplicity> uses <mxCell.is> to determine for which terminals it\n * applies. The default implementation of <mxCell.is> works with DOM nodes (XML\n * nodes) and checks if the given type parameter matches the nodeName of the\n * node (case insensitive). Optionally, an attributename and value can be\n * specified which are also checked.\n * \n * <getEdgeValidationError> is called whenever the connectivity of an edge\n * changes. It returns an empty string or an error message if the edge is\n * invalid or null if the edge is valid. If the returned string is not empty\n * then it is displayed as an error message.\n * \n * <mxMultiplicity> allows to specify the multiplicity between a terminal and\n * its possible neighbors. For example, if any rectangle may only be connected\n * to, say, a maximum of two circles you can add the following rule to\n * <multiplicities>:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only shape targets allowed'));\n * (end)\n * \n * This will display the first error message whenever a rectangle is connected\n * to more than two circles and the second error message if a rectangle is\n * connected to anything but a circle.\n * \n * For certain multiplicities, such as a minimum of 1 connection, which cannot\n * be enforced at cell creation time (unless the cell is created together with\n * the connection), mxGraph offers <validate> which checks all multiplicities\n * for all cells and displays the respective error messages in an overlay icon\n * on the cells.\n * \n * If a cell is collapsed and contains validation errors, a respective warning\n * icon is attached to the collapsed cell.\n * \n * Auto-Layout:\n * \n * For automatic layout, the <getLayout> hook is provided in <mxLayoutManager>.\n * It can be overridden to return a layout algorithm for the children of a\n * given cell.\n * \n * Unconnected edges:\n * \n * The default values for all switches are designed to meet the requirements of\n * general diagram drawing applications. A very typical set of settings to\n * avoid edges that are not connected is the following:\n * \n * (code)\n * graph.setAllowDanglingEdges(false);\n * graph.setDisconnectOnMove(false);\n * (end)\n * \n * Setting the <cloneInvalidEdges> switch to true is optional. This switch\n * controls if edges are inserted after a copy, paste or clone-drag if they are\n * invalid. For example, edges are invalid if copied or control-dragged without \n * having selected the corresponding terminals and allowDanglingEdges is\n * false, in which case the edges will not be cloned if the switch is false.\n * \n * Output:\n * \n * To produce an XML representation for a diagram, the following code can be\n * used.\n * \n * (code)\n * var enc = new mxCodec(mxUtils.createXmlDocument());\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will produce an XML node than can be handled using the DOM API or\n * turned into a string representation using the following code:\n * \n * (code)\n * var xml = mxUtils.getXml(node);\n * (end)\n * \n * To obtain a formatted string, mxUtils.getPrettyXml can be used instead.\n * \n * This string can now be stored in a local persistent storage (for example\n * using Google Gears) or it can be passed to a backend using mxUtils.post as\n * follows. The url variable is the URL of the Java servlet, PHP page or HTTP\n * handler, depending on the server.\n * \n * (code)\n * var xmlString = encodeURIComponent(mxUtils.getXml(node));\n * mxUtils.post(url, 'xml='+xmlString, function(req)\n * {\n *   // Process server response using req of type mxXmlRequest\n * });\n * (end)\n * \n * Input:\n * \n * To load an XML representation of a diagram into an existing graph object\n * mxUtils.load can be used as follows. The url variable is the URL of the Java\n * servlet, PHP page or HTTP handler that produces the XML string.\n * \n * (code)\n * var xmlDoc = mxUtils.load(url).getXml();\n * var node = xmlDoc.documentElement;\n * var dec = new mxCodec(node.ownerDocument);\n * dec.decode(node, graph.getModel());\n * (end)\n * \n * For creating a page that loads the client and a diagram using a single\n * request please refer to the deployment examples in the backends.\n * \n * Functional dependencies:\n * \n * (see images/callgraph.png)\n * \n * Resources:\n *\n * resources/graph - Language resources for mxGraph\n *\n * Group: Events\n * \n * Event: mxEvent.ROOT\n * \n * Fires if the root in the model has changed. This event has no properties.\n * \n * Event: mxEvent.ALIGN_CELLS\n * \n * Fires between begin- and endUpdate in <alignCells>. The <code>cells</code>\n * and <code>align</code> properties contain the respective arguments that were\n * passed to <alignCells>.\n *\n * Event: mxEvent.FLIP_EDGE\n *\n * Fires between begin- and endUpdate in <flipEdge>. The <code>edge</code>\n * property contains the edge passed to <flipEdge>.\n * \n * Event: mxEvent.ORDER_CELLS\n * \n * Fires between begin- and endUpdate in <orderCells>. The <code>cells</code>\n * and <code>back</code> properties contain the respective arguments that were\n * passed to <orderCells>.\n *\n * Event: mxEvent.CELLS_ORDERED\n *\n * Fires between begin- and endUpdate in <cellsOrdered>. The <code>cells</code>\n * and <code>back</code> arguments contain the respective arguments that were\n * passed to <cellsOrdered>.\n * \n * Event: mxEvent.GROUP_CELLS\n * \n * Fires between begin- and endUpdate in <groupCells>. The <code>group</code>,\n * <code>cells</code> and <code>border</code> arguments contain the respective\n * arguments that were passed to <groupCells>.\n * \n * Event: mxEvent.UNGROUP_CELLS\n * \n * Fires between begin- and endUpdate in <ungroupCells>. The <code>cells</code>\n * property contains the array of cells that was passed to <ungroupCells>.\n * \n * Event: mxEvent.REMOVE_CELLS_FROM_PARENT\n * \n * Fires between begin- and endUpdate in <removeCellsFromParent>. The\n * <code>cells</code> property contains the array of cells that was passed to\n * <removeCellsFromParent>.\n * \n * Event: mxEvent.ADD_CELLS\n * \n * Fires between begin- and endUpdate in <addCells>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code> and\n * <code>target</code> properties contain the respective arguments that were\n * passed to <addCells>.\n * \n * Event: mxEvent.CELLS_ADDED\n * \n * Fires between begin- and endUpdate in <cellsAdded>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code>,\n * <code>target</code> and <code>absolute</code> properties contain the\n * respective arguments that were passed to <cellsAdded>.\n * \n * Event: mxEvent.REMOVE_CELLS\n * \n * Fires between begin- and endUpdate in <removeCells>. The <code>cells</code>\n * and <code>includeEdges</code> arguments contain the respective arguments\n * that were passed to <removeCells>.\n * \n * Event: mxEvent.CELLS_REMOVED\n * \n * Fires between begin- and endUpdate in <cellsRemoved>. The <code>cells</code>\n * argument contains the array of cells that was removed.\n * \n * Event: mxEvent.SPLIT_EDGE\n * \n * Fires between begin- and endUpdate in <splitEdge>. The <code>edge</code>\n * property contains the edge to be splitted, the <code>cells</code>,\n * <code>newEdge</code>, <code>dx</code> and <code>dy</code> properties contain\n * the respective arguments that were passed to <splitEdge>.\n * \n * Event: mxEvent.TOGGLE_CELLS\n * \n * Fires between begin- and endUpdate in <toggleCells>. The <code>show</code>,\n * <code>cells</code> and <code>includeEdges</code> properties contain the\n * respective arguments that were passed to <toggleCells>.\n * \n * Event: mxEvent.FOLD_CELLS\n * \n * Fires between begin- and endUpdate in <foldCells>. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to <foldCells>.\n * \n * Event: mxEvent.CELLS_FOLDED\n * \n * Fires between begin- and endUpdate in cellsFolded. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to\n * <cellsFolded>.\n * \n * Event: mxEvent.UPDATE_CELL_SIZE\n * \n * Fires between begin- and endUpdate in <updateCellSize>. The\n * <code>cell</code> and <code>ignoreChildren</code> properties contain the\n * respective arguments that were passed to <updateCellSize>.\n * \n * Event: mxEvent.RESIZE_CELLS\n * \n * Fires between begin- and endUpdate in <resizeCells>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <resizeCells>.\n * \n * Event: mxEvent.CELLS_RESIZED\n * \n * Fires between begin- and endUpdate in <cellsResized>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <cellsResized>.\n * \n * Event: mxEvent.MOVE_CELLS\n * \n * Fires between begin- and endUpdate in <moveCells>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code>, <code>clone</code>, <code>target</code>\n * and <code>event</code> properties contain the respective arguments that\n * were passed to <moveCells>.\n * \n * Event: mxEvent.CELLS_MOVED\n * \n * Fires between begin- and endUpdate in <cellsMoved>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code> and <code>disconnect</code> properties\n * contain the respective arguments that were passed to <cellsMoved>.\n * \n * Event: mxEvent.CONNECT_CELL\n * \n * Fires between begin- and endUpdate in <connectCell>. The <code>edge</code>,\n * <code>terminal</code> and <code>source</code> properties contain the\n * respective arguments that were passed to <connectCell>.\n * \n * Event: mxEvent.CELL_CONNECTED\n * \n * Fires between begin- and endUpdate in <cellConnected>. The\n * <code>edge</code>, <code>terminal</code> and <code>source</code> properties\n * contain the respective arguments that were passed to <cellConnected>.\n * \n * Event: mxEvent.REFRESH\n * \n * Fires after <refresh> was executed. This event has no properties.\n *\n * Event: mxEvent.CLICK\n * \n * Fires in <click> after a click event. The <code>event</code> property\n * contains the original mouse event and <code>cell</code> property contains\n * the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.DOUBLE_CLICK\n *\n * Fires in <dblClick> after a double click. The <code>event</code> property\n * contains the original mouse event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.GESTURE\n *\n * Fires in <fireGestureEvent> after a touch gesture. The <code>event</code>\n * property contains the original gesture end event and the <code>cell</code>\n * property contains the optional cell associated with the gesture.\n *\n * Event: mxEvent.TAP_AND_HOLD\n *\n * Fires in <tapAndHold> if a tap and hold event was detected. The <code>event</code>\n * property contains the initial touch event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n *\n * Event: mxEvent.FIRE_MOUSE_EVENT\n *\n * Fires in <fireMouseEvent> before the mouse listeners are invoked. The\n * <code>eventName</code> property contains the event name and the\n * <code>event</code> property contains the <mxMouseEvent>.\n *\n * Event: mxEvent.SIZE\n *\n * Fires after <sizeDidChange> was executed. The <code>bounds</code> property\n * contains the new graph bounds.\n *\n * Event: mxEvent.START_EDITING\n *\n * Fires before the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STARTED\n *\n * Fires after the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STOPPED\n *\n * Fires after the in-place editor stops in <stopEditing>.\n *\n * Event: mxEvent.LABEL_CHANGED\n *\n * Fires between begin- and endUpdate in <cellLabelChanged>. The\n * <code>cell</code> property contains the cell, the <code>value</code>\n * property contains the new value for the cell, the <code>old</code> property\n * contains the old value and the optional <code>event</code> property contains\n * the mouse event that started the edit.\n * \n * Event: mxEvent.ADD_OVERLAY\n *\n * Fires after an overlay is added in <addCellOverlay>. The <code>cell</code>\n * property contains the cell and the <code>overlay</code> property contains\n * the <mxCellOverlay> that was added.\n *\n * Event: mxEvent.REMOVE_OVERLAY\n *\n * Fires after an overlay is removed in <removeCellOverlay> and\n * <removeCellOverlays>. The <code>cell</code> property contains the cell and\n * the <code>overlay</code> property contains the <mxCellOverlay> that was\n * removed.\n * \n * Constructor: mxGraph\n * \n * Constructs a new mxGraph in the specified container. Model is an optional\n * mxGraphModel. If no model is provided, a new mxGraphModel instance is \n * used as the model. The container must have a valid owner document prior \n * to calling this function in Internet Explorer. RenderHint is a string to\n * affect the display performance and rendering in IE, but not in SVG-based \n * browsers. The parameter is mapped to <dialect>, which may \n * be one of <mxConstants.DIALECT_SVG> for SVG-based browsers, \n * <mxConstants.DIALECT_STRICTHTML> for fastest display mode,\n * <mxConstants.DIALECT_PREFERHTML> for faster display mode,\n * <mxConstants.DIALECT_MIXEDHTML> for fast and <mxConstants.DIALECT_VML> \n * for exact display mode (slowest). The dialects are defined in mxConstants.\n * The default values are DIALECT_SVG for SVG-based browsers and\n * DIALECT_MIXED for IE.\n *\n * The possible values for the renderingHint parameter are explained below:\n * \n * fast - The parameter is based on the fact that the display performance is \n * highly improved in IE if the VML is not contained within a VML group \n * element. The lack of a group element only slightly affects the display while \n * panning, but improves the performance by almost a factor of 2, while keeping \n * the display sufficiently accurate. This also allows to render certain shapes as HTML \n * if the display accuracy is not affected, which is implemented by \n * <mxShape.isMixedModeHtml>. This is the default setting and is mapped to\n * DIALECT_MIXEDHTML.\n * faster - Same as fast, but more expensive shapes are avoided. This is \n * controlled by <mxShape.preferModeHtml>. The default implementation will \n * avoid gradients and rounded rectangles, but more significant shapes, such \n * as rhombus, ellipse, actor and cylinder will be rendered accurately. This \n * setting is mapped to DIALECT_PREFERHTML.\n * fastest - Almost anything will be rendered in Html. This allows for \n * rectangles, labels and images. This setting is mapped to\n * DIALECT_STRICTHTML.\n * exact - If accurate panning is required and if the diagram is small (up\n * to 100 cells), then this value should be used. In this mode, a group is \n * created that contains the VML. This allows for accurate panning and is \n * mapped to DIALECT_VML.\n *\n * Example:\n * \n * To create a graph inside a DOM node with an id of graph:\n * (code)\n * var container = document.getElementById('graph');\n * var graph = new mxGraph(container);\n * (end)\n * \n * Parameters:\n * \n * container - Optional DOM node that acts as a container for the graph.\n * If this is null then the container can be initialized later using\n * <init>.\n * model - Optional <mxGraphModel> that constitutes the graph data.\n * renderHint - Optional string that specifies the display accuracy and\n * performance. Default is mxConstants.DIALECT_MIXEDHTML (for IE).\n * stylesheet - Optional <mxStylesheet> to be used in the graph.\n */\nfunction mxGraph(container, model, renderHint, stylesheet)\n{\n\t// Initializes the variable in case the prototype has been\n\t// modified to hold some listeners (which is possible because\n\t// the createHandlers call is executed regardless of the\n\t// arguments passed into the ctor).\n\tthis.mouseListeners = null;\n\t\n\t// Converts the renderHint into a dialect\n\tthis.renderHint = renderHint;\n\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_SVG;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_EXACT && mxClient.IS_VML)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_VML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTEST)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_STRICTHTML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTER)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_PREFERHTML;\n\t}\n\telse // default for VML\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_MIXEDHTML;\n\t}\n\t\n\t// Initializes the main members that do not require a container\n\tthis.model = (model != null) ? model : new mxGraphModel();\n\tthis.multiplicities = [];\n\tthis.imageBundles = [];\n\tthis.cellRenderer = this.createCellRenderer();\n\tthis.setSelectionModel(this.createSelectionModel());\n\tthis.setStylesheet((stylesheet != null) ? stylesheet : this.createStylesheet());\n\tthis.view = this.createGraphView();\n\t\n\t// Adds a graph model listener to update the view\n\tthis.graphModelChangeListener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t});\n\t\n\tthis.model.addListener(mxEvent.CHANGE, this.graphModelChangeListener);\n\n\t// Installs basic event handlers with disabled default settings.\n\tthis.createHandlers();\n\t\n\t// Initializes the display if a container was specified\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n\t\n\tthis.view.revalidate();\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/graph');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/graph');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxGraph.prototype = new mxEventSource();\nmxGraph.prototype.constructor = mxGraph;\n\n/**\n * Group: Variables\n */\n\n/**\n * Variable: mouseListeners\n * \n * Holds the mouse event listeners. See <fireMouseEvent>.\n */\nmxGraph.prototype.mouseListeners = null;\n\n/**\n * Variable: isMouseDown\n * \n * Holds the state of the mouse button.\n */\nmxGraph.prototype.isMouseDown = false;\n\n/**\n * Variable: model\n * \n * Holds the <mxGraphModel> that contains the cells to be displayed.\n */\nmxGraph.prototype.model = null;\n\n/**\n * Variable: view\n * \n * Holds the <mxGraphView> that caches the <mxCellStates> for the cells.\n */\nmxGraph.prototype.view = null;\n\n/**\n * Variable: stylesheet\n * \n * Holds the <mxStylesheet> that defines the appearance of the cells.\n * \n * \n * Example:\n * \n * Use the following code to read a stylesheet into an existing graph.\n * \n * (code)\n * var req = mxUtils.load('stylesheet.xml');\n * var root = req.getDocumentElement();\n * var dec = new mxCodec(root.ownerDocument);\n * dec.decode(root, graph.stylesheet);\n * (end)\n */\nmxGraph.prototype.stylesheet = null;\n\t\n/**\n * Variable: selectionModel\n * \n * Holds the <mxGraphSelectionModel> that models the current selection.\n */\nmxGraph.prototype.selectionModel = null;\n\n/**\n * Variable: cellEditor\n * \n * Holds the <mxCellEditor> that is used as the in-place editing.\n */\nmxGraph.prototype.cellEditor = null;\n\n/**\n * Variable: cellRenderer\n * \n * Holds the <mxCellRenderer> for rendering the cells in the graph.\n */\nmxGraph.prototype.cellRenderer = null;\n\n/**\n * Variable: multiplicities\n * \n * An array of <mxMultiplicities> describing the allowed\n * connections in a graph.\n */\nmxGraph.prototype.multiplicities = null;\n\n/**\n * Variable: renderHint\n * \n * RenderHint as it was passed to the constructor.\n */\nmxGraph.prototype.renderHint = null;\n\n/**\n * Variable: dialect\n * \n * Dialect to be used for drawing the graph. Possible values are all\n * constants in <mxConstants> with a DIALECT-prefix.\n */\nmxGraph.prototype.dialect = null;\n\n/**\n * Variable: gridSize\n * \n * Specifies the grid size. Default is 10.\n */\nmxGraph.prototype.gridSize = 10;\n\t\n/**\n * Variable: gridEnabled\n * \n * Specifies if the grid is enabled. This is used in <snap>. Default is\n * true.\n */\nmxGraph.prototype.gridEnabled = true;\n\n/**\n * Variable: portsEnabled\n * \n * Specifies if ports are enabled. This is used in <cellConnected> to update\n * the respective style. Default is true.\n */\nmxGraph.prototype.portsEnabled = true;\n\n/**\n * Variable: nativeDoubleClickEnabled\n * \n * Specifies if native double click events should be detected. Default is true.\n */\nmxGraph.prototype.nativeDblClickEnabled = true;\n\n/**\n * Variable: doubleTapEnabled\n * \n * Specifies if double taps on touch-based devices should be handled as a\n * double click. Default is true.\n */\nmxGraph.prototype.doubleTapEnabled = true;\n\n/**\n * Variable: doubleTapTimeout\n * \n * Specifies the timeout for double taps and non-native double clicks. Default\n * is 500 ms.\n */\nmxGraph.prototype.doubleTapTimeout = 500;\n\n/**\n * Variable: doubleTapTolerance\n * \n * Specifies the tolerance for double taps and double clicks in quirks mode.\n * Default is 25 pixels.\n */\nmxGraph.prototype.doubleTapTolerance = 25;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the x-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the y-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchTime\n * \n * Holds the time of the last touch event for double click detection.\n */\nmxGraph.prototype.lastTouchTime = 0;\n\n/**\n * Variable: tapAndHoldEnabled\n * \n * Specifies if tap and hold should be used for starting connections on touch-based\n * devices. Default is true.\n */\nmxGraph.prototype.tapAndHoldEnabled = true;\n\n/**\n * Variable: tapAndHoldDelay\n * \n * Specifies the time for a tap and hold. Default is 500 ms.\n */\nmxGraph.prototype.tapAndHoldDelay = 500;\n\n/**\n * Variable: tapAndHoldInProgress\n * \n * True if the timer for tap and hold events is running.\n */\nmxGraph.prototype.tapAndHoldInProgress = false;\n\n/**\n * Variable: tapAndHoldValid\n * \n * True as long as the timer is running and the touch events\n * stay within the given <tapAndHoldTolerance>.\n */\nmxGraph.prototype.tapAndHoldValid = false;\n\n/**\n * Variable: initialTouchX\n * \n * Holds the x-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchX = 0;\n\n/**\n * Variable: initialTouchY\n * \n * Holds the y-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchY = 0;\n\n/**\n * Variable: tolerance\n * \n * Tolerance for a move to be handled as a single click.\n * Default is 4 pixels.\n */\nmxGraph.prototype.tolerance = 4;\n\n/**\n * Variable: defaultOverlap\n * \n * Value returned by <getOverlap> if <isAllowOverlapParent> returns\n * true for the given cell. <getOverlap> is used in <constrainChild> if\n * <isConstrainChild> returns true. The value specifies the\n * portion of the child which is allowed to overlap the parent.\n */\nmxGraph.prototype.defaultOverlap = 0.5;\n\n/**\n * Variable: defaultParent\n * \n * Specifies the default parent to be used to insert new cells.\n * This is used in <getDefaultParent>. Default is null.\n */\nmxGraph.prototype.defaultParent = null;\n\n/**\n * Variable: alternateEdgeStyle\n * \n * Specifies the alternate edge style to be used if the main control point\n * on an edge is being doubleclicked. Default is null.\n */\nmxGraph.prototype.alternateEdgeStyle = null;\n\n/**\n * Variable: backgroundImage\n *\n * Specifies the <mxImage> to be returned by <getBackgroundImage>. Default\n * is null.\n * \n * Example:\n *\n * (code)\n * var img = new mxImage('http://www.example.com/maps/examplemap.jpg', 1024, 768);\n * graph.setBackgroundImage(img);\n * graph.view.validate();\n * (end)\n */\nmxGraph.prototype.backgroundImage = null;\n\n/**\n * Variable: pageVisible\n *\n * Specifies if the background page should be visible. Default is false.\n * Not yet implemented.\n */\nmxGraph.prototype.pageVisible = false;\n\n/**\n * Variable: pageBreaksVisible\n * \n * Specifies if a dashed line should be drawn between multiple pages. Default\n * is false. If you change this value while a graph is being displayed then you\n * should call <sizeDidChange> to force an update of the display.\n */\nmxGraph.prototype.pageBreaksVisible = false;\n\n/**\n * Variable: pageBreakColor\n * \n * Specifies the color for page breaks. Default is 'gray'.\n */\nmxGraph.prototype.pageBreakColor = 'gray';\n\n/**\n * Variable: pageBreakDashed\n * \n * Specifies the page breaks should be dashed. Default is true.\n */\nmxGraph.prototype.pageBreakDashed = true;\n\n/**\n * Variable: minPageBreakDist\n * \n * Specifies the minimum distance for page breaks to be visible. Default is\n * 20 (in pixels).\n */\nmxGraph.prototype.minPageBreakDist = 20;\n\n/**\n * Variable: preferPageSize\n * \n * Specifies if the graph size should be rounded to the next page number in\n * <sizeDidChange>. This is only used if the graph container has scrollbars.\n * Default is false.\n */\nmxGraph.prototype.preferPageSize = false;\n\n/**\n * Variable: pageFormat\n *\n * Specifies the page format for the background page. Default is\n * <mxConstants.PAGE_FORMAT_A4_PORTRAIT>. This is used as the default in\n * <mxPrintPreview> and for painting the background page if <pageVisible> is\n * true and the pagebreaks if <pageBreaksVisible> is true.\n */\nmxGraph.prototype.pageFormat = mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\n/**\n * Variable: pageScale\n *\n * Specifies the scale of the background page. Default is 1.5.\n * Not yet implemented.\n */\nmxGraph.prototype.pageScale = 1.5;\n\n/**\n * Variable: enabled\n * \n * Specifies the return value for <isEnabled>. Default is true.\n */\nmxGraph.prototype.enabled = true;\n\n/**\n * Variable: escapeEnabled\n * \n * Specifies if <mxKeyHandler> should invoke <escape> when the escape key\n * is pressed. Default is true.\n */\nmxGraph.prototype.escapeEnabled = true;\n\n/**\n * Variable: invokesStopCellEditing\n * \n * If true, when editing is to be stopped by way of selection changing,\n * data in diagram changing or other means stopCellEditing is invoked, and\n * changes are saved. This is implemented in a focus handler in\n * <mxCellEditor>. Default is true.\n */\nmxGraph.prototype.invokesStopCellEditing = true;\n\n/**\n * Variable: enterStopsCellEditing\n * \n * If true, pressing the enter key without pressing control or shift will stop\n * editing and accept the new value. This is used in <mxCellEditor> to stop\n * cell editing. Note: You can always use F2 and escape to stop editing.\n * Default is false.\n */\nmxGraph.prototype.enterStopsCellEditing = false;\n\n/**\n * Variable: useScrollbarsForPanning\n * \n * Specifies if scrollbars should be used for panning in <panGraph> if\n * any scrollbars are available. If scrollbars are enabled in CSS, but no\n * scrollbars appear because the graph is smaller than the container size,\n * then no panning occurs if this is true. Default is true.\n */\nmxGraph.prototype.useScrollbarsForPanning = true;\n\n/**\n * Variable: exportEnabled\n * \n * Specifies the return value for <canExportCell>. Default is true.\n */\nmxGraph.prototype.exportEnabled = true;\n\n/**\n * Variable: importEnabled\n * \n * Specifies the return value for <canImportCell>. Default is true.\n */\nmxGraph.prototype.importEnabled = true;\n\n/**\n * Variable: cellsLocked\n * \n * Specifies the return value for <isCellLocked>. Default is false.\n */\nmxGraph.prototype.cellsLocked = false;\n\n/**\n * Variable: cellsCloneable\n * \n * Specifies the return value for <isCellCloneable>. Default is true.\n */\nmxGraph.prototype.cellsCloneable = true;\n\n/**\n * Variable: foldingEnabled\n * \n * Specifies if folding (collapse and expand via an image icon in the graph\n * should be enabled). Default is true.\n */\nmxGraph.prototype.foldingEnabled = true;\n\n/**\n * Variable: cellsEditable\n * \n * Specifies the return value for <isCellEditable>. Default is true.\n */\nmxGraph.prototype.cellsEditable = true;\n\t\t\n/**\n * Variable: cellsDeletable\n * \n * Specifies the return value for <isCellDeletable>. Default is true.\n */\nmxGraph.prototype.cellsDeletable = true;\n\n/**\n * Variable: cellsMovable\n * \n * Specifies the return value for <isCellMovable>. Default is true.\n */\nmxGraph.prototype.cellsMovable = true;\n\t\n/**\n * Variable: edgeLabelsMovable\n * \n * Specifies the return value for edges in <isLabelMovable>. Default is true.\n */\nmxGraph.prototype.edgeLabelsMovable = true;\n\t\n/**\n * Variable: vertexLabelsMovable\n * \n * Specifies the return value for vertices in <isLabelMovable>. Default is false.\n */\nmxGraph.prototype.vertexLabelsMovable = false;\n\n/**\n * Variable: dropEnabled\n * \n * Specifies the return value for <isDropEnabled>. Default is false.\n */\nmxGraph.prototype.dropEnabled = false;\n\n/**\n * Variable: splitEnabled\n * \n * Specifies if dropping onto edges should be enabled. This is ignored if\n * <dropEnabled> is false. If enabled, it will call <splitEdge> to carry\n * out the drop operation. Default is true.\n */\nmxGraph.prototype.splitEnabled = true;\n\n/**\n * Variable: cellsResizable\n * \n * Specifies the return value for <isCellResizable>. Default is true.\n */\nmxGraph.prototype.cellsResizable = true;\n\n/**\n * Variable: cellsBendable\n * \n * Specifies the return value for <isCellsBendable>. Default is true.\n */\nmxGraph.prototype.cellsBendable = true;\n\n/**\n * Variable: cellsSelectable\n * \n * Specifies the return value for <isCellSelectable>. Default is true.\n */\nmxGraph.prototype.cellsSelectable = true;\n\n/**\n * Variable: cellsDisconnectable\n * \n * Specifies the return value for <isCellDisconntable>. Default is true.\n */\nmxGraph.prototype.cellsDisconnectable = true;\n\n/**\n * Variable: autoSizeCells\n * \n * Specifies if the graph should automatically update the cell size after an\n * edit. This is used in <isAutoSizeCell>. Default is false.\n */\nmxGraph.prototype.autoSizeCells = false;\n\n/**\n * Variable: autoSizeCellsOnAdd\n * \n * Specifies if autoSize style should be applied when cells are added. Default is false.\n */\nmxGraph.prototype.autoSizeCellsOnAdd = false;\n\n/**\n * Variable: autoScroll\n * \n * Specifies if the graph should automatically scroll if the mouse goes near\n * the container edge while dragging. This is only taken into account if the\n * container has scrollbars. Default is true.\n * \n * If you need this to work without scrollbars then set <ignoreScrollbars> to\n * true. Please consult the <ignoreScrollbars> for details. In general, with\n * no scrollbars, the use of <allowAutoPanning> is recommended.\n */\nmxGraph.prototype.autoScroll = true;\n\n/**\n * Variable: ignoreScrollbars\n * \n * Specifies if the graph should automatically scroll regardless of the\n * scrollbars. This will scroll the container using positive values for\n * scroll positions (ie usually only rightwards and downwards). To avoid\n * possible conflicts with panning, set <translateToScrollPosition> to true.\n */\nmxGraph.prototype.ignoreScrollbars = false;\n\n/**\n * Variable: translateToScrollPosition\n * \n * Specifies if the graph should automatically convert the current scroll\n * position to a translate in the graph view when a mouseUp event is received.\n * This can be used to avoid conflicts when using <autoScroll> and\n * <ignoreScrollbars> with no scrollbars in the container.\n */\nmxGraph.prototype.translateToScrollPosition = false;\n\n/**\n * Variable: timerAutoScroll\n * \n * Specifies if autoscrolling should be carried out via mxPanningManager even\n * if the container has scrollbars. This disables <scrollPointToVisible> and\n * uses <mxPanningManager> instead. If this is true then <autoExtend> is\n * disabled. It should only be used with a scroll buffer or when scollbars\n * are visible and scrollable in all directions. Default is false.\n */\nmxGraph.prototype.timerAutoScroll = false;\n\n/**\n * Variable: allowAutoPanning\n * \n * Specifies if panning via <panGraph> should be allowed to implement autoscroll\n * if no scrollbars are available in <scrollPointToVisible>. To enable panning\n * inside the container, near the edge, set <mxPanningManager.border> to a\n * positive value. Default is false.\n */\nmxGraph.prototype.allowAutoPanning = false;\n\n/**\n * Variable: autoExtend\n * \n * Specifies if the size of the graph should be automatically extended if the\n * mouse goes near the container edge while dragging. This is only taken into\n * account if the container has scrollbars. Default is true. See <autoScroll>.\n */\nmxGraph.prototype.autoExtend = true;\n\n/**\n * Variable: maximumGraphBounds\n * \n * <mxRectangle> that specifies the area in which all cells in the diagram\n * should be placed. Uses in <getMaximumGraphBounds>. Use a width or height of\n * 0 if you only want to give a upper, left corner.\n */\nmxGraph.prototype.maximumGraphBounds = null;\n\n/**\n * Variable: minimumGraphSize\n * \n * <mxRectangle> that specifies the minimum size of the graph. This is ignored\n * if the graph container has no scrollbars. Default is null.\n */\nmxGraph.prototype.minimumGraphSize = null;\n\n/**\n * Variable: minimumContainerSize\n * \n * <mxRectangle> that specifies the minimum size of the <container> if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.minimumContainerSize = null;\n\t\t\n/**\n * Variable: maximumContainerSize\n * \n * <mxRectangle> that specifies the maximum size of the container if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.maximumContainerSize = null;\n\n/**\n * Variable: resizeContainer\n * \n * Specifies if the container should be resized to the graph size when\n * the graph size has changed. Default is false.\n */\nmxGraph.prototype.resizeContainer = false;\n\n/**\n * Variable: border\n * \n * Border to be added to the bottom and right side when the container is\n * being resized after the graph has been changed. Default is 0.\n */\nmxGraph.prototype.border = 0;\n\t\t\n/**\n * Variable: keepEdgesInForeground\n * \n * Specifies if edges should appear in the foreground regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInForeground = false;\n\n/**\n * Variable: keepEdgesInBackground\n * \n * Specifies if edges should appear in the background regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInBackground = false;\n\n/**\n * Variable: allowNegativeCoordinates\n * \n * Specifies if negative coordinates for vertices are allowed. Default is true.\n */\nmxGraph.prototype.allowNegativeCoordinates = true;\n\n/**\n * Variable: constrainChildren\n * \n * Specifies if a child should be constrained inside the parent bounds after a\n * move or resize of the child. Default is true.\n */\nmxGraph.prototype.constrainChildren = true;\n\n/**\n * Variable: constrainRelativeChildren\n * \n * Specifies if child cells with relative geometries should be constrained\n * inside the parent bounds, if <constrainChildren> is true, and/or the\n * <maximumGraphBounds>. Default is false.\n */\nmxGraph.prototype.constrainRelativeChildren = false;\n\n/**\n * Variable: extendParents\n * \n * Specifies if a parent should contain the child bounds after a resize of\n * the child. Default is true. This has precedence over <constrainChildren>.\n */\nmxGraph.prototype.extendParents = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is true.\n */\nmxGraph.prototype.extendParentsOnAdd = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is false for backwards compatiblity.\n */\nmxGraph.prototype.extendParentsOnMove = false;\n\n/**\n * Variable: recursiveResize\n * \n * Specifies the return value for <isRecursiveResize>. Default is\n * false for backwards compatiblity.\n */\nmxGraph.prototype.recursiveResize = false;\n\n/**\n * Variable: collapseToPreferredSize\n * \n * Specifies if the cell size should be changed to the preferred size when\n * a cell is first collapsed. Default is true.\n */\nmxGraph.prototype.collapseToPreferredSize = true;\n\n/**\n * Variable: zoomFactor\n * \n * Specifies the factor used for <zoomIn> and <zoomOut>. Default is 1.2\n * (120%).\n */\nmxGraph.prototype.zoomFactor = 1.2;\n\n/**\n * Variable: keepSelectionVisibleOnZoom\n * \n * Specifies if the viewport should automatically contain the selection cells\n * after a zoom operation. Default is false.\n */\nmxGraph.prototype.keepSelectionVisibleOnZoom = false;\n\n/**\n * Variable: centerZoom\n * \n * Specifies if the zoom operations should go into the center of the actual\n * diagram rather than going from top, left. Default is true.\n */\nmxGraph.prototype.centerZoom = true;\n\n/**\n * Variable: resetViewOnRootChange\n * \n * Specifies if the scale and translate should be reset if the root changes in\n * the model. Default is true.\n */\nmxGraph.prototype.resetViewOnRootChange = true;\n\n/**\n * Variable: resetEdgesOnResize\n * \n * Specifies if edge control points should be reset after the resize of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnResize = false;\n\n/**\n * Variable: resetEdgesOnMove\n * \n * Specifies if edge control points should be reset after the move of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnMove = false;\n\n/**\n * Variable: resetEdgesOnConnect\n * \n * Specifies if edge control points should be reset after the the edge has been\n * reconnected. Default is true.\n */\nmxGraph.prototype.resetEdgesOnConnect = true;\n\n/**\n * Variable: allowLoops\n * \n * Specifies if loops (aka self-references) are allowed. Default is false.\n */\nmxGraph.prototype.allowLoops = false;\n\t\n/**\n * Variable: defaultLoopStyle\n * \n * <mxEdgeStyle> to be used for loops. This is a fallback for loops if the\n * <mxConstants.STYLE_LOOP> is undefined. Default is <mxEdgeStyle.Loop>.\n */\nmxGraph.prototype.defaultLoopStyle = mxEdgeStyle.Loop;\n\n/**\n * Variable: multigraph\n * \n * Specifies if multiple edges in the same direction between the same pair of\n * vertices are allowed. Default is true.\n */\nmxGraph.prototype.multigraph = true;\n\n/**\n * Variable: connectableEdges\n * \n * Specifies if edges are connectable. Default is false. This overrides the\n * connectable field in edges.\n */\nmxGraph.prototype.connectableEdges = false;\n\n/**\n * Variable: allowDanglingEdges\n * \n * Specifies if edges with disconnected terminals are allowed in the graph.\n * Default is true.\n */\nmxGraph.prototype.allowDanglingEdges = true;\n\n/**\n * Variable: cloneInvalidEdges\n * \n * Specifies if edges that are cloned should be validated and only inserted\n * if they are valid. Default is true.\n */\nmxGraph.prototype.cloneInvalidEdges = false;\n\n/**\n * Variable: disconnectOnMove\n * \n * Specifies if edges should be disconnected from their terminals when they\n * are moved. Default is true.\n */\nmxGraph.prototype.disconnectOnMove = true;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible. This is used in <getLabel>. Default\n * is true.\n */\nmxGraph.prototype.labelsVisible = true;\n\t\n/**\n * Variable: htmlLabels\n * \n * Specifies the return value for <isHtmlLabel>. Default is false.\n */\nmxGraph.prototype.htmlLabels = false;\n\n/**\n * Variable: swimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selectable via the content if the\n * mouse is released. Default is true.\n */\nmxGraph.prototype.swimlaneSelectionEnabled = true;\n\n/**\n * Variable: swimlaneNesting\n * \n * Specifies if nesting of swimlanes is allowed. Default is true.\n */\nmxGraph.prototype.swimlaneNesting = true;\n\t\n/**\n * Variable: swimlaneIndicatorColorAttribute\n * \n * The attribute used to find the color for the indicator if the indicator\n * color is set to 'swimlane'. Default is <mxConstants.STYLE_FILLCOLOR>.\n */\nmxGraph.prototype.swimlaneIndicatorColorAttribute = mxConstants.STYLE_FILLCOLOR;\n\n/**\n * Variable: imageBundles\n * \n * Holds the list of image bundles.\n */\nmxGraph.prototype.imageBundles = null;\n\n/**\n * Variable: minFitScale\n * \n * Specifies the minimum scale to be applied in <fit>. Default is 0.1. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.minFitScale = 0.1;\n\n/**\n * Variable: maxFitScale\n * \n * Specifies the maximum scale to be applied in <fit>. Default is 8. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.maxFitScale = 8;\n\n/**\n * Variable: panDx\n * \n * Current horizontal panning value. Default is 0.\n */\nmxGraph.prototype.panDx = 0;\n\n/**\n * Variable: panDy\n * \n * Current vertical panning value. Default is 0.\n */\nmxGraph.prototype.panDy = 0;\n\n/**\n * Variable: collapsedImage\n * \n * Specifies the <mxImage> to indicate a collapsed state.\n * Default value is mxClient.imageBasePath + '/collapsed.gif'\n */\nmxGraph.prototype.collapsedImage = new mxImage(mxClient.imageBasePath + '/collapsed.gif', 9, 9);\n\n/**\n * Variable: expandedImage\n * \n * Specifies the <mxImage> to indicate a expanded state.\n * Default value is mxClient.imageBasePath + '/expanded.gif'\n */\nmxGraph.prototype.expandedImage = new mxImage(mxClient.imageBasePath + '/expanded.gif', 9, 9);\n\n/**\n * Variable: warningImage\n * \n * Specifies the <mxImage> for the image to be used to display a warning\n * overlay. See <setCellWarning>. Default value is mxClient.imageBasePath +\n * '/warning'.  The extension for the image depends on the platform. It is\n * '.png' on the Mac and '.gif' on all other platforms.\n */\nmxGraph.prototype.warningImage = new mxImage(mxClient.imageBasePath + '/warning'+\n\t((mxClient.IS_MAC) ? '.png' : '.gif'), 16, 16);\n\n/**\n * Variable: alreadyConnectedResource\n * \n * Specifies the resource key for the error message to be displayed in\n * non-multigraphs when two vertices are already connected. If the resource\n * for this key does not exist then the value is used as the error message.\n * Default is 'alreadyConnected'.\n */\nmxGraph.prototype.alreadyConnectedResource = (mxClient.language != 'none') ? 'alreadyConnected' : '';\n\n/**\n * Variable: containsValidationErrorsResource\n * \n * Specifies the resource key for the warning message to be displayed when\n * a collapsed cell contains validation errors. If the resource for this\n * key does not exist then the value is used as the warning message.\n * Default is 'containsValidationErrors'.\n */\nmxGraph.prototype.containsValidationErrorsResource = (mxClient.language != 'none') ? 'containsValidationErrors' : '';\n\n/**\n * Variable: collapseExpandResource\n * \n * Specifies the resource key for the tooltip on the collapse/expand icon.\n * If the resource for this key does not exist then the value is used as\n * the tooltip. Default is 'collapse-expand'.\n */\nmxGraph.prototype.collapseExpandResource = (mxClient.language != 'none') ? 'collapse-expand' : '';\n\n/**\n * Function: init\n * \n * Initializes the <container> and creates the respective datastructures.\n * \n * Parameters:\n * \n * container - DOM node that will contain the graph display.\n */\nmxGraph.prototype.init = function(container)\n{\n\tthis.container = container;\n\t\n\t// Initializes the in-place editor\n\tthis.cellEditor = this.createCellEditor();\t\n\n\t// Initializes the container using the view\n\tthis.view.init();\n\t\n\t// Updates the size of the container for the current graph\n\tthis.sizeDidChange();\n\t\n\t// Hides tooltips and resets tooltip timer if mouse leaves container\n\tmxEvent.addListener(container, 'mouseleave', mxUtils.bind(this, function()\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t}));\n\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t\t\n\t\t// Disable shift-click for text\n\t\tmxEvent.addListener(container, 'selectstart',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\treturn this.isEditing() || (!this.isMouseDown && !mxEvent.isShiftDown(evt));\n\t\t\t})\n\t\t);\n\t}\n\t\n\t// Workaround for missing last shape and connect preview in IE8 standards\n\t// mode if no initial graph displayed or no label for shape defined\n\tif (document.documentMode == 8)\n\t{\n\t\tcontainer.insertAdjacentHTML('beforeend', '<' + mxClient.VML_PREFIX + ':group' +\n\t\t\t' style=\"DISPLAY: none;\"></' + mxClient.VML_PREFIX + ':group>');\n\t}\n};\n\n/**\n * Function: createHandlers\n * \n * Creates the tooltip-, panning-, connection- and graph-handler (in this\n * order). This is called in the constructor before <init> is called.\n */\nmxGraph.prototype.createHandlers = function()\n{\n\tthis.tooltipHandler = this.createTooltipHandler();\n\tthis.tooltipHandler.setEnabled(false);\n\tthis.selectionCellsHandler = this.createSelectionCellsHandler();\n\tthis.connectionHandler = this.createConnectionHandler();\n\tthis.connectionHandler.setEnabled(false);\n\tthis.graphHandler = this.createGraphHandler();\n\tthis.panningHandler = this.createPanningHandler();\n\tthis.panningHandler.panningEnabled = false;\n\tthis.popupMenuHandler = this.createPopupMenuHandler();\n};\n\n/**\n * Function: createTooltipHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createTooltipHandler = function()\n{\n\treturn new mxTooltipHandler(this);\n};\n\n/**\n * Function: createSelectionCellsHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createSelectionCellsHandler = function()\n{\n\treturn new mxSelectionCellsHandler(this);\n};\n\n/**\n * Function: createConnectionHandler\n * \n * Creates and returns a new <mxConnectionHandler> to be used in this graph.\n */\nmxGraph.prototype.createConnectionHandler = function()\n{\n\treturn new mxConnectionHandler(this);\n};\n\n/**\n * Function: createGraphHandler\n * \n * Creates and returns a new <mxGraphHandler> to be used in this graph.\n */\nmxGraph.prototype.createGraphHandler = function()\n{\n\treturn new mxGraphHandler(this);\n};\n\n/**\n * Function: createPanningHandler\n * \n * Creates and returns a new <mxPanningHandler> to be used in this graph.\n */\nmxGraph.prototype.createPanningHandler = function()\n{\n\treturn new mxPanningHandler(this);\n};\n\n/**\n * Function: createPopupMenuHandler\n * \n * Creates and returns a new <mxPopupMenuHandler> to be used in this graph.\n */\nmxGraph.prototype.createPopupMenuHandler = function()\n{\n\treturn new mxPopupMenuHandler(this);\n};\n\n/**\n * Function: createSelectionModel\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createSelectionModel = function()\n{\n\treturn new mxGraphSelectionModel(this);\n};\n\n/**\n * Function: createStylesheet\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createStylesheet = function()\n{\n\treturn new mxStylesheet();\n};\n\n/**\n * Function: createGraphView\n * \n * Creates a new <mxGraphView> to be used in this graph.\n */\nmxGraph.prototype.createGraphView = function()\n{\n\treturn new mxGraphView(this);\n};\n \n/**\n * Function: createCellRenderer\n * \n * Creates a new <mxCellRenderer> to be used in this graph.\n */\nmxGraph.prototype.createCellRenderer = function()\n{\n\treturn new mxCellRenderer();\n};\n\n/**\n * Function: createCellEditor\n * \n * Creates a new <mxCellEditor> to be used in this graph.\n */\nmxGraph.prototype.createCellEditor = function()\n{\n\treturn new mxCellEditor(this);\n};\n\n/**\n * Function: getModel\n * \n * Returns the <mxGraphModel> that contains the cells.\n */\nmxGraph.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: getView\n * \n * Returns the <mxGraphView> that contains the <mxCellStates>.\n */\nmxGraph.prototype.getView = function()\n{\n\treturn this.view;\n};\n\n/**\n * Function: getStylesheet\n * \n * Returns the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.getStylesheet = function()\n{\n\treturn this.stylesheet;\n};\n\n/**\n * Function: setStylesheet\n * \n * Sets the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.setStylesheet = function(stylesheet)\n{\n\tthis.stylesheet = stylesheet;\n};\n\n/**\n * Function: getSelectionModel\n * \n * Returns the <mxGraphSelectionModel> that contains the selection.\n */\nmxGraph.prototype.getSelectionModel = function()\n{\n\treturn this.selectionModel;\n};\n\n/**\n * Function: setSelectionModel\n * \n * Sets the <mxSelectionModel> that contains the selection.\n */\nmxGraph.prototype.setSelectionModel = function(selectionModel)\n{\n\tthis.selectionModel = selectionModel;\n};\n\n/**\n * Function: getSelectionCellsForChanges\n * \n * Returns the cells to be selected for the given array of changes.\n */\nmxGraph.prototype.getSelectionCellsForChanges = function(changes)\n{\n\tvar dict = new mxDictionary();\n\tvar cells = [];\n\t\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!dict.get(cell) && this.model.contains(cell))\n\t\t{\n\t\t\tif (this.model.isEdge(cell) || this.model.isVertex(cell))\n\t\t\t{\n\t\t\t\tdict.put(cell, true);\n\t\t\t\tcells.push(cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\taddCell(this.model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change.constructor != mxRootChange)\n\t\t{\n\t\t\tvar cell = null;\n\n\t\t\tif (change instanceof mxChildChange)\n\t\t\t{\n\t\t\t\tcell = change.child;\n\t\t\t}\n\t\t\telse if (change.cell != null && change.cell instanceof mxCell)\n\t\t\t{\n\t\t\t\tcell = change.cell;\n\t\t\t}\n\t\t\t\n\t\t\tif (cell != null)\n\t\t\t{\n\t\t\t\taddCell(cell);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: graphModelChanged\n * \n * Called when the graph model changes. Invokes <processChange> on each\n * item of the given array to update the view accordingly.\n * \n * Parameters:\n * \n * changes - Array that contains the individual changes.\n */\nmxGraph.prototype.graphModelChanged = function(changes)\n{\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tthis.processChange(changes[i]);\n\t}\n\n\tthis.updateSelection();\n\tthis.view.validate();\n\tthis.sizeDidChange();\n};\n\n/**\n * Function: updateSelection\n * \n * Removes selection cells that are not in the model from the selection.\n */\nmxGraph.prototype.updateSelection = function()\n{\n\tvar cells = this.getSelectionCells();\n\tvar removed = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.model.contains(cells[i]) || !this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tremoved.push(cells[i]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar par = this.model.getParent(cells[i]);\n\t\t\t\n\t\t\twhile (par != null && par != this.view.currentRoot)\n\t\t\t{\n\t\t\t\tif (this.isCellCollapsed(par) || !this.isCellVisible(par))\n\t\t\t\t{\n\t\t\t\t\tremoved.push(cells[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpar = this.model.getParent(par);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.removeSelectionCells(removed);\n};\n\n/**\n * Function: processChange\n * \n * Processes the given change and invalidates the respective cached data\n * in <view>. This fires a <root> event if the root has changed in the\n * model.\n * \n * Parameters:\n * \n * change - Object that represents the change on the model.\n */\nmxGraph.prototype.processChange = function(change)\n{\n\t// Resets the view settings, removes all cells and clears\n\t// the selection if the root changes.\n\tif (change instanceof mxRootChange)\n\t{\n\t\tthis.clearSelection();\n\t\tthis.setDefaultParent(null);\n\t\tthis.removeStateForCell(change.previous);\n\t\t\n\t\tif (this.resetViewOnRootChange)\n\t\t{\n\t\t\tthis.view.scale = 1;\n\t\t\tthis.view.translate.x = 0;\n\t\t\tthis.view.translate.y = 0;\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t}\n\t\n\t// Adds or removes a child to the view by online invaliding\n\t// the minimal required portions of the cache, namely, the\n\t// old and new parent and the child.\n\telse if (change instanceof mxChildChange)\n\t{\n\t\tvar newParent = this.model.getParent(change.child);\n\t\tthis.view.invalidate(change.child, true, true);\n\t\t\n\t\tif (!this.model.contains(newParent) || this.isCellCollapsed(newParent))\n\t\t{\n\t\t\tthis.view.invalidate(change.child, true, true);\n\t\t\tthis.removeStateForCell(change.child);\n\t\t\t\n\t\t\t// Handles special case of current root of view being removed\n\t\t\tif (this.view.currentRoot == change.child)\n\t\t\t{\n\t\t\t\tthis.home();\n\t\t\t}\n\t\t}\n \n\t\tif (newParent != change.previous)\n\t\t{\n\t\t\t// Refreshes the collapse/expand icons on the parents\n\t\t\tif (newParent != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(newParent, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (change.previous != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(change.previous, false, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handles two special cases where the shape does not need to be\n\t// recreated from scratch, it only needs to be invalidated.\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\t// Checks if the geometry has changed to avoid unnessecary revalidation\n\t\tif (change instanceof mxTerminalChange || ((change.previous == null && change.geometry != null) ||\n\t\t\t(change.previous != null && !change.previous.equals(change.geometry))))\n\t\t{\n\t\t\tthis.view.invalidate(change.cell);\n\t\t}\n\t}\n\n\t// Handles two special cases where only the shape, but no\n\t// descendants need to be recreated\n\telse if (change instanceof mxValueChange)\n\t{\n\t\tthis.view.invalidate(change.cell, false, false);\n\t}\n\t\n\t// Requires a new mxShape in JavaScript\n\telse if (change instanceof mxStyleChange)\n\t{\n\t\tthis.view.invalidate(change.cell, true, true);\n\t\tvar state = this.view.getState(change.cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tstate.invalidStyle = true;\n\t\t}\n\t}\n\t\n\t// Removes the state from the cache by default\n\telse if (change.cell != null && change.cell instanceof mxCell)\n\t{\n\t\tthis.removeStateForCell(change.cell);\n\t}\n};\n\n/**\n * Function: removeStateForCell\n * \n * Removes all cached information for the given cell and its descendants.\n * This is called when a cell was removed from the model.\n * \n * Paramters:\n * \n * cell - <mxCell> that was removed from the model.\n */\nmxGraph.prototype.removeStateForCell = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.removeStateForCell(this.model.getChildAt(cell, i));\n\t}\n\n\tthis.view.invalidate(cell, false, true);\n\tthis.view.removeState(cell);\n};\n\n/**\n * Group: Overlays\n */\n\n/**\n * Function: addCellOverlay\n * \n * Adds an <mxCellOverlay> for the specified cell. This method fires an\n * <addoverlay> event and returns the new <mxCellOverlay>.\n * \n * Parameters:\n * \n * cell - <mxCell> to add the overlay for.\n * overlay - <mxCellOverlay> to be added for the cell.\n */\nmxGraph.prototype.addCellOverlay = function(cell, overlay)\n{\n\tif (cell.overlays == null)\n\t{\n\t\tcell.overlays = [];\n\t}\n\t\n\tcell.overlays.push(overlay);\n\n\tvar state = this.view.getState(cell);\n\n\t// Immediately updates the cell display if the state exists\n\tif (state != null)\n\t{\n\t\tthis.cellRenderer.redraw(state);\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD_OVERLAY,\n\t\t\t'cell', cell, 'overlay', overlay));\n\t\n\treturn overlay;\n};\n\n/**\n * Function: getCellOverlays\n * \n * Returns the array of <mxCellOverlays> for the given cell or null, if\n * no overlays are defined.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be returned.\n */\nmxGraph.prototype.getCellOverlays = function(cell)\n{\n\treturn cell.overlays;\n};\n\n/**\n * Function: removeCellOverlay\n * \n * Removes and returns the given <mxCellOverlay> from the given cell. This\n * method fires a <removeoverlay> event. If no overlay is given, then all\n * overlays are removed using <removeOverlays>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlay should be removed.\n * overlay - Optional <mxCellOverlay> to be removed.\n */\nmxGraph.prototype.removeCellOverlay = function(cell, overlay)\n{\n\tif (overlay == null)\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\telse\n\t{\n\t\tvar index = mxUtils.indexOf(cell.overlays, overlay);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tcell.overlays.splice(index, 1);\n\t\t\t\n\t\t\tif (cell.overlays.length == 0)\n\t\t\t{\n\t\t\t\tcell.overlays = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Immediately updates the cell display if the state exists\n\t\t\tvar state = this.view.getState(cell);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tthis.cellRenderer.redraw(state);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlay));\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\toverlay = null;\n\t\t}\n\t}\n\t\n\treturn overlay;\n};\n\n/**\n * Function: removeCellOverlays\n * \n * Removes all <mxCellOverlays> from the given cell. This method\n * fires a <removeoverlay> event for each <mxCellOverlay> and returns\n * the array of <mxCellOverlays> that was removed from the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be removed\n */\nmxGraph.prototype.removeCellOverlays = function(cell)\n{\n\tvar overlays = cell.overlays;\n\t\n\tif (overlays != null)\n\t{\n\t\tcell.overlays = null;\n\t\t\n\t\t// Immediately updates the cell display if the state exists\n\t\tvar state = this.view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.cellRenderer.redraw(state);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlays[i]));\n\t\t}\n\t}\n\t\n\treturn overlays;\n};\n\n/**\n * Function: clearCellOverlays\n * \n * Removes all <mxCellOverlays> in the graph for the given cell and all its\n * descendants. If no cell is specified then all overlays are removed from\n * the graph. This implementation uses <removeCellOverlays> to remove the\n * overlays from the individual cells.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> that represents the root of the subtree to\n * remove the overlays from. Default is the root in the model.\n */\nmxGraph.prototype.clearCellOverlays = function(cell)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tthis.removeCellOverlays(cell);\n\t\n\t// Recursively removes all overlays from the children\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\t\tthis.clearCellOverlays(child); // recurse\n\t}\n};\n\n/**\n * Function: setCellWarning\n * \n * Creates an overlay for the given cell using the warning and image or\n * <warningImage> and returns the new <mxCellOverlay>. The warning is\n * displayed as a tooltip in a red font and may contain HTML markup. If\n * the warning is null or a zero length string, then all overlays are\n * removed from the cell.\n * \n * Example:\n * \n * (code)\n * graph.setCellWarning(cell, '<b>Warning:</b>: Hello, World!');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose warning should be set.\n * warning - String that represents the warning to be displayed.\n * img - Optional <mxImage> to be used for the overlay. Default is\n * <warningImage>.\n * isSelect - Optional boolean indicating if a click on the overlay\n * should select the corresponding cell. Default is false.\n */\nmxGraph.prototype.setCellWarning = function(cell, warning, img, isSelect)\n{\n\tif (warning != null && warning.length > 0)\n\t{\n\t\timg = (img != null) ? img : this.warningImage;\n\t\t\n\t\t// Creates the overlay with the image and warning\n\t\tvar overlay = new mxCellOverlay(img,\n\t\t\t'<font color=red>'+warning+'</font>');\n\t\t\n\t\t// Adds a handler for single mouseclicks to select the cell\n\t\tif (isSelect)\n\t\t{\n\t\t\toverlay.addListener(mxEvent.CLICK,\n\t\t\t\tmxUtils.bind(this, function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isEnabled())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setSelectionCell(cell);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\t\n\t\t// Sets and returns the overlay in the graph\n\t\treturn this.addCellOverlay(cell, overlay);\n\t}\n\telse\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: In-place editing\n */\n\n/**\n * Function: startEditing\n * \n * Calls <startEditingAtCell> using the given cell or the first selection\n * cell.\n * \n * Parameters:\n * \n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditing = function(evt)\n{\n\tthis.startEditingAtCell(null, evt);\n};\n\n/**\n * Function: startEditingAtCell\n * \n * Fires a <startEditing> event and invokes <mxCellEditor.startEditing>\n * on <editor>. After editing was started, a <editingStarted> event is\n * fired.\n * \n * Parameters:\n * \n * cell - <mxCell> to start the in-place editor for.\n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditingAtCell = function(cell, evt)\n{\n\tif (evt == null || !mxEvent.isMultiTouchEvent(evt))\n\t{\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.getSelectionCell();\n\t\t\t\n\t\t\tif (cell != null && !this.isCellEditable(cell))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDITING,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t\tthis.cellEditor.startEditing(cell, evt);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STARTED,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t}\n\t}\n};\n\n/**\n * Function: getEditingValue\n * \n * Returns the initial value for in-place editing. This implementation\n * returns <convertValueToString> for the given cell. If this function is\n * overridden, then <mxGraphModel.valueForCellChanged> should take care\n * of correctly storing the actual new value inside the user object.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the initial editing value should be returned.\n * evt - Optional mouse event that triggered the editor.\n */\nmxGraph.prototype.getEditingValue = function(cell, evt)\n{\n\treturn this.convertValueToString(cell);\n};\n\n/**\n * Function: stopEditing\n * \n * Stops the current editing  and fires a <editingStopped> event.\n * \n * Parameters:\n * \n * cancel - Boolean that specifies if the current editing value\n * should be stored.\n */\nmxGraph.prototype.stopEditing = function(cancel)\n{\n\tthis.cellEditor.stopEditing(cancel);\n\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STOPPED, 'cancel', cancel));\n};\n\n/**\n * Function: labelChanged\n * \n * Sets the label of the specified cell to the given value using\n * <cellLabelChanged> and fires <mxEvent.LABEL_CHANGED> while the\n * transaction is in progress. Returns the cell whose label was changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * evt - Optional event that triggered the change.\n */\nmxGraph.prototype.labelChanged = function(cell, value, evt)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar old = cell.value;\n\t\tthis.cellLabelChanged(cell, value, this.isAutoSizeCell(cell));\n\t\tthis.fireEvent(new mxEventObject(mxEvent.LABEL_CHANGED,\n\t\t\t'cell', cell, 'value', value, 'old', old, 'event', evt));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellLabelChanged\n * \n * Sets the new label for a cell. If autoSize is true then\n * <cellSizeUpdated> will be called.\n * \n * In the following example, the function is extended to map changes to\n * attributes in an XML node, as shown in <convertValueToString>.\n * Alternatively, the handling of this can be implemented as shown in\n * <mxGraphModel.valueForCellChanged> without the need to clone the\n * user object.\n * \n * (code)\n * var graphCellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n * \t// Cloned for correct undo/redo\n * \tvar elt = cell.value.cloneNode(true);\n *  elt.setAttribute('label', newValue);\n *  \n *  newValue = elt;\n *  graphCellLabelChanged.apply(this, arguments);\n * };\n * (end) \n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * autoSize - Boolean that specifies if <cellSizeUpdated> should be called.\n */\nmxGraph.prototype.cellLabelChanged = function(cell, value, autoSize)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.model.setValue(cell, value);\n\t\t\n\t\tif (autoSize)\n\t\t{\n\t\t\tthis.cellSizeUpdated(cell, false);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n};\n\n/**\n * Group: Event processing\n */\n\n/**\n * Function: escape\n * \n * Processes an escape keystroke.\n * \n * Parameters:\n * \n * evt - Mouseevent that represents the keystroke.\n */\nmxGraph.prototype.escape = function(evt)\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n};\n\n/**\n * Function: click\n * \n * Processes a singleclick on an optional cell and fires a <click> event.\n * The click event is fired initially. If the graph is enabled and the\n * event has not been consumed, then the cell is selected using\n * <selectCellForEvent> or the selection is cleared using\n * <clearSelection>. The events consumed state is set to true if the\n * corresponding <mxMouseEvent> has been consumed.\n *\n * To handle a click event, use the following code.\n * \n * (code)\n * graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event'); // mouse event\n *   var cell = evt.getProperty('cell'); // cell may be null\n *   \n *   if (cell != null)\n *   {\n *     // Do something useful with cell and consume the event\n *     evt.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the single click.\n */\nmxGraph.prototype.click = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar cell = me.getCell();\n\tvar mxe = new mxEventObject(mxEvent.CLICK, 'event', evt, 'cell', cell);\n\t\n\tif (me.isConsumed())\n\t{\n\t\tmxe.consume();\n\t}\n\t\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n\t{\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isTransparentClickEvent(evt))\n\t\t\t{\n\t\t\t\tvar active = false;\n\t\t\t\t\n\t\t\t\tvar tmp = this.getCellAt(me.graphX, me.graphY, null, null, null, mxUtils.bind(this, function(state)\n\t\t\t\t{\n\t\t\t\t\tvar selected = this.isCellSelected(state.cell);\n\t\t\t\t\tactive = active || selected;\n\t\t\t\t\t\n\t\t\t\t\treturn !active || selected;\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tcell = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.selectCellForEvent(cell, evt);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar swimlane = null;\n\t\t\t\n\t\t\tif (this.isSwimlaneSelectionEnabled())\n\t\t\t{\n\t\t\t\t// Gets the swimlane at the location (includes\n\t\t\t\t// content area of swimlanes)\n\t\t\t\tswimlane = this.getSwimlaneAt(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\n\t\t\t// Selects the swimlane and consumes the event\n\t\t\tif (swimlane != null)\n\t\t\t{\n\t\t\t\tthis.selectCellForEvent(swimlane, evt);\n\t\t\t}\n\t\t\t\n\t\t\t// Ignores the event if the control key is pressed\n\t\t\telse if (!this.isToggleEvent(evt))\n\t\t\t{\n\t\t\t\tthis.clearSelection();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: dblClick\n * \n * Processes a doubleclick on an optional cell and fires a <dblclick>\n * event. The event is fired initially. If the graph is enabled and the\n * event has not been consumed, then <edit> is called with the given\n * cell. The event is ignored if no cell was specified.\n *\n * Example for overriding this method.\n *\n * (code)\n * graph.dblClick = function(evt, cell)\n * {\n *   var mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n *   this.fireEvent(mxe);\n *   \n *   if (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n *   {\n * \t   mxUtils.alert('Hello, World!');\n *     mxe.consume();\n *   }\n * }\n * (end)\n * \n * Example listener for this event.\n * \n * (code)\n * graph.addListener(mxEvent.DOUBLE_CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   // do something with the cell and consume the\n *   // event to prevent in-place editing from start\n * });\n * (end) \n * \n * Parameters:\n * \n * evt - Mouseevent that represents the doubleclick.\n * cell - Optional <mxCell> under the mousepointer.\n */\nmxGraph.prototype.dblClick = function(evt, cell)\n{\n\tvar mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() &&\n\t\tcell != null && this.isCellEditable(cell) && !this.isEditing(cell))\n\t{\n\t\tthis.startEditingAtCell(cell, evt);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: tapAndHold\n * \n * Handles the <mxMouseEvent> by highlighting the <mxCellState>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the touch event.\n * state - Optional <mxCellState> that is associated with the event.\n */\nmxGraph.prototype.tapAndHold = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar mxe = new mxEventObject(mxEvent.TAP_AND_HOLD, 'event', evt, 'cell', me.getCell());\n\n\t// LATER: Check if event should be consumed if me is consumed\n\tthis.fireEvent(mxe);\n\n\tif (mxe.isConsumed())\n\t{\n\t\t// Resets the state of the panning handler\n\t\tthis.panningHandler.panningTrigger = false;\n\t}\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() && this.connectionHandler.isEnabled())\n\t{\n\t\tvar state = this.view.getState(this.connectionHandler.marker.getCell(me));\n\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.connectionHandler.marker.currentColor = this.connectionHandler.marker.validColor;\n\t\t\tthis.connectionHandler.marker.markedState = state;\n\t\t\tthis.connectionHandler.marker.mark();\n\t\t\t\n\t\t\tthis.connectionHandler.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\tthis.connectionHandler.edgeState = this.connectionHandler.createEdgeState(me);\n\t\t\tthis.connectionHandler.previous = state;\n\t\t\tthis.connectionHandler.fireEvent(new mxEventObject(mxEvent.START, 'state', this.connectionHandler.previous));\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollPointToVisible\n * \n * Scrolls the graph to the given point, extending the graph container if\n * specified.\n */\nmxGraph.prototype.scrollPointToVisible = function(x, y, extend, border)\n{\n\tif (!this.timerAutoScroll && (this.ignoreScrollbars || mxUtils.hasScrollbars(this.container)))\n\t{\n\t\tvar c = this.container;\n\t\tborder = (border != null) ? border : 20;\n\t\t\n\t\tif (x >= c.scrollLeft && y >= c.scrollTop && x <= c.scrollLeft + c.clientWidth &&\n\t\t\ty <= c.scrollTop + c.clientHeight)\n\t\t{\n\t\t\tvar dx = c.scrollLeft + c.clientWidth - x;\n\t\t\t\n\t\t\tif (dx < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollLeft;\n\t\t\t\tc.scrollLeft += border - dx;\n\n\t\t\t\t// Automatically extends the canvas size to the bottom, right\n\t\t\t\t// if the event is outside of the canvas and the edge of the\n\t\t\t\t// canvas has been reached. Notes: Needs fix for IE.\n\t\t\t\tif (extend && old == c.scrollLeft)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar width = this.container.scrollWidth + border - dx;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar width = Math.max(c.clientWidth, c.scrollWidth) + border - dx;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollLeft += border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = x - c.scrollLeft;\n\t\t\t\t\n\t\t\t\tif (dx < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft -= border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar dy = c.scrollTop + c.clientHeight - y;\n\t\t\t\n\t\t\tif (dy < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollTop;\n\t\t\t\tc.scrollTop += border - dy;\n\n\t\t\t\tif (old == c.scrollTop && extend)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar height = this.container.scrollHeight + border - dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar height = Math.max(c.clientHeight, c.scrollHeight) + border - dy;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollTop += border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = y - c.scrollTop;\n\t\t\t\t\n\t\t\t\tif (dy < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop -= border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.allowAutoPanning && !this.panningHandler.isActive())\n\t{\n\t\tif (this.panningManager == null)\n\t\t{\n\t\t\tthis.panningManager = this.createPanningManager();\n\t\t}\n\n\t\tthis.panningManager.panTo(x + this.panDx, y + this.panDy);\n\t}\n};\n\n\n/**\n * Function: createPanningManager\n * \n * Creates and returns an <mxPanningManager>.\n */\nmxGraph.prototype.createPanningManager = function()\n{\n\treturn new mxPanningManager(this);\n};\n\n/**\n * Function: getBorderSizes\n * \n * Returns the size of the border and padding on all four sides of the\n * container. The left, top, right and bottom borders are stored in the x, y,\n * width and height of the returned <mxRectangle>, respectively.\n */\nmxGraph.prototype.getBorderSizes = function()\n{\n\tvar css = mxUtils.getCurrentStyle(this.container);\n\t\n\treturn new mxRectangle(mxUtils.parseCssNumber(css.paddingLeft) +\n\t\t\t((css.borderLeftStyle != 'none') ? mxUtils.parseCssNumber(css.borderLeftWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingTop) +\n\t\t\t((css.borderTopStyle != 'none') ? mxUtils.parseCssNumber(css.borderTopWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingRight) +\n\t\t\t((css.borderRightStyle != 'none') ? mxUtils.parseCssNumber(css.borderRightWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingBottom) +\n\t\t\t((css.borderBottomStyle != 'none') ? mxUtils.parseCssNumber(css.borderBottomWidth) : 0));\n};\n\n/**\n * Function: getPreferredPageSize\n * \n * Returns the preferred size of the background page if <preferPageSize> is true.\n */\nmxGraph.prototype.getPreferredPageSize = function(bounds, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = this.pageScale;\n\tvar page = new mxRectangle(0, 0, Math.ceil(fmt.width * ps), Math.ceil(fmt.height * ps));\n\t\n\tvar hCount = (this.pageBreaksVisible) ? Math.ceil(width / page.width) : 1;\n\tvar vCount = (this.pageBreaksVisible) ? Math.ceil(height / page.height) : 1;\n\t\n\treturn new mxRectangle(0, 0, hCount * page.width + 2 + tr.x, vCount * page.height + 2 + tr.y);\n};\n\n/**\n * Function: fit\n *\n * Scales the graph such that the complete diagram fits into <container> and\n * returns the current scale in the view. To fit an initial graph prior to\n * rendering, set <mxGraphView.rendering> to false prior to changing the model\n * and execute the following after changing the model.\n * \n * (code)\n * graph.fit();\n * graph.view.rendering = true;\n * graph.refresh();\n * (end)\n * \n * To fit and center the graph, the following code can be used.\n * \n * (code)\n * var margin = 2;\n * var max = 3;\n * \n * var bounds = graph.getGraphBounds();\n * var cw = graph.container.clientWidth - margin;\n * var ch = graph.container.clientHeight - margin;\n * var w = bounds.width / graph.view.scale;\n * var h = bounds.height / graph.view.scale;\n * var s = Math.min(max, Math.min(cw / w, ch / h));\n * \n * graph.view.scaleAndTranslate(s,\n *   (margin + cw - w * s) / (2 * s) - bounds.x / graph.view.scale,\n *   (margin + ch - h * s) / (2 * s) - bounds.y / graph.view.scale);\n * (end)\n * \n * Parameters:\n * \n * border - Optional number that specifies the border. Default is <border>.\n * keepOrigin - Optional boolean that specifies if the translate should be\n * changed. Default is false.\n * margin - Optional margin in pixels. Default is 0.\n * enabled - Optional boolean that specifies if the scale should be set or\n * just returned. Default is true.\n * ignoreWidth - Optional boolean that specifies if the width should be\n * ignored. Default is false.\n * ignoreHeight - Optional boolean that specifies if the height should be\n * ignored. Default is false.\n * maxHeight - Optional maximum height.\n */\nmxGraph.prototype.fit = function(border, keepOrigin, margin, enabled, ignoreWidth, ignoreHeight, maxHeight)\n{\n\tif (this.container != null)\n\t{\n\t\tborder = (border != null) ? border : this.getBorder();\n\t\tkeepOrigin = (keepOrigin != null) ? keepOrigin : false;\n\t\tmargin = (margin != null) ? margin : 0;\n\t\tenabled = (enabled != null) ? enabled : true;\n\t\tignoreWidth = (ignoreWidth != null) ? ignoreWidth : false;\n\t\tignoreHeight = (ignoreHeight != null) ? ignoreHeight : false;\n\t\t\n\t\t// Adds spacing and border from css\n\t\tvar cssBorder = this.getBorderSizes();\n\t\tvar w1 = this.container.offsetWidth - cssBorder.x - cssBorder.width - 1;\n\t\tvar h1 = (maxHeight != null) ? maxHeight : this.container.offsetHeight - cssBorder.y - cssBorder.height - 1;\n\t\tvar bounds = this.view.getGraphBounds();\n\t\t\n\t\tif (bounds.width > 0 && bounds.height > 0)\n\t\t{\n\t\t\tif (keepOrigin && bounds.x != null && bounds.y != null)\n\t\t\t{\n\t\t\t\tbounds = bounds.clone();\n\t\t\t\tbounds.width += bounds.x;\n\t\t\t\tbounds.height += bounds.y;\n\t\t\t\tbounds.x = 0;\n\t\t\t\tbounds.y = 0;\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Use unscaled bounding boxes to fix rounding errors\n\t\t\tvar s = this.view.scale;\n\t\t\tvar w2 = bounds.width / s;\n\t\t\tvar h2 = bounds.height / s;\n\t\t\t\n\t\t\t// Fits to the size of the background image if required\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tw2 = Math.max(w2, this.backgroundImage.width - bounds.x / s);\n\t\t\t\th2 = Math.max(h2, this.backgroundImage.height - bounds.y / s);\n\t\t\t}\n\t\t\t\n\t\t\tvar b = ((keepOrigin) ? border : 2 * border) + margin + 1;\n\n\t\t\tw1 -= b;\n\t\t\th1 -= b;\n\t\t\t\n\t\t\tvar s2 = (((ignoreWidth) ? h1 / h2 : (ignoreHeight) ? w1 / w2 :\n\t\t\t\tMath.min(w1 / w2, h1 / h2)));\n\t\t\t\n\t\t\tif (this.minFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.max(s2, this.minFitScale);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.maxFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.min(s2, this.maxFitScale);\n\t\t\t}\n\t\n\t\t\tif (enabled)\n\t\t\t{\n\t\t\t\tif (!keepOrigin)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.hasScrollbars(this.container))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar x0 = (bounds.x != null) ? Math.floor(this.view.translate.x - bounds.x / s + border / s2 + margin / 2) : border;\n\t\t\t\t\t\tvar y0 = (bounds.y != null) ? Math.floor(this.view.translate.y - bounds.y / s + border / s2 + margin / 2) : border;\n\n\t\t\t\t\t\tthis.view.scaleAndTranslate(s2, x0, y0);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t\t\tvar b2 = this.getGraphBounds();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.x != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollLeft = b2.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.y != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollTop = b2.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.view.scale != s2)\n\t\t\t\t{\n\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn s2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.view.scale;\n};\n\n/**\n * Function: sizeDidChange\n * \n * Called when the size of the graph has changed. This implementation fires\n * a <size> event after updating the clipping region of the SVG element in\n * SVG-bases browsers.\n */\nmxGraph.prototype.sizeDidChange = function()\n{\n\tvar bounds = this.getGraphBounds();\n\t\n\tif (this.container != null)\n\t{\n\t\tvar border = this.getBorder();\n\t\t\n\t\tvar width = Math.max(0, bounds.x + bounds.width + border);\n\t\tvar height = Math.max(0, bounds.y + bounds.height + border);\n\t\t\n\t\tif (this.minimumContainerSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumContainerSize.width);\n\t\t\theight = Math.max(height, this.minimumContainerSize.height);\n\t\t}\n\n\t\tif (this.resizeContainer)\n\t\t{\n\t\t\tthis.doResizeContainer(width, height);\n\t\t}\n\n\t\tif (this.preferPageSize || (!mxClient.IS_IE && this.pageVisible))\n\t\t{\n\t\t\tvar size = this.getPreferredPageSize(bounds, Math.max(1, width), Math.max(1, height));\n\t\t\t\n\t\t\tif (size != null)\n\t\t\t{\n\t\t\t\twidth = size.width * this.view.scale;\n\t\t\t\theight = size.height * this.view.scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.minimumGraphSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumGraphSize.width * this.view.scale);\n\t\t\theight = Math.max(height, this.minimumGraphSize.height * this.view.scale);\n\t\t}\n\n\t\twidth = Math.ceil(width);\n\t\theight = Math.ceil(height);\n\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\troot.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\troot.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t\troot.style.width = '100%';\n\t\t\t\troot.style.height = '100%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\t// Quirks mode does not support minWidth/-Height\n\t\t\t\tthis.view.updateHtmlCanvasSize(Math.max(1, width), Math.max(1, height));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.view.canvas.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\tthis.view.canvas.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.updatePageBreaks(this.pageBreaksVisible, width, height);\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SIZE, 'bounds', bounds));\n};\n\n/**\n * Function: doResizeContainer\n * \n * Resizes the container for the given graph width and height.\n */\nmxGraph.prototype.doResizeContainer = function(width, height)\n{\n\tif (this.maximumContainerSize != null)\n\t{\n\t\twidth = Math.min(this.maximumContainerSize.width, width);\n\t\theight = Math.min(this.maximumContainerSize.height, height);\n\t}\n\n\tthis.container.style.width = Math.ceil(width) + 'px';\n\tthis.container.style.height = Math.ceil(height) + 'px';\n};\n\n/**\n * Function: updatePageBreaks\n * \n * Invokes from <sizeDidChange> to redraw the page breaks.\n * \n * Parameters:\n * \n * visible - Boolean that specifies if page breaks should be shown.\n * width - Specifies the width of the container in pixels.\n * height - Specifies the height of the container in pixels.\n */\nmxGraph.prototype.updatePageBreaks = function(visible, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = scale * this.pageScale;\n\tvar bounds = new mxRectangle(0, 0, fmt.width * ps, fmt.height * ps);\n\n\tvar gb = mxRectangle.fromRectangle(this.getGraphBounds());\n\tgb.width = Math.max(1, gb.width);\n\tgb.height = Math.max(1, gb.height);\n\t\n\tbounds.x = Math.floor((gb.x - tr.x * scale) / bounds.width) * bounds.width + tr.x * scale;\n\tbounds.y = Math.floor((gb.y - tr.y * scale) / bounds.height) * bounds.height + tr.y * scale;\n\t\n\tgb.width = Math.ceil((gb.width + (gb.x - bounds.x)) / bounds.width) * bounds.width;\n\tgb.height = Math.ceil((gb.height + (gb.y - bounds.y)) / bounds.height) * bounds.height;\n\t\n\t// Does not show page breaks if the scale is too small\n\tvisible = visible && Math.min(bounds.width, bounds.height) > this.minPageBreakDist;\n\n\tvar horizontalCount = (visible) ? Math.ceil(gb.height / bounds.height) + 1 : 0;\n\tvar verticalCount = (visible) ? Math.ceil(gb.width / bounds.width) + 1 : 0;\n\tvar right = (verticalCount - 1) * bounds.width;\n\tvar bottom = (horizontalCount - 1) * bounds.height;\n\t\n\tif (this.horizontalPageBreaks == null && horizontalCount > 0)\n\t{\n\t\tthis.horizontalPageBreaks = [];\n\t}\n\n\tif (this.verticalPageBreaks == null && verticalCount > 0)\n\t{\n\t\tthis.verticalPageBreaks = [];\n\t}\n\t\n\tvar drawPageBreaks = mxUtils.bind(this, function(breaks)\n\t{\n\t\tif (breaks != null)\n\t\t{\n\t\t\tvar count = (breaks == this.horizontalPageBreaks) ? horizontalCount : verticalCount; \n\t\t\t\n\t\t\tfor (var i = 0; i <= count; i++)\n\t\t\t{\n\t\t\t\tvar pts = (breaks == this.horizontalPageBreaks) ?\n\t\t\t\t\t[new mxPoint(Math.round(bounds.x), Math.round(bounds.y + i * bounds.height)),\n\t\t\t         new mxPoint(Math.round(bounds.x + right), Math.round(bounds.y + i * bounds.height))] :\n\t\t\t        [new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y)),\n\t\t\t         new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y + bottom))];\n\n\t\t\t\tif (breaks[i] != null)\n\t\t\t\t{\n\t\t\t\t\tbreaks[i].points = pts;\n\t\t\t\t\tbreaks[i].redraw();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pageBreak = new mxPolyline(pts, this.pageBreakColor);\n\t\t\t\t\tpageBreak.dialect = this.dialect;\n\t\t\t\t\tpageBreak.pointerEvents = false;\n\t\t\t\t\tpageBreak.isDashed = this.pageBreakDashed;\n\t\t\t\t\tpageBreak.init(this.view.backgroundPane);\n\t\t\t\t\tpageBreak.redraw();\n\t\t\t\t\t\n\t\t\t\t\tbreaks[i] = pageBreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = count; i < breaks.length; i++)\n\t\t\t{\n\t\t\t\tbreaks[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tbreaks.splice(count, breaks.length - count);\n\t\t}\n\t});\n\t\n\tdrawPageBreaks(this.horizontalPageBreaks);\n\tdrawPageBreaks(this.verticalPageBreaks);\n};\n\n/**\n * Group: Cell styles\n */\n\n/**\n * Function: getCellStyle\n * \n * Returns an array of key, value pairs representing the cell style for the\n * given cell. If no string is defined in the model that specifies the\n * style, then the default style for the cell is returned or an empty object,\n * if no style can be found. Note: You should try and get the cell state\n * for the given cell and use the cached style in the state before using\n * this method.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n */\nmxGraph.prototype.getCellStyle = function(cell)\n{\n\tvar stylename = this.model.getStyle(cell);\n\tvar style = null;\n\t\n\t// Gets the default style for the cell\n\tif (this.model.isEdge(cell))\n\t{\n\t\tstyle = this.stylesheet.getDefaultEdgeStyle();\n\t}\n\telse\n\t{\n\t\tstyle = this.stylesheet.getDefaultVertexStyle();\n\t}\n\t\n\t// Resolves the stylename using the above as the default\n\tif (stylename != null)\n\t{\n\t\tstyle = this.postProcessCellStyle(this.stylesheet.getCellStyle(stylename, style));\n\t}\n\t\n\t// Returns a non-null value if no style can be found\n\tif (style == null)\n\t{\n\t\tstyle = new Object();\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: postProcessCellStyle\n * \n * Tries to resolve the value for the image style in the image bundles and\n * turns short data URIs as defined in mxImageBundle to data URIs as\n * defined in RFC 2397 of the IETF.\n */\nmxGraph.prototype.postProcessCellStyle = function(style)\n{\n\tif (style != null)\n\t{\n\t\tvar key = style[mxConstants.STYLE_IMAGE];\n\t\tvar image = this.getImageFromBundles(key);\n\n\t\tif (image != null)\n\t\t{\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t\telse\n\t\t{\n\t\t\timage = key;\n\t\t}\n\t\t\n\t\t// Converts short data uris to normal data uris\n\t\tif (image != null && image.substring(0, 11) == 'data:image/')\n\t\t{\n\t\t\tif (image.substring(0, 20) == 'data:image/svg+xml,<')\n\t\t\t{\n\t\t\t\t// Required for FF and IE11\n\t\t\t\timage = image.substring(0, 19) + encodeURIComponent(image.substring(19));\n\t\t\t}\n\t\t\telse if (image.substring(0, 22) != 'data:image/svg+xml,%3C')\n\t\t\t{\n\t\t\t\tvar comma = image.indexOf(',');\n\t\t\t\t\n\t\t\t\t// Adds base64 encoding prefix if needed\n\t\t\t\tif (comma > 0 && image.substring(comma - 7, comma + 1) != ';base64,')\n\t\t\t\t{\n\t\t\t\t\timage = image.substring(0, comma) + ';base64,'\n\t\t\t\t\t\t+ image.substring(comma + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t}\n\n\treturn style;\n};\n\n/**\n * Function: setCellStyle\n * \n * Sets the style of the specified cells. If no cells are given, then the\n * selection cells are changed.\n * \n * Parameters:\n * \n * style - String representing the new style of the cells.\n * cells - Optional array of <mxCells> to set the style for. Default is the\n * selection cells.\n */\nmxGraph.prototype.setCellStyle = function(style, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(cells[i], style);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: toggleCellStyle\n * \n * Toggles the boolean value for the given key in the style of the given cell\n * and returns the new value as 0 or 1. If no cell is specified then the\n * selection cell is used.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cell - Optional <mxCell> whose style should be modified. Default is\n * the selection cell.\n */\nmxGraph.prototype.toggleCellStyle = function(key, defaultValue, cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\treturn this.toggleCellStyles(key, defaultValue, [cell]);\n};\n\n/**\n * Function: toggleCellStyles\n * \n * Toggles the boolean value for the given key in the style of the given cells\n * and returns the new value as 0 or 1. If no cells are specified, then the\n * selection cells are used. For example, this can be used to toggle\n * <mxConstants.STYLE_ROUNDED> or any other style with a boolean value.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cells - Optional array of <mxCells> whose styles should be modified.\n * Default is the selection cells.\n */\nmxGraph.prototype.toggleCellStyles = function(key, defaultValue, cells)\n{\n\tdefaultValue = (defaultValue != null) ? defaultValue : false;\n\tcells = cells || this.getSelectionCells();\n\tvar value = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar state = this.view.getState(cells[0]);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cells[0]);\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvalue = (mxUtils.getValue(style, key, defaultValue)) ? 0 : 1;\n\t\t\tthis.setCellStyles(key, value, cells);\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: setCellStyles\n * \n * Sets the key to value in the styles of the given cells. This will modify\n * the existing cell styles in-place and override any existing assignment\n * for the given key. If no cells are specified, then the selection cells\n * are changed. If no value is specified, then the respective key is\n * removed from the styles.\n * \n * Parameters:\n * \n * key - String representing the key to be assigned.\n * value - String representing the new value for the key.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyles = function(key, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\tmxUtils.setCellStyles(this.model, cells, key, value);\n};\n\n/**\n * Function: toggleCellStyleFlags\n * \n * Toggles the given bit for the given key in the styles of the specified\n * cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.toggleCellStyleFlags = function(key, flag, cells)\n{\n\tthis.setCellStyleFlags(key, flag, null, cells);\n};\n\n/**\n * Function: setCellStyleFlags\n * \n * Sets or toggles the given bit for the given key in the styles of the\n * specified cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * value - Boolean value to be used or null if the value should be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyleFlags = function(key, flag, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvar state = this.view.getState(cells[0]);\n\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(cells[0]);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tvar current = parseInt(style[key] || 0);\n\t\t\t\tvalue = !((current & flag) == flag);\n\t\t\t}\n\t\t}\n\n\t\tmxUtils.setCellStyleFlags(this.model, cells, key, flag, value);\n\t}\n};\n\n/**\n * Group: Cell alignment and orientation\n */\n\n/**\n * Function: alignCells\n * \n * Aligns the given cells vertically or horizontally according to the given\n * alignment using the optional parameter as the coordinate.\n * \n * Parameters:\n * \n * align - Specifies the alignment. Possible values are all constants in\n * mxConstants with an ALIGN prefix.\n * cells - Array of <mxCells> to be aligned.\n * param - Optional coordinate for the alignment.\n */\nmxGraph.prototype.alignCells = function(align, cells, param)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tif (cells != null && cells.length > 1)\n\t{\n\t\t// Finds the required coordinate for the alignment\n\t\tif (param == null)\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\n\t\t\t\tif (state != null && !this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tif (param == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.x + state.width);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.y + state.height);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.x);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Aligns the cells to the coordinate\n\t\tif (param != null)\n\t\t{\n\t\t\tvar s = this.view.scale;\n\n\t\t\tthis.model.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null && !this.model.isEdge(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.resizeCell(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ALIGN_CELLS,\n\t\t\t\t\t\t'align', align, 'cells', cells));\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.model.endUpdate();\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: flipEdge\n * \n * Toggles the style of the given edge between null (or empty) and\n * <alternateEdgeStyle>. This method fires <mxEvent.FLIP_EDGE> while the\n * transaction is in progress. Returns the edge that was flipped.\n * \n * Here is an example that overrides this implementation to invert the\n * value of <mxConstants.STYLE_ELBOW> without removing any existing styles.\n * \n * (code)\n * graph.flipEdge = function(edge)\n * {\n *   if (edge != null)\n *   {\n *     var state = this.view.getState(edge);\n *     var style = (state != null) ? state.style : this.getCellStyle(edge);\n *     \n *     if (style != null)\n *     {\n *       var elbow = mxUtils.getValue(style, mxConstants.STYLE_ELBOW,\n *           mxConstants.ELBOW_HORIZONTAL);\n *       var value = (elbow == mxConstants.ELBOW_HORIZONTAL) ?\n *           mxConstants.ELBOW_VERTICAL : mxConstants.ELBOW_HORIZONTAL;\n *       this.setCellStyles(mxConstants.STYLE_ELBOW, value, [edge]);\n *     }\n *   }\n * };\n * (end)\n * \n * Parameters:\n * \n * edge - <mxCell> whose style should be changed.\n */\nmxGraph.prototype.flipEdge = function(edge)\n{\n\tif (edge != null &&\n\t\tthis.alternateEdgeStyle != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar style = this.model.getStyle(edge);\n\n\t\t\tif (style == null || style.length == 0)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, this.alternateEdgeStyle);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, null);\n\t\t\t}\n\n\t\t\t// Removes all existing control points\n\t\t\tthis.resetEdge(edge);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.FLIP_EDGE, 'edge', edge));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: addImageBundle\n *\n * Adds the specified <mxImageBundle>.\n */\nmxGraph.prototype.addImageBundle = function(bundle)\n{\n\tthis.imageBundles.push(bundle);\n};\n\n/**\n * Function: removeImageBundle\n * \n * Removes the specified <mxImageBundle>.\n */\nmxGraph.prototype.removeImageBundle = function(bundle)\n{\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t{\n\t\tif (this.imageBundles[i] != bundle)\n\t\t{\n\t\t\ttmp.push(this.imageBundles[i]);\n\t\t}\n\t}\n\t\n\tthis.imageBundles = tmp;\n};\n\n/**\n * Function: getImageFromBundles\n *\n * Searches all <imageBundles> for the specified key and returns the value\n * for the first match or null if the key is not found.\n */\nmxGraph.prototype.getImageFromBundles = function(key)\n{\n\tif (key != null)\n\t{\n\t\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t\t{\n\t\t\tvar image = this.imageBundles[i].getImage(key);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\treturn image;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: Order\n */\n\n/**\n * Function: orderCells\n * \n * Moves the given cells to the front or back. The change is carried out\n * using <cellsOrdered>. This method fires <mxEvent.ORDER_CELLS> while the\n * transaction is in progress.\n * \n * Parameters:\n * \n * back - Boolean that specifies if the cells should be moved to back.\n * cells - Array of <mxCells> to move to the background. If null is\n * specified then the selection cells are used.\n */\nmxGraph.prototype.orderCells = function(back, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsOrdered(cells, back);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ORDER_CELLS,\n\t\t\t\t'back', back, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsOrdered\n * \n * Moves the given cells to the front or back. This method fires\n * <mxEvent.CELLS_ORDERED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose order should be changed.\n * back - Boolean that specifies if the cells should be moved to back.\n */\nmxGraph.prototype.cellsOrdered = function(cells, back)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\n\t\t\t\tif (back)\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i], i);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i],\n\t\t\t\t\t\t\tthis.model.getChildCount(parent) - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ORDERED,\n\t\t\t\t\t'back', back, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Grouping\n */\n\n/**\n * Function: groupCells\n * \n * Adds the cells into the given group. The change is carried out using\n * <cellsAdded>, <cellsMoved> and <cellsResized>. This method fires\n * <mxEvent.GROUP_CELLS> while the transaction is in progress. Returns the\n * new group. A group is only created if there is at least one entry in the\n * given array of cells.\n * \n * Parameters:\n * \n * group - <mxCell> that represents the target group. If null is specified\n * then a new group is created using <createGroupCell>.\n * border - Optional integer that specifies the border between the child\n * area and the group bounds. Default is 0.\n * cells - Optional array of <mxCells> to be grouped. If null is specified\n * then the selection cells are used.\n */\nmxGraph.prototype.groupCells = function(group, border, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tcells = this.getCellsForGroup(cells);\n\n\tif (group == null)\n\t{\n\t\tgroup = this.createGroupCell(cells);\n\t}\n\n\tvar bounds = this.getBoundsForGroup(group, cells, border);\n\n\tif (cells.length > 0 && bounds != null)\n\t{\n\t\t// Uses parent of group or previous parent of first child\n\t\tvar parent = this.model.getParent(group);\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getParent(cells[0]);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Checks if the group has a geometry and\n\t\t\t// creates one if one does not exist\n\t\t\tif (this.getCellGeometry(group) == null)\n\t\t\t{\n\t\t\t\tthis.model.setGeometry(group, new mxGeometry());\n\t\t\t}\n\n\t\t\t// Adds the group into the parent\n\t\t\tvar index = this.model.getChildCount(parent);\n\t\t\tthis.cellsAdded([group], parent, index, null, null, false, false, false);\n\n\t\t\t// Adds the children into the group and moves\n\t\t\tindex = this.model.getChildCount(group);\n\t\t\tthis.cellsAdded(cells, group, index, null, null, false, false, false);\n\t\t\tthis.cellsMoved(cells, -bounds.x, -bounds.y, false, false, false);\n\n\t\t\t// Resizes the group\n\t\t\tthis.cellsResized([group], [bounds], false);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.GROUP_CELLS,\n\t\t\t\t\t'group', group, 'border', border, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn group;\n};\n\n/**\n * Function: getCellsForGroup\n * \n * Returns the cells with the same parent as the first cell\n * in the given array.\n */\nmxGraph.prototype.getCellsForGroup = function(cells)\n{\n\tvar result = [];\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar parent = this.model.getParent(cells[0]);\n\t\tresult.push(cells[0]);\n\n\t\t// Filters selection cells with the same parent\n\t\tfor (var i = 1; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getParent(cells[i]) == parent)\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getBoundsForGroup\n * \n * Returns the bounds to be used for the given group and children.\n */\nmxGraph.prototype.getBoundsForGroup = function(group, children, border)\n{\n\tvar result = this.getBoundingBoxFromGeometry(children, true);\n\t\n\tif (result != null)\n\t{\n\t\tif (this.isSwimlane(group))\n\t\t{\n\t\t\tvar size = this.getStartSize(group);\n\t\t\t\n\t\t\tresult.x -= size.width;\n\t\t\tresult.y -= size.height;\n\t\t\tresult.width += size.width;\n\t\t\tresult.height += size.height;\n\t\t}\n\t\t\n\t\t// Adds the border\n\t\tif (border != null)\n\t\t{\n\t\t\tresult.x -= border;\n\t\t\tresult.y -= border;\n\t\t\tresult.width += 2 * border;\n\t\t\tresult.height += 2 * border;\n\t\t}\n\t}\t\t\t\n\t\n\treturn result;\n};\n\n/**\n * Function: createGroupCell\n * \n * Hook for creating the group cell to hold the given array of <mxCells> if\n * no group cell was given to the <group> function.\n * \n * The following code can be used to set the style of new group cells.\n * \n * (code)\n * var graphCreateGroupCell = graph.createGroupCell;\n * graph.createGroupCell = function(cells)\n * {\n *   var group = graphCreateGroupCell.apply(this, arguments);\n *   group.setStyle('group');\n *   \n *   return group;\n * };\n */\nmxGraph.prototype.createGroupCell = function(cells)\n{\n\tvar group = new mxCell('');\n\tgroup.setVertex(true);\n\tgroup.setConnectable(false);\n\t\n\treturn group;\n};\n\n/**\n * Function: ungroupCells\n * \n * Ungroups the given cells by moving the children the children to their\n * parents parent and removing the empty groups. Returns the children that\n * have been removed from the groups.\n * \n * Parameters:\n * \n * cells - Array of cells to be ungrouped. If null is specified then the\n * selection cells are used.\n */\nmxGraph.prototype.ungroupCells = function(cells)\n{\n\tvar result = [];\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\n\t\t// Finds the cells with children\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getChildCount(cells[i]) > 0)\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\n\t\tcells = tmp;\n\t}\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tchildren = children.slice();\n\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\tvar index = this.model.getChildCount(parent);\n\n\t\t\t\t\tthis.cellsAdded(children, parent, index, null, null, true);\n\t\t\t\t\tresult = result.concat(children);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.removeCellsAfterUngroup(cells);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNGROUP_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: removeCellsAfterUngroup\n * \n * Hook to remove the groups after <ungroupCells>.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> that were ungrouped.\n */\nmxGraph.prototype.removeCellsAfterUngroup = function(cells)\n{\n\tthis.cellsRemoved(this.addAllEdges(cells));\n};\n\n/**\n * Function: removeCellsFromParent\n * \n * Removes the specified cells from their parents and adds them to the\n * default parent. Returns the cells that were removed from their parents.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from their parents.\n */\nmxGraph.prototype.removeCellsFromParent = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar parent = this.getDefaultParent();\n\t\tvar index = this.model.getChildCount(parent);\n\n\t\tthis.cellsAdded(cells, parent, index, null, null, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS_FROM_PARENT, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given groups to include all children and returns\n * the passed-in cells. Call this with the groups in parent to child order,\n * top-most group first, the cells are processed in reverse order and cells\n * with no children are ignored.\n * \n * Parameters:\n * \n * cells - The groups whose bounds should be updated. If this is null, then\n * the selection cells are used.\n * border - Optional border to be added in the group. Default is 0.\n * moveGroup - Optional boolean that allows the group to be moved. Default\n * is false.\n * topBorder - Optional top border to be added in the group. Default is 0.\n * rightBorder - Optional top border to be added in the group. Default is 0.\n * bottomBorder - Optional top border to be added in the group. Default is 0.\n * leftBorder - Optional top border to be added in the group. Default is 0.\n */\nmxGraph.prototype.updateGroupBounds = function(cells, border, moveGroup, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tborder = (border != null) ? border : 0;\n\tmoveGroup = (moveGroup != null) ? moveGroup : false;\n\ttopBorder = (topBorder != null) ? topBorder : 0;\n\trightBorder = (rightBorder != null) ? rightBorder : 0;\n\tbottomBorder = (bottomBorder != null) ? bottomBorder : 0;\n\tleftBorder = (leftBorder != null) ? leftBorder : 0;\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = cells.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar children = this.getChildCells(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.getBoundingBoxFromGeometry(children, true);\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null && bounds.width > 0 && bounds.height > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar left = 0;\n\t\t\t\t\t\tvar top = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Adds the size of the title area for swimlanes\n\t\t\t\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar size = this.getStartSize(cells[i]);\n\t\t\t\t\t\t\tleft = size.width;\n\t\t\t\t\t\t\ttop = size.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (moveGroup)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = Math.round(geo.x + bounds.x - border - left - leftBorder);\n\t\t\t\t\t\t\tgeo.y = Math.round(geo.y + bounds.y - border - top - topBorder);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo.width = Math.round(bounds.width + 2 * border + left + leftBorder + rightBorder);\n\t\t\t\t\t\tgeo.height = Math.round(bounds.height + 2 * border + top + topBorder + bottomBorder);\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\tthis.moveCells(children, border + left - bounds.x + leftBorder,\n\t\t\t\t\t\t\t\tborder + top - bounds.y + topBorder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box for the given array of <mxCells>. The bounding box for\n * each cell and its descendants is computed using <mxGraphView.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraph.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.isVertex(cells[i]) || this.model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar bbox = this.view.getBoundingBox(this.view.getState(cells[i]), true);\n\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Group: Cell cloning, insertion and removal\n */\n\n/**\n * Function: cloneCell\n * \n * Returns the clone for the given cell. Uses <cloneCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCell = function(cell, allowInvalidEdges, mapping, keepPosition)\n{\n\treturn this.cloneCells([cell], allowInvalidEdges, mapping, keepPosition)[0];\n};\n\n/**\n * Function: cloneCells\n * \n * Returns the clones for the given cells. The clones are created recursively\n * using <mxGraphModel.cloneCells>. If the terminal of an edge is not in the\n * given array, then the respective end is assigned a terminal point and the\n * terminal is removed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCells = function(cells, allowInvalidEdges, mapping, keepPosition)\n{\n\tallowInvalidEdges = (allowInvalidEdges != null) ? allowInvalidEdges : true;\n\tvar clones = null;\n\t\n\tif (cells != null)\n\t{\n\t\t// Creates a dictionary for fast lookups\n\t\tvar dict = new mxDictionary();\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar trans = this.view.translate;\n\t\t\tclones = this.model.cloneCells(cells, true, mapping);\n\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!allowInvalidEdges && this.model.isEdge(clones[i]) &&\n\t\t\t\t\tthis.getEdgeValidationError(clones[i],\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], true),\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], false)) != null)\n\t\t\t\t{\n\t\t\t\t\tclones[i] = null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar g = this.model.getGeometry(clones[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(this.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null && pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = (keepPosition) ? 0 : pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = (keepPosition) ? 0 : pstate.origin.y;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isEdge(clones[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (pts != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Checks if the source is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (src == null && pts[0] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - trans.y), true);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Checks if the target is cloned or sets the terminal point\n\t\t\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (trg == null && pts[n] != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - trans.y), false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// Translates the control points\n\t\t\t\t\t\t\t\t\tvar points = g.points;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (points != null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tfor (var j = 0; j < points.length; j++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].x += dx;\n\t\t\t\t\t\t\t\t\t\t\tpoints[j].y += dy;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tg.translate(dx, dy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones = [];\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\n/**\n * Function: insertVertex\n * \n * Adds a new vertex into the given parent <mxCell> using value as the user\n * object and the given coordinates as the <mxGeometry> of the new vertex.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * When adding new vertices from a mouse event, one should take into\n * account the offset of the graph container and the scale and translation\n * of the view in order to find the correct unscaled, untranslated\n * coordinates using <mxGraph.getPointForEvent> as follows:\n * \n * (code)\n * var pt = graph.getPointForEvent(evt);\n * var parent = graph.getDefaultParent();\n * graph.insertVertex(parent, null,\n * \t\t\t'Hello, World!', x, y, 220, 30);\n * (end)\n * \n * For adding image cells, the style parameter can be assigned as\n * \n * (code)\n * stylename;image=imageUrl\n * (end)\n * \n * See <mxGraph> for more information on using images.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new vertex.\n * id - Optional string that defines the Id of the new vertex.\n * value - Object to be used as the user object.\n * x - Integer that defines the x coordinate of the vertex.\n * y - Integer that defines the y coordinate of the vertex.\n * width - Integer that defines the width of the vertex.\n * height - Integer that defines the height of the vertex.\n * style - Optional string that defines the cell style.\n * relative - Optional boolean that specifies if the geometry is relative.\n * Default is false.\n */\nmxGraph.prototype.insertVertex = function(parent, id, value,\n\tx, y, width, height, style, relative)\n{\n\tvar vertex = this.createVertex(parent, id, value, x, y, width, height, style, relative);\n\n\treturn this.addCell(vertex, parent);\n};\n\n/**\n * Function: createVertex\n * \n * Hook method that creates the new vertex for <insertVertex>.\n */\nmxGraph.prototype.createVertex = function(parent, id, value,\n\t\tx, y, width, height, style, relative)\n{\n\t// Creates the geometry for the vertex\n\tvar geometry = new mxGeometry(x, y, width, height);\n\tgeometry.relative = (relative != null) ? relative : false;\n\t\n\t// Creates the vertex\n\tvar vertex = new mxCell(value, geometry, style);\n\tvertex.setId(id);\n\tvertex.setVertex(true);\n\tvertex.setConnectable(true);\n\t\n\treturn vertex;\n};\n\t\n/**\n * Function: insertEdge\n * \n * Adds a new edge into the given parent <mxCell> using value as the user\n * object and the given source and target as the terminals of the new edge.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new edge.\n * id - Optional string that defines the Id of the new edge.\n * value - JavaScript object to be used as the user object.\n * source - <mxCell> that defines the source of the edge.\n * target - <mxCell> that defines the target of the edge.\n * style - Optional string that defines the cell style.\n */\nmxGraph.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tvar edge = this.createEdge(parent, id, value, source, target, style);\n\t\n\treturn this.addEdge(edge, parent, source, target);\n};\n\n/**\n * Function: createEdge\n * \n * Hook method that creates the new edge for <insertEdge>. This\n * implementation does not set the source and target of the edge, these\n * are set when the edge is added to the model.\n * \n */\nmxGraph.prototype.createEdge = function(parent, id, value, source, target, style)\n{\n\t// Creates the edge\n\tvar edge = new mxCell(value, new mxGeometry(), style);\n\tedge.setId(id);\n\tedge.setEdge(true);\n\tedge.geometry.relative = true;\n\t\n\treturn edge;\n};\n\n/**\n * Function: addEdge\n * \n * Adds the edge to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the edge that was\n * added.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n * index - Optional index to insert the cells at. Default is to append.\n */\nmxGraph.prototype.addEdge = function(edge, parent, source, target, index)\n{\n\treturn this.addCell(edge, parent, index, source, target);\n};\n\n/**\n * Function: addCell\n * \n * Adds the cell to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the cell that was\n * added.\n * \n * Parameters:\n * \n * cell - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.addCell = function(cell, parent, index, source, target)\n{\n\treturn this.addCells([cell], parent, index, source, target)[0];\n};\n\n/**\n * Function: addCells\n * \n * Adds the cells to the parent at the given index, connecting each cell to\n * the optional source and target terminal. The change is carried out using\n * <cellsAdded>. This method fires <mxEvent.ADD_CELLS> while the\n * transaction is in progress. Returns the cells that were added.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be inserted.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional source <mxCell> for all inserted cells.\n * target - Optional target <mxCell> for all inserted cells.\n */\nmxGraph.prototype.addCells = function(cells, parent, index, source, target)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getDefaultParent();\n\t}\n\t\n\tif (index == null)\n\t{\n\t\tindex = this.model.getChildCount(parent);\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsAdded(cells, parent, index, source, target, false, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_CELLS, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsAdded\n * \n * Adds the specified cells to the given parent. This method fires\n * <mxEvent.CELLS_ADDED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsAdded = function(cells, parent, index, source, target, absolute, constrain, extend)\n{\n\tif (cells != null && parent != null && index != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar parentState = (absolute) ? this.view.getState(parent) : null;\n\t\t\tvar o1 = (parentState != null) ? parentState.origin : null;\n\t\t\tvar zero = new mxPoint(0, 0);\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] == null)\n\t\t\t\t{\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar previous = this.model.getParent(cells[i]);\n\t\n\t\t\t\t\t// Keeps the cell at its absolute location\n\t\t\t\t\tif (o1 != null && cells[i] != parent && parent != previous)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar oldState = this.view.getState(previous);\n\t\t\t\t\t\tvar o2 = (oldState != null) ? oldState.origin : zero;\n\t\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = o2.x - o1.x;\n\t\t\t\t\t\t\tvar dy = o2.y - o1.y;\n\t\n\t\t\t\t\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t\t\t\t\t// to avoid forward references in sessions.\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.translate(dx, dy);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!geo.relative && this.model.isVertex(cells[i]) &&\n\t\t\t\t\t\t\t\t!this.isAllowNegativeCoordinates())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\t\t\t\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Decrements all following indices\n\t\t\t\t\t// if cell is already in parent\n\t\t\t\t\tif (parent == previous && index + i > this.model.getChildCount(parent))\n\t\t\t\t\t{\n\t\t\t\t\t\tindex--;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.add(parent, cells[i], index + i);\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoSizeCellsOnAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.autoSizeCell(cells[i], true);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Extends the parent or constrains the child\n\t\t\t\t\tif ((extend == null || extend) &&\n\t\t\t\t\t\tthis.isExtendParentsOnAdd(cells[i]) && this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Additionally constrains the child after extending the parent\n\t\t\t\t\tif (constrain == null || constrain)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the source terminal\n\t\t\t\t\tif (source != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], source, true);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the target terminal\n\t\t\t\t\tif (target != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], target, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ADDED, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target,\n\t\t\t\t'absolute', absolute));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: autoSizeCell\n * \n * Resizes the specified cell to just fit around the its label and/or children\n * \n * Parameters:\n * \n * cell - <mxCells> to be resized.\n * recurse - Optional boolean which specifies if all descendants should be\n * autosized. Default is true.\n */\nmxGraph.prototype.autoSizeCell = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tif (recurse)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.autoSizeCell(this.model.getChildAt(cell, i));\n\t\t}\n\t}\n\n\tif (this.getModel().isVertex(cell) && this.isAutoSizeCell(cell))\n\t{\n\t\tthis.updateCellSize(cell);\n\t}\n};\n\n/**\n * Function: removeCells\n * \n * Removes the given cells from the graph including all connected edges if\n * includeEdges is true. The change is carried out using <cellsRemoved>.\n * This method fires <mxEvent.REMOVE_CELLS> while the transaction is in\n * progress. The removed cells are returned as an array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove. If null is specified then the\n * selection cells which are deletable are used.\n * includeEdges - Optional boolean which specifies if all connected edges\n * should be removed as well. Default is true.\n */\nmxGraph.prototype.removeCells = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getDeletableCells(this.getSelectionCells());\n\t}\n\n\t// Adds all edges to the cells\n\tif (includeEdges)\n\t{\n\t\t// FIXME: Remove duplicate cells in result or do not add if\n\t\t// in cells or descendant of cells\n\t\tcells = this.getDeletableCells(this.addAllEdges(cells));\n\t}\n\telse\n\t{\n\t\tcells = cells.slice();\n\t\t\n\t\t// Removes edges that are currently not\n\t\t// visible as those cannot be updated\n\t\tvar edges = this.getDeletableCells(this.getAllEdges(cells));\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.view.getState(edges[i]) == null &&\n\t\t\t\t!dict.get(edges[i]))\n\t\t\t{\n\t\t\t\tdict.put(edges[i], true);\n\t\t\t\tcells.push(edges[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsRemoved(cells);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS, \n\t\t\t\t'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: cellsRemoved\n * \n * Removes the given cells from the model. This method fires\n * <mxEvent.CELLS_REMOVED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove.\n */\nmxGraph.prototype.cellsRemoved = function(cells)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar scale = this.view.scale;\n\t\tvar tr = this.view.translate;\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Creates hashtable for faster lookup\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\t// Disconnects edges which are not being removed\n\t\t\t\tvar edges = this.getAllEdges([cells[i]]);\n\t\t\t\t\n\t\t\t\tvar disconnectTerminal = mxUtils.bind(this, function(edge, source)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(edge);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Checks if terminal is being removed\n\t\t\t\t\t\tvar terminal = this.model.getTerminal(edge, source);\n\t\t\t\t\t\tvar connected = false;\n\t\t\t\t\t\tvar tmp = terminal;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (cells[i] == tmp)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnected = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttmp = this.model.getParent(tmp);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (connected)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tvar state = this.view.getState(edge);\n\n\t\t\t\t\t\t\tif (state != null && state.absolutePoints != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\tvar n = (source) ? 0 : pts.length - 1;\n\n\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\tpts[n].x / scale - tr.x - state.origin.x,\n\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y - state.origin.y), source);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Fallback to center of terminal if routing\n\t\t\t\t\t\t\t\t// points are not available to add new point\n\t\t\t\t\t\t\t\t// KNOWN: Should recurse to find parent offset\n\t\t\t\t\t\t\t\t// of edge for nested groups but invisible edges\n\t\t\t\t\t\t\t\t// should be removed in removeCells step\n\t\t\t\t\t\t\t\tvar tstate = this.view.getState(terminal);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tstate != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterX() / scale - tr.x,\n\t\t\t\t\t\t\t\t\t\ttstate.getCenterY() / scale - tr.y), source);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t\t\t\tthis.model.setTerminal(edge, null, source);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (!dict.get(edges[j]))\n\t\t\t\t\t{\n\t\t\t\t\t\tdict.put(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.model.remove(cells[i]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_REMOVED, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: splitEdge\n * \n * Splits the given edge by adding the newEdge between the previous source\n * and the given cell and reconnecting the source of the given edge to the\n * given cell. This method fires <mxEvent.SPLIT_EDGE> while the transaction\n * is in progress. Returns the new edge that was inserted.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that represents the cells to insert into the edge.\n * newEdge - <mxCell> that represents the edge to be inserted.\n * dx - Optional integer that specifies the vector to move the cells.\n * dy - Optional integer that specifies the vector to move the cells.\n */\nmxGraph.prototype.splitEdge = function(edge, cells, newEdge, dx, dy)\n{\n\tdx = dx || 0;\n\tdy = dy || 0;\n\n\tvar parent = this.model.getParent(edge);\n\tvar source = this.model.getTerminal(edge, true);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tif (newEdge == null)\n\t\t{\n\t\t\tnewEdge = this.cloneCell(edge);\n\t\t\t\n\t\t\t// Removes waypoints before/after new cell\n\t\t\tvar state = this.view.getState(edge);\n\t\t\tvar geo = this.getCellGeometry(newEdge);\n\t\t\t\n\t\t\tif (geo != null && geo.points != null && state != null)\n\t\t\t{\n\t\t\t\tvar t = this.view.translate;\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar idx = mxUtils.findNearestSegment(state, (dx + t.x) * s, (dy + t.y) * s);\n\t\t\t\tgeo.points = geo.points.slice(0, idx);\n\t\t\t\t\t\t\t\t\n\t\t\t\tgeo = this.getCellGeometry(edge);\n\t\t\t\t\n\t\t\t\tif (geo != null && geo.points != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.points = geo.points.slice(idx);\n\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.cellsMoved(cells, dx, dy, false, false);\n\t\tthis.cellsAdded(cells, parent, this.model.getChildCount(parent), null, null,\n\t\t\t\ttrue);\n\t\tthis.cellsAdded([newEdge], parent, this.model.getChildCount(parent),\n\t\t\t\tsource, cells[0], false);\n\t\tthis.cellConnected(edge, cells[0], true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SPLIT_EDGE, 'edge', edge,\n\t\t\t\t'cells', cells, 'newEdge', newEdge, 'dx', dx, 'dy', dy));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn newEdge;\n};\n\n/**\n * Group: Cell visibility\n */\n\n/**\n * Function: toggleCells\n * \n * Sets the visible state of the specified cells and all connected edges\n * if includeEdges is true. The change is carried out using <cellsToggled>.\n * This method fires <mxEvent.TOGGLE_CELLS> while the transaction is in\n * progress. Returns the cells whose visible state was changed.\n * \n * Parameters:\n * \n * show - Boolean that specifies the visible state to be assigned.\n * cells - Array of <mxCells> whose visible state should be changed. If\n * null is specified then the selection cells are used.\n * includeEdges - Optional boolean indicating if the visible state of all\n * connected edges should be changed as well. Default is true.\n */\nmxGraph.prototype.toggleCells = function(show, cells, includeEdges)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\n\t// Adds all connected edges recursively\n\tif (includeEdges)\n\t{\n\t\tcells = this.addAllEdges(cells);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsToggled(cells, show);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.TOGGLE_CELLS,\n\t\t\t'show', show, 'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsToggled\n * \n * Sets the visible state of the specified cells.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose visible state should be changed.\n * show - Boolean that specifies the visible state to be assigned.\n */\nmxGraph.prototype.cellsToggled = function(cells, show)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setVisible(cells[i], show);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Folding\n */\n\n/**\n * Function: foldCells\n * \n * Sets the collapsed state of the specified cells and all descendants\n * if recurse is true. The change is carried out using <cellsFolded>.\n * This method fires <mxEvent.FOLD_CELLS> while the transaction is in\n * progress. Returns the cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Optional boolean indicating if the collapsed state of all\n * descendants should be set. Default is false.\n * cells - Array of <mxCells> whose collapsed state should be set. If\n * null is specified then the foldable selection cells are used.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n * evt - Optional native event that triggered the invocation.\n */\nmxGraph.prototype.foldCells = function(collapse, recurse, cells, checkFoldable, evt)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getFoldableCells(this.getSelectionCells(), collapse);\n\t}\n\n\tthis.stopEditing(false);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsFolded(cells, collapse, recurse, checkFoldable);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FOLD_CELLS,\n\t\t\t'collapse', collapse, 'recurse', recurse, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsFolded\n * \n * Sets the collapsed state of the specified cells. This method fires\n * <mxEvent.CELLS_FOLDED> while the transaction is in progress. Returns the\n * cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose collapsed state should be set.\n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Boolean indicating if the collapsed state of all descendants\n * should be set.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n */\nmxGraph.prototype.cellsFolded = function(cells, collapse, recurse, checkFoldable)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif ((!checkFoldable || this.isCellFoldable(cells[i], collapse)) &&\n\t\t\t\t\tcollapse != this.isCellCollapsed(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.model.setCollapsed(cells[i], collapse);\n\t\t\t\t\tthis.swapBounds(cells[i], collapse);\n\n\t\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recurse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\t\tthis.cellsFolded(children, collapse, recurse);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_FOLDED,\n\t\t\t\t'cells', cells, 'collapse', collapse, 'recurse', recurse));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swapBounds\n * \n * Swaps the alternate and the actual bounds in the geometry of the given\n * cell invoking <updateAlternateBounds> before carrying out the swap.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the bounds should be swapped.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.swapBounds = function(cell, willCollapse)\n{\n\tif (cell != null)\n\t{\n\t\tvar geo = this.model.getGeometry(cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tthis.updateAlternateBounds(cell, geo, willCollapse);\n\t\t\tgeo.swap();\n\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateAlternateBounds\n * \n * Updates or sets the alternate bounds in the given geometry for the given\n * cell depending on whether the cell is going to be collapsed. If no\n * alternate bounds are defined in the geometry and\n * <collapseToPreferredSize> is true, then the preferred size is used for\n * the alternate bounds. The top, left corner is always kept at the same\n * location.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the geometry is being udpated.\n * g - <mxGeometry> for which the alternate bounds should be updated.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.updateAlternateBounds = function(cell, geo, willCollapse)\n{\n\tif (cell != null && geo != null)\n\t{\n\t\tvar state = this.view.getState(cell);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\t\tif (geo.alternateBounds == null)\n\t\t{\n\t\t\tvar bounds = geo;\n\t\t\t\n\t\t\tif (this.collapseToPreferredSize)\n\t\t\t{\n\t\t\t\tvar tmp = this.getPreferredSizeForCell(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tbounds = tmp;\n\n\t\t\t\t\tvar startSize = mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE);\n\n\t\t\t\t\tif (startSize > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbounds.height = Math.max(bounds.height, startSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tgeo.alternateBounds = new mxRectangle(0, 0, bounds.width, bounds.height);\n\t\t}\n\t\t\n\t\tif (geo.alternateBounds != null)\n\t\t{\n\t\t\tgeo.alternateBounds.x = geo.x;\n\t\t\tgeo.alternateBounds.y = geo.y;\n\t\t\t\n\t\t\tvar alpha = mxUtils.toRadians(style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar dx = geo.alternateBounds.getCenterX() - geo.getCenterX();\n\t\t\t\tvar dy = geo.alternateBounds.getCenterY() - geo.getCenterY();\n\t\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\n\t\t\t\tvar dx2 = cos * dx - sin * dy;\n\t\t\t\tvar dy2 = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tgeo.alternateBounds.x += dx2 - dx;\n\t\t\t\tgeo.alternateBounds.y += dy2 - dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: addAllEdges\n * \n * Returns an array with the given cells and all edges that are connected\n * to a cell or one of its descendants.\n */\nmxGraph.prototype.addAllEdges = function(cells)\n{\n\tvar allCells = cells.slice();\n\t\n\treturn mxUtils.removeDuplicates(allCells.concat(this.getAllEdges(cells)));\n};\n\n/**\n * Function: getAllEdges\n * \n * Returns all edges connected to the given cells or its descendants.\n */\nmxGraph.prototype.getAllEdges = function(cells)\n{\n\tvar edges = [];\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar edgeCount = this.model.getEdgeCount(cells[i]);\n\t\t\t\n\t\t\tfor (var j = 0; j < edgeCount; j++)\n\t\t\t{\n\t\t\t\tedges.push(this.model.getEdgeAt(cells[i], j));\n\t\t\t}\n\n\t\t\t// Recurses\n\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\tedges = edges.concat(this.getAllEdges(children));\n\t\t}\n\t}\n\t\n\treturn edges;\n};\n\n/**\n * Group: Cell sizing\n */\n\n/**\n * Function: updateCellSize\n * \n * Updates the size of the given cell in the model using <cellSizeUpdated>.\n * This method fires <mxEvent.UPDATE_CELL_SIZE> while the transaction is in\n * progress. Returns the cell whose size was updated.\n * \n * Parameters:\n * \n * cell - <mxCell> whose size should be updated.\n */\nmxGraph.prototype.updateCellSize = function(cell, ignoreChildren)\n{\n\tignoreChildren = (ignoreChildren != null) ? ignoreChildren : false;\n\t\n\tthis.model.beginUpdate();\t\t\t\t\n\ttry\n\t{\n\t\tthis.cellSizeUpdated(cell, ignoreChildren);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UPDATE_CELL_SIZE,\n\t\t\t\t'cell', cell, 'ignoreChildren', ignoreChildren));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellSizeUpdated\n * \n * Updates the size of the given cell in the model using\n * <getPreferredSizeForCell> to get the new size.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the size should be changed.\n */\nmxGraph.prototype.cellSizeUpdated = function(cell, ignoreChildren)\n{\n\tif (cell != null)\n\t{\n\t\tthis.model.beginUpdate();\t\t\t\t\n\t\ttry\n\t\t{\n\t\t\tvar size = this.getPreferredSizeForCell(cell);\n\t\t\tvar geo = this.model.getGeometry(cell);\n\t\t\t\n\t\t\tif (size != null && geo != null)\n\t\t\t{\n\t\t\t\tvar collapsed = this.isCellCollapsed(cell);\n\t\t\t\tgeo = geo.clone();\n\n\t\t\t\tif (this.isSwimlane(cell))\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cell);\n\t\t\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\t\t\t\tvar cellStyle = this.model.getStyle(cell);\n\n\t\t\t\t\tif (cellStyle == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.height + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = size.height + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.width + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = size.width + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.setStyle(cell, cellStyle);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cell) || this.view.createState(cell);\n\t\t\t\t\tvar align = (state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER);\n\t\t\t\t\t\n\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += geo.width - size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse if (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.x += Math.round((geo.width - size.width) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar valign = this.getVerticalAlign(state);\n\t\t\t\t\t\n\t\t\t\t\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += geo.height - size.height;\n\t\t\t\t\t}\n\t\t\t\t\telse if (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.y += Math.round((geo.height - size.height) / 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t}\n\n\t\t\t\tif (!ignoreChildren && !collapsed)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.view.getBounds(this.model.getChildren(cell));\n\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tr = this.view.translate;\n\t\t\t\t\t\tvar scale = this.view.scale;\n\n\t\t\t\t\t\tvar width = (bounds.x + bounds.width) / scale - geo.x - tr.x;\n\t\t\t\t\t\tvar height = (bounds.y + bounds.height) / scale - geo.y - tr.y;\n\n\t\t\t\t\t\tgeo.width = Math.max(geo.width, width);\n\t\t\t\t\t\tgeo.height = Math.max(geo.height, height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.cellsResized([cell], [geo], false);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getPreferredSizeForCell\n * \n * Returns the preferred width and height of the given <mxCell> as an\n * <mxRectangle>. To implement a minimum width, add a new style eg.\n * minWidth in the vertex and override this method as follows.\n * \n * (code)\n * var graphGetPreferredSizeForCell = graph.getPreferredSizeForCell;\n * graph.getPreferredSizeForCell = function(cell)\n * {\n *   var result = graphGetPreferredSizeForCell.apply(this, arguments);\n *   var style = this.getCellStyle(cell);\n *   \n *   if (style['minWidth'] > 0)\n *   {\n *     result.width = Math.max(style['minWidth'], result.width);\n *   }\n * \n *   return result;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> for which the preferred size should be returned.\n */\nmxGraph.prototype.getPreferredSizeForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar state = this.view.getState(cell) || this.view.createState(cell);\n\t\tvar style = state.style;\n\n\t\tif (!this.model.isEdge(cell))\n\t\t{\n\t\t\tvar fontSize = style[mxConstants.STYLE_FONTSIZE] || mxConstants.DEFAULT_FONTSIZE;\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t\t// Adds dimension of image if shape is a label\n\t\t\tif (this.getImage(state) != null || style[mxConstants.STYLE_IMAGE] != null)\n\t\t\t{\n\t\t\t\tif (style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_LABEL)\n\t\t\t\t{\n\t\t\t\t\tif (style[mxConstants.STYLE_VERTICAL_ALIGN] == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx += parseFloat(style[mxConstants.STYLE_IMAGE_WIDTH]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (style[mxConstants.STYLE_ALIGN] != mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy += parseFloat(style[mxConstants.STYLE_IMAGE_HEIGHT]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adds spacings\n\t\t\tdx += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdx += style[mxConstants.STYLE_SPACING_LEFT] || 0;\n\t\t\tdx += style[mxConstants.STYLE_SPACING_RIGHT] || 0;\n\n\t\t\tdy += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdy += style[mxConstants.STYLE_SPACING_TOP] || 0;\n\t\t\tdy += style[mxConstants.STYLE_SPACING_BOTTOM] || 0;\n\t\t\t\n\t\t\t// Add spacing for collapse/expand icon\n\t\t\t// LATER: Check alignment and use constants\n\t\t\t// for image spacing\n\t\t\tvar image = this.getFoldingImage(state);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\tdx += image.width + 8;\n\t\t\t}\n\n\t\t\t// Adds space for label\n\t\t\tvar value = this.cellRenderer.getLabelValue(state);\n\n\t\t\tif (value != null && value.length > 0)\n\t\t\t{\n\t\t\t\tif (!this.isHtmlLabel(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvalue = mxUtils.htmlEntities(value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = value.replace(/\\n/g, '<br>');\n\t\t\t\t\n\t\t\t\tvar size = mxUtils.getSizeForString(value, fontSize, style[mxConstants.STYLE_FONTFAMILY]);\n\t\t\t\tvar width = size.width + dx;\n\t\t\t\tvar height = size.height + dy;\n\t\t\t\t\n\t\t\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tvar tmp = height;\n\t\t\t\t\t\n\t\t\t\t\theight = width;\n\t\t\t\t\twidth = tmp;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (this.gridEnabled)\n\t\t\t\t{\n\t\t\t\t\twidth = this.snap(width + this.gridSize / 2);\n\t\t\t\t\theight = this.snap(height + this.gridSize / 2);\n\t\t\t\t}\n\n\t\t\t\tresult = new mxRectangle(0, 0, width, height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gs2 = 4 * this.gridSize;\n\t\t\t\tresult = new mxRectangle(0, 0, gs2, gs2);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: resizeCell\n * \n * Sets the bounds of the given cell using <resizeCells>. Returns the\n * cell which was passed to the function.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangle> that represents the new bounds.\n */\nmxGraph.prototype.resizeCell = function(cell, bounds, recurse)\n{\n\treturn this.resizeCells([cell], [bounds], recurse)[0];\n};\n\n/**\n * Function: resizeCells\n * \n * Sets the bounds of the given cells and fires a <mxEvent.RESIZE_CELLS>\n * event while the transaction is in progress. Returns the cells which\n * have been passed to the function.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n */\nmxGraph.prototype.resizeCells = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : this.isRecursiveResize();\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsResized(cells, bounds, recurse);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_CELLS,\n\t\t\t\t'cells', cells, 'bounds', bounds));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsResized\n * \n * Sets the bounds of the given cells and fires a <mxEvent.CELLS_RESIZED>\n * event. If <extendParents> is true, then the parent is extended if a\n * child size is changed so that it overlaps with the parent.\n * \n * The following example shows how to control group resizes to make sure\n * that all child cells stay within the group.\n * \n * (code)\n * graph.addListener(mxEvent.CELLS_RESIZED, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n *   \n *   if (cells != null)\n *   {\n *     for (var i = 0; i < cells.length; i++)\n *     {\n *       if (graph.getModel().getChildCount(cells[i]) > 0)\n *       {\n *         var geo = graph.getCellGeometry(cells[i]);\n *         \n *         if (geo != null)\n *         {\n *           var children = graph.getChildCells(cells[i], true, true);\n *           var bounds = graph.getBoundingBoxFromGeometry(children, true);\n *           \n *           geo = geo.clone();\n *           geo.width = Math.max(geo.width, bounds.width);\n *           geo.height = Math.max(geo.height, bounds.height);\n *           \n *           graph.getModel().setGeometry(cells[i], geo);\n *         }\n *       }\n *     }\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellsResized = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tif (cells != null && bounds != null && cells.length == bounds.length)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.cellResized(cells[i], bounds[i], false, recurse);\n\n\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnResize)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_RESIZED,\n\t\t\t\t\t'cells', cells, 'bounds', bounds));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: cellResized\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangles> that represent the new bounds.\n * ignoreRelative - Boolean that indicates if relative cells should be ignored.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellResized = function(cell, bounds, ignoreRelative, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null && (geo.x != bounds.x || geo.y != bounds.y ||\n\t\tgeo.width != bounds.width || geo.height != bounds.height))\n\t{\n\t\tgeo = geo.clone();\n\n\t\tif (!ignoreRelative && geo.relative)\n\t\t{\n\t\t\tvar offset = geo.offset;\n\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\toffset.x += bounds.x - geo.x;\n\t\t\t\toffset.y += bounds.y - geo.y;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.x = bounds.x;\n\t\t\tgeo.y = bounds.y;\n\t\t}\n\n\t\tgeo.width = bounds.width;\n\t\tgeo.height = bounds.height;\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (recurse)\n\t\t\t{\n\t\t\t\tthis.resizeChildCells(cell, geo);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\tthis.constrainChildCells(cell);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeChildCells\n * \n * Resizes the child cells of the given cell for the given new geometry with\n * respect to the current geometry of the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n * newGeo - <mxGeometry> that represents the new bounds.\n */\nmxGraph.prototype.resizeChildCells = function(cell, newGeo)\n{\n\tvar geo = this.model.getGeometry(cell);\n\tvar dx = newGeo.width / geo.width;\n\tvar dy = newGeo.height / geo.height;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.scaleCell(this.model.getChildAt(cell, i), dx, dy, true);\n\t}\n};\n\n/**\n * Function: constrainChildCells\n * \n * Constrains the children of the given cell using <constrainChild>.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.constrainChildCells = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.constrainChild(this.model.getChildAt(cell, i));\n\t}\n};\n\n/**\n * Function: scaleCell\n * \n * Scales the points, position and size of the given cell according to the\n * given vertical and horizontal scaling factors.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be scaled.\n * dx - Horizontal scaling factor.\n * dy - Vertical scaling factor.\n * recurse - Boolean indicating if the child cells should be scaled.\n */\nmxGraph.prototype.scaleCell = function(cell, dx, dy, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tvar state = this.view.getState(cell);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\t\n\t\tgeo = geo.clone();\n\t\t\n\t\t// Stores values for restoring based on style\n\t\tvar x = geo.x;\n\t\tvar y = geo.y\n\t\tvar w = geo.width;\n\t\tvar h = geo.height;\n\t\t\n\t\tgeo.scale(dx, dy, style[mxConstants.STYLE_ASPECT] == 'fixed');\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_WIDTH] == '1')\n\t\t{\n\t\t\tgeo.width = w * dx;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_WIDTH] == '0')\n\t\t{\n\t\t\tgeo.width = w;\n\t\t}\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_HEIGHT] == '1')\n\t\t{\n\t\t\tgeo.height = h * dy;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_HEIGHT] == '0')\n\t\t{\n\t\t\tgeo.height = h;\n\t\t}\n\t\t\n\t\tif (!this.isCellMovable(cell))\n\t\t{\n\t\t\tgeo.x = x;\n\t\t\tgeo.y = y;\n\t\t}\n\t\t\n\t\tif (!this.isCellResizable(cell))\n\t\t{\n\t\t\tgeo.width = w;\n\t\t\tgeo.height = h;\n\t\t}\n\n\t\tif (this.model.isVertex(cell))\n\t\t{\n\t\t\tthis.cellResized(cell, geo, true, recurse);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendParent\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.extendParent = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\tvar p = this.getCellGeometry(parent);\n\t\t\n\t\tif (parent != null && p != null && !this.isCellCollapsed(parent))\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative &&\n\t\t\t\t(p.width < geo.x + geo.width ||\n\t\t\t\tp.height < geo.y + geo.height))\n\t\t\t{\n\t\t\t\tp = p.clone();\n\t\t\t\t\n\t\t\t\tp.width = Math.max(p.width, geo.x + geo.width);\n\t\t\t\tp.height = Math.max(p.height, geo.y + geo.height);\n\t\t\t\t\n\t\t\t\tthis.cellsResized([parent], [p], false);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Cell moving\n */\n\n/**\n * Function: importCells\n * \n * Clones and inserts the given cells into the graph using the move\n * method and returns the inserted cells. This shortcut is used if\n * cells are inserted via datatransfer.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be imported.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.importCells = function(cells, dx, dy, target, evt, mapping)\n{\t\n\treturn this.moveCells(cells, dx, dy, true, target, evt, mapping);\n};\n\n/**\n * Function: moveCells\n * \n * Moves or clones the specified cells and moves the cells or clones by the\n * given amount, adding them to the optional target cell. The evt is the\n * mouse event as the mouse was released. The change is carried out using\n * <cellsMoved>. This method fires <mxEvent.MOVE_CELLS> while the\n * transaction is in progress. Returns the cells that were moved.\n * \n * Use the following code to move all cells in the graph.\n * \n * (code)\n * graph.moveCells(graph.getChildCells(null, true, true), 10, 10);\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be moved, cloned or added to the target.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * clone - Boolean indicating if the cells should be cloned. Default is false.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.moveCells = function(cells, dx, dy, clone, target, evt, mapping)\n{\n\tdx = (dx != null) ? dx : 0;\n\tdy = (dy != null) ? dy : 0;\n\tclone = (clone != null) ? clone : false;\n\t\n\tif (cells != null && (dx != 0 || dy != 0 || clone || target != null))\n\t{\n\t\t// Removes descendants with ancestors in cells to avoid multiple moving\n\t\tcells = this.model.getTopmostCells(cells);\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Faster cell lookups to remove relative edge labels with selected\n\t\t\t// terminals to avoid explicit and implicit move at same time\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tvar isSelected = mxUtils.bind(this, function(cell)\n\t\t\t{\n\t\t\t\twhile (cell != null)\n\t\t\t\t{\n\t\t\t\t\tif (dict.get(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcell = this.model.getParent(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\t\n\t\t\t// Removes relative edge labels with selected terminals\n\t\t\tvar checked = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\n\t\t\t\tif ((geo == null || !geo.relative) || !this.model.isEdge(parent) ||\n\t\t\t\t\t(!isSelected(this.model.getTerminal(parent, true)) &&\n\t\t\t\t\t!isSelected(this.model.getTerminal(parent, false))))\n\t\t\t\t{\n\t\t\t\t\tchecked.push(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcells = checked;\n\t\t\t\n\t\t\tif (clone)\n\t\t\t{\n\t\t\t\tcells = this.cloneCells(cells, this.isCloneInvalidEdges(), mapping);\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\ttarget = this.getDefaultParent();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t// to avoid forward references in sessions.\n\t\t\t// Need to disable allowNegativeCoordinates if target not null to\n\t\t\t// allow for temporary negative numbers until cellsAdded is called.\n\t\t\tvar previous = this.isAllowNegativeCoordinates();\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tthis.setAllowNegativeCoordinates(true);\n\t\t\t}\n\t\t\t\n\t\t\tthis.cellsMoved(cells, dx, dy, !clone && this.isDisconnectOnMove()\n\t\t\t\t\t&& this.isAllowDanglingEdges(), target == null,\n\t\t\t\t\tthis.isExtendParentsOnMove() && target == null);\n\t\t\t\n\t\t\tthis.setAllowNegativeCoordinates(previous);\n\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tvar index = this.model.getChildCount(target);\n\t\t\t\tthis.cellsAdded(cells, target, index, null, null, true);\n\t\t\t}\n\n\t\t\t// Dispatches a move event\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_CELLS, 'cells', cells,\n\t\t\t\t'dx', dx, 'dy', dy, 'clone', clone, 'target', target, 'event', evt));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsMoved\n * \n * Moves the specified cells by the given vector, disconnecting the cells\n * using disconnectGraph is disconnect is true. This method fires\n * <mxEvent.CELLS_MOVED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsMoved = function(cells, dx, dy, disconnect, constrain, extend)\n{\n\tif (cells != null && (dx != 0 || dy != 0))\n\t{\n\t\textend = (extend != null) ? extend : false;\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (disconnect)\n\t\t\t{\n\t\t\t\tthis.disconnectGraph(cells);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.translateCell(cells[i], dx, dy);\n\t\t\t\t\n\t\t\t\tif (extend && this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\telse if (constrain)\n\t\t\t\t{\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnMove)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_MOVED,\n\t\t\t\t'cells', cells, 'dx', dx, 'dy', dy, 'disconnect', disconnect));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: translateCell\n * \n * Translates the geometry of the given cell and stores the new,\n * translated geometry in the model as an atomic change.\n */\nmxGraph.prototype.translateCell = function(cell, dx, dy)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null)\n\t{\n\t\tdx = parseFloat(dx);\n\t\tdy = parseFloat(dy);\n\t\tgeo = geo.clone();\n\t\tgeo.translate(dx, dy);\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, parseFloat(geo.x));\n\t\t\tgeo.y = Math.max(0, parseFloat(geo.y));\n\t\t}\n\t\t\n\t\tif (geo.relative && !this.model.isEdge(cell))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar angle = 0;\n\t\t\t\n\t\t\tif (this.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(parent);\n\t\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(parent);\n\t\t\t\t\n\t\t\t\tangle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (angle != 0)\n\t\t\t{\n\t\t\t\tvar rad = mxUtils.toRadians(-angle);\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(dx, dy), cos, sin, new mxPoint(0, 0));\n\t\t\t\tdx = pt.x;\n\t\t\t\tdy = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x = parseFloat(geo.offset.x) + dx;\n\t\t\t\tgeo.offset.y = parseFloat(geo.offset.y) + dy;\n\t\t\t}\n\t\t}\n\n\t\tthis.model.setGeometry(cell, geo);\n\t}\n};\n\n/**\n * Function: getCellContainmentArea\n * \n * Returns the <mxRectangle> inside which a cell is to be kept.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the area should be returned.\n */\nmxGraph.prototype.getCellContainmentArea = function(cell)\n{\n\tif (cell != null && !this.model.isEdge(cell))\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\t\n\t\tif (parent != null && parent != this.getDefaultParent())\n\t\t{\n\t\t\tvar g = this.model.getGeometry(parent);\n\t\t\t\n\t\t\tif (g != null)\n\t\t\t{\n\t\t\t\tvar x = 0;\n\t\t\t\tvar y = 0;\n\t\t\t\tvar w = g.width;\n\t\t\t\tvar h = g.height;\n\t\t\t\t\n\t\t\t\tif (this.isSwimlane(parent))\n\t\t\t\t{\n\t\t\t\t\tvar size = this.getStartSize(parent);\n\t\t\t\t\t\n\t\t\t\t\tvar state = this.view.getState(parent);\n\t\t\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(parent);\n\t\t\t\t\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\t\t\t\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_SOUTH || dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = size.width;\n\t\t\t\t\t\tsize.width = size.height;\n\t\t\t\t\t\tsize.height = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((dir == mxConstants.DIRECTION_EAST && !flipV) || (dir == mxConstants.DIRECTION_NORTH && !flipH) ||\n\t\t\t\t\t\t(dir == mxConstants.DIRECTION_WEST && flipV) || (dir == mxConstants.DIRECTION_SOUTH && flipH))\n\t\t\t\t\t{\n\t\t\t\t\t\tx = size.width;\n\t\t\t\t\t\ty = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tw -= size.width;\n\t\t\t\t\th -= size.height;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxRectangle(x, y, w, h);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getMaximumGraphBounds\n * \n * Returns the bounds inside which the diagram should be kept as an\n * <mxRectangle>.\n */\nmxGraph.prototype.getMaximumGraphBounds = function()\n{\n\treturn this.maximumGraphBounds;\n};\n\n/**\n * Function: constrainChild\n * \n * Keeps the given cell inside the bounds returned by\n * <getCellContainmentArea> for its parent, according to the rules defined by\n * <getOverlap> and <isConstrainChild>. This modifies the cell's geometry\n * in-place and does not clone it.\n * \n * Parameters:\n * \n * cells - <mxCell> which should be constrained.\n * sizeFirst - Specifies if the size should be changed first. Default is true.\n */\nmxGraph.prototype.constrainChild = function(cell, sizeFirst)\n{\n\tsizeFirst = (sizeFirst != null) ? sizeFirst : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvar geo = this.getCellGeometry(cell);\n\t\t\n\t\tif (geo != null && (this.isConstrainRelativeChildren() || !geo.relative))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar pgeo = this.getCellGeometry(parent);\n\t\t\tvar max = this.getMaximumGraphBounds();\n\t\t\t\n\t\t\t// Finds parent offset\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar off = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\n\t\t\t\t\tmax.x -= off.x;\n\t\t\t\t\tmax.y -= off.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isConstrainChild(cell))\n\t\t\t{\n\t\t\t\tvar tmp = this.getCellContainmentArea(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tvar overlap = this.getOverlap(cell);\n\t\n\t\t\t\t\tif (overlap > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\t\n\t\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Find the intersection between max and tmp\n\t\t\t\t\tif (max == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar cells = [cell];\n\t\t\t\t\n\t\t\t\tif (!this.isCellCollapsed(cell))\n\t\t\t\t{\n\t\t\t\t\tvar desc = this.model.getDescendants(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < desc.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellVisible(desc[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcells.push(desc[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bbox = this.getBoundingBoxFromGeometry(cells, false);\n\t\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative horizontal movement\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.width > max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = geo.width - max.width;\n\t\t\t\t\t\tgeo.width -= dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x + bbox.width > max.x + max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x + bbox.width - max.x - max.width - dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative vertical movement\n\t\t\t\t\tvar dy = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.height > max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = geo.height - max.height;\n\t\t\t\t\t\tgeo.height -= dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y + bbox.height > max.y + max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y + bbox.height - max.y - max.height - dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x < max.x)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x - max.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y < max.y)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y - max.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Relative geometries are moved via absolute offset\n\t\t\t\t\t\t\tif (geo.offset == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.offset = new mxPoint();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tgeo.offset.x += dx;\n\t\t\t\t\t\t\tgeo.offset.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x += dx;\n\t\t\t\t\t\t\tgeo.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdges\n * \n * Resets the control points of the edges that are connected to the given\n * cells if not both ends of the edge are in the given cells array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> for which the connected edges should be\n * reset.\n */\nmxGraph.prototype.resetEdges = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\t// Prepares faster cells lookup\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar edges = this.model.getEdges(cells[i]);\n\t\t\t\t\n\t\t\t\tif (edges != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(edges[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[j], true);\n\t\t\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[j], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if one of the terminals is not in the given array\n\t\t\t\t\t\tif (!dict.get(source) || !dict.get(target))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.resetEdge(edges[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.resetEdges(this.model.getChildren(cells[i]));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdge\n * \n * Resets the control points of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose points should be reset.\n */\nmxGraph.prototype.resetEdge = function(edge)\n{\n\tvar geo = this.model.getGeometry(edge);\n\t\n\t// Resets the control points\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tgeo = geo.clone();\n\t\tgeo.points = [];\n\t\tthis.model.setGeometry(edge, geo);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Group: Cell connecting and connection constraints\n */\n\n/**\n * Function: getOutlineConstraint\n * \n * Returns the constraint used to connect to the outline of the given state.\n */\nmxGraph.prototype.getOutlineConstraint = function(point, terminalState, me)\n{\n\tif (terminalState.shape != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(terminalState);\n\t\tvar direction = terminalState.style[mxConstants.STYLE_DIRECTION];\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tbounds.x += bounds.width / 2 - bounds.height / 2;\n\t\t\tbounds.y += bounds.height / 2 - bounds.width / 2;\n\t\t\tvar tmp = bounds.width;\n\t\t\tbounds.width = bounds.height;\n\t\t\tbounds.height = tmp;\n\t\t}\n\t\n\t\tvar alpha = mxUtils.toRadians(terminalState.shape.getShapeRotation());\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(-alpha);\n\t\t\tvar sin = Math.sin(-alpha);\n\t\n\t\t\tvar ct = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\t\tpoint = mxUtils.getRotatedPoint(point, cos, sin, ct);\n\t\t}\n\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\t// LATER: Add flipping support for image shapes\n\t\tif (this.getModel().isVertex(terminalState.cell))\n\t\t{\n\t\t\tvar flipH = terminalState.style[mxConstants.STYLE_FLIPH];\n\t\t\tvar flipV = terminalState.style[mxConstants.STYLE_FLIPV];\n\t\t\t\n\t\t\t// Legacy support for stencilFlipH/V\n\t\t\tif (terminalState.shape != null && terminalState.shape.stencil != null)\n\t\t\t{\n\t\t\t\tflipH = mxUtils.getValue(terminalState.style, 'stencilFlipH', 0) == 1 || flipH;\n\t\t\t\tflipV = mxUtils.getValue(terminalState.style, 'stencilFlipV', 0) == 1 || flipV;\n\t\t\t}\n\t\t\t\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tvar tmp = flipH;\n\t\t\t\tflipH = flipV;\n\t\t\t\tflipV = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipH)\n\t\t\t{\n\t\t\t\tsx = -1;\n\t\t\t\tdx = -bounds.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipV)\n\t\t\t{\n\t\t\t\tsy = -1;\n\t\t\t\tdy = -bounds.height ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpoint = new mxPoint((point.x - bounds.x) * sx - dx + bounds.x, (point.y - bounds.y) * sy - dy + bounds.y);\n\t\t\n\t\tvar x = (bounds.width == 0) ? 0 : Math.round((point.x - bounds.x) * 1000 / bounds.width) / 1000;\n\t\tvar y = (bounds.height == 0) ? 0 : Math.round((point.y - bounds.y) * 1000 / bounds.height) / 1000;\n\t\t\n\t\treturn new mxConnectionConstraint(new mxPoint(x, y), false);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getAllConnectionConstraints\n * \n * Returns an array of all <mxConnectionConstraints> for the given terminal. If\n * the shape of the given terminal is a <mxStencilShape> then the constraints\n * of the corresponding <mxStencil> are returned.\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the terminal is the source or target.\n */\nmxGraph.prototype.getAllConnectionConstraints = function(terminal, source)\n{\n\tif (terminal != null && terminal.shape != null && terminal.shape.stencil != null)\n\t{\n\t\treturn terminal.shape.stencil.constraints;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getConnectionConstraint\n * \n * Returns an <mxConnectionConstraint> that describes the given connection\n * point. This result can then be passed to <getConnectionPoint>.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n */\nmxGraph.prototype.getConnectionConstraint = function(edge, terminal, source)\n{\n\tvar point = null;\n\tvar x = edge.style[(source) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\n\tif (x != null)\n\t{\n\t\tvar y = edge.style[(source) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t\n\t\tif (y != null)\n\t\t{\n\t\t\tpoint = new mxPoint(parseFloat(x), parseFloat(y));\n\t\t}\n\t}\n\t\n\tvar perimeter = false;\n\tvar dx = 0, dy = 0;\n\t\n\tif (point != null)\n\t{\n\t\tperimeter = mxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, true);\n\n\t\t//Add entry/exit offset\n\t\tdx = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DX : mxConstants.STYLE_ENTRY_DX]);\n\t\tdy = parseFloat(edge.style[(source) ? mxConstants.STYLE_EXIT_DY : mxConstants.STYLE_ENTRY_DY]);\n\t\t\n\t\tdx = isFinite(dx)? dx : 0;\n\t\tdy = isFinite(dy)? dy : 0;\n\t}\n\n\treturn new mxConnectionConstraint(point, perimeter, null, dx, dy);\n};\n\n/**\n * Function: setConnectionConstraint\n * \n * Sets the <mxConnectionConstraint> that describes the given connection point.\n * If no constraint is given then nothing is changed. To remove an existing\n * constraint from the given edge, use an empty constraint instead.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * terminal - <mxCell> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.setConnectionConstraint = function(edge, terminal, source, constraint)\n{\n\tif (constraint != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tif (constraint == null || constraint.point == null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t}\n\t\t\telse if (constraint.point != null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, constraint.point.x, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, constraint.point.y, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DX :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DX, constraint.dx, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_DY :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_DY, constraint.dy, [edge]);\n\t\t\t\t\n\t\t\t\t// Only writes 0 since 1 is default\n\t\t\t\tif (!constraint.perimeter)\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, '0', [edge]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getConnectionPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * vertex - <mxCellState> that represents the vertex.\n * constraint - <mxConnectionConstraint> that represents the connection point\n * constraint as returned by <getConnectionConstraint>.\n */\nmxGraph.prototype.getConnectionPoint = function(vertex, constraint, round)\n{\n\tround = (round != null) ? round : true;\n\tvar point = null;\n\t\n\tif (vertex != null && constraint.point != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(vertex);\n        var cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\tvar direction = vertex.style[mxConstants.STYLE_DIRECTION];\n\t\tvar r1 = 0;\n\t\t\n\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\tif (direction != null && mxUtils.getValue(vertex.style,\n\t\t\tmxConstants.STYLE_ANCHOR_POINT_DIRECTION, 1) == 1)\n\t\t{\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t{\n\t\t\t\tr1 += 270;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t{\n\t\t\t\tr1 += 180;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tr1 += 90;\n\t\t\t}\n\n\t\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tbounds.rotate90();\n\t\t\t}\n\t\t}\n\n\t\tvar scale = this.view.scale;\n\t\tpoint = new mxPoint(bounds.x + constraint.point.x * bounds.width + constraint.dx * scale,\n\t\t\t\tbounds.y + constraint.point.y * bounds.height + constraint.dy * scale);\n\t\t\n\t\t// Rotation for direction before projection on perimeter\n\t\tvar r2 = vertex.style[mxConstants.STYLE_ROTATION] || 0;\n\t\t\n\t\tif (constraint.perimeter)\n\t\t{\n\t\t\tif (r1 != 0)\n\t\t\t{\n\t\t\t\t// Only 90 degrees steps possible here so no trig needed\n\t\t\t\tvar cos = 0;\n\t\t\t\tvar sin = 0;\n\t\t\t\t\n\t\t\t\tif (r1 == 90)\n\t\t\t\t{\n\t\t\t\t\tsin = 1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 180)\n\t\t\t\t{\n\t\t\t\t\tcos = -1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 270)\n\t\t\t\t{\n\t\t\t\t\tsin = -1;\n\t\t\t\t}\n\t\t\t\t\n\t\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t\t}\n\t\n\t\t\tpoint = this.view.getPerimeterPoint(vertex, point, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr2 += r1;\n\t\t\t\n\t\t\tif (this.getModel().isVertex(vertex.cell))\n\t\t\t{\n\t\t\t\tvar flipH = vertex.style[mxConstants.STYLE_FLIPH] == 1;\n\t\t\t\tvar flipV = vertex.style[mxConstants.STYLE_FLIPV] == 1;\n\t\t\t\t\n\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\tif (vertex.shape != null && vertex.shape.stencil != null)\n\t\t\t\t{\n\t\t\t\t\tflipH = (mxUtils.getValue(vertex.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\tflipV = (mxUtils.getValue(vertex.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tvar temp = flipH;\n\t\t\t\t\tflipH = flipV\n\t\t\t\t\tflipV = temp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipH)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipV)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Generic rotation after projection on perimeter\n\t\tif (r2 != 0 && point != null)\n\t\t{\n\t        var rad = mxUtils.toRadians(r2);\n\t        var cos = Math.cos(rad);\n\t        var sin = Math.sin(rad);\n\t        \n\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t}\n\t}\n\t\n\tif (round && point != null)\n\t{\n\t\tpoint.x = Math.round(point.x);\n\t\tpoint.y = Math.round(point.y);\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: connectCell\n * \n * Connects the specified end of the given edge to the given terminal\n * using <cellConnected> and fires <mxEvent.CONNECT_CELL> while the\n * transaction is in progress. Returns the updated edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.connectCell = function(edge, terminal, source, constraint)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar previous = this.model.getTerminal(edge, source);\n\t\tthis.cellConnected(edge, terminal, source, constraint);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT_CELL,\n\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t'previous', previous));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: cellConnected\n * \n * Sets the new terminal for the given edge and resets the edge points if\n * <resetEdgesOnConnect> is true. This method fires\n * <mxEvent.CELL_CONNECTED> while the transaction is in progress.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - <mxConnectionConstraint> to be used for this connection.\n */\nmxGraph.prototype.cellConnected = function(edge, terminal, source, constraint)\n{\n\tif (edge != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar previous = this.model.getTerminal(edge, source);\n\n\t\t\t// Updates the constraint\n\t\t\tthis.setConnectionConstraint(edge, terminal, source, constraint);\n\t\t\t\n\t\t\t// Checks if the new terminal is a port, uses the ID of the port in the\n\t\t\t// style and the parent of the port as the actual terminal of the edge.\n\t\t\tif (this.isPortsEnabled())\n\t\t\t{\n\t\t\t\tvar id = null;\n\t\n\t\t\t\tif (this.isPort(terminal))\n\t\t\t\t{\n\t\t\t\t\tid = terminal.getId();\n\t\t\t\t\tterminal = this.getTerminalForPort(terminal, source);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Sets or resets all previous information for connecting to a child port\n\t\t\t\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\t\t\t\tmxConstants.STYLE_TARGET_PORT;\n\t\t\t\tthis.setCellStyles(key, id, [edge]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.model.setTerminal(edge, terminal, source);\n\t\t\t\n\t\t\tif (this.resetEdgesOnConnect)\n\t\t\t{\n\t\t\t\tthis.resetEdge(edge);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELL_CONNECTED,\n\t\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t\t'previous', previous));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: disconnectGraph\n * \n * Disconnects the given edges from the terminals which are not in the\n * given array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be disconnected.\n */\nmxGraph.prototype.disconnectGraph = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\t\t\t\t\t\t\t\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar tr = this.view.translate;\n\t\t\t\n\t\t\t// Fast lookup for finding cells in array\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(\n\t\t\t\t\t\t\tthis.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null &&\n\t\t\t\t\t\t\tpstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar dx = -pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = -pstate.origin.y;\n\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\n\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (src != null && this.isCellDisconnectable(cells[i], src, true))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (src == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - tr.y + dy), true);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (trg != null && this.isCellDisconnectable(cells[i], trg, false))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (trg == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y + dy), false);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Drilldown\n */\n\n/**\n * Function: getCurrentRoot\n * \n * Returns the current root of the displayed cell hierarchy. This is a\n * shortcut to <mxGraphView.currentRoot> in <view>.\n */\nmxGraph.prototype.getCurrentRoot = function()\n{\n\treturn this.view.currentRoot;\n};\n \n/**\n * Function: getTranslateForRoot\n * \n * Returns the translation to be used if the given cell is the root cell as\n * an <mxPoint>. This implementation returns null.\n * \n * Example:\n * \n * To keep the children at their absolute position while stepping into groups,\n * this function can be overridden as follows.\n * \n * (code)\n * var offset = new mxPoint(0, 0);\n * \n * while (cell != null)\n * {\n *   var geo = this.model.getGeometry(cell);\n * \n *   if (geo != null)\n *   {\n *     offset.x -= geo.x;\n *     offset.y -= geo.y;\n *   }\n * \n *   cell = this.model.getParent(cell);\n * }\n * \n * return offset;\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the root.\n */\nmxGraph.prototype.getTranslateForRoot = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, the cell returned by getTerminalForPort should be used as the\n * terminal and the port should be referenced by the ID in either the\n * mxConstants.STYLE_SOURCE_PORT or the or the\n * mxConstants.STYLE_TARGET_PORT. Note that a port should not be movable.\n * This implementation always returns false.\n * \n * A typical implementation is the following:\n * \n * (code)\n * graph.isPort = function(cell)\n * {\n *   var geo = this.getCellGeometry(cell);\n *   \n *   return (geo != null) ? geo.relative : false;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxGraph.prototype.isPort = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getTerminalForPort\n * \n * Returns the terminal to be used for a given port. This implementation\n * always returns the parent cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n * source - If the cell is the source or target port.\n */\nmxGraph.prototype.getTerminalForPort = function(cell, source)\n{\n\treturn this.model.getParent(cell);\n};\n\n/**\n * Function: getChildOffsetForCell\n * \n * Returns the offset to be used for the cells inside the given cell. The\n * root and layer cells may be identified using <mxGraphModel.isRoot> and\n * <mxGraphModel.isLayer>. For all other current roots, the\n * <mxGraphView.currentRoot> field points to the respective cell, so that\n * the following holds: cell == this.view.currentRoot. This implementation\n * returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose offset should be returned.\n */\nmxGraph.prototype.getChildOffsetForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: enterGroup\n * \n * Uses the given cell as the root of the displayed cell hierarchy. If no\n * cell is specified then the selection cell is used. The cell is only used\n * if <isValidRoot> returns true.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the new root. Default is the\n * selection cell.\n */\nmxGraph.prototype.enterGroup = function(cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\tif (cell != null && this.isValidRoot(cell))\n\t{\n\t\tthis.view.setCurrentRoot(cell);\n\t\tthis.clearSelection();\n\t}\n};\n\n/**\n * Function: exitGroup\n * \n * Changes the current root to the next valid root in the displayed cell\n * hierarchy.\n */\nmxGraph.prototype.exitGroup = function()\n{\n\tvar root = this.model.getRoot();\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tvar next = this.model.getParent(current);\n\t\t\n\t\t// Finds the next valid root in the hierarchy\n\t\twhile (next != root && !this.isValidRoot(next) &&\n\t\t\t\tthis.model.getParent(next) != root)\n\t\t{\n\t\t\tnext = this.model.getParent(next);\n\t\t}\n\t\t\n\t\t// Clears the current root if the new root is\n\t\t// the model's root or one of the layers.\n\t\tif (next == root || this.model.getParent(next) == root)\n\t\t{\n\t\t\tthis.view.setCurrentRoot(null);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.view.setCurrentRoot(next);\n\t\t}\n\t\t\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\t// Selects the previous root in the graph\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: home\n * \n * Uses the root of the model as the root of the displayed cell hierarchy\n * and selects the previous root.\n */\nmxGraph.prototype.home = function()\n{\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tthis.view.setCurrentRoot(null);\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: isValidRoot\n * \n * Returns true if the given cell is a valid root for the cell display\n * hierarchy. This implementation returns true for all non-null values.\n * \n * Parameters:\n * \n * cell - <mxCell> which should be checked as a possible root.\n */\nmxGraph.prototype.isValidRoot = function(cell)\n{\n\treturn (cell != null);\n};\n\n/**\n * Group: Graph display\n */\n \n/**\n * Function: getGraphBounds\n * \n * Returns the bounds of the visible graph. Shortcut to\n * <mxGraphView.getGraphBounds>. See also: <getBoundingBoxFromGeometry>.\n */\n mxGraph.prototype.getGraphBounds = function()\n {\n \treturn this.view.getGraphBounds();\n };\n\n/**\n * Function: getCellBounds\n * \n * Returns the scaled, translated bounds for the given cell. See\n * <mxGraphView.getBounds> for arrays.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be returned.\n * includeEdge - Optional boolean that specifies if the bounds of\n * the connected edges should be included. Default is false.\n * includeDescendants - Optional boolean that specifies if the bounds\n * of all descendants should be included. Default is false.\n */\nmxGraph.prototype.getCellBounds = function(cell, includeEdges, includeDescendants)\n{\n\tvar cells = [cell];\n\t\n\t// Includes all connected edges\n\tif (includeEdges)\n\t{\n\t\tcells = cells.concat(this.model.getEdges(cell));\n\t}\n\t\n\tvar result = this.view.getBounds(cells);\n\t\n\t// Recursively includes the bounds of the children\n\tif (includeDescendants)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar tmp = this.getCellBounds(this.model.getChildAt(cell, i),\n\t\t\t\tincludeEdges, true);\n\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\tresult.add(tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getBoundingBoxFromGeometry\n * \n * Returns the bounding box for the geometries of the vertices in the\n * given array of cells. This can be used to find the graph bounds during\n * a layout operation (ie. before the last endUpdate) as follows:\n * \n * (code)\n * var cells = graph.getChildCells(graph.getDefaultParent(), true, true);\n * var bounds = graph.getBoundingBoxFromGeometry(cells, true);\n * (end)\n * \n * This can then be used to move cells to the origin:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.moveCells(cells, -Math.min(bounds.x, 0), -Math.min(bounds.y, 0))\n * }\n * (end)\n * \n * Or to translate the graph view:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.view.setTranslate(-Math.min(bounds.x, 0), -Math.min(bounds.y, 0));\n * }\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be returned.\n * includeEdges - Specifies if edge bounds should be included by computing\n * the bounding box for all points in geometry. Default is false.\n */\nmxGraph.prototype.getBoundingBoxFromGeometry = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : false;\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (includeEdges || this.model.isVertex(cells[i]))\n\t\t\t{\n\t\t\t\t// Computes the bounding box for the points in the geometry\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = null;\n\t\t\t\t\t\n\t\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar addPoint = function(pt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (pt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (tmp == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp = new mxRectangle(pt.x, pt.y, 0, 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.add(new mxRectangle(pt.x, pt.y, 0, 0));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], true) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(true));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], false) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(false));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tvar pts = geo.points;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pts != null && pts.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = new mxRectangle(pts[0].x, pts[0].y, 0, 0);\n\n\t\t\t\t\t\t\tfor (var j = 1; j < pts.length; j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taddPoint(pts[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbbox = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && parent != this.view.currentRoot)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox = new mxRectangle(geo.x * tmp.width, geo.y * tmp.height, geo.width, geo.height);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox = mxRectangle.fromRectangle(geo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null && geo.offset != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox.x += geo.offset.x;\n\t\t\t\t\t\t\tbbox.y += geo.offset.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: refresh\n * \n * Clears all cell states or the states for the hierarchy starting at the\n * given cell and validates the graph. This fires a refresh event as the\n * last step.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the cell states should be cleared.\n */\nmxGraph.prototype.refresh = function(cell)\n{\n\tthis.view.clear(cell, cell == null);\n\tthis.view.validate();\n\tthis.sizeDidChange();\n\tthis.fireEvent(new mxEventObject(mxEvent.REFRESH));\n};\n\n/**\n * Function: snap\n * \n * Snaps the given numeric value to the grid if <gridEnabled> is true.\n * \n * Parameters:\n * \n * value - Numeric value to be snapped to the grid.\n */\nmxGraph.prototype.snap = function(value)\n{\n\tif (this.gridEnabled)\n\t{\n\t\tvalue = Math.round(value / this.gridSize ) * this.gridSize;\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: panGraph\n * \n * Shifts the graph display by the given amount. This is used to preview\n * panning operations, use <mxGraphView.setTranslate> to set a persistent\n * translation of the view. Fires <mxEvent.PAN>.\n * \n * Parameters:\n * \n * dx - Amount to shift the graph along the x-axis.\n * dy - Amount to shift the graph along the y-axis.\n */\nmxGraph.prototype.panGraph = function(dx, dy)\n{\n\tif (this.useScrollbarsForPanning && mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.container.scrollLeft = -dx;\n\t\tthis.container.scrollTop = -dy;\n\t}\n\telse\n\t{\n\t\tvar canvas = this.view.getCanvas();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\t// Puts everything inside the container in a DIV so that it\n\t\t\t// can be moved without changing the state of the container\n\t\t\tif (dx == 0 && dy == 0)\n\t\t\t{\n\t\t\t\t// Workaround for ignored removeAttribute on SVG element in IE9 standards\n\t\t\t\tif (mxClient.IS_IE)\n\t\t\t\t{\n\t\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.removeAttribute('transform');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 != null)\n\t\t\t\t{\n\t\t\t\t\tvar child = this.shiftPreview1.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview1.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview1.parentNode.removeChild(this.shiftPreview1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview1 = null;\n\t\t\t\t\t\n\t\t\t\t\tthis.container.appendChild(canvas.parentNode);\n\t\t\t\t\t\n\t\t\t\t\tchild = this.shiftPreview2.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview2.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview2.parentNode.removeChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 == null)\n\t\t\t\t{\n\t\t\t\t\t// Needs two divs for stuff before and after the SVG element\n\t\t\t\t\tthis.shiftPreview1 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview1.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview1.style.overflow = 'visible';\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview2.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview2.style.overflow = 'visible';\n\n\t\t\t\t\tvar current = this.shiftPreview1;\n\t\t\t\t\tvar child = this.container.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// SVG element is moved via transform attribute\n\t\t\t\t\t\tif (child != canvas.parentNode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent.appendChild(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = this.shiftPreview2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Inserts elements only if not empty\n\t\t\t\t\tif (this.shiftPreview1.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.insertBefore(this.shiftPreview1, canvas.parentNode);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.shiftPreview2.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.appendChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.shiftPreview1.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview1.style.top = dy + 'px';\n\t\t\t\tthis.shiftPreview2.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview2.style.top = dy + 'px';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcanvas.style.left = dx + 'px';\n\t\t\tcanvas.style.top = dy + 'px';\n\t\t}\n\t\t\n\t\tthis.panDx = dx;\n\t\tthis.panDy = dy;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN));\n\t}\n};\n\n/**\n * Function: zoomIn\n * \n * Zooms into the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomIn = function()\n{\n\tthis.zoom(this.zoomFactor);\n};\n\n/**\n * Function: zoomOut\n * \n * Zooms out of the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomOut = function()\n{\n\tthis.zoom(1 / this.zoomFactor);\n};\n\n/**\n * Function: zoomActual\n * \n * Resets the zoom and panning in the view.\n */\nmxGraph.prototype.zoomActual = function()\n{\n\tif (this.view.scale == 1)\n\t{\n\t\tthis.view.setTranslate(0, 0);\n\t}\n\telse\n\t{\n\t\tthis.view.translate.x = 0;\n\t\tthis.view.translate.y = 0;\n\n\t\tthis.view.setScale(1);\n\t}\n};\n\n/**\n * Function: zoomTo\n * \n * Zooms the graph to the given scale with an optional boolean center\n * argument, which is passd to <zoom>.\n */\nmxGraph.prototype.zoomTo = function(scale, center)\n{\n\tthis.zoom(scale / this.view.scale, center);\n};\n\n/**\n * Function: center\n * \n * Centers the graph in the container.\n * \n * Parameters:\n * \n * horizontal - Optional boolean that specifies if the graph should be centered\n * horizontally. Default is true.\n * vertical - Optional boolean that specifies if the graph should be centered\n * vertically. Default is true.\n * cx - Optional float that specifies the horizontal center. Default is 0.5.\n * cy - Optional float that specifies the vertical center. Default is 0.5.\n */\nmxGraph.prototype.center = function(horizontal, vertical, cx, cy)\n{\n\thorizontal = (horizontal != null) ? horizontal : true;\n\tvertical = (vertical != null) ? vertical : true;\n\tcx = (cx != null) ? cx : 0.5;\n\tcy = (cy != null) ? cy : 0.5;\n\t\n\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\tvar padding = 2 * this.getBorder();\n\tvar cw = this.container.clientWidth - padding;\n\tvar ch = this.container.clientHeight - padding;\n\tvar bounds = this.getGraphBounds();\n\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\n\tvar dx = (horizontal) ? cw - bounds.width : 0;\n\tvar dy = (vertical) ? ch - bounds.height : 0;\n\t\n\tif (!hasScrollbars)\n\t{\n\t\tthis.view.setTranslate((horizontal) ? Math.floor(t.x - bounds.x * s + dx * cx / s) : t.x,\n\t\t\t(vertical) ? Math.floor(t.y - bounds.y * s + dy * cy / s) : t.y);\n\t}\n\telse\n\t{\n\t\tbounds.x -= t.x;\n\t\tbounds.y -= t.y;\n\t\n\t\tvar sw = this.container.scrollWidth;\n\t\tvar sh = this.container.scrollHeight;\n\t\t\n\t\tif (sw > cw)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\t\n\t\tif (sh > ch)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\n\t\tthis.view.setTranslate(Math.floor(dx / 2 - bounds.x), Math.floor(dy / 2 - bounds.y));\n\t\tthis.container.scrollLeft = (sw - cw) / 2;\n\t\tthis.container.scrollTop = (sh - ch) / 2;\n\t}\n};\n\n/**\n * Function: zoom\n * \n * Zooms the graph using the given factor. Center is an optional boolean\n * argument that keeps the graph scrolled to the center. If the center argument\n * is omitted, then <centerZoom> will be used as its value.\n */\nmxGraph.prototype.zoom = function(factor, center)\n{\n\tcenter = (center != null) ? center : this.centerZoom;\n\tvar scale = Math.round(this.view.scale * factor * 100) / 100;\n\tvar state = this.view.getState(this.getSelectionCell());\n\tfactor = scale / this.view.scale;\n\t\n\tif (this.keepSelectionVisibleOnZoom && state != null)\n\t{\n\t\tvar rect = new mxRectangle(state.x * factor, state.y * factor,\n\t\t\tstate.width * factor, state.height * factor);\n\t\t\n\t\t// Refreshes the display only once if a scroll is carried out\n\t\tthis.view.scale = scale;\n\t\t\n\t\tif (!this.scrollRectToVisible(rect))\n\t\t{\n\t\t\tthis.view.revalidate();\n\t\t\t\n\t\t\t// Forces an event to be fired but does not revalidate again\n\t\t\tthis.view.setScale(scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\t\t\n\t\tif (center && !hasScrollbars)\n\t\t{\n\t\t\tvar dx = this.container.offsetWidth;\n\t\t\tvar dy = this.container.offsetHeight;\n\t\t\t\n\t\t\tif (factor > 1)\n\t\t\t{\n\t\t\t\tvar f = (factor - 1) / (scale * 2);\n\t\t\t\tdx *= -f;\n\t\t\t\tdy *= -f;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = (1 / factor - 1) / (this.view.scale * 2);\n\t\t\t\tdx *= f;\n\t\t\t\tdy *= f;\n\t\t\t}\n\n\t\t\tthis.view.scaleAndTranslate(scale,\n\t\t\t\tthis.view.translate.x + dx,\n\t\t\t\tthis.view.translate.y + dy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Allows for changes of translate and scrollbars during setscale\n\t\t\tvar tx = this.view.translate.x;\n\t\t\tvar ty = this.view.translate.y;\n\t\t\tvar sl = this.container.scrollLeft;\n\t\t\tvar st = this.container.scrollTop;\n\t\t\t\n\t\t\tthis.view.setScale(scale);\n\t\t\t\n\t\t\tif (hasScrollbars)\n\t\t\t{\n\t\t\t\tvar dx = 0;\n\t\t\t\tvar dy = 0;\n\t\t\t\t\n\t\t\t\tif (center)\n\t\t\t\t{\n\t\t\t\t\tdx = this.container.offsetWidth * (factor - 1) / 2;\n\t\t\t\t\tdy = this.container.offsetHeight * (factor - 1) / 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.container.scrollLeft = (this.view.translate.x - tx) * this.view.scale + Math.round(sl * factor + dx);\n\t\t\t\tthis.container.scrollTop = (this.view.translate.y - ty) * this.view.scale + Math.round(st * factor + dy);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: zoomToRect\n * \n * Zooms the graph to the specified rectangle. If the rectangle does not have same aspect\n * ratio as the display container, it is increased in the smaller relative dimension only\n * until the aspect match. The original rectangle is centralised within this expanded one.\n * \n * Note that the input rectangular must be un-scaled and un-translated.\n * \n * Parameters:\n * \n * rect - The un-scaled and un-translated rectangluar region that should be just visible \n * after the operation\n */\nmxGraph.prototype.zoomToRect = function(rect)\n{\n\tvar scaleX = this.container.clientWidth / rect.width;\n\tvar scaleY = this.container.clientHeight / rect.height;\n\tvar aspectFactor = scaleX / scaleY;\n\n\t// Remove any overlap of the rect outside the client area\n\trect.x = Math.max(0, rect.x);\n\trect.y = Math.max(0, rect.y);\n\tvar rectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\tvar rectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\trect.width = rectRight - rect.x;\n\trect.height = rectBottom - rect.y;\n\n\t// The selection area has to be increased to the same aspect\n\t// ratio as the container, centred around the centre point of the \n\t// original rect passed in.\n\tif (aspectFactor < 1.0)\n\t{\n\t\t// Height needs increasing\n\t\tvar newHeight = rect.height / aspectFactor;\n\t\tvar deltaHeightBuffer = (newHeight - rect.height) / 2.0;\n\t\trect.height = newHeight;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar upperBuffer = Math.min(rect.y , deltaHeightBuffer);\n\t\trect.y = rect.y - upperBuffer;\n\t\t\n\t\t// Check if the bottom has extended too far\n\t\trectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\t\trect.height = rectBottom - rect.y;\n\t}\n\telse\n\t{\n\t\t// Width needs increasing\n\t\tvar newWidth = rect.width * aspectFactor;\n\t\tvar deltaWidthBuffer = (newWidth - rect.width) / 2.0;\n\t\trect.width = newWidth;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar leftBuffer = Math.min(rect.x , deltaWidthBuffer);\n\t\trect.x = rect.x - leftBuffer;\n\t\t\n\t\t// Check if the right hand side has extended too far\n\t\trectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\t\trect.width = rectRight - rect.x;\n\t}\n\n\tvar scale = this.container.clientWidth / rect.width;\n\tvar newScale = this.view.scale * scale;\n\n\tif (!mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.view.scaleAndTranslate(newScale, (this.view.translate.x - rect.x / this.view.scale), (this.view.translate.y - rect.y / this.view.scale));\n\t}\n\telse\n\t{\n\t\tthis.view.setScale(newScale);\n\t\tthis.container.scrollLeft = Math.round(rect.x * scale);\n\t\tthis.container.scrollTop = Math.round(rect.y * scale);\n\t}\n};\n\n/**\n * Function: scrollCellToVisible\n * \n * Pans the graph so that it shows the given cell. Optionally the cell may\n * be centered in the container.\n * \n * To center a given graph if the <container> has no scrollbars, use the following code.\n * \n * [code]\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x - (bounds.width - container.clientWidth) / 2,\n * \t\t\t\t\t\t   -bounds.y - (bounds.height - container.clientHeight) / 2);\n * [/code]\n * \n * Parameters:\n * \n * cell - <mxCell> to be made visible.\n * center - Optional boolean flag. Default is false.\n */\nmxGraph.prototype.scrollCellToVisible = function(cell, center)\n{\n\tvar x = -this.view.translate.x;\n\tvar y = -this.view.translate.y;\n\n\tvar state = this.view.getState(cell);\n\n\tif (state != null)\n\t{\n\t\tvar bounds = new mxRectangle(x + state.x, y + state.y, state.width,\n\t\t\tstate.height);\n\n\t\tif (center && this.container != null)\n\t\t{\n\t\t\tvar w = this.container.clientWidth;\n\t\t\tvar h = this.container.clientHeight;\n\n\t\t\tbounds.x = bounds.getCenterX() - w / 2;\n\t\t\tbounds.width = w;\n\t\t\tbounds.y = bounds.getCenterY() - h / 2;\n\t\t\tbounds.height = h;\n\t\t}\n\t\t\n\t\tvar tr = new mxPoint(this.view.translate.x, this.view.translate.y);\n\n\t\tif (this.scrollRectToVisible(bounds))\n\t\t{\n\t\t\t// Triggers an update via the view's event source\n\t\t\tvar tr2 = new mxPoint(this.view.translate.x, this.view.translate.y);\n\t\t\tthis.view.translate.x = tr.x;\n\t\t\tthis.view.translate.y = tr.y;\n\t\t\tthis.view.setTranslate(tr2.x, tr2.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollRectToVisible\n * \n * Pans the graph so that it shows the given rectangle.\n * \n * Parameters:\n * \n * rect - <mxRectangle> to be made visible.\n */\nmxGraph.prototype.scrollRectToVisible = function(rect)\n{\n\tvar isChanged = false;\n\t\n\tif (rect != null)\n\t{\n\t\tvar w = this.container.offsetWidth;\n\t\tvar h = this.container.offsetHeight;\n\n        var widthLimit = Math.min(w, rect.width);\n        var heightLimit = Math.min(h, rect.height);\n\n\t\tif (mxUtils.hasScrollbars(this.container))\n\t\t{\n\t\t\tvar c = this.container;\n\t\t\trect.x += this.view.translate.x;\n\t\t\trect.y += this.view.translate.y;\n\t\t\tvar dx = c.scrollLeft - rect.x;\n\t\t\tvar ddx = Math.max(dx - c.scrollLeft, 0);\n\n\t\t\tif (dx > 0)\n\t\t\t{\n\t\t\t\tc.scrollLeft -= dx + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = rect.x + widthLimit - c.scrollLeft - c.clientWidth;\n\n\t\t\t\tif (dx > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft += dx + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dy = c.scrollTop - rect.y;\n\t\t\tvar ddy = Math.max(0, dy - c.scrollTop);\n\n\t\t\tif (dy > 0)\n\t\t\t{\n\t\t\t\tc.scrollTop -= dy + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = rect.y + heightLimit - c.scrollTop - c.clientHeight;\n\n\t\t\t\tif (dy > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop += dy + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.useScrollbarsForPanning && (ddx != 0 || ddy != 0))\n\t\t\t{\n\t\t\t\tthis.view.setTranslate(ddx, ddy);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar x = -this.view.translate.x;\n\t\t\tvar y = -this.view.translate.y;\n\n\t\t\tvar s = this.view.scale;\n\n\t\t\tif (rect.x + widthLimit > x + w)\n\t\t\t{\n\t\t\t\tthis.view.translate.x -= (rect.x + widthLimit - w - x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y + heightLimit > y + h)\n\t\t\t{\n\t\t\t\tthis.view.translate.y -= (rect.y + heightLimit - h - y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.x < x)\n\t\t\t{\n\t\t\t\tthis.view.translate.x += (x - rect.x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y  < y)\n\t\t\t{\n\t\t\t\tthis.view.translate.y += (y - rect.y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (isChanged)\n\t\t\t{\n\t\t\t\tthis.view.refresh();\n\t\t\t\t\n\t\t\t\t// Repaints selection marker (ticket 18)\n\t\t\t\tif (this.selectionCellsHandler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.selectionCellsHandler.refresh();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn isChanged;\n};\n\n/**\n * Function: getCellGeometry\n * \n * Returns the <mxGeometry> for the given cell. This implementation uses\n * <mxGraphModel.getGeometry>. Subclasses can override this to implement\n * specific geometries for cells in only one graph, that is, it can return\n * geometries that depend on the current state of the view.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraph.prototype.getCellGeometry = function(cell)\n{\n\treturn this.model.getGeometry(cell);\n};\n\n/**\n * Function: isCellVisible\n * \n * Returns true if the given cell is visible in this graph. This\n * implementation uses <mxGraphModel.isVisible>. Subclassers can override\n * this to implement specific visibility for cells in only one graph, that\n * is, without affecting the visible state of the cell.\n * \n * When using dynamic filter expressions for cell visibility, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraph.prototype.isCellVisible = function(cell)\n{\n\treturn this.model.isVisible(cell);\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the given cell is collapsed in this graph. This\n * implementation uses <mxGraphModel.isCollapsed>. Subclassers can override\n * this to implement specific collapsed states for cells in only one graph,\n * that is, without affecting the collapsed state of the cell.\n * \n * When using dynamic filter expressions for the collapsed state, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraph.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.model.isCollapsed(cell);\n};\n\n/**\n * Function: isCellConnectable\n * \n * Returns true if the given cell is connectable in this graph. This\n * implementation uses <mxGraphModel.isConnectable>. Subclassers can override\n * this to implement specific connectable states for cells in only one graph,\n * that is, without affecting the connectable state of the cell in the model.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraph.prototype.isCellConnectable = function(cell)\n{\n\treturn this.model.isConnectable(cell);\n};\n\n/**\n * Function: isOrthogonal\n * \n * Returns true if perimeter points should be computed such that the\n * resulting edge has only horizontal or vertical segments.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n */\nmxGraph.prototype.isOrthogonal = function(edge)\n{\n\tvar orthogonal = edge.style[mxConstants.STYLE_ORTHOGONAL];\n\t\n\tif (orthogonal != null)\n\t{\n\t\treturn orthogonal;\n\t}\n\t\n\tvar tmp = this.view.getEdgeStyle(edge);\n\t\n\treturn tmp == mxEdgeStyle.SegmentConnector ||\n\t\ttmp == mxEdgeStyle.ElbowConnector ||\n\t\ttmp == mxEdgeStyle.SideToSide ||\n\t\ttmp == mxEdgeStyle.TopToBottom ||\n\t\ttmp == mxEdgeStyle.EntityRelation ||\n\t\ttmp == mxEdgeStyle.OrthConnector;\n};\n\n/**\n * Function: isLoop\n * \n * Returns true if the given cell state is a loop.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents a potential loop.\n */\nmxGraph.prototype.isLoop = function(state)\n{\n\tvar src = state.getVisibleTerminalState(true);\n\tvar trg = state.getVisibleTerminalState(false);\n\t\n\treturn (src != null && src == trg);\n};\n\n/**\n * Function: isCloneEvent\n * \n * Returns true if the given event is a clone event. This implementation\n * returns true if control is pressed.\n */\nmxGraph.prototype.isCloneEvent = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isTransparentClickEvent\n * \n * Hook for implementing click-through behaviour on selected cells. If this\n * returns true the cell behind the selected cell will be selected. This\n * implementation returns false;\n */\nmxGraph.prototype.isTransparentClickEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Function: isToggleEvent\n * \n * Returns true if the given event is a toggle event. This implementation\n * returns true if the meta key (Cmd) is pressed on Macs or if control is\n * pressed on any other platform.\n */\nmxGraph.prototype.isToggleEvent = function(evt)\n{\n\treturn (mxClient.IS_MAC) ? mxEvent.isMetaDown(evt) : mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isGridEnabledEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isGridEnabledEvent = function(evt)\n{\n\treturn evt != null && !mxEvent.isAltDown(evt);\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isConstrainedEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isIgnoreTerminalEvent\n * \n * Returns true if the given mouse event should not allow any connections to be\n * made. This implementation returns false.\n */\nmxGraph.prototype.isIgnoreTerminalEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Group: Validation\n */\n\n/**\n * Function: validationAlert\n * \n * Displays the given validation error in a dialog. This implementation uses\n * mxUtils.alert.\n */\nmxGraph.prototype.validationAlert = function(message)\n{\n\tmxUtils.alert(message);\n};\n\n/**\n * Function: isEdgeValid\n * \n * Checks if the return value of <getEdgeValidationError> for the given\n * arguments is null.\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.isEdgeValid = function(edge, source, target)\n{\n\treturn this.getEdgeValidationError(edge, source, target) == null;\n};\n\n/**\n * Function: getEdgeValidationError\n * \n * Returns the validation error message to be displayed when inserting or\n * changing an edges' connectivity. A return value of null means the edge\n * is valid, a return value of '' means it's not valid, but do not display\n * an error message. Any other (non-empty) string returned from this method\n * is displayed as an error message when trying to connect an edge to a\n * source and target. This implementation uses the <multiplicities>, and\n * checks <multigraph>, <allowDanglingEdges> and <allowLoops> to generate\n * validation errors.\n * \n * For extending this method with specific checks for source/target cells,\n * the method can be extended as follows. Returning an empty string means\n * the edge is invalid with no error message, a non-null string specifies\n * the error message, and null means the edge is valid.\n * \n * (code)\n * graph.getEdgeValidationError = function(edge, source, target)\n * {\n *   if (source != null && target != null &&\n *     this.model.getValue(source) != null &&\n *     this.model.getValue(target) != null)\n *   {\n *     if (target is not valid for source)\n *     {\n *       return 'Invalid Target';\n *     }\n *   }\n *   \n *   // \"Supercall\"\n *   return mxGraph.prototype.getEdgeValidationError.apply(this, arguments);\n * }\n * (end)\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.getEdgeValidationError = function(edge, source, target)\n{\n\tif (edge != null && !this.isAllowDanglingEdges() && (source == null || target == null))\n\t{\n\t\treturn '';\n\t}\n\t\n\tif (edge != null && this.model.getTerminal(edge, true) == null &&\n\t\tthis.model.getTerminal(edge, false) == null)\t\n\t{\n\t\treturn null;\n\t}\n\t\n\t// Checks if we're dealing with a loop\n\tif (!this.allowLoops && source == target && source != null)\n\t{\n\t\treturn '';\n\t}\n\t\n\t// Checks if the connection is generally allowed\n\tif (!this.isValidConnection(source, target))\n\t{\n\t\treturn '';\n\t}\n\n\tif (source != null && target != null)\n\t{\n\t\tvar error = '';\n\n\t\t// Checks if the cells are already connected\n\t\t// and adds an error message if required\t\t\t\n\t\tif (!this.multigraph)\n\t\t{\n\t\t\tvar tmp = this.model.getEdgesBetween(source, target, true);\n\t\t\t\n\t\t\t// Checks if the source and target are not connected by another edge\n\t\t\tif (tmp.length > 1 || (tmp.length == 1 && tmp[0] != edge))\n\t\t\t{\n\t\t\t\terror += (mxResources.get(this.alreadyConnectedResource) ||\n\t\t\t\t\tthis.alreadyConnectedResource)+'\\n';\n\t\t\t}\n\t\t}\n\n\t\t// Gets the number of outgoing edges from the source\n\t\t// and the number of incoming edges from the target\n\t\t// without counting the edge being currently changed.\n\t\tvar sourceOut = this.model.getDirectedEdgeCount(source, true, edge);\n\t\tvar targetIn = this.model.getDirectedEdgeCount(target, false, edge);\n\n\t\t// Checks the change against each multiplicity rule\n\t\tif (this.multiplicities != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t\t{\n\t\t\t\tvar err = this.multiplicities[i].check(this, edge, source,\n\t\t\t\t\ttarget, sourceOut, targetIn);\n\t\t\t\t\n\t\t\t\tif (err != null)\n\t\t\t\t{\n\t\t\t\t\terror += err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validates the source and target terminals independently\n\t\tvar err = this.validateEdge(edge, source, target);\n\t\t\n\t\tif (err != null)\n\t\t{\n\t\t\terror += err;\n\t\t}\n\t\t\n\t\treturn (error.length > 0) ? error : null;\n\t}\n\t\n\treturn (this.allowDanglingEdges) ? null : '';\n};\n\n/**\n * Function: validateEdge\n * \n * Hook method for subclassers to return an error message for the given\n * edge and terminals. This implementation returns null.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.validateEdge = function(edge, source, target)\n{\n\treturn null;\n};\n\n/**\n * Function: validateGraph\n * \n * Validates the graph by validating each descendant of the given cell or\n * the root of the model. Context is an object that contains the validation\n * state for the complete validation run. The validation errors are\n * attached to their cells using <setCellWarning>. Returns null in the case of\n * successful validation or an array of strings (warnings) in the case of\n * failed validations.\n * \n * Paramters:\n * \n * cell - Optional <mxCell> to start the validation recursion. Default is\n * the graph root.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateGraph = function(cell, context)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tcontext = (context != null) ? context : new Object();\n\t\n\tvar isValid = true;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar tmp = this.model.getChildAt(cell, i);\n\t\tvar ctx = context;\n\t\t\n\t\tif (this.isValidRoot(tmp))\n\t\t{\n\t\t\tctx = new Object();\n\t\t}\n\t\t\n\t\tvar warn = this.validateGraph(tmp, ctx);\n\t\t\n\t\tif (warn != null)\n\t\t{\n\t\t\tthis.setCellWarning(tmp, warn.replace(/\\n/g, '<br>'));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setCellWarning(tmp, null);\n\t\t}\n\t\t\n\t\tisValid = isValid && warn == null;\n\t}\n\t\n\tvar warning = '';\n\t\n\t// Adds error for invalid children if collapsed (children invisible)\n\tif (this.isCellCollapsed(cell) && !isValid)\n\t{\n\t\twarning += (mxResources.get(this.containsValidationErrorsResource) ||\n\t\t\tthis.containsValidationErrorsResource) + '\\n';\n\t}\n\t\n\t// Checks edges and cells using the defined multiplicities\n\tif (this.model.isEdge(cell))\n\t{\n\t\twarning += this.getEdgeValidationError(cell,\n\t\tthis.model.getTerminal(cell, true),\n\t\tthis.model.getTerminal(cell, false)) || '';\n\t}\n\telse\n\t{\n\t\twarning += this.getCellValidationError(cell) || '';\n\t}\n\t\n\t// Checks custom validation rules\n\tvar err = this.validateCell(cell, context);\n\t\n\tif (err != null)\n\t{\n\t\twarning += err;\n\t}\n\t\n\t// Updates the display with the warning icons\n\t// before any potential alerts are displayed.\n\t// LATER: Move this into addCellOverlay. Redraw\n\t// should check if overlay was added or removed.\n\tif (this.model.getParent(cell) == null)\n\t{\n\t\tthis.view.validate();\n\t}\n\n\treturn (warning.length > 0 || !isValid) ? warning : null;\n};\n\n/**\n * Function: getCellValidationError\n * \n * Checks all <multiplicities> that cannot be enforced while the graph is\n * being modified, namely, all multiplicities that require a minimum of\n * 1 edge.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the multiplicities should be checked.\n */\nmxGraph.prototype.getCellValidationError = function(cell)\n{\n\tvar outCount = this.model.getDirectedEdgeCount(cell, true);\n\tvar inCount = this.model.getDirectedEdgeCount(cell, false);\n\tvar value = this.model.getValue(cell);\n\tvar error = '';\n\n\tif (this.multiplicities != null)\n\t{\n\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t{\n\t\t\tvar rule = this.multiplicities[i];\n\t\t\t\n\t\t\tif (rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\trule.attr, rule.value) && (outCount > rule.max ||\n\t\t\t\toutCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t\telse if (!rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\t\trule.attr, rule.value) && (inCount > rule.max ||\n\t\t\t\t\tinCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: validateCell\n * \n * Hook method for subclassers to return an error message for the given\n * cell and validation context. This implementation returns null. Any HTML\n * breaks will be converted to linefeeds in the calling method.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to validate.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateCell = function(cell, context)\n{\n\treturn null;\n};\n\n/**\n * Group: Graph appearance\n */\n\n/**\n * Function: getBackgroundImage\n * \n * Returns the <backgroundImage> as an <mxImage>.\n */\nmxGraph.prototype.getBackgroundImage = function()\n{\n\treturn this.backgroundImage;\n};\n\n/**\n * Function: setBackgroundImage\n * \n * Sets the new <backgroundImage>.\n * \n * Parameters:\n * \n * image - New <mxImage> to be used for the background.\n */\nmxGraph.prototype.setBackgroundImage = function(image)\n{\n\tthis.backgroundImage = image;\n};\n\n/**\n * Function: getFoldingImage\n * \n * Returns the <mxImage> used to display the collapsed state of\n * the specified cell state. This returns null for all edges.\n */\nmxGraph.prototype.getFoldingImage = function(state)\n{\n\tif (state != null && this.foldingEnabled && !this.getModel().isEdge(state.cell))\n\t{\n\t\tvar tmp = this.isCellCollapsed(state.cell);\n\t\t\n\t\tif (this.isCellFoldable(state.cell, !tmp))\n\t\t{\n\t\t\treturn (tmp) ? this.collapsedImage : this.expandedImage;\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: convertValueToString\n * \n * Returns the textual representation for the given cell. This\n * implementation returns the nodename or string-representation of the user\n * object.\n *\n * Example:\n * \n * The following returns the label attribute from the cells user\n * object if it is an XML node.\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n * \treturn cell.getAttribute('label');\n * }\n * (end)\n * \n * See also: <cellLabelChanged>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose textual representation should be returned.\n */\nmxGraph.prototype.convertValueToString = function(cell)\n{\n\tvar value = this.model.getValue(cell);\n\t\n\tif (value != null)\n\t{\n\t\tif (mxUtils.isNode(value))\n\t\t{\n\t\t\treturn value.nodeName;\n\t\t}\n\t\telse if (typeof(value.toString) == 'function')\n\t\t{\n\t\t\treturn value.toString();\n\t\t}\n\t}\n\t\n\treturn '';\n};\n\n/**\n * Function: getLabel\n * \n * Returns a string or DOM node that represents the label for the given\n * cell. This implementation uses <convertValueToString> if <labelsVisible>\n * is true. Otherwise it returns an empty string.\n * \n * To truncate a label to match the size of the cell, the following code\n * can be used.\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var label = mxGraph.prototype.getLabel.apply(this, arguments);\n * \n *   if (label != null && this.model.isVertex(cell))\n *   {\n *     var geo = this.getCellGeometry(cell);\n * \n *     if (geo != null)\n *     {\n *       var max = parseInt(geo.width / 8);\n * \n *       if (label.length > max)\n *       {\n *         label = label.substring(0, max)+'...';\n *       }\n *     }\n *   } \n *   return mxUtils.htmlEntities(label);\n * }\n * (end)\n * \n * A resize listener is needed in the graph to force a repaint of the label\n * after a resize.\n * \n * (code)\n * graph.addListener(mxEvent.RESIZE_CELLS, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n * \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     this.view.removeState(cells[i]);\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be returned.\n */\nmxGraph.prototype.getLabel = function(cell)\n{\n\tvar result = '';\n\t\n\tif (this.labelsVisible && cell != null)\n\t{\n\t\tvar state = this.view.getState(cell);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\t\n\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_NOLABEL, false))\n\t\t{\n\t\t\tresult = this.convertValueToString(cell);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isHtmlLabel\n * \n * Returns true if the label must be rendered as HTML markup. The default\n * implementation returns <htmlLabels>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be displayed as HTML markup.\n */\nmxGraph.prototype.isHtmlLabel = function(cell)\n{\n\treturn this.isHtmlLabels();\n};\n \n/**\n * Function: isHtmlLabels\n * \n * Returns <htmlLabels>.\n */\nmxGraph.prototype.isHtmlLabels = function()\n{\n\treturn this.htmlLabels;\n};\n \n/**\n * Function: setHtmlLabels\n * \n * Sets <htmlLabels>.\n */\nmxGraph.prototype.setHtmlLabels = function(value)\n{\n\tthis.htmlLabels = value;\n};\n\n/**\n * Function: isWrapping\n * \n * This enables wrapping for HTML labels.\n * \n * Returns true if no white-space CSS style directive should be used for\n * displaying the given cells label. This implementation returns true if\n * <mxConstants.STYLE_WHITE_SPACE> in the style of the given cell is 'wrap'.\n * \n * This is used as a workaround for IE ignoring the white-space directive\n * of child elements if the directive appears in a parent element. It\n * should be overridden to return true if a white-space directive is used\n * in the HTML markup that represents the given cells label. In order for\n * HTML markup to work in labels, <isHtmlLabel> must also return true\n * for the given cell.\n * \n * Example:\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var tmp = mxGraph.prototype.getLabel.apply(this, arguments); // \"supercall\"\n *   \n *   if (this.model.isEdge(cell))\n *   {\n *     tmp = '<div style=\"width: 150px; white-space:normal;\">'+tmp+'</div>';\n *   }\n *   \n *   return tmp;\n * }\n * \n * graph.isWrapping = function(state)\n * {\n * \t return this.model.isEdge(state.cell);\n * }\n * (end)\n * \n * Makes sure no edge label is wider than 150 pixels, otherwise the content\n * is wrapped. Note: No width must be specified for wrapped vertex labels as\n * the vertex defines the width in its geometry.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be wrapped.\n */\nmxGraph.prototype.isWrapping = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn (style != null) ? style[mxConstants.STYLE_WHITE_SPACE] == 'wrap' : false;\n};\n\n/**\n * Function: isLabelClipped\n * \n * Returns true if the overflow portion of labels should be hidden. If this\n * returns true then vertex labels will be clipped to the size of the vertices.\n * This implementation returns true if <mxConstants.STYLE_OVERFLOW> in the\n * style of the given cell is 'hidden'.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be clipped.\n */\nmxGraph.prototype.isLabelClipped = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn (style != null) ? style[mxConstants.STYLE_OVERFLOW] == 'hidden' : false;\n};\n\n/**\n * Function: getTooltip\n * \n * Returns the string or DOM node that represents the tooltip for the given\n * state, node and coordinate pair. This implementation checks if the given\n * node is a folding icon or overlay and returns the respective tooltip. If\n * this does not result in a tooltip, the handler for the cell is retrieved\n * from <selectionCellsHandler> and the optional getTooltipForNode method is\n * called. If no special tooltip exists here then <getTooltipForCell> is used\n * with the cell in the given state as the argument to return a tooltip for the\n * given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose tooltip should be returned.\n * node - DOM node that is currently under the mouse.\n * x - X-coordinate of the mouse.\n * y - Y-coordinate of the mouse.\n */\nmxGraph.prototype.getTooltip = function(state, node, x, y)\n{\n\tvar tip = null;\n\t\n\tif (state != null)\n\t{\n\t\t// Checks if the mouse is over the folding icon\n\t\tif (state.control != null && (node == state.control.node ||\n\t\t\tnode.parentNode == state.control.node))\n\t\t{\n\t\t\ttip = this.collapseExpandResource;\n\t\t\ttip = mxUtils.htmlEntities(mxResources.get(tip) || tip).replace(/\\\\n/g, '<br>');\n\t\t}\n\n\t\tif (tip == null && state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\t// LATER: Exit loop if tip is not null\n\t\t\t\tif (tip == null && (node == shape.node || node.parentNode == shape.node))\n\t\t\t\t{\n\t\t\t\t\ttip = shape.overlay.toString();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\tvar handler = this.selectionCellsHandler.getHandler(state.cell);\n\t\t\t\n\t\t\tif (handler != null && typeof(handler.getTooltipForNode) == 'function')\n\t\t\t{\n\t\t\t\ttip = handler.getTooltipForNode(node);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\ttip = this.getTooltipForCell(state.cell);\n\t\t}\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getTooltipForCell\n * \n * Returns the string or DOM node to be used as the tooltip for the given\n * cell. This implementation uses the cells getTooltip function if it\n * exists, or else it returns <convertValueToString> for the cell.\n * \n * Example:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   return 'Hello, World!';\n * }\n * (end)\n * \n * Replaces all tooltips with the string Hello, World!\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getTooltipForCell = function(cell)\n{\n\tvar tip = null;\n\t\n\tif (cell != null && cell.getTooltip != null)\n\t{\n\t\ttip = cell.getTooltip();\n\t}\n\telse\n\t{\n\t\ttip = this.convertValueToString(cell);\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getLinkForCell\n * \n * Returns the string to be used as the link for the given cell. This\n * implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getLinkForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getCursorForMouseEvent\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given event. This implementation calls <getCursorForCell>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForMouseEvent = function(me)\n{\n\treturn this.getCursorForCell(me.getCell());\n};\n\n/**\n * Function: getCursorForCell\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given cell. This implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getStartSize\n * \n * Returns the start size of the given swimlane, that is, the width or\n * height of the part that contains the title, depending on the\n * horizontal style. The return value is an <mxRectangle> with either\n * width or height set as appropriate.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose start size should be returned.\n */\nmxGraph.prototype.getStartSize = function(swimlane)\n{\n\tvar result = new mxRectangle();\n\tvar state = this.view.getState(swimlane);\n\tvar style = (state != null) ? state.style : this.getCellStyle(swimlane);\n\t\n\tif (style != null)\n\t{\n\t\tvar size = parseInt(mxUtils.getValue(style,\n\t\t\tmxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n\t\t\n\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t{\n\t\t\tresult.height = size;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.width = size;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getImage\n * \n * Returns the image URL for the given cell state. This implementation\n * returns the value stored under <mxConstants.STYLE_IMAGE> in the cell\n * style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose image URL should be returned.\n */\nmxGraph.prototype.getImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_IMAGE] : null;\n};\n\n/**\n * Function: getVerticalAlign\n * \n * Returns the vertical alignment for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_VERTICAL_ALIGN> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose vertical alignment should be\n * returned.\n */\nmxGraph.prototype.getVerticalAlign = function(state)\n{\n\treturn (state != null && state.style != null) ?\n\t\t(state.style[mxConstants.STYLE_VERTICAL_ALIGN] ||\n\t\tmxConstants.ALIGN_MIDDLE) : null;\n};\n\n/**\n * Function: getIndicatorColor\n * \n * Returns the indicator color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_COLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_COLOR] : null;\n};\n\n/**\n * Function: getIndicatorGradientColor\n * \n * Returns the indicator gradient color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_GRADIENTCOLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator gradient color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorGradientColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_GRADIENTCOLOR] : null;\n};\n\n/**\n * Function: getIndicatorShape\n * \n * Returns the indicator shape for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_SHAPE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator shape should be returned.\n */\nmxGraph.prototype.getIndicatorShape = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_SHAPE] : null;\n};\n\n/**\n * Function: getIndicatorImage\n * \n * Returns the indicator image for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_IMAGE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator image should be returned.\n */\nmxGraph.prototype.getIndicatorImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_IMAGE] : null;\n};\n\n/**\n * Function: getBorder\n * \n * Returns the value of <border>.\n */\nmxGraph.prototype.getBorder = function()\n{\n\treturn this.border;\n};\n\n/**\n * Function: setBorder\n * \n * Sets the value of <border>.\n * \n * Parameters:\n * \n * value - Positive integer that represents the border to be used.\n */\nmxGraph.prototype.setBorder = function(value)\n{\n\tthis.border = value;\n};\n\n/**\n * Function: isSwimlane\n * \n * Returns true if the given cell is a swimlane in the graph. A swimlane is\n * a container cell with some specific behaviour. This implementation\n * checks if the shape associated with the given cell is a <mxSwimlane>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be checked.\n */\nmxGraph.prototype.isSwimlane = function (cell)\n{\n\tif (cell != null)\n\t{\n\t\tif (this.model.getParent(cell) != this.model.getRoot())\n\t\t{\n\t\t\tvar state = this.view.getState(cell);\n\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\t\t\tif (style != null && !this.model.isEdge(cell))\n\t\t\t{\n\t\t\t\treturn style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_SWIMLANE;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Group: Graph behaviour\n */\n\n/**\n * Function: isResizeContainer\n * \n * Returns <resizeContainer>.\n */\nmxGraph.prototype.isResizeContainer = function()\n{\n\treturn this.resizeContainer;\n};\n\n/**\n * Function: setResizeContainer\n * \n * Sets <resizeContainer>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the container should be resized.\n */\nmxGraph.prototype.setResizeContainer = function(value)\n{\n\tthis.resizeContainer = value;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if the graph is <enabled>.\n */\nmxGraph.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Specifies if the graph should allow any interactions. This\n * implementation updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be enabled.\n */\nmxGraph.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isEscapeEnabled\n * \n * Returns <escapeEnabled>.\n */\nmxGraph.prototype.isEscapeEnabled = function()\n{\n\treturn this.escapeEnabled;\n};\n\n/**\n * Function: setEscapeEnabled\n * \n * Sets <escapeEnabled>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if escape should be enabled.\n */\nmxGraph.prototype.setEscapeEnabled = function(value)\n{\n\tthis.escapeEnabled = value;\n};\n\n/**\n * Function: isInvokesStopCellEditing\n * \n * Returns <invokesStopCellEditing>.\n */\nmxGraph.prototype.isInvokesStopCellEditing = function()\n{\n\treturn this.invokesStopCellEditing;\n};\n\n/**\n * Function: setInvokesStopCellEditing\n * \n * Sets <invokesStopCellEditing>.\n */\nmxGraph.prototype.setInvokesStopCellEditing = function(value)\n{\n\tthis.invokesStopCellEditing = value;\n};\n\n/**\n * Function: isEnterStopsCellEditing\n * \n * Returns <enterStopsCellEditing>.\n */\nmxGraph.prototype.isEnterStopsCellEditing = function()\n{\n\treturn this.enterStopsCellEditing;\n};\n\n/**\n * Function: setEnterStopsCellEditing\n * \n * Sets <enterStopsCellEditing>.\n */\nmxGraph.prototype.setEnterStopsCellEditing = function(value)\n{\n\tthis.enterStopsCellEditing = value;\n};\n\n/**\n * Function: isCellLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellLocked = function(cell)\n{\n\tvar geometry = this.model.getGeometry(cell);\n\t\n\treturn this.isCellsLocked() || (geometry != null && this.model.isVertex(cell) && geometry.relative);\n};\n\n/**\n * Function: isCellsLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellsLocked = function()\n{\n\treturn this.cellsLocked;\n};\n\n/**\n * Function: setCellsLocked\n * \n * Sets if any cell may be moved, sized, bended, disconnected, edited or\n * selected.\n * \n * Parameters:\n * \n * value - Boolean that defines the new value for <cellsLocked>.\n */\nmxGraph.prototype.setCellsLocked = function(value)\n{\n\tthis.cellsLocked = value;\n};\n\n/**\n * Function: getCloneableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getCloneableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellCloneable(cell);\n\t}));\n};\n\n/**\n * Function: isCellCloneable\n * \n * Returns true if the given cell is cloneable. This implementation returns\n * <isCellsCloneable> for all cells unless a cell style specifies\n * <mxConstants.STYLE_CLONEABLE> to be 0. \n * \n * Parameters:\n * \n * cell - Optional <mxCell> whose cloneable state should be returned.\n */\nmxGraph.prototype.isCellCloneable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.isCellsCloneable() && style[mxConstants.STYLE_CLONEABLE] != 0;\n};\n\n/**\n * Function: isCellsCloneable\n * \n * Returns <cellsCloneable>, that is, if the graph allows cloning of cells\n * by using control-drag.\n */\nmxGraph.prototype.isCellsCloneable = function()\n{\n\treturn this.cellsCloneable;\n};\n\n/**\n * Function: setCellsCloneable\n * \n * Specifies if the graph should allow cloning of cells by holding down the\n * control key while cells are being moved. This implementation updates\n * <cellsCloneable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be cloneable.\n */\nmxGraph.prototype.setCellsCloneable = function(value)\n{\n\tthis.cellsCloneable = value;\n};\n\n/**\n * Function: getExportableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getExportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canExportCell(cell);\n\t}));\n};\n\n/**\n * Function: canExportCell\n * \n * Returns true if the given cell may be exported to the clipboard. This\n * implementation returns <exportEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be exported.\n */\nmxGraph.prototype.canExportCell = function(cell)\n{\n\treturn this.exportEnabled;\n};\n\n/**\n * Function: getImportableCells\n * \n * Returns the cells which may be imported in the given array of cells.\n */\nmxGraph.prototype.getImportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canImportCell(cell);\n\t}));\n};\n\n/**\n * Function: canImportCell\n * \n * Returns true if the given cell may be imported from the clipboard.\n * This implementation returns <importEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be imported.\n */\nmxGraph.prototype.canImportCell = function(cell)\n{\n\treturn this.importEnabled;\n};\n\n/**\n * Function: isCellSelectable\n *\n * Returns true if the given cell is selectable. This implementation\n * returns <cellsSelectable>.\n * \n * To add a new style for making cells (un)selectable, use the following code.\n * \n * (code)\n * mxGraph.prototype.isCellSelectable = function(cell)\n * {\n *   var state = this.view.getState(cell);\n *   var style = (state != null) ? state.style : this.getCellStyle(cell);\n *   \n *   return this.isCellsSelectable() && !this.isCellLocked(cell) && style['selectable'] != 0;\n * };\n * (end)\n * \n * You can then use the new style as shown in this example.\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'selectable=0');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose selectable state should be returned.\n */\nmxGraph.prototype.isCellSelectable = function(cell)\n{\n\treturn this.isCellsSelectable();\n};\n\n/**\n * Function: isCellsSelectable\n *\n * Returns <cellsSelectable>.\n */\nmxGraph.prototype.isCellsSelectable = function()\n{\n\treturn this.cellsSelectable;\n};\n\n/**\n * Function: setCellsSelectable\n *\n * Sets <cellsSelectable>.\n */\nmxGraph.prototype.setCellsSelectable = function(value)\n{\n\tthis.cellsSelectable = value;\n};\n\n/**\n * Function: getDeletableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getDeletableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellDeletable(cell);\n\t}));\n};\n\n/**\n * Function: isCellDeletable\n *\n * Returns true if the given cell is moveable. This returns\n * <cellsDeletable> for all given cells if a cells style does not specify\n * <mxConstants.STYLE_DELETABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose deletable state should be returned.\n */\nmxGraph.prototype.isCellDeletable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isCellsDeletable() && style[mxConstants.STYLE_DELETABLE] != 0;\n};\n\n/**\n * Function: isCellsDeletable\n *\n * Returns <cellsDeletable>.\n */\nmxGraph.prototype.isCellsDeletable = function()\n{\n\treturn this.cellsDeletable;\n};\n\n/**\n * Function: setCellsDeletable\n * \n * Sets <cellsDeletable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow deletion of cells.\n */\nmxGraph.prototype.setCellsDeletable = function(value)\n{\n\tthis.cellsDeletable = value;\n};\n\n/**\n * Function: isLabelMovable\n *\n * Returns true if the given edges's label is moveable. This returns\n * <movable> for all given cells if <isLocked> does not return true\n * for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be moved.\n */\nmxGraph.prototype.isLabelMovable = function(cell)\n{\n\treturn !this.isCellLocked(cell) &&\n\t\t((this.model.isEdge(cell) && this.edgeLabelsMovable) ||\n\t\t(this.model.isVertex(cell) && this.vertexLabelsMovable));\n};\n\n/**\n * Function: isCellRotatable\n *\n * Returns true if the given cell is rotatable. This returns true for the given\n * cell if its style does not specify <mxConstants.STYLE_ROTATABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose rotatable state should be returned.\n */\nmxGraph.prototype.isCellRotatable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn style[mxConstants.STYLE_ROTATABLE] != 0;\n};\n\n/**\n * Function: getMovableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getMovableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellMovable(cell);\n\t}));\n};\n\n/**\n * Function: isCellMovable\n *\n * Returns true if the given cell is moveable. This returns <cellsMovable>\n * for all given cells if <isCellLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_MOVABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraph.prototype.isCellMovable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isCellsMovable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_MOVABLE] != 0;\n};\n\n/**\n * Function: isCellsMovable\n *\n * Returns <cellsMovable>.\n */\nmxGraph.prototype.isCellsMovable = function()\n{\n\treturn this.cellsMovable;\n};\n\n/**\n * Function: setCellsMovable\n * \n * Specifies if the graph should allow moving of cells. This implementation\n * updates <cellsMsovable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow moving of cells.\n */\nmxGraph.prototype.setCellsMovable = function(value)\n{\n\tthis.cellsMovable = value;\n};\n\n/**\n * Function: isGridEnabled\n *\n * Returns <gridEnabled> as a boolean.\n */\nmxGraph.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Specifies if the grid should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the grid should be enabled.\n */\nmxGraph.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: isPortsEnabled\n *\n * Returns <portsEnabled> as a boolean.\n */\nmxGraph.prototype.isPortsEnabled = function()\n{\n\treturn this.portsEnabled;\n};\n\n/**\n * Function: setPortsEnabled\n * \n * Specifies if the ports should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the ports should be enabled.\n */\nmxGraph.prototype.setPortsEnabled = function(value)\n{\n\tthis.portsEnabled = value;\n};\n\n/**\n * Function: getGridSize\n *\n * Returns <gridSize>.\n */\nmxGraph.prototype.getGridSize = function()\n{\n\treturn this.gridSize;\n};\n\n/**\n * Function: setGridSize\n * \n * Sets <gridSize>.\n */\nmxGraph.prototype.setGridSize = function(value)\n{\n\tthis.gridSize = value;\n};\n\n/**\n * Function: getTolerance\n *\n * Returns <tolerance>.\n */\nmxGraph.prototype.getTolerance = function()\n{\n\treturn this.tolerance;\n};\n\n/**\n * Function: setTolerance\n * \n * Sets <tolerance>.\n */\nmxGraph.prototype.setTolerance = function(value)\n{\n\tthis.tolerance = value;\n};\n\n/**\n * Function: isVertexLabelsMovable\n *\n * Returns <vertexLabelsMovable>.\n */\nmxGraph.prototype.isVertexLabelsMovable = function()\n{\n\treturn this.vertexLabelsMovable;\n};\n\n/**\n * Function: setVertexLabelsMovable\n * \n * Sets <vertexLabelsMovable>.\n */\nmxGraph.prototype.setVertexLabelsMovable = function(value)\n{\n\tthis.vertexLabelsMovable = value;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n *\n * Returns <edgeLabelsMovable>.\n */\nmxGraph.prototype.isEdgeLabelsMovable = function()\n{\n\treturn this.edgeLabelsMovable;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n * \n * Sets <edgeLabelsMovable>.\n */\nmxGraph.prototype.setEdgeLabelsMovable = function(value)\n{\n\tthis.edgeLabelsMovable = value;\n};\n\n/**\n * Function: isSwimlaneNesting\n *\n * Returns <swimlaneNesting> as a boolean.\n */\nmxGraph.prototype.isSwimlaneNesting = function()\n{\n\treturn this.swimlaneNesting;\n};\n\n/**\n * Function: setSwimlaneNesting\n * \n * Specifies if swimlanes can be nested by drag and drop. This is only\n * taken into account if dropEnabled is true.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes can be nested.\n */\nmxGraph.prototype.setSwimlaneNesting = function(value)\n{\n\tthis.swimlaneNesting = value;\n};\n\n/**\n * Function: isSwimlaneSelectionEnabled\n *\n * Returns <swimlaneSelectionEnabled> as a boolean.\n */\nmxGraph.prototype.isSwimlaneSelectionEnabled = function()\n{\n\treturn this.swimlaneSelectionEnabled;\n};\n\n/**\n * Function: setSwimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selected if the mouse is released\n * over their content area.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes content areas\n * should be selected when the mouse is released over them.\n */\nmxGraph.prototype.setSwimlaneSelectionEnabled = function(value)\n{\n\tthis.swimlaneSelectionEnabled = value;\n};\n\n/**\n * Function: isMultigraph\n *\n * Returns <multigraph> as a boolean.\n */\nmxGraph.prototype.isMultigraph = function()\n{\n\treturn this.multigraph;\n};\n\n/**\n * Function: setMultigraph\n * \n * Specifies if the graph should allow multiple connections between the\n * same pair of vertices.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph allows multiple connections\n * between the same pair of vertices.\n */\nmxGraph.prototype.setMultigraph = function(value)\n{\n\tthis.multigraph = value;\n};\n\n/**\n * Function: isAllowLoops\n *\n * Returns <allowLoops> as a boolean.\n */\nmxGraph.prototype.isAllowLoops = function()\n{\n\treturn this.allowLoops;\n};\n\n/**\n * Function: setAllowDanglingEdges\n * \n * Specifies if dangling edges are allowed, that is, if edges are allowed\n * that do not have a source and/or target terminal defined.\n * \n * Parameters:\n * \n * value - Boolean indicating if dangling edges are allowed.\n */\nmxGraph.prototype.setAllowDanglingEdges = function(value)\n{\n\tthis.allowDanglingEdges = value;\n};\n\n/**\n * Function: isAllowDanglingEdges\n *\n * Returns <allowDanglingEdges> as a boolean.\n */\nmxGraph.prototype.isAllowDanglingEdges = function()\n{\n\treturn this.allowDanglingEdges;\n};\n\n/**\n * Function: setConnectableEdges\n * \n * Specifies if edges should be connectable.\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be connectable.\n */\nmxGraph.prototype.setConnectableEdges = function(value)\n{\n\tthis.connectableEdges = value;\n};\n\n/**\n * Function: isConnectableEdges\n *\n * Returns <connectableEdges> as a boolean.\n */\nmxGraph.prototype.isConnectableEdges = function()\n{\n\treturn this.connectableEdges;\n};\n\n/**\n * Function: setCloneInvalidEdges\n * \n * Specifies if edges should be inserted when cloned but not valid wrt.\n * <getEdgeValidationError>. If false such edges will be silently ignored.\n * \n * Parameters:\n * \n * value - Boolean indicating if cloned invalid edges should be\n * inserted into the graph or ignored.\n */\nmxGraph.prototype.setCloneInvalidEdges = function(value)\n{\n\tthis.cloneInvalidEdges = value;\n};\n\n/**\n * Function: isCloneInvalidEdges\n *\n * Returns <cloneInvalidEdges> as a boolean.\n */\nmxGraph.prototype.isCloneInvalidEdges = function()\n{\n\treturn this.cloneInvalidEdges;\n};\n\n/**\n * Function: setAllowLoops\n * \n * Specifies if loops are allowed.\n * \n * Parameters:\n * \n * value - Boolean indicating if loops are allowed.\n */\nmxGraph.prototype.setAllowLoops = function(value)\n{\n\tthis.allowLoops = value;\n};\n\n/**\n * Function: isDisconnectOnMove\n *\n * Returns <disconnectOnMove> as a boolean.\n */\nmxGraph.prototype.isDisconnectOnMove = function()\n{\n\treturn this.disconnectOnMove;\n};\n\n/**\n * Function: setDisconnectOnMove\n * \n * Specifies if edges should be disconnected when moved. (Note: Cloned\n * edges are always disconnected.)\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be disconnected\n * when moved.\n */\nmxGraph.prototype.setDisconnectOnMove = function(value)\n{\n\tthis.disconnectOnMove = value;\n};\n\n/**\n * Function: isDropEnabled\n *\n * Returns <dropEnabled> as a boolean.\n */\nmxGraph.prototype.isDropEnabled = function()\n{\n\treturn this.dropEnabled;\n};\n\n/**\n * Function: setDropEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setDropEnabled = function(value)\n{\n\tthis.dropEnabled = value;\n};\n\n/**\n * Function: isSplitEnabled\n *\n * Returns <splitEnabled> as a boolean.\n */\nmxGraph.prototype.isSplitEnabled = function()\n{\n\treturn this.splitEnabled;\n};\n\n/**\n * Function: setSplitEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setSplitEnabled = function(value)\n{\n\tthis.splitEnabled = value;\n};\n\n/**\n * Function: isCellResizable\n *\n * Returns true if the given cell is resizable. This returns\n * <cellsResizable> for all given cells if <isCellLocked> does not return\n * true for the given cell and its style does not specify\n * <mxConstants.STYLE_RESIZABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose resizable state should be returned.\n */\nmxGraph.prototype.isCellResizable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.isCellsResizable() && !this.isCellLocked(cell) &&\n\t\tmxUtils.getValue(style, mxConstants.STYLE_RESIZABLE, '1') != '0';\n};\n\n/**\n * Function: isCellsResizable\n *\n * Returns <cellsResizable>.\n */\nmxGraph.prototype.isCellsResizable = function()\n{\n\treturn this.cellsResizable;\n};\n\n/**\n * Function: setCellsResizable\n * \n * Specifies if the graph should allow resizing of cells. This\n * implementation updates <cellsResizable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow resizing of\n * cells.\n */\nmxGraph.prototype.setCellsResizable = function(value)\n{\n\tthis.cellsResizable = value;\n};\n\n/**\n * Function: isTerminalPointMovable\n *\n * Returns true if the given terminal point is movable. This is independent\n * from <isCellConnectable> and <isCellDisconnectable> and controls if terminal\n * points can be moved in the graph if the edge is not connected. Note that it\n * is required for this to return true to connect unconnected edges. This\n * implementation returns true.\n * \n * Parameters:\n * \n * cell - <mxCell> whose terminal point should be moved.\n * source - Boolean indicating if the source or target terminal should be moved.\n */\nmxGraph.prototype.isTerminalPointMovable = function(cell, source)\n{\n\treturn true;\n};\n\n/**\n * Function: isCellBendable\n *\n * Returns true if the given cell is bendable. This returns <cellsBendable>\n * for all given cells if <isLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_BENDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bendable state should be returned.\n */\nmxGraph.prototype.isCellBendable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isCellsBendable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_BENDABLE] != 0;\n};\n\n/**\n * Function: isCellsBendable\n *\n * Returns <cellsBenadable>.\n */\nmxGraph.prototype.isCellsBendable = function()\n{\n\treturn this.cellsBendable;\n};\n\n/**\n * Function: setCellsBendable\n * \n * Specifies if the graph should allow bending of edges. This\n * implementation updates <bendable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow bending of\n * edges.\n */\nmxGraph.prototype.setCellsBendable = function(value)\n{\n\tthis.cellsBendable = value;\n};\n\n/**\n * Function: isCellEditable\n *\n * Returns true if the given cell is editable. This returns <cellsEditable> for\n * all given cells if <isCellLocked> does not return true for the given cell\n * and its style does not specify <mxConstants.STYLE_EDITABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose editable state should be returned.\n */\nmxGraph.prototype.isCellEditable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isCellsEditable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_EDITABLE] != 0;\n};\n\n/**\n * Function: isCellsEditable\n *\n * Returns <cellsEditable>.\n */\nmxGraph.prototype.isCellsEditable = function()\n{\n\treturn this.cellsEditable;\n};\n\n/**\n * Function: setCellsEditable\n * \n * Specifies if the graph should allow in-place editing for cell labels.\n * This implementation updates <cellsEditable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow in-place\n * editing.\n */\nmxGraph.prototype.setCellsEditable = function(value)\n{\n\tthis.cellsEditable = value;\n};\n\n/**\n * Function: isCellDisconnectable\n *\n * Returns true if the given cell is disconnectable from the source or\n * target terminal. This returns <isCellsDisconnectable> for all given\n * cells if <isCellLocked> does not return true for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose disconnectable state should be returned.\n * terminal - <mxCell> that represents the source or target terminal.\n * source - Boolean indicating if the source or target terminal is to be\n * disconnected.\n */\nmxGraph.prototype.isCellDisconnectable = function(cell, terminal, source)\n{\n\treturn this.isCellsDisconnectable() && !this.isCellLocked(cell);\n};\n\n/**\n * Function: isCellsDisconnectable\n *\n * Returns <cellsDisconnectable>.\n */\nmxGraph.prototype.isCellsDisconnectable = function()\n{\n\treturn this.cellsDisconnectable;\n};\n\n/**\n * Function: setCellsDisconnectable\n *\n * Sets <cellsDisconnectable>.\n */\nmxGraph.prototype.setCellsDisconnectable = function(value)\n{\n\tthis.cellsDisconnectable = value;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns true if the given cell is a valid source for new connections.\n * This implementation returns true for all non-null values and is\n * called by is called by <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible source or null.\n */\nmxGraph.prototype.isValidSource = function(cell)\n{\n\treturn (cell == null && this.allowDanglingEdges) ||\n\t\t(cell != null && (!this.model.isEdge(cell) ||\n\t\tthis.connectableEdges) && this.isCellConnectable(cell));\n};\n\t\n/**\n * Function: isValidTarget\n * \n * Returns <isValidSource> for the given cell. This is called by\n * <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible target or null.\n */\nmxGraph.prototype.isValidTarget = function(cell)\n{\n\treturn this.isValidSource(cell);\n};\n\n/**\n * Function: isValidConnection\n * \n * Returns true if the given target cell is a valid target for source.\n * This is a boolean implementation for not allowing connections between\n * certain pairs of vertices and is called by <getEdgeValidationError>.\n * This implementation returns true if <isValidSource> returns true for\n * the source and <isValidTarget> returns true for the target.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source cell.\n * target - <mxCell> that represents the target cell.\n */\nmxGraph.prototype.isValidConnection = function(source, target)\n{\n\treturn this.isValidSource(source) && this.isValidTarget(target);\n};\n\n/**\n * Function: setConnectable\n * \n * Specifies if the graph should allow new connections. This implementation\n * updates <mxConnectionHandler.enabled> in <connectionHandler>.\n * \n * Parameters:\n * \n * connectable - Boolean indicating if new connections should be allowed.\n */\nmxGraph.prototype.setConnectable = function(connectable)\n{\n\tthis.connectionHandler.setEnabled(connectable);\n};\n\t\n/**\n * Function: isConnectable\n * \n * Returns true if the <connectionHandler> is enabled.\n */\nmxGraph.prototype.isConnectable = function()\n{\n\treturn this.connectionHandler.isEnabled();\n};\n\n/**\n * Function: setTooltips\n * \n * Specifies if tooltips should be enabled. This implementation updates\n * <mxTooltipHandler.enabled> in <tooltipHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if tooltips should be enabled.\n */\nmxGraph.prototype.setTooltips = function (enabled)\n{\n\tthis.tooltipHandler.setEnabled(enabled);\n};\n\n/**\n * Function: setPanning\n * \n * Specifies if panning should be enabled. This implementation updates\n * <mxPanningHandler.panningEnabled> in <panningHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if panning should be enabled.\n */\nmxGraph.prototype.setPanning = function(enabled)\n{\n\tthis.panningHandler.panningEnabled = enabled;\n};\n\n/**\n * Function: isEditing\n * \n * Returns true if the given cell is currently being edited.\n * If no cell is specified then this returns true if any\n * cell is currently being edited.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be checked.\n */\nmxGraph.prototype.isEditing = function(cell)\n{\n\tif (this.cellEditor != null)\n\t{\n\t\tvar editingCell = this.cellEditor.getEditingCell();\n\t\t\n\t\treturn (cell == null) ? editingCell != null : cell == editingCell;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isAutoSizeCell\n * \n * Returns true if the size of the given cell should automatically be\n * updated after a change of the label. This implementation returns\n * <autoSizeCells> or checks if the cell style does specify\n * <mxConstants.STYLE_AUTOSIZE> to be 1.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be resized.\n */\nmxGraph.prototype.isAutoSizeCell = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isAutoSizeCells() || style[mxConstants.STYLE_AUTOSIZE] == 1;\n};\n\n/**\n * Function: isAutoSizeCells\n * \n * Returns <autoSizeCells>.\n */\nmxGraph.prototype.isAutoSizeCells = function()\n{\n\treturn this.autoSizeCells;\n};\n\n/**\n * Function: setAutoSizeCells\n * \n * Specifies if cell sizes should be automatically updated after a label\n * change. This implementation sets <autoSizeCells> to the given parameter.\n * To update the size of cells when the cells are added, set\n * <autoSizeCellsOnAdd> to true.\n * \n * Parameters:\n * \n * value - Boolean indicating if cells should be resized\n * automatically.\n */\nmxGraph.prototype.setAutoSizeCells = function(value)\n{\n\tthis.autoSizeCells = value;\n};\n\n/**\n * Function: isExtendParent\n * \n * Returns true if the parent of the given cell should be extended if the\n * child has been resized so that it overlaps the parent. This\n * implementation returns <isExtendParents> if the cell is not an edge.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.isExtendParent = function(cell)\n{\n\treturn !this.getModel().isEdge(cell) && this.isExtendParents();\n};\n\n/**\n * Function: isExtendParents\n * \n * Returns <extendParents>.\n */\nmxGraph.prototype.isExtendParents = function()\n{\n\treturn this.extendParents;\n};\n\n/**\n * Function: setExtendParents\n * \n * Sets <extendParents>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParents>.\n */\nmxGraph.prototype.setExtendParents = function(value)\n{\n\tthis.extendParents = value;\n};\n\n/**\n * Function: isExtendParentsOnAdd\n * \n * Returns <extendParentsOnAdd>.\n */\nmxGraph.prototype.isExtendParentsOnAdd = function(cell)\n{\n\treturn this.extendParentsOnAdd;\n};\n\n/**\n * Function: setExtendParentsOnAdd\n * \n * Sets <extendParentsOnAdd>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnAdd = function(value)\n{\n\tthis.extendParentsOnAdd = value;\n};\n\n/**\n * Function: isExtendParentsOnMove\n * \n * Returns <extendParentsOnMove>.\n */\nmxGraph.prototype.isExtendParentsOnMove = function()\n{\n\treturn this.extendParentsOnMove;\n};\n\n/**\n * Function: setExtendParentsOnMove\n * \n * Sets <extendParentsOnMove>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnMove = function(value)\n{\n\tthis.extendParentsOnMove = value;\n};\n\n/**\n * Function: isRecursiveResize\n * \n * Returns <recursiveResize>.\n * \n * Parameters:\n * \n * state - <mxCellState> that is being resized.\n */\nmxGraph.prototype.isRecursiveResize = function(state)\n{\n\treturn this.recursiveResize;\n};\n\n/**\n * Function: setRecursiveResize\n * \n * Sets <recursiveResize>.\n * \n * Parameters:\n * \n * value - New boolean value for <recursiveResize>.\n */\nmxGraph.prototype.setRecursiveResize = function(value)\n{\n\tthis.recursiveResize = value;\n};\n\n/**\n * Function: isConstrainChild\n * \n * Returns true if the given cell should be kept inside the bounds of its\n * parent according to the rules defined by <getOverlap> and\n * <isAllowOverlapParent>. This implementation returns false for all children\n * of edges and <isConstrainChildren> otherwise.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be constrained.\n */\nmxGraph.prototype.isConstrainChild = function(cell)\n{\n\treturn this.isConstrainChildren() && !this.getModel().isEdge(this.getModel().getParent(cell));\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <constrainChildren>.\n */\nmxGraph.prototype.isConstrainChildren = function()\n{\n\treturn this.constrainChildren;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <constrainChildren>.\n */\nmxGraph.prototype.setConstrainChildren = function(value)\n{\n\tthis.constrainChildren = value;\n};\n\n/**\n * Function: isConstrainRelativeChildren\n * \n * Returns <constrainRelativeChildren>.\n */\nmxGraph.prototype.isConstrainRelativeChildren = function()\n{\n\treturn this.constrainRelativeChildren;\n};\n\n/**\n * Function: setConstrainRelativeChildren\n * \n * Sets <constrainRelativeChildren>.\n */\nmxGraph.prototype.setConstrainRelativeChildren = function(value)\n{\n\tthis.constrainRelativeChildren = value;\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <allowNegativeCoordinates>.\n */\nmxGraph.prototype.isAllowNegativeCoordinates = function()\n{\n\treturn this.allowNegativeCoordinates;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <allowNegativeCoordinates>.\n */\nmxGraph.prototype.setAllowNegativeCoordinates = function(value)\n{\n\tthis.allowNegativeCoordinates = value;\n};\n\n/**\n * Function: getOverlap\n * \n * Returns a decimal number representing the amount of the width and height\n * of the given cell that is allowed to overlap its parent. A value of 0\n * means all children must stay inside the parent, 1 means the child is\n * allowed to be placed outside of the parent such that it touches one of\n * the parents sides. If <isAllowOverlapParent> returns false for the given\n * cell, then this method returns 0.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the overlap ratio should be returned.\n */\nmxGraph.prototype.getOverlap = function(cell)\n{\n\treturn (this.isAllowOverlapParent(cell)) ? this.defaultOverlap : 0;\n};\n\t\n/**\n * Function: isAllowOverlapParent\n * \n * Returns true if the given cell is allowed to be placed outside of the\n * parents area.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the child to be checked.\n */\nmxGraph.prototype.isAllowOverlapParent = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getFoldableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getFoldableCells = function(cells, collapse)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellFoldable(cell, collapse);\n\t}));\n};\n\n/**\n * Function: isCellFoldable\n * \n * Returns true if the given cell is foldable. This implementation\n * returns true if the cell has at least one child and its style\n * does not specify <mxConstants.STYLE_FOLDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose foldable state should be returned.\n */\nmxGraph.prototype.isCellFoldable = function(cell, collapse)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.model.getChildCount(cell) > 0 && style[mxConstants.STYLE_FOLDABLE] != 0;\n};\n\n/**\n * Function: isValidDropTarget\n *\n * Returns true if the given cell is a valid drop target for the specified\n * cells. If <splitEnabled> is true then this returns <isSplitTarget> for\n * the given arguments else it returns true if the cell is not collapsed\n * and its child count is greater than 0.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the possible drop target.\n * cells - <mxCells> that should be dropped into the target.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isValidDropTarget = function(cell, cells, evt)\n{\n\treturn cell != null && ((this.isSplitEnabled() &&\n\t\tthis.isSplitTarget(cell, cells, evt)) || (!this.model.isEdge(cell) &&\n\t\t(this.isSwimlane(cell) || (this.model.getChildCount(cell) > 0 &&\n\t\t!this.isCellCollapsed(cell)))));\n};\n\n/**\n * Function: isSplitTarget\n *\n * Returns true if the given edge may be splitted into two edges with the\n * given cell as a new terminal between the two.\n * \n * Parameters:\n * \n * target - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that should split the edge.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isSplitTarget = function(target, cells, evt)\n{\n\tif (this.model.isEdge(target) && cells != null && cells.length == 1 &&\n\t\tthis.isCellConnectable(cells[0]) && this.getEdgeValidationError(target,\n\t\t\tthis.model.getTerminal(target, true), cells[0]) == null)\n\t{\n\t\tvar src = this.model.getTerminal(target, true);\n\t\tvar trg = this.model.getTerminal(target, false);\n\n\t\treturn (!this.model.isAncestor(cells[0], src) &&\n\t\t\t\t!this.model.isAncestor(cells[0], trg));\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the given cell if it is a drop target for the given cells or the\n * nearest ancestor that may be used as a drop target for the given cells.\n * If the given array contains a swimlane and <swimlaneNesting> is false\n * then this always returns null. If no cell is given, then the bottommost\n * swimlane at the location of the given event is returned.\n * \n * This function should only be used if <isDropEnabled> returns true.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> which are to be dropped onto the target.\n * evt - Mouseevent for the drag and drop.\n * cell - <mxCell> that is under the mousepointer.\n * clone - Optional boolean to indicate of cells will be cloned.\n */\nmxGraph.prototype.getDropTarget = function(cells, evt, cell, clone)\n{\n\tif (!this.isSwimlaneNesting())\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar pt = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\tpt.x -= this.panDx;\n\tpt.y -= this.panDy;\n\tvar swimlane = this.getSwimlaneAt(pt.x, pt.y);\n\t\n\tif (cell == null)\n\t{\n\t\tcell = swimlane;\n\t}\n\telse if (swimlane != null)\n\t{\n\t\t// Checks if the cell is an ancestor of the swimlane\n\t\t// under the mouse and uses the swimlane in that case\n\t\tvar tmp = this.model.getParent(swimlane);\n\t\t\n\t\twhile (tmp != null && this.isSwimlane(tmp) && tmp != cell)\n\t\t{\n\t\t\ttmp = this.model.getParent(tmp);\n\t\t}\n\t\t\n\t\tif (tmp == cell)\n\t\t{\n\t\t\tcell = swimlane;\n\t\t}\n\t}\n\t\n\twhile (cell != null && !this.isValidDropTarget(cell, cells, evt) &&\n\t\t!this.model.isLayer(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\t// Checks if parent is dropped into child if not cloning\n\tif (clone == null || !clone)\n\t{\n\t\tvar parent = cell;\n\t\t\n\t\twhile (parent != null && mxUtils.indexOf(cells, parent) < 0)\n\t\t{\n\t\t\tparent = this.model.getParent(parent);\n\t\t}\n\t}\n\n\treturn (!this.model.isLayer(cell) && parent == null) ? cell : null;\n};\n\n/**\n * Group: Cell retrieval\n */\n\n/**\n * Function: getDefaultParent\n * \n * Returns <defaultParent> or <mxGraphView.currentRoot> or the first child\n * child of <mxGraphModel.root> if both are null. The value returned by\n * this function should be used as the parent for new cells (aka default\n * layer).\n */\nmxGraph.prototype.getDefaultParent = function()\n{\n\tvar parent = this.getCurrentRoot();\n\t\n\tif (parent == null)\n\t{\n\t\tparent = this.defaultParent;\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tvar root = this.model.getRoot();\n\t\t\tparent = this.model.getChildAt(root, 0);\n\t\t}\n\t}\n\t\n\treturn parent;\n};\n\n/**\n * Function: setDefaultParent\n * \n * Sets the <defaultParent> to the given cell. Set this to null to return\n * the first child of the root in getDefaultParent.\n */\nmxGraph.prototype.setDefaultParent = function(cell)\n{\n\tthis.defaultParent = cell;\n};\n\n/**\n * Function: getSwimlane\n * \n * Returns the nearest ancestor of the given cell which is a swimlane, or\n * the given cell, if it is itself a swimlane.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the ancestor swimlane should be returned.\n */\nmxGraph.prototype.getSwimlane = function(cell)\n{\n\twhile (cell != null && !this.isSwimlane(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: getSwimlaneAt\n * \n * Returns the bottom-most swimlane that intersects the given point (x, y)\n * in the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.getSwimlaneAt = function (x, y, parent)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getSwimlaneAt(x, y, child);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isSwimlane(child))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\n\t\t\t\tif (this.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn child;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getCellAt\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy starting at the given parent. This will also return\n * swimlanes if the given location intersects the content area of the\n * swimlane. If this is not desired, then the <hitsSwimlaneContent> may be\n * used if the returned cell is a swimlane to determine if the location\n * is inside the content area or on the actual title of the swimlane.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * vertices - Optional boolean indicating if vertices should be returned.\n * Default is true.\n * edges - Optional boolean indicating if edges should be returned. Default\n * is true.\n * ignoreFn - Optional function that returns true if cell should be ignored.\n * The function is passed the cell state and the x and y parameter.\n */\nmxGraph.prototype.getCellAt = function(x, y, parent, vertices, edges, ignoreFn)\n{\n\tvertices = (vertices != null) ? vertices : true;\n\tedges = (edges != null) ? edges : true;\n\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar cell = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getCellAt(x, y, cell, vertices, edges, ignoreFn);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isCellVisible(cell) && (edges && this.model.isEdge(cell) ||\n\t\t\t\tvertices && this.model.isVertex(cell)))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cell);\n\n\t\t\t\tif (state != null && (ignoreFn == null || !ignoreFn(state, x, y)) &&\n\t\t\t\t\tthis.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: intersects\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n */\nmxGraph.prototype.intersects = function(state, x, y)\n{\n\tif (state != null)\n\t{\n\t\tvar pts = state.absolutePoints;\n\n\t\tif (pts != null)\n\t\t{\n\t\t\tvar t2 = this.tolerance * this.tolerance;\n\t\t\tvar pt = pts[0];\n\t\t\t\n\t\t\tfor (var i = 1; i < pts.length; i++)\n\t\t\t{\n\t\t\t\tvar next = pts[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(pt.x, pt.y, next.x, next.y, x, y);\n\t\t\t\t\n\t\t\t\tif (dist <= t2)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpt = next;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (mxUtils.contains(state, x, y))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: hitsSwimlaneContent\n * \n * Returns true if the given coordinate pair is inside the content\n * are of the given swimlane.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that specifies the swimlane.\n * x - X-coordinate of the mouse event.\n * y - Y-coordinate of the mouse event.\n */\nmxGraph.prototype.hitsSwimlaneContent = function(swimlane, x, y)\n{\n\tvar state = this.getView().getState(swimlane);\n\tvar size = this.getStartSize(swimlane);\n\t\n\tif (state != null)\n\t{\n\t\tvar scale = this.getView().getScale();\n\t\tx -= state.x;\n\t\ty -= state.y;\n\t\t\n\t\tif (size.width > 0 && x > 0 && x > size.width * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (size.height > 0 && y > 0 && y > size.height * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getChildVertices\n * \n * Returns the visible child vertices of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n */\nmxGraph.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\n/**\n * Function: getChildEdges\n * \n * Returns the visible child edges of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose child vertices should be returned.\n */\nmxGraph.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the visible child vertices or edges in the given parent. If\n * vertices and edges is false, then all children are returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n * vertices - Optional boolean that specifies if child vertices should\n * be returned. Default is false.\n * edges - Optional boolean that specifies if child edges should\n * be returned. Default is false.\n */\nmxGraph.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tparent = (parent != null) ? parent : this.getDefaultParent();\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\n\tvar cells = this.model.getChildCells(parent, vertices, edges);\n\tvar result = [];\n\n\t// Filters out the non-visible child cells\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tresult.push(cells[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\n/**\n * Function: getConnections\n * \n * Returns all visible edges connected to the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connections should be returned.\n * parent - Optional parent of the opposite end for a connection to be\n * returned.\n */\nmxGraph.prototype.getConnections = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, true, false);\n};\n\t\n/**\n * Function: getIncomingEdges\n * \n * Returns the visible incoming edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getIncomingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, false, false);\n};\n\t\n/**\n * Function: getOutgoingEdges\n * \n * Returns the visible outgoing edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getOutgoingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, false, true, false);\n};\n\t\n/**\n * Function: getEdges\n * \n * Returns the incoming and/or outgoing edges for the given cell.\n * If the optional parent argument is specified, then only edges are returned\n * where the opposite is in the given parent cell. If at least one of incoming\n * or outgoing is true, then loops are ignored, if both are false, then all\n * edges connected to the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n * incoming - Optional boolean that specifies if incoming edges should\n * be included in the result. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should\n * be included in the result. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be\n * included in the result. Default is true.\n * recurse - Optional boolean the specifies if the parent specified only \n * need be an ancestral parent, true, or the direct parent, false.\n * Default is false\n */\nmxGraph.prototype.getEdges = function(cell, parent, incoming, outgoing, includeLoops, recurse)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tvar edges = [];\n\tvar isCollapsed = this.isCellCollapsed(cell);\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\n\t\tif (isCollapsed || !this.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(this.model.getEdges(child, incoming, outgoing));\n\t\t}\n\t}\n\n\tedges = edges.concat(this.model.getEdges(cell, incoming, outgoing));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming &&\n\t\t\ttarget == cell && (parent == null || this.isValidAncestor(source, parent, recurse))) ||\n\t\t\t(outgoing && source == cell && (parent == null ||\n\t\t\t\t\tthis.isValidAncestor(target, parent, recurse))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isValidAncestor\n * \n * Returns whether or not the specified parent is a valid\n * ancestor of the specified cell, either direct or indirectly\n * based on whether ancestor recursion is enabled.\n * \n * Parameters:\n * \n * cell - <mxCell> the possible child cell\n * parent - <mxCell> the possible parent cell\n * recurse - boolean whether or not to recurse the child ancestors\n */\nmxGraph.prototype.isValidAncestor = function(cell, parent, recurse)\n{\n\treturn (recurse ? this.model.isAncestor(parent, cell) : this.model\n\t\t\t.getParent(cell) == parent);\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all distinct visible opposite cells for the specified terminal\n * on the given edges.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contains the edges whose opposite\n * terminals should be returned.\n * terminal - Terminal that specifies the end whose opposite should be\n * returned.\n * source - Optional boolean that specifies if source terminals should be\n * included in the result. Default is true.\n * targets - Optional boolean that specifies if targer terminals should be\n * included in the result. Default is true.\n */\nmxGraph.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\t// Fast lookup to avoid duplicates in terminals array\n\tvar dict = new mxDictionary();\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar state = this.view.getState(edges[i]);\n\t\t\t\n\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of the edge and if the\n\t\t\t// target should be stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tif (!dict.get(target))\n\t\t\t\t{\n\t\t\t\t\tdict.put(target, true);\n\t\t\t\t\tterminals.push(target);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of the edge and if the\n\t\t\t// source should be stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tif (!dict.get(source))\n\t\t\t\t{\n\t\t\t\t\tdict.put(source, true);\n\t\t\t\t\tterminals.push(source);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and returns the connected edges\n * as displayed on the screen.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxGraph.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar src = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar trg = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns an <mxPoint> representing the given event in the unscaled,\n * non-translated coordinate space of <container> and applies the grid.\n * \n * Parameters:\n * \n * evt - Mousevent that contains the mouse pointer location.\n * addOffset - Optional boolean that specifies if the position should be\n * offset by half of the <gridSize>. Default is true.\n */\n mxGraph.prototype.getPointForEvent = function(evt, addOffset)\n {\n\tvar p = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\n\tvar s = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar off = (addOffset != false) ? this.gridSize / 2 : 0;\n\t\n\tp.x = this.snap(p.x / s - tr.x - off);\n\tp.y = this.snap(p.y / s - tr.y - off);\n\t\n\treturn p;\n };\n\n/**\n * Function: getCells\n * \n * Returns the child vertices and edges of the given parent that are contained\n * in the given rectangle. The result is added to the optional result array,\n * which is returned. If no result array is specified then a new array is\n * created and returned.\n * \n * Parameters:\n * \n * x - X-coordinate of the rectangle.\n * y - Y-coordinate of the rectangle.\n * width - Width of the rectangle.\n * height - Height of the rectangle.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * result - Optional array to store the result in.\n */\nmxGraph.prototype.getCells = function(x, y, width, height, parent, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (width > 0 || height > 0)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar right = x + width;\n\t\tvar bottom = y + height;\n\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getCurrentRoot();\n\t\t\t\n\t\t\tif (parent == null)\n\t\t\t{\n\t\t\t\tparent = model.getRoot();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(cell);\n\t\t\t\t\n\t\t\t\tif (state != null && this.isCellVisible(cell))\n\t\t\t\t{\n\t\t\t\t\tvar deg = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0;\n\t\t\t\t\tvar box = state;\n\t\t\t\t\t\n\t\t\t\t\tif (deg != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbox = mxUtils.getBoundingBox(box, deg);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((model.isEdge(cell) || model.isVertex(cell)) &&\n\t\t\t\t\t\tbox.x >= x && box.y + box.height <= bottom &&\n\t\t\t\t\t\tbox.y >= y && box.x + box.width <= right)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(cell);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.getCells(x, y, width, height, cell, result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsBeyond\n * \n * Returns the children of the given parent that are contained in the\n * halfpane from the given point (x0, y0) rightwards or downwards\n * depending on rightHalfpane and bottomHalfpane.\n * \n * Parameters:\n * \n * x0 - X-coordinate of the origin.\n * y0 - Y-coordinate of the origin.\n * parent - Optional <mxCell> whose children should be checked. Default is\n * <defaultParent>.\n * rightHalfpane - Boolean indicating if the cells in the right halfpane\n * from the origin should be returned.\n * bottomHalfpane - Boolean indicating if the cells in the bottom halfpane\n * from the origin should be returned.\n */\nmxGraph.prototype.getCellsBeyond = function(x0, y0, parent, rightHalfpane, bottomHalfpane)\n{\n\tvar result = [];\n\t\n\tif (rightHalfpane || bottomHalfpane)\n\t{\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getDefaultParent();\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\n\t\t\t\tif (this.isCellVisible(child) && state != null)\n\t\t\t\t{\n\t\t\t\t\tif ((!rightHalfpane || state.x >= x0) &&\n\t\t\t\t\t\t(!bottomHalfpane || state.y >= y0))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: findTreeRoots\n * \n * Returns all children in the given parent which do not have incoming\n * edges. If the result is empty then the with the greatest difference\n * between incoming and outgoing edges is returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * isolate - Optional boolean that specifies if edges should be ignored if\n * the opposite end is not a child of the given parent cell. Default is\n * false.\n * invert - Optional boolean that specifies if outgoing or incoming edges\n * should be counted for a tree root. If false then outgoing edges will be\n * counted. Default is false.\n */\nmxGraph.prototype.findTreeRoots = function(parent, isolate, invert)\n{\n\tisolate = (isolate != null) ? isolate : false;\n\tinvert = (invert != null) ? invert : false;\n\tvar roots = [];\n\t\n\tif (parent != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar best = null;\n\t\tvar maxDiff = 0;\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (this.model.isVertex(cell) && this.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getConnections(cell, (isolate) ? parent : null);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < conns.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.view.getVisibleTerminal(conns[j], true);\n\n                    if (src == cell)\n                    {\n                        fanOut++;\n                    }\n                    else\n                    {\n                        fanIn++;\n                    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((invert && fanOut == 0 && fanIn > 0) ||\n\t\t\t\t\t(!invert && fanIn == 0 && fanOut > 0))\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar diff = (invert) ? fanIn - fanOut : fanOut - fanIn;\n\t\t\t\t\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> from cells to true for the visited cells.\n * inverse - Optional boolean to traverse in inverse direction. Default is false.\n * This is ignored if directed is false.\n */\nmxGraph.prototype.traverse = function(vertex, directed, func, edge, visited, inverse)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tinverse = (inverse != null) ? inverse : false;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || (!inverse == isSource))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.model.getTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited, inverse);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Selection\n */\n\n/**\n * Function: isCellSelected\n * \n * Returns true if the given cell is selected.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the selection state should be returned.\n */\nmxGraph.prototype.isCellSelected = function(cell)\n{\n\treturn this.getSelectionModel().isSelected(cell);\n};\n\n/**\n * Function: isSelectionEmpty\n * \n * Returns true if the selection is empty.\n */\nmxGraph.prototype.isSelectionEmpty = function()\n{\n\treturn this.getSelectionModel().isEmpty();\n};\n\n/**\n * Function: clearSelection\n * \n * Clears the selection using <mxGraphSelectionModel.clear>.\n */\nmxGraph.prototype.clearSelection = function()\n{\n\treturn this.getSelectionModel().clear();\n};\n\n/**\n * Function: getSelectionCount\n * \n * Returns the number of selected cells.\n */\nmxGraph.prototype.getSelectionCount = function()\n{\n\treturn this.getSelectionModel().cells.length;\n};\n\t\n/**\n * Function: getSelectionCell\n * \n * Returns the first cell from the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCell = function()\n{\n\treturn this.getSelectionModel().cells[0];\n};\n\n/**\n * Function: getSelectionCells\n * \n * Returns the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCells = function()\n{\n\treturn this.getSelectionModel().cells.slice();\n};\n\n/**\n * Function: setSelectionCell\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraph.prototype.setSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().setCell(cell);\n};\n\n/**\n * Function: setSelectionCells\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraph.prototype.setSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().setCells(cells);\n};\n\n/**\n * Function: addSelectionCell\n * \n * Adds the given cell to the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be add to the selection.\n */\nmxGraph.prototype.addSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().addCell(cell);\n};\n\n/**\n * Function: addSelectionCells\n * \n * Adds the given cells to the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be added to the selection.\n */\nmxGraph.prototype.addSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().addCells(cells);\n};\n\n/**\n * Function: removeSelectionCell\n * \n * Removes the given cell from the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().removeCell(cell);\n};\n\n/**\n * Function: removeSelectionCells\n * \n * Removes the given cells from the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().removeCells(cells);\n};\n\n/**\n * Function: selectRegion\n * \n * Selects and returns the cells inside the given rectangle for the\n * specified event.\n * \n * Parameters:\n * \n * rect - <mxRectangle> that represents the region to be selected.\n * evt - Mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectRegion = function(rect, evt)\n{\n\tvar cells = this.getCells(rect.x, rect.y, rect.width, rect.height);\n\tthis.selectCellsForEvent(cells, evt);\n\t\n\treturn cells;\n};\n\n/**\n * Function: selectNextCell\n * \n * Selects the next cell.\n */\nmxGraph.prototype.selectNextCell = function()\n{\n\tthis.selectCell(true);\n};\n\n/**\n * Function: selectPreviousCell\n * \n * Selects the previous cell.\n */\nmxGraph.prototype.selectPreviousCell = function()\n{\n\tthis.selectCell();\n};\n\n/**\n * Function: selectParentCell\n * \n * Selects the parent cell.\n */\nmxGraph.prototype.selectParentCell = function()\n{\n\tthis.selectCell(false, true);\n};\n\n/**\n * Function: selectChildCell\n * \n * Selects the first child cell.\n */\nmxGraph.prototype.selectChildCell = function()\n{\n\tthis.selectCell(false, false, true);\n};\n\n/**\n * Function: selectCell\n * \n * Selects the next, parent, first child or previous cell, if all arguments\n * are false.\n * \n * Parameters:\n * \n * isNext - Boolean indicating if the next cell should be selected.\n * isParent - Boolean indicating if the parent cell should be selected.\n * isChild - Boolean indicating if the first child cell should be selected.\n */\nmxGraph.prototype.selectCell = function(isNext, isParent, isChild)\n{\n\tvar sel = this.selectionModel;\n\tvar cell = (sel.cells.length > 0) ? sel.cells[0] : null;\n\t\n\tif (sel.cells.length > 1)\n\t{\n\t\tsel.clear();\n\t}\n\t\n\tvar parent = (cell != null) ?\n\t\tthis.model.getParent(cell) :\n\t\tthis.getDefaultParent();\n\t\n\tvar childCount = this.model.getChildCount(parent);\n\t\n\tif (cell == null && childCount > 0)\n\t{\n\t\tvar child = this.model.getChildAt(parent, 0);\n\t\tthis.setSelectionCell(child);\n\t}\n\telse if ((cell == null || isParent) &&\n\t\tthis.view.getState(parent) != null &&\n\t\tthis.model.getGeometry(parent) != null)\n\t{\n\t\tif (this.getCurrentRoot() != parent)\n\t\t{\n\t\t\tthis.setSelectionCell(parent);\n\t\t}\n\t}\n\telse if (cell != null && isChild)\n\t{\n\t\tvar tmp = this.model.getChildCount(cell);\n\t\t\n\t\tif (tmp > 0)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(cell, 0);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n\telse if (childCount > 0)\n\t{\n\t\tvar i = parent.getIndex(cell);\n\t\t\n\t\tif (isNext)\n\t\t{\n\t\t\ti++;\n\t\t\tvar child = this.model.getChildAt(parent, i % childCount);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti--;\n\t\t\tvar index =  (i < 0) ? childCount - 1 : i;\n\t\t\tvar child = this.model.getChildAt(parent, index);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectAll\n * \n * Selects all children of the given parent cell or the children of the\n * default parent if no parent is specified. To select leaf vertices and/or\n * edges use <selectCells>.\n * \n * Parameters:\n * \n * parent - Optional <mxCell> whose children should be selected.\n * Default is <defaultParent>.\n * descendants - Optional boolean specifying whether all descendants should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectAll = function(parent, descendants)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar cells = (descendants) ? this.model.filterDescendants(mxUtils.bind(this, function(cell)\n\t{\n\t\treturn cell != parent && this.view.getState(cell) != null;\n\t}), parent) : this.model.getChildren(parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectVertices = function(parent)\n{\n\tthis.selectCells(true, false, parent);\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectEdges = function(parent)\n{\n\tthis.selectCells(false, true, parent);\n};\n\n/**\n * Function: selectCells\n * \n * Selects all vertices and/or edges depending on the given boolean\n * arguments recursively, starting at the given parent or the default\n * parent if no parent is specified. Use <selectAll> to select all cells.\n * For vertices, only cells with no children are selected.\n * \n * Parameters:\n * \n * vertices - Boolean indicating if vertices should be selected.\n * edges - Boolean indicating if edges should be selected.\n * parent - Optional <mxCell> that acts as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.selectCells = function(vertices, edges, parent)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.view.getState(cell) != null &&\n\t\t\t((this.model.getChildCount(cell) == 0 && this.model.isVertex(cell) && vertices\n\t\t\t&& !this.model.isEdge(this.model.getParent(cell))) ||\n\t\t\t(this.model.isEdge(cell) && edges));\n\t});\n\t\n\tvar cells = this.model.filterDescendants(filter, parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectCellForEvent\n * \n * Selects the given cell by either adding it to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellForEvent = function(cell, evt)\n{\n\tvar isSelected = this.isCellSelected(cell);\n\t\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tif (isSelected)\n\t\t{\n\t\t\tthis.removeSelectionCell(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.addSelectionCell(cell);\n\t\t}\n\t}\n\telse if (!isSelected || this.getSelectionCount() != 1)\n\t{\n\t\tthis.setSelectionCell(cell);\n\t}\n};\n\n/**\n * Function: selectCellsForEvent\n * \n * Selects the given cells by either adding them to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellsForEvent = function(cells, evt)\n{\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tthis.addSelectionCells(cells);\n\t}\n\telse\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Group: Selection state\n */\n\n/**\n * Function: createHandler\n * \n * Creates a new handler for the given cell state. This implementation\n * returns a new <mxEdgeHandler> of the corresponding cell is an edge,\n * otherwise it returns an <mxVertexHandler>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose handler should be created.\n */\nmxGraph.prototype.createHandler = function(state)\n{\n\tvar result = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (this.model.isEdge(state.cell))\n\t\t{\n\t\t\tvar source = state.getVisibleTerminalState(true);\n\t\t\tvar target = state.getVisibleTerminalState(false);\n\t\t\tvar geo = this.getCellGeometry(state.cell);\n\t\t\t\n\t\t\tvar edgeStyle = this.view.getEdgeStyle(state, (geo != null) ? geo.points : null, source, target);\n\t\t\tresult = this.createEdgeHandler(state, edgeStyle);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = this.createVertexHandler(state);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createVertexHandler\n * \n * Hooks to create a new <mxVertexHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createVertexHandler = function(state)\n{\n\treturn new mxVertexHandler(state);\n};\n\n/**\n * Function: createEdgeHandler\n * \n * Hooks to create a new <mxEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeHandler = function(state, edgeStyle)\n{\n\tvar result = null;\n\t\n\tif (edgeStyle == mxEdgeStyle.Loop ||\n\t\tedgeStyle == mxEdgeStyle.ElbowConnector ||\n\t\tedgeStyle == mxEdgeStyle.SideToSide ||\n\t\tedgeStyle == mxEdgeStyle.TopToBottom)\n\t{\n\t\tresult = this.createElbowEdgeHandler(state);\n\t}\n\telse if (edgeStyle == mxEdgeStyle.SegmentConnector || \n\t\t\tedgeStyle == mxEdgeStyle.OrthConnector)\n\t{\n\t\tresult = this.createEdgeSegmentHandler(state);\n\t}\n\telse\n\t{\n\t\tresult = new mxEdgeHandler(state);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createEdgeSegmentHandler\n * \n * Hooks to create a new <mxEdgeSegmentHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeSegmentHandler = function(state)\n{\n\treturn new mxEdgeSegmentHandler(state);\n};\n\n/**\n * Function: createElbowEdgeHandler\n * \n * Hooks to create a new <mxElbowEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createElbowEdgeHandler = function(state)\n{\n\treturn new mxElbowEdgeHandler(state);\n};\n\n/**\n * Group: Graph events\n */\n\n/**\n * Function: addMouseListener\n * \n * Adds a listener to the graph event dispatch loop. The listener\n * must implement the mouseDown, mouseMove and mouseUp methods\n * as shown in the <mxMouseEvent> class.\n * \n * Parameters:\n * \n * listener - Listener to be added to the graph event listeners.\n */\nmxGraph.prototype.addMouseListener = function(listener)\n{\n\tif (this.mouseListeners == null)\n\t{\n\t\tthis.mouseListeners = [];\n\t}\n\t\n\tthis.mouseListeners.push(listener);\n};\n\n/**\n * Function: removeMouseListener\n * \n * Removes the specified graph listener.\n * \n * Parameters:\n * \n * listener - Listener to be removed from the graph event listeners.\n */\nmxGraph.prototype.removeMouseListener = function(listener)\n{\n\tif (this.mouseListeners != null)\n\t{\n\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t{\n\t\t\tif (this.mouseListeners[i] == listener)\n\t\t\t{\n\t\t\t\tthis.mouseListeners.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateMouseEvent\n * \n * Sets the graphX and graphY properties if the given <mxMouseEvent> if\n * required and returned the event.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> to be updated.\n * evtName - Name of the mouse event.\n */\nmxGraph.prototype.updateMouseEvent = function(me, evtName)\n{\n\tif (me.graphX == null || me.graphY == null)\n\t{\n\t\tvar pt = mxUtils.convertPoint(this.container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x - this.panDx;\n\t\tme.graphY = pt.y - this.panDy;\n\t\t\n\t\t// Searches for rectangles using method if native hit detection is disabled on shape\n\t\tif (me.getCell() == null && this.isMouseDown && evtName == mxEvent.MOUSE_MOVE)\n\t\t{\n\t\t\tme.state = this.view.getState(this.getCellAt(pt.x, pt.y, null, null, null, function(state)\n\t\t\t{\n\t\t\t\treturn state.shape == null || state.shape.paintBackground != mxRectangleShape.prototype.paintBackground ||\n\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1' ||\n\t\t\t\t\t(state.shape.fill != null && state.shape.fill != mxConstants.NONE);\n\t\t\t}));\n\t\t}\n\t}\n\t\n\treturn me;\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the state for the given touch event.\n */\nmxGraph.prototype.getStateForTouchEvent = function(evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\t\n\t// Dispatches the drop event to the graph which\n\t// consumes and executes the source function\n\tvar pt = mxUtils.convertPoint(this.container, x, y);\n\n\treturn this.view.getState(this.getCellAt(pt.x, pt.y));\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>.\n */\nmxGraph.prototype.isEventIgnored = function(evtName, me, sender)\n{\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\tvar result = false;\n\n\t// Drops events that are fired more than once\n\tif (me.getEvent() == this.lastEvent)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tthis.lastEvent = me.getEvent();\n\t}\n\n\t// Installs event listeners to capture the complete gesture from the event source\n\t// for non-MS touch events as a workaround for all events for the same geture being\n\t// fired from the event source even if that was removed from the DOM.\n\tif (this.eventSource != null && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t\tthis.mouseMoveRedirect = null;\n\t\tthis.mouseUpRedirect = null;\n\t\tthis.eventSource = null;\n\t}\n\telse if (!mxClient.IS_GC && this.eventSource != null && me.getSource() != this.eventSource)\n\t{\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_TOUCH && evtName == mxEvent.MOUSE_DOWN && !mouseEvent && !mxEvent.isPenEvent(me.getEvent()))\n\t{\n\t\tthis.eventSource = me.getSource();\n\n\t\tthis.mouseMoveRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\tthis.mouseUpRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t}\n\n\t// Factored out the workarounds for FF to make it easier to override/remove\n\t// Note this method has side-effects!\n\tif (this.isSyntheticEventIgnored(evtName, me, sender))\n\t{\n\t\tresult = true;\n\t}\n\n\t// Never fires mouseUp/-Down for double clicks\n\tif (!mxEvent.isPopupTrigger(this.lastEvent) && evtName != mxEvent.MOUSE_MOVE && this.lastEvent.detail == 2)\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Filters out of sequence events or mixed event types during a gesture\n\tif (evtName == mxEvent.MOUSE_UP && this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = false;\n\t}\n\telse if (evtName == mxEvent.MOUSE_DOWN && !this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = true;\n\t\tthis.isMouseTrigger = mouseEvent;\n\t}\n\t// Drops mouse events that are fired during touch gestures as a workaround for Webkit\n\t// and mouse events that are not in sync with the current internal button state\n\telse if (!result && (((!mxClient.IS_FF || evtName != mxEvent.MOUSE_MOVE) &&\n\t\tthis.isMouseDown && this.isMouseTrigger != mouseEvent) ||\n\t\t(evtName == mxEvent.MOUSE_DOWN && this.isMouseDown) ||\n\t\t(evtName == mxEvent.MOUSE_UP && !this.isMouseDown)))\n\t{\n\t\tresult = true;\n\t}\n\t\n\tif (!result && evtName == mxEvent.MOUSE_DOWN)\n\t{\n\t\tthis.lastMouseX = me.getX();\n\t\tthis.lastMouseY = me.getY();\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isSyntheticEventIgnored\n * \n * Hook for ignoring synthetic mouse events after touchend in Firefox.\n */\nmxGraph.prototype.isSyntheticEventIgnored = function(evtName, me, sender)\n{\n\tvar result = false;\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\t\n\t// LATER: This does not cover all possible cases that can go wrong in FF\n\tif (this.ignoreMouseEvents && mouseEvent && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tthis.ignoreMouseEvents = evtName != mxEvent.MOUSE_UP;\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_FF && !mouseEvent && evtName == mxEvent.MOUSE_UP)\n\t{\n\t\tthis.ignoreMouseEvents = true;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isEventSourceIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>. This\n * implementation returns true for select, option and input (if not of type\n * checkbox, radio, button, submit or file) event sources if the event is not\n * a mouse event or a left mouse button press event.\n * \n * Parameters:\n * \n * evtName - The name of the event.\n * me - <mxMouseEvent> that should be ignored.\n */\nmxGraph.prototype.isEventSourceIgnored = function(evtName, me)\n{\n\tvar source = me.getSource();\n\tvar name = (source.nodeName != null) ? source.nodeName.toLowerCase() : '';\n\tvar candidate = !mxEvent.isMouseEvent(me.getEvent()) || mxEvent.isLeftMouseButton(me.getEvent());\n\t\n\treturn evtName == mxEvent.MOUSE_DOWN && candidate && (name == 'select' || name == 'option' ||\n\t\t(name == 'input' && source.type != 'checkbox' && source.type != 'radio' &&\n\t\tsource.type != 'button' && source.type != 'submit' && source.type != 'file'));\n};\n\n/**\n * Function: getEventState\n * \n * Returns the <mxCellState> to be used when firing the mouse event for the\n * given state. This implementation returns the given state.\n * \n * Parameters:\n * \n * <mxCellState> - State whose event source should be returned.\n */\nmxGraph.prototype.getEventState = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: fireMouseEvent\n * \n * Dispatches the given event in the graph event dispatch loop. Possible\n * event names are <mxEvent.MOUSE_DOWN>, <mxEvent.MOUSE_MOVE> and\n * <mxEvent.MOUSE_UP>. All listeners are invoked for all events regardless\n * of the consumed state of the event.\n * \n * Parameters:\n * \n * evtName - String that specifies the type of event to be dispatched.\n * me - <mxMouseEvent> to be fired.\n * sender - Optional sender argument. Default is this.\n */\nmxGraph.prototype.fireMouseEvent = function(evtName, me, sender)\n{\n\tif (this.isEventSourceIgnored(evtName, me))\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t\t\n\t\treturn;\n\t}\n\t\n\tif (sender == null)\n\t{\n\t\tsender = this;\n\t}\n\n\t// Updates the graph coordinates in the event\n\tme = this.updateMouseEvent(me, evtName);\n\n\t// Detects and processes double taps for touch-based devices which do not have native double click events\n\t// or where detection of double click is not always possible (quirks, IE10+). Note that this can only handle\n\t// double clicks on cells because the sequence of events in IE prevents detection on the background, it fires\n\t// two mouse ups, one of which without a cell but no mousedown for the second click which means we cannot\n\t// detect which mouseup(s) are part of the first click, ie we do not know when the first click ends.\n\tif ((!this.nativeDblClickEnabled && !mxEvent.isPopupTrigger(me.getEvent())) || (this.doubleTapEnabled &&\n\t\tmxClient.IS_TOUCH && (mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent()))))\n\t{\n\t\tvar currentTime = new Date().getTime();\n\t\t\n\t\t// NOTE: Second mouseDown for double click missing in quirks mode\n\t\tif ((!mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_DOWN) || (mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_UP && !this.fireDoubleClick))\n\t\t{\n\t\t\tif (this.lastTouchEvent != null && this.lastTouchEvent != me.getEvent() &&\n\t\t\t\tcurrentTime - this.lastTouchTime < this.doubleTapTimeout &&\n\t\t\t\tMath.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance &&\n\t\t\t\tthis.doubleClickCounter < 2)\n\t\t\t{\n\t\t\t\tthis.doubleClickCounter++;\n\t\t\t\tvar doubleClickFired = false;\n\t\t\t\t\n\t\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t{\n\t\t\t\t\tif (me.getCell() == this.lastTouchCell && this.lastTouchCell != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t\t\tvar cell = this.lastTouchCell;\n\t\t\t\t\t\tthis.lastTouchCell = null;\n\n\t\t\t\t\t\t// Fires native dblclick event via event source\n\t\t\t\t\t\t// NOTE: This fires two double click events on edges in quirks mode. While\n\t\t\t\t\t\t// trying to fix this, we realized that nativeDoubleClick can be disabled for\n\t\t\t\t\t\t// quirks and IE10+ (or we didn't find the case mentioned above where it\n\t\t\t\t\t\t// would not work), ie. all double clicks seem to be working without this.\n\t\t\t\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tme.getSource().fireEvent('ondblclick');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t\t\t\tdoubleClickFired = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.fireDoubleClick = true;\n\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t}\n\n\t\t\t\t// Do not ignore mouse up in quirks in this case\n\t\t\t\tif (!mxClient.IS_QUIRKS || doubleClickFired)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.lastTouchEvent == null || this.lastTouchEvent != me.getEvent())\n\t\t\t{\n\t\t\t\tthis.lastTouchCell = me.getCell();\n\t\t\t\tthis.lastTouchX = me.getX();\n\t\t\t\tthis.lastTouchY = me.getY();\n\t\t\t\tthis.lastTouchTime = currentTime;\n\t\t\t\tthis.lastTouchEvent = me.getEvent();\n\t\t\t\tthis.doubleClickCounter = 0;\n\t\t\t}\n\t\t}\n\t\telse if ((this.isMouseDown || evtName == mxEvent.MOUSE_UP) && this.fireDoubleClick)\n\t\t{\n\t\t\tthis.fireDoubleClick = false;\n\t\t\tvar cell = this.lastTouchCell;\n\t\t\tthis.lastTouchCell = null;\n\t\t\tthis.isMouseDown = false;\n\t\t\t\n\t\t\t// Workaround for Chrome/Safari not firing native double click events for double touch on background\n\t\t\tvar valid = (cell != null) || ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\t\t(mxClient.IS_GC || mxClient.IS_SF));\n\t\t\t\n\t\t\tif (valid && Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance)\n\t\t\t{\n\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!this.isEventIgnored(evtName, me, sender))\n\t{\n\t\t// Updates the event state via getEventState\n\t\tme.state = this.getEventState(me.getState());\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FIRE_MOUSE_EVENT, 'eventName', evtName, 'event', me));\n\t\t\n\t\tif ((mxClient.IS_OP || mxClient.IS_SF || mxClient.IS_GC || mxClient.IS_IE11 ||\n\t\t\t(mxClient.IS_IE && mxClient.IS_SVG) || me.getEvent().target != this.container))\n\t\t{\n\t\t\tif (evtName == mxEvent.MOUSE_MOVE && this.isMouseDown && this.autoScroll && !mxEvent.isMultiTouchEvent(me.getEvent))\n\t\t\t{\n\t\t\t\tthis.scrollPointToVisible(me.getGraphX(), me.getGraphY(), this.autoExtend);\n\t\t\t}\n\t\t\telse if (evtName == mxEvent.MOUSE_UP && this.ignoreScrollbars && this.translateToScrollPosition &&\n\t\t\t\t\t(this.container.scrollLeft != 0 || this.container.scrollTop != 0))\n\t\t\t{\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar tr = this.view.translate;\n\t\t\t\tthis.view.setTranslate(tr.x - this.container.scrollLeft / s, tr.y - this.container.scrollTop / s);\n\t\t\t\tthis.container.scrollLeft = 0;\n\t\t\t\tthis.container.scrollTop = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.mouseListeners != null)\n\t\t\t{\n\t\t\t\tvar args = [sender, me];\n\t\n\t\t\t\t// Does not change returnValue in Opera\n\t\t\t\tif (!me.getEvent().preventDefault)\n\t\t\t\t{\n\t\t\t\t\tme.getEvent().returnValue = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar l = this.mouseListeners[i];\n\t\t\t\t\t\n\t\t\t\t\tif (evtName == mxEvent.MOUSE_DOWN)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseDown.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_MOVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseMove.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseUp.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Invokes the click handler\n\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t{\n\t\t\t\tthis.click(me);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Detects tapAndHold events using a timer\n\t\tif ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\tevtName == mxEvent.MOUSE_DOWN && this.tapAndHoldEnabled && !this.tapAndHoldInProgress)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = true;\n\t\t\tthis.initialTouchX = me.getGraphX();\n\t\t\tthis.initialTouchY = me.getGraphY();\n\t\t\t\n\t\t\tvar handler = function()\n\t\t\t{\n\t\t\t\tif (this.tapAndHoldValid)\n\t\t\t\t{\n\t\t\t\t\tthis.tapAndHold(me);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\t\tthis.tapAndHoldValid = false;\n\t\t\t};\n\t\t\t\n\t\t\tif (this.tapAndHoldThread)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.tapAndHoldThread);\n\t\t\t}\n\t\n\t\t\tthis.tapAndHoldThread = window.setTimeout(mxUtils.bind(this, handler), this.tapAndHoldDelay);\n\t\t\tthis.tapAndHoldValid = true;\n\t\t}\n\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\tthis.tapAndHoldValid = false;\n\t\t}\n\t\telse if (this.tapAndHoldValid)\n\t\t{\n\t\t\tthis.tapAndHoldValid =\n\t\t\t\tMath.abs(this.initialTouchX - me.getGraphX()) < this.tolerance &&\n\t\t\t\tMath.abs(this.initialTouchY - me.getGraphY()) < this.tolerance;\n\t\t}\n\n\t\t// Stops editing for all events other than from cellEditor\n\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isEditing() && !this.cellEditor.isEventSource(me.getEvent()))\n\t\t{\n\t\t\tthis.stopEditing(!this.isInvokesStopCellEditing());\n\t\t}\n\n\t\tthis.consumeMouseEvent(evtName, me, sender);\n\t}\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given <mxMouseEvent> if it's a touchStart event.\n */\nmxGraph.prototype.consumeMouseEvent = function(evtName, me, sender)\n{\n\t// Workaround for duplicate click in Windows 8 with Chrome/FF/Opera with touch\n\tif (evtName == mxEvent.MOUSE_DOWN && mxEvent.isTouchEvent(me.getEvent()))\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: fireGestureEvent\n * \n * Dispatches a <mxEvent.GESTURE> event. The following example will resize the\n * cell under the mouse based on the scale property of the native touch event.\n * \n * (code)\n * graph.addListener(mxEvent.GESTURE, function(sender, eo)\n * {\n *   var evt = eo.getProperty('event');\n *   var state = graph.view.getState(eo.getProperty('cell'));\n *   \n *   if (graph.isEnabled() && graph.isCellResizable(state.cell) && Math.abs(1 - evt.scale) > 0.2)\n *   {\n *     var scale = graph.view.scale;\n *     var tr = graph.view.translate;\n *     \n *     var w = state.width * evt.scale;\n *     var h = state.height * evt.scale;\n *     var x = state.x - (w - state.width) / 2;\n *     var y = state.y - (h - state.height) / 2;\n *     \n *     var bounds = new mxRectangle(graph.snap(x / scale) - tr.x,\n *     \t\tgraph.snap(y / scale) - tr.y, graph.snap(w / scale), graph.snap(h / scale));\n *     graph.resizeCell(state.cell, bounds);\n *     eo.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * evt - Gestureend event that represents the gesture.\n * cell - Optional <mxCell> associated with the gesture.\n */\nmxGraph.prototype.fireGestureEvent = function(evt, cell)\n{\n\t// Resets double tap event handling when gestures take place\n\tthis.lastTouchTime = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.GESTURE, 'event', evt, 'cell', cell));\n};\n\n/**\n * Function: destroy\n * \n * Destroys the graph and all its resources.\n */\nmxGraph.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\t\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.selectionCellsHandler != null)\n\t\t{\n\t\t\tthis.selectionCellsHandler.destroy();\n\t\t}\n\n\t\tif (this.panningHandler != null)\n\t\t{\n\t\t\tthis.panningHandler.destroy();\n\t\t}\n\n\t\tif (this.popupMenuHandler != null)\n\t\t{\n\t\t\tthis.popupMenuHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.connectionHandler != null)\n\t\t{\n\t\t\tthis.connectionHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.graphHandler != null)\n\t\t{\n\t\t\tthis.graphHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.cellEditor != null)\n\t\t{\n\t\t\tthis.cellEditor.destroy();\n\t\t}\n\t\t\n\t\tif (this.view != null)\n\t\t{\n\t\t\tthis.view.destroy();\n\t\t}\n\n\t\tif (this.model != null && this.graphModelChangeListener != null)\n\t\t{\n\t\t\tthis.model.removeListener(this.graphModelChangeListener);\n\t\t\tthis.graphModelChangeListener = null;\n\t\t}\n\n\t\tthis.container = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellOverlay\n *\n * Extends <mxEventSource> to implement a graph overlay, represented by an icon\n * and a tooltip. Overlays can handle and fire <click> events and are added to\n * the graph using <mxGraph.addCellOverlay>, and removed using\n * <mxGraph.removeCellOverlay>, or <mxGraph.removeCellOverlays> to remove all overlays.\n * The <mxGraph.getCellOverlays> function returns the array of overlays for a given\n * cell in a graph. If multiple overlays exist for the same cell, then\n * <getBounds> should be overridden in at least one of the overlays.\n * \n * Overlays appear on top of all cells in a special layer. If this is not\n * desirable, then the image must be rendered as part of the shape or label of\n * the cell instead.\n *\n * Example:\n * \n * The following adds a new overlays for a given vertex and selects the cell\n * if the overlay is clicked.\n *\n * (code)\n * var overlay = new mxCellOverlay(img, html);\n * graph.addCellOverlay(vertex, overlay);\n * overlay.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   graph.setSelectionCell(cell);\n * });\n * (end)\n * \n * For cell overlays to be printed use <mxPrintPreview.printOverlays>.\n *\n * Event: mxEvent.CLICK\n *\n * Fires when the user clicks on the overlay. The <code>event</code> property\n * contains the corresponding mouse event and the <code>cell</code> property\n * contains the cell. For touch devices this is fired if the element receives\n * a touchend event.\n * \n * Constructor: mxCellOverlay\n *\n * Constructs a new overlay using the given image and tooltip.\n * \n * Parameters:\n * \n * image - <mxImage> that represents the icon to be displayed.\n * tooltip - Optional string that specifies the tooltip.\n * align - Optional horizontal alignment for the overlay. Possible\n * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>\n * (default).\n * verticalAlign - Vertical alignment for the overlay. Possible\n * values are <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>\n * (default).\n */\nfunction mxCellOverlay(image, tooltip, align, verticalAlign, offset, cursor)\n{\n\tthis.image = image;\n\tthis.tooltip = tooltip;\n\tthis.align = (align != null) ? align : this.align;\n\tthis.verticalAlign = (verticalAlign != null) ? verticalAlign : this.verticalAlign;\n\tthis.offset = (offset != null) ? offset : new mxPoint();\n\tthis.cursor = (cursor != null) ? cursor : 'help';\n};\n\n/**\n * Extends mxEventSource.\n */\nmxCellOverlay.prototype = new mxEventSource();\nmxCellOverlay.prototype.constructor = mxCellOverlay;\n\n/**\n * Variable: image\n *\n * Holds the <mxImage> to be used as the icon.\n */\nmxCellOverlay.prototype.image = null;\n\n/**\n * Variable: tooltip\n * \n * Holds the optional string to be used as the tooltip.\n */\nmxCellOverlay.prototype.tooltip = null;\n\n/**\n * Variable: align\n * \n * Holds the horizontal alignment for the overlay. Default is\n * <mxConstants.ALIGN_RIGHT>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.align = mxConstants.ALIGN_RIGHT;\n\n/**\n * Variable: verticalAlign\n * \n * Holds the vertical alignment for the overlay. Default is\n * <mxConstants.ALIGN_BOTTOM>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.verticalAlign = mxConstants.ALIGN_BOTTOM;\n\n/**\n * Variable: offset\n * \n * Holds the offset as an <mxPoint>. The offset will be scaled according to the\n * current scale.\n */\nmxCellOverlay.prototype.offset = null;\n\n/**\n * Variable: cursor\n * \n * Holds the cursor for the overlay. Default is 'help'.\n */\nmxCellOverlay.prototype.cursor = null;\n\n/**\n * Variable: defaultOverlap\n * \n * Defines the overlapping for the overlay, that is, the proportional distance\n * from the origin to the point defined by the alignment. Default is 0.5.\n */\nmxCellOverlay.prototype.defaultOverlap = 0.5;\n\n/**\n * Function: getBounds\n * \n * Returns the bounds of the overlay for the given <mxCellState> as an\n * <mxRectangle>. This should be overridden when using multiple overlays\n * per cell so that the overlays do not overlap.\n * \n * The following example will place the overlay along an edge (where\n * x=[-1..1] from the start to the end of the edge and y is the\n * orthogonal offset in px).\n * \n * (code)\n * overlay.getBounds = function(state)\n * {\n *   var bounds = mxCellOverlay.prototype.getBounds.apply(this, arguments);\n *   \n *   if (state.view.graph.getModel().isEdge(state.cell))\n *   {\n *     var pt = state.view.getPoint(state, {x: 0, y: 0, relative: true});\n *     \n *     bounds.x = pt.x - bounds.width / 2;\n *     bounds.y = pt.y - bounds.height / 2;\n *   }\n *   \n *   return bounds;\n * };\n * (end)\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the current state of the\n * associated cell.\n */\nmxCellOverlay.prototype.getBounds = function(state)\n{\n\tvar isEdge = state.view.graph.getModel().isEdge(state.cell);\n\tvar s = state.view.scale;\n\tvar pt = null;\n\n\tvar w = this.image.width;\n\tvar h = this.image.height;\n\t\n\tif (isEdge)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (pts.length % 2 == 1)\n\t\t{\n\t\t\tpt = pts[Math.floor(pts.length / 2)];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar idx = pts.length / 2;\n\t\t\tvar p0 = pts[idx-1];\n\t\t\tvar p1 = pts[idx];\n\t\t\tpt = new mxPoint(p0.x + (p1.x - p0.x) / 2,\n\t\t\t\tp0.y + (p1.y - p0.y) / 2);\n\t\t}\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint();\n\t\t\n\t\tif (this.align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tpt.x = state.x;\n\t\t}\n\t\telse if (this.align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tpt.x = state.x + state.width / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.x = state.x + state.width;\n\t\t}\n\t\t\n\t\tif (this.verticalAlign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tpt.y = state.y;\n\t\t}\n\t\telse if (this.verticalAlign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tpt.y = state.y + state.height / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.y = state.y + state.height;\n\t\t}\n\t}\n\n\treturn new mxRectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s),\n\t\tMath.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);\n};\n\n/**\n * Function: toString\n * \n * Returns the textual representation of the overlay to be used as the\n * tooltip. This implementation returns <tooltip>.\n */\nmxCellOverlay.prototype.toString = function()\n{\n\treturn this.tooltip;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxOutline\n *\n * Implements an outline (aka overview) for a graph. Set <updateOnPan> to true\n * to enable updates while the source graph is panning.\n * \n * Example:\n * \n * (code)\n * var outline = new mxOutline(graph, div);\n * (end)\n * \n * If an outline is used in an <mxWindow> in IE8 standards mode, the following\n * code makes sure that the shadow filter is not inherited and that any\n * transparent elements in the graph do not show the page background, but the\n * background of the graph container.\n * \n * (code)\n * if (document.documentMode == 8)\n * {\n *   container.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n * }\n * (end)\n * \n * To move the graph to the top, left corner the following code can be used.\n * \n * (code)\n * var scale = graph.view.scale;\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x / scale, -bounds.y / scale);\n * (end)\n * \n * To toggle the suspended mode, the following can be used.\n * \n * (code)\n * outline.suspended = !outln.suspended;\n * if (!outline.suspended)\n * {\n *   outline.update(true);\n * }\n * (end)\n * \n * Constructor: mxOutline\n *\n * Constructs a new outline for the specified graph inside the given\n * container.\n * \n * Parameters:\n * \n * source - <mxGraph> to create the outline for.\n * container - DOM node that will contain the outline.\n */\nfunction mxOutline(source, container)\n{\n\tthis.source = source;\n\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\n/**\n * Function: source\n * \n * Reference to the source <mxGraph>.\n */\nmxOutline.prototype.source = null;\n\n/**\n * Function: outline\n * \n * Reference to the <mxGraph> that renders the outline.\n */\nmxOutline.prototype.outline = null;\n\n/**\n * Function: graphRenderHint\n * \n * Renderhint to be used for the outline graph. Default is faster.\n */\nmxOutline.prototype.graphRenderHint = mxConstants.RENDERING_HINT_FASTER;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxOutline.prototype.enabled = true;\n\n/**\n * Variable: showViewport\n * \n * Specifies a viewport rectangle should be shown. Default is true.\n */\nmxOutline.prototype.showViewport = true;\n\n/**\n * Variable: border\n * \n * Border to be added at the bottom and right. Default is 10.\n */\nmxOutline.prototype.border = 10;\n\n/**\n * Variable: enabled\n * \n * Specifies the size of the sizer handler. Default is 8.\n */\nmxOutline.prototype.sizerSize = 8;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible in the outline. Default is false.\n */\nmxOutline.prototype.labelsVisible = false;\n\n/**\n * Variable: updateOnPan\n * \n * Specifies if <update> should be called for <mxEvent.PAN> in the source\n * graph. Default is false.\n */\nmxOutline.prototype.updateOnPan = false;\n\n/**\n * Variable: sizerImage\n * \n * Optional <mxImage> to be used for the sizer. Default is null.\n */\nmxOutline.prototype.sizerImage = null;\n\n/**\n * Variable: minScale\n * \n * Minimum scale to be used. Default is 0.0001.\n */\nmxOutline.prototype.minScale = 0.0001;\n\n/**\n * Variable: suspended\n * \n * Optional boolean flag to suspend updates. Default is false. This flag will\n * also suspend repaints of the outline. To toggle this switch, use the\n * following code.\n * \n * (code)\n * nav.suspended = !nav.suspended;\n * \n * if (!nav.suspended)\n * {\n *   nav.update(true);\n * }\n * (end)\n */\nmxOutline.prototype.suspended = false;\n\n/**\n * Variable: forceVmlHandles\n * \n * Specifies if VML should be used to render the handles in this control. This\n * is true for IE8 standards mode and false for all other browsers and modes.\n * This is a workaround for rendering issues of HTML elements over elements\n * with filters in IE 8 standards mode.\n */\nmxOutline.prototype.forceVmlHandles = document.documentMode == 8;\n\n/**\n * Function: createGraph\n * \n * Creates the <mxGraph> used in the outline.\n */\nmxOutline.prototype.createGraph = function(container)\n{\n\tvar graph = new mxGraph(container, this.source.getModel(), this.graphRenderHint, this.source.getStylesheet());\n\tgraph.foldingEnabled = false;\n\tgraph.autoScroll = false;\n\t\n\treturn graph;\n};\n\n/**\n * Function: init\n * \n * Initializes the outline inside the given container.\n */\nmxOutline.prototype.init = function(container)\n{\n\tthis.outline = this.createGraph(container);\n\t\n\t// Do not repaint when suspended\n\tvar outlineGraphModelChanged = this.outline.graphModelChanged;\n\tthis.outline.graphModelChanged = mxUtils.bind(this, function(changes)\n\t{\n\t\tif (!this.suspended && this.outline != null)\n\t\t{\n\t\t\toutlineGraphModelChanged.apply(this.outline, arguments);\n\t\t}\n\t});\n\n\t// Enables faster painting in SVG\n\tif (mxClient.IS_SVG)\n\t{\n\t\tvar node = this.outline.getView().getCanvas().parentNode;\n\t\tnode.setAttribute('shape-rendering', 'optimizeSpeed');\n\t\tnode.setAttribute('image-rendering', 'optimizeSpeed');\n\t}\n\t\n\t// Hides cursors and labels\n\tthis.outline.labelsVisible = this.labelsVisible;\n\tthis.outline.setEnabled(false);\n\t\n\tthis.updateHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (!this.suspended && !this.active)\n\t\t{\n\t\t\tthis.update();\n\t\t}\n\t});\n\t\n\t// Updates the scale of the outline after a change of the main graph\n\tthis.source.getModel().addListener(mxEvent.CHANGE, this.updateHandler);\n\tthis.outline.addMouseListener(this);\n\t\n\t// Adds listeners to keep the outline in sync with the source graph\n\tvar view = this.source.getView();\n\tview.addListener(mxEvent.SCALE, this.updateHandler);\n\tview.addListener(mxEvent.TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.SCALE_AND_TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.DOWN, this.updateHandler);\n\tview.addListener(mxEvent.UP, this.updateHandler);\n\n\t// Updates blue rectangle on scroll\n\tmxEvent.addListener(this.source.container, 'scroll', this.updateHandler);\n\t\n\tthis.panHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.updateOnPan)\n\t\t{\n\t\t\tthis.updateHandler.apply(this, arguments);\n\t\t}\n\t});\n\tthis.source.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Refreshes the graph in the outline after a refresh of the main graph\n\tthis.refreshHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.outline.setStylesheet(this.source.getStylesheet());\n\t\tthis.outline.refresh();\n\t});\n\tthis.source.addListener(mxEvent.REFRESH, this.refreshHandler);\n\n\t// Creates the blue rectangle for the viewport\n\tthis.bounds = new mxRectangle(0, 0, 0, 0);\n\tthis.selectionBorder = new mxRectangleShape(this.bounds, null,\n\t\tmxConstants.OUTLINE_COLOR, mxConstants.OUTLINE_STROKEWIDTH);\n\tthis.selectionBorder.dialect = this.outline.dialect;\n\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.selectionBorder.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.selectionBorder.init(this.outline.getView().getOverlayPane());\n\n\t// Handles event by catching the initial pointer start and then listening to the\n\t// complete gesture on the event target. This is needed because all the events\n\t// are routed via the initial element even if that element is removed from the\n\t// DOM, which happens when we repaint the selection border and zoom handles.\n\tvar handler = mxUtils.bind(this, function(evt)\n\t{\n\t\tvar t = mxEvent.getSource(evt);\n\t\t\n\t\tvar redirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tvar redirect2 = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tmxEvent.removeGestureListeners(t, null, redirect, redirect2);\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(t, null, redirect, redirect2);\n\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t});\n\t\n\tmxEvent.addGestureListeners(this.selectionBorder.node, handler);\n\n\t// Creates a small blue rectangle for sizing (sizer handle)\n\tthis.sizer = this.createSizer();\n\t\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.sizer.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.sizer.init(this.outline.getView().getOverlayPane());\n\t\n\tif (this.enabled)\n\t{\n\t\tthis.sizer.node.style.cursor = 'nwse-resize';\n\t}\n\t\n\tmxEvent.addGestureListeners(this.sizer.node, handler);\n\n\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\tthis.sizer.node.style.display = this.selectionBorder.node.style.display;\n\tthis.selectionBorder.node.style.cursor = 'move';\n\n\tthis.update(false);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxOutline.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setZoomEnabled\n * \n * Enables or disables the zoom handling by showing or hiding the respective\n * handle.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setZoomEnabled = function(value)\n{\n\tthis.sizer.node.style.visibility = (value) ? 'visible' : 'hidden';\n};\n\n/**\n * Function: refresh\n * \n * Invokes <update> and revalidate the outline. This method is deprecated.\n */\nmxOutline.prototype.refresh = function()\n{\n\tthis.update(true);\n};\n\n/**\n * Function: createSizer\n * \n * Creates the shape used as the sizer.\n */\nmxOutline.prototype.createSizer = function()\n{\n\tif (this.sizerImage != null)\n\t{\n\t\tvar sizer = new mxImageShape(new mxRectangle(0, 0, this.sizerImage.width, this.sizerImage.height), this.sizerImage.src);\n\t\tsizer.dialect = this.outline.dialect;\n\t\t\n\t\treturn sizer;\n\t}\n\telse\n\t{\n\t\tvar sizer = new mxRectangleShape(new mxRectangle(0, 0, this.sizerSize, this.sizerSize),\n\t\t\tmxConstants.OUTLINE_HANDLE_FILLCOLOR, mxConstants.OUTLINE_HANDLE_STROKECOLOR);\n\t\tsizer.dialect = this.outline.dialect;\n\t\n\t\treturn sizer;\n\t}\n};\n\n/**\n * Function: getSourceContainerSize\n * \n * Returns the size of the source container.\n */\nmxOutline.prototype.getSourceContainerSize = function()\n{\n\treturn new mxRectangle(0, 0, this.source.container.scrollWidth, this.source.container.scrollHeight);\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getOutlineOffset = function(scale)\n{\n\treturn null;\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getSourceGraphBounds = function()\n{\n\treturn this.source.getGraphBounds();\n};\n\n/**\n * Function: update\n * \n * Updates the outline.\n */\nmxOutline.prototype.update = function(revalidate)\n{\n\tif (this.source != null && this.source.container != null &&\n\t\tthis.outline != null && this.outline.container != null)\n\t{\n\t\tvar sourceScale = this.source.view.scale;\n\t\tvar scaledGraphBounds = this.getSourceGraphBounds();\n\t\tvar unscaledGraphBounds = new mxRectangle(scaledGraphBounds.x / sourceScale + this.source.panDx,\n\t\t\t\tscaledGraphBounds.y / sourceScale + this.source.panDy, scaledGraphBounds.width / sourceScale,\n\t\t\t\tscaledGraphBounds.height / sourceScale);\n\n\t\tvar unscaledFinderBounds = new mxRectangle(0, 0,\n\t\t\tthis.source.container.clientWidth / sourceScale,\n\t\t\tthis.source.container.clientHeight / sourceScale);\n\t\t\n\t\tvar union = unscaledGraphBounds.clone();\n\t\tunion.add(unscaledFinderBounds);\n\t\n\t\t// Zooms to the scrollable area if that is bigger than the graph\n\t\tvar size = this.getSourceContainerSize();\n\t\tvar completeWidth = Math.max(size.width / sourceScale, union.width);\n\t\tvar completeHeight = Math.max(size.height / sourceScale, union.height);\n\t\n\t\tvar availableWidth = Math.max(0, this.outline.container.clientWidth - this.border);\n\t\tvar availableHeight = Math.max(0, this.outline.container.clientHeight - this.border);\n\t\t\n\t\tvar outlineScale = Math.min(availableWidth / completeWidth, availableHeight / completeHeight);\n\t\tvar scale = (isNaN(outlineScale)) ? this.minScale : Math.max(this.minScale, outlineScale);\n\n\t\tif (scale > 0)\n\t\t{\n\t\t\tif (this.outline.getView().scale != scale)\n\t\t\t{\n\t\t\t\tthis.outline.getView().scale = scale;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\tvar navView = this.outline.getView();\n\t\t\t\n\t\t\tif (navView.currentRoot != this.source.getView().currentRoot)\n\t\t\t{\n\t\t\t\tnavView.setCurrentRoot(this.source.getView().currentRoot);\n\t\t\t}\n\n\t\t\tvar t = this.source.view.translate;\n\t\t\tvar tx = t.x + this.source.panDx;\n\t\t\tvar ty = t.y + this.source.panDy;\n\t\t\t\n\t\t\tvar off = this.getOutlineOffset(scale);\n\t\t\t\n\t\t\tif (off != null)\n\t\t\t{\n\t\t\t\ttx += off.x;\n\t\t\t\tty += off.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (unscaledGraphBounds.x < 0)\n\t\t\t{\n\t\t\t\ttx = tx - unscaledGraphBounds.x;\n\t\t\t}\n\t\t\tif (unscaledGraphBounds.y < 0)\n\t\t\t{\n\t\t\t\tty = ty - unscaledGraphBounds.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (navView.translate.x != tx || navView.translate.y != ty)\n\t\t\t{\n\t\t\t\tnavView.translate.x = tx;\n\t\t\t\tnavView.translate.y = ty;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\t// Prepares local variables for computations\n\t\t\tvar t2 = navView.translate;\n\t\t\tscale = this.source.getView().scale;\n\t\t\tvar scale2 = scale / navView.scale;\n\t\t\tvar scale3 = 1.0 / navView.scale;\n\t\t\tvar container = this.source.container;\n\t\t\t\n\t\t\t// Updates the bounds of the viewrect in the navigation\n\t\t\tthis.bounds = new mxRectangle(\n\t\t\t\t(t2.x - t.x - this.source.panDx) / scale3,\n\t\t\t\t(t2.y - t.y - this.source.panDy) / scale3,\n\t\t\t\t(container.clientWidth / scale2),\n\t\t\t\t(container.clientHeight / scale2));\n\t\t\t\n\t\t\t// Adds the scrollbar offset to the finder\n\t\t\tthis.bounds.x += this.source.container.scrollLeft * navView.scale / scale;\n\t\t\tthis.bounds.y += this.source.container.scrollTop * navView.scale / scale;\n\t\t\t\n\t\t\tvar b = this.selectionBorder.bounds;\n\t\t\t\n\t\t\tif (b.x != this.bounds.x || b.y != this.bounds.y || b.width != this.bounds.width || b.height != this.bounds.height)\n\t\t\t{\n\t\t\t\tthis.selectionBorder.bounds = this.bounds;\n\t\t\t\tthis.selectionBorder.redraw();\n\t\t\t}\n\t\t\n\t\t\t// Updates the bounds of the zoom handle at the bottom right\n\t\t\tvar b = this.sizer.bounds;\n\t\t\tvar b2 = new mxRectangle(this.bounds.x + this.bounds.width - b.width / 2,\n\t\t\t\t\tthis.bounds.y + this.bounds.height - b.height / 2, b.width, b.height);\n\n\t\t\tif (b.x != b2.x || b.y != b2.y || b.width != b2.width || b.height != b2.height)\n\t\t\t{\n\t\t\t\tthis.sizer.bounds = b2;\n\t\t\t\t\n\t\t\t\t// Avoids update of visibility in redraw for VML\n\t\t\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t\t\t{\n\t\t\t\t\tthis.sizer.redraw();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (revalidate)\n\t\t\t{\n\t\t\t\tthis.outline.view.revalidate();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by starting a translation or zoom.\n */\nmxOutline.prototype.mouseDown = function(sender, me)\n{\n\tif (this.enabled && this.showViewport)\n\t{\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.source.tolerance : 0;\n\t\tvar hit = (this.source.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tthis.zoom = me.isSource(this.sizer) || (hit != null && mxUtils.intersects(shape.bounds, hit));\n\t\tthis.startX = me.getX();\n\t\tthis.startY = me.getY();\n\t\tthis.active = true;\n\n\t\tif (this.source.useScrollbarsForPanning && mxUtils.hasScrollbars(this.source.container))\n\t\t{\n\t\t\tthis.dx0 = this.source.container.scrollLeft;\n\t\t\tthis.dy0 = this.source.container.scrollTop;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx0 = 0;\n\t\t\tthis.dy0 = 0;\n\t\t}\n\t}\n\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by previewing the viewrect in <graph> and updating the\n * rectangle that represents the viewrect in the outline.\n */\nmxOutline.prototype.mouseMove = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\t\tthis.sizer.node.style.display = this.selectionBorder.node.style.display; \n\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar bounds = null;\n\t\t\n\t\tif (!this.zoom)\n\t\t{\n\t\t\t// Previews the panning on the source graph\n\t\t\tvar scale = this.outline.getView().scale;\n\t\t\tbounds = new mxRectangle(this.bounds.x + dx,\n\t\t\t\tthis.bounds.y + dy, this.bounds.width, this.bounds.height);\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t\tdx /= scale;\n\t\t\tdx *= this.source.getView().scale;\n\t\t\tdy /= scale;\n\t\t\tdy *= this.source.getView().scale;\n\t\t\tthis.source.panGraph(-dx - this.dx0, -dy - this.dy0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Does *not* preview zooming on the source graph\n\t\t\tvar container = this.source.container;\n\t\t\tvar viewRatio = container.clientWidth / container.clientHeight;\n\t\t\tdy = dx / viewRatio;\n\t\t\tbounds = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y,\n\t\t\t\tMath.max(1, this.bounds.width + dx),\n\t\t\t\tMath.max(1, this.bounds.height + dy));\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t}\n\t\t\n\t\t// Updates the zoom handle\n\t\tvar b = this.sizer.bounds;\n\t\tthis.sizer.bounds = new mxRectangle(\n\t\t\tbounds.x + bounds.width - b.width / 2,\n\t\t\tbounds.y + bounds.height - b.height / 2,\n\t\t\tb.width, b.height);\n\t\t\n\t\t// Avoids update of visibility in redraw for VML\n\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t{\n\t\t\tthis.sizer.redraw();\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: getTranslateForEvent\n * \n * Gets the translate for the given mouse event. Here is an example to limit\n * the outline to stay within positive coordinates:\n * \n * (code)\n * outline.getTranslateForEvent = function(me)\n * {\n *   var pt = new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n *   \n *   if (!this.zoom)\n *   {\n *     var tr = this.source.view.translate;\n *     pt.x = Math.max(tr.x * this.outline.view.scale, pt.x);\n *     pt.y = Math.max(tr.y * this.outline.view.scale, pt.y);\n *   }\n *   \n *   return pt;\n * };\n * (end)\n */\nmxOutline.prototype.getTranslateForEvent = function(me)\n{\n\treturn new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the translation or zoom to <graph>.\n */\nmxOutline.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\t\n\t\tif (Math.abs(dx) > 0 || Math.abs(dy) > 0)\n\t\t{\n\t\t\tif (!this.zoom)\n\t\t\t{\n\t\t\t\t// Applies the new translation if the source\n\t\t\t\t// has no scrollbars\n\t\t\t\tif (!this.source.useScrollbarsForPanning ||\n\t\t\t\t\t!mxUtils.hasScrollbars(this.source.container))\n\t\t\t\t{\n\t\t\t\t\tthis.source.panGraph(0, 0);\n\t\t\t\t\tdx /= this.outline.getView().scale;\n\t\t\t\t\tdy /= this.outline.getView().scale;\n\t\t\t\t\tvar t = this.source.getView().translate;\n\t\t\t\t\tthis.source.getView().setTranslate(t.x - dx, t.y - dy);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Applies the new zoom\n\t\t\t\tvar w = this.selectionBorder.bounds.width;\n\t\t\t\tvar scale = this.source.getView().scale;\n\t\t\t\tthis.source.zoomTo(Math.max(this.minScale, scale - (dx * scale) / w), false);\n\t\t\t}\n\n\t\t\tthis.update();\n\t\t\tme.consume();\n\t\t}\n\t\t\t\n\t\t// Resets the state of the handler\n\t\tthis.index = null;\n\t\tthis.active = false;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroy this outline and removes all listeners from <source>.\n */\nmxOutline.prototype.destroy = function()\n{\n\tif (this.source != null)\n\t{\n\t\tthis.source.removeListener(this.panHandler);\n\t\tthis.source.removeListener(this.refreshHandler);\n\t\tthis.source.getModel().removeListener(this.updateHandler);\n\t\tthis.source.getView().removeListener(this.updateHandler);\n\t\tmxEvent.removeListener(this.source.container, 'scroll', this.updateHandler);\n\t\tthis.source = null;\n\t}\n\t\n\tif (this.outline != null)\n\t{\n\t\tthis.outline.removeMouseListener(this);\n\t\tthis.outline.destroy();\n\t\tthis.outline = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tif (this.sizer != null)\n\t{\n\t\tthis.sizer.destroy();\n\t\tthis.sizer = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMultiplicity\n * \n * Defines invalid connections along with the error messages that they produce.\n * To add or remove rules on a graph, you must add/remove instances of this\n * class to <mxGraph.multiplicities>.\n * \n * Example:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only circle targets allowed'));\n * (end)\n * \n * Defines a rule where each rectangle must be connected to no more than 2\n * circles and no other types of targets are allowed.\n * \n * Constructor: mxMultiplicity\n * \n * Instantiate class mxMultiplicity in order to describe allowed\n * connections in a graph. Not all constraints can be enforced while\n * editing, some must be checked at validation time. The <countError> and\n * <typeError> are treated as resource keys in <mxResources>.\n * \n * Parameters:\n * \n * source - Boolean indicating if this rule applies to the source or target\n * terminal.\n * type - Type of the source or target terminal that this rule applies to.\n * See <type> for more information.\n * attr - Optional attribute name to match the source or target terminal.\n * value - Optional attribute value to match the source or target terminal.\n * min - Minimum number of edges for this rule. Default is 1.\n * max - Maximum number of edges for this rule. n means infinite. Default\n * is n.\n * validNeighbors - Array of types of the opposite terminal for which this\n * rule applies.\n * countError - Error to be displayed for invalid number of edges.\n * typeError - Error to be displayed for invalid opposite terminals.\n * validNeighborsAllowed - Optional boolean indicating if the array of\n * opposite types should be valid or invalid.\n */\nfunction mxMultiplicity(source, type, attr, value, min, max,\n\tvalidNeighbors, countError, typeError, validNeighborsAllowed)\n{\n\tthis.source = source;\n\tthis.type = type;\n\tthis.attr = attr;\n\tthis.value = value;\n\tthis.min = (min != null) ? min : 0;\n\tthis.max = (max != null) ? max : 'n';\n\tthis.validNeighbors = validNeighbors;\n\tthis.countError = mxResources.get(countError) || countError;\n\tthis.typeError = mxResources.get(typeError) || typeError;\n\tthis.validNeighborsAllowed = (validNeighborsAllowed != null) ?\n\t\tvalidNeighborsAllowed : true;\n};\n\n/**\n * Variable: type\n * \n * Defines the type of the source or target terminal. The type is a string\n * passed to <mxUtils.isNode> together with the source or target vertex\n * value as the first argument.\n */\nmxMultiplicity.prototype.type = null;\n\n/**\n * Variable: attr\n * \n * Optional string that specifies the attributename to be passed to\n * <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.attr = null;\n\n/**\n * Variable: value\n * \n * Optional string that specifies the value of the attribute to be passed\n * to <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.value = null;\n\n/**\n * Variable: source\n * \n * Boolean that specifies if the rule is applied to the source or target\n * terminal of an edge.\n */\nmxMultiplicity.prototype.source = null;\n\n/**\n * Variable: min\n * \n * Defines the minimum number of connections for which this rule applies.\n * Default is 0.\n */\nmxMultiplicity.prototype.min = null;\n\n/**\n * Variable: max\n * \n * Defines the maximum number of connections for which this rule applies.\n * A value of 'n' means unlimited times. Default is 'n'. \n */\nmxMultiplicity.prototype.max = null;\n\n/**\n * Variable: validNeighbors\n * \n * Holds an array of strings that specify the type of neighbor for which\n * this rule applies. The strings are used in <mxCell.is> on the opposite\n * terminal to check if the rule applies to the connection.\n */\nmxMultiplicity.prototype.validNeighbors = null;\n\n/**\n * Variable: validNeighborsAllowed\n * \n * Boolean indicating if the list of validNeighbors are those that are allowed\n * for this rule or those that are not allowed for this rule.\n */\nmxMultiplicity.prototype.validNeighborsAllowed = true;\n\n/**\n * Variable: countError\n * \n * Holds the localized error message to be displayed if the number of\n * connections for which the rule applies is smaller than <min> or greater\n * than <max>.\n */\nmxMultiplicity.prototype.countError = null;\n\n/**\n * Variable: typeError\n * \n * Holds the localized error message to be displayed if the type of the\n * neighbor for a connection does not match the rule.\n */\nmxMultiplicity.prototype.typeError = null;\n\n/**\n * Function: check\n * \n * Checks the multiplicity for the given arguments and returns the error\n * for the given connection or null if the multiplicity does not apply.\n *  \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph> instance.\n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * sourceOut - Number of outgoing edges from the source terminal.\n * targetIn - Number of incoming edges for the target terminal.\n */\nmxMultiplicity.prototype.check = function(graph, edge, source, target, sourceOut, targetIn)\n{\n\tvar error = '';\n\n\tif ((this.source && this.checkTerminal(graph, source, edge)) ||\n\t\t(!this.source && this.checkTerminal(graph, target, edge)))\n\t{\n\t\tif (this.countError != null && \n\t\t\t((this.source && (this.max == 0 || (sourceOut >= this.max))) ||\n\t\t\t(!this.source && (this.max == 0 || (targetIn >= this.max)))))\n\t\t{\n\t\t\terror += this.countError + '\\n';\n\t\t}\n\n\t\tif (this.validNeighbors != null && this.typeError != null && this.validNeighbors.length > 0)\n\t\t{\n\t\t\tvar isValid = this.checkNeighbors(graph, edge, source, target);\n\n\t\t\tif (!isValid)\n\t\t\t{\n\t\t\t\terror += this.typeError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: checkNeighbors\n * \n * Checks if there are any valid neighbours in <validNeighbors>. This is only\n * called if <validNeighbors> is a non-empty array.\n */\nmxMultiplicity.prototype.checkNeighbors = function(graph, edge, source, target)\n{\n\tvar sourceValue = graph.model.getValue(source);\n\tvar targetValue = graph.model.getValue(target);\n\tvar isValid = !this.validNeighborsAllowed;\n\tvar valid = this.validNeighbors;\n\t\n\tfor (var j = 0; j < valid.length; j++)\n\t{\n\t\tif (this.source &&\n\t\t\tthis.checkType(graph, targetValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t\telse if (!this.source && \n\t\t\tthis.checkType(graph, sourceValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn isValid;\n};\n\n/**\n * Function: checkTerminal\n * \n * Checks the given terminal cell and returns true if this rule applies. The\n * given cell is the source or target of the given edge, depending on\n * <source>. This implementation uses <checkType> on the terminal's value.\n */\nmxMultiplicity.prototype.checkTerminal = function(graph, terminal, edge)\n{\n\tvar value = graph.model.getValue(terminal);\n\t\n\treturn this.checkType(graph, value, this.type, this.attr, this.value);\n};\n\n/**\n * Function: checkType\n * \n * Checks the type of the given value.\n */\nmxMultiplicity.prototype.checkType = function(graph, value, type, attr, attrValue)\n{\n\tif (value != null)\n\t{\n\t\tif (!isNaN(value.nodeType)) // Checks if value is a DOM node\n\t\t{\n\t\t\treturn mxUtils.isNode(value, type, attr, attrValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn value == type;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLayoutManager\n * \n * Implements a layout manager that runs a given layout after any changes to the graph:\n * \n * Example:\n * \n * (code)\n * var layoutMgr = new mxLayoutManager(graph);\n * layoutMgr.getLayout = function(cell)\n * {\n *   return layout;\n * };\n * (end)\n * \n * Event: mxEvent.LAYOUT_CELLS\n * \n * Fires between begin- and endUpdate after all cells have been layouted in\n * <layoutCells>. The <code>cells</code> property contains all cells that have\n * been passed to <layoutCells>.\n * \n * Constructor: mxLayoutManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxLayoutManager(graph)\n{\n\t// Executes the layout before the changes are dispatched\n\tthis.undoHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.beforeUndo(evt.getProperty('edit'));\n\t\t}\n\t});\n\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.moveHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsMoved(evt.getProperty('cells'), evt.getProperty('event'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxLayoutManager.prototype = new mxEventSource();\nmxLayoutManager.prototype.constructor = mxLayoutManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxLayoutManager.prototype.graph = null;\n\n/**\n * Variable: bubbling\n * \n * Specifies if the layout should bubble along\n * the cell hierarchy. Default is true.\n */\nmxLayoutManager.prototype.bubbling = true;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxLayoutManager.prototype.enabled = true;\n\n/**\n * Variable: updateHandler\n * \n * Holds the function that handles the endUpdate event.\n */\nmxLayoutManager.prototype.updateHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxLayoutManager.prototype.moveHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxLayoutManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxLayoutManager.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isBubbling\n * \n * Returns true if a layout should bubble, that is, if the parent layout\n * should be executed whenever a cell layout (layout of the children of\n * a cell) has been executed. This implementation returns <bubbling>.\n */\nmxLayoutManager.prototype.isBubbling = function()\n{\n\treturn this.bubbling;\n};\n\n/**\n * Function: setBubbling\n * \n * Sets <bubbling>.\n */\nmxLayoutManager.prototype.setBubbling = function(value)\n{\n\tthis.bubbling = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxLayoutManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxLayoutManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\t\n\t\tmodel.removeListener(this.undoHandler);\n\t\tthis.graph.removeListener(this.moveHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\n\t\tmodel.addListener(mxEvent.BEFORE_UNDO, this.undoHandler);\n\t\tthis.graph.addListener(mxEvent.MOVE_CELLS, this.moveHandler);\n\t}\n};\n\n/**\n * Function: getLayout\n * \n * Returns the layout to be executed for the given graph and parent.\n */\nmxLayoutManager.prototype.getLayout = function(parent)\n{\n\treturn null;\n};\n\n/**\n * Function: beforeUndo\n * \n * Called from the undoHandler.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.beforeUndo = function(undoableEdit)\n{\n\tvar cells = this.getCellsForChanges(undoableEdit.changes);\n\tvar model = this.getGraph().getModel();\n\n\t// Adds all descendants\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\ttmp = tmp.concat(model.getDescendants(cells[i]));\n\t}\n\t\n\tcells = tmp;\n\t\n\t// Adds all parent ancestors\n\tif (this.isBubbling())\n\t{\n\t\ttmp = model.getParents(cells);\n\t\t\n\t\twhile (tmp.length > 0)\n\t\t{\n\t\t\tcells = cells.concat(tmp);\n\t\t\ttmp = model.getParents(tmp);\n\t\t}\n\t}\n\t\n\tthis.executeLayoutForCells(cells);\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayoutForCells = function(cells)\n{\n\t// Adds reverse to this array to avoid duplicate execution of leafes\n\t// Works like capture/bubble for events, first executes all layout\n\t// from top to bottom and in reverse order and removes duplicates.\n\tvar sorted = mxUtils.sortCells(cells, true);\n\tsorted = sorted.concat(sorted.slice().reverse());\n\tthis.layoutCells(sorted);\n};\n\n/**\n * Function: cellsMoved\n * \n * Called from the moveHandler.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.cellsMoved = function(cells, evt)\n{\n\tif (cells != null && evt != null)\n\t{\n\t\tvar point = mxUtils.convertPoint(this.getGraph().container,\n\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\t// Checks if a layout exists to take care of the moving if the\n\t\t// parent itself is not being moved\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = model.getParent(cells[i]);\n\t\t\t\n\t\t\tif (mxUtils.indexOf(cells, parent) < 0)\n\t\t\t{\n\t\t\t\tvar layout = this.getLayout(parent);\n\t\n\t\t\t\tif (layout != null)\n\t\t\t\t{\n\t\t\t\t\tlayout.moveCell(cells[i], point.x, point.y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getCellsForEdit\n * \n * Returns the cells to be layouted for the given sequence of changes.\n */\nmxLayoutManager.prototype.getCellsForChanges = function(changes)\n{\n\tvar dict = new mxDictionary();\n\tvar result = [];\n\t\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change instanceof mxRootChange)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cells = this.getCellsForChange(change);\n\t\t\t\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\tif (cells[j] != null && !dict.get(cells[j]))\n\t\t\t\t{\n\t\t\t\t\tdict.put(cells[j], true);\n\t\t\t\t\tresult.push(cells[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForChange\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.getCellsForChange = function(change)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tif (change instanceof mxChildChange)\n\t{\n\t\treturn [change.child, change.previous, model.getParent(change.child)];\n\t}\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\treturn [change.cell, model.getParent(change.cell)];\n\t}\n\telse if (change instanceof mxVisibleChange || change instanceof mxStyleChange)\n\t{\n\t\treturn [change.cell];\n\t}\n\t\n\treturn [];\n};\n\n/**\n * Function: layoutCells\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.layoutCells = function(cells)\n{\n\tif (cells.length > 0)\n\t{\n\t\t// Invokes the layouts while removing duplicates\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry \n\t\t{\n\t\t\tvar last = null;\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] != model.getRoot() && cells[i] != last)\n\t\t\t\t{\n\t\t\t\t\tif (this.executeLayout(this.getLayout(cells[i]), cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tlast = cells[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.LAYOUT_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayout = function(layout, parent)\n{\n\tvar result = false;\n\t\n\tif (layout != null && parent != null)\n\t{\n\t\tlayout.execute(parent);\n\t\tresult = true;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxLayoutManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneManager\n * \n * Manager for swimlanes and nested swimlanes that sets the size of newly added\n * swimlanes to that of their siblings, and propagates changes to the size of a\n * swimlane to its siblings, if <siblings> is true, and its ancestors, if\n * <bubbling> is true.\n * \n * Constructor: mxSwimlaneManager\n *\n * Constructs a new swimlane manager for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxSwimlaneManager(graph, horizontal, addEnabled, resizeEnabled)\n{\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.addEnabled = (addEnabled != null) ? addEnabled : true;\n\tthis.resizeEnabled = (resizeEnabled != null) ? resizeEnabled : true;\n\n\tthis.addHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isAddEnabled())\n\t\t{\n\t\t\tthis.cellsAdded(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isResizeEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxSwimlaneManager.prototype = new mxEventSource();\nmxSwimlaneManager.prototype.constructor = mxSwimlaneManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSwimlaneManager.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxSwimlaneManager.prototype.enabled = true;\n\n/**\n * Variable: horizontal\n * \n * Specifies the orientation of the swimlanes. Default is true.\n */\nmxSwimlaneManager.prototype.horizontal = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if newly added cells should be resized to match the size of their\n * existing siblings. Default is true.\n */\nmxSwimlaneManager.prototype.addEnabled = true;\n\n/**\n * Variable: resizeEnabled\n * \n * Specifies if resizing of swimlanes should be handled. Default is true.\n */\nmxSwimlaneManager.prototype.resizeEnabled = true;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.addHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxSwimlaneManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxSwimlaneManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxSwimlaneManager.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: setHorizontal\n * \n * Sets <horizontal>.\n */\nmxSwimlaneManager.prototype.setHorizontal = function(value)\n{\n\tthis.horizontal = value;\n};\n\n/**\n * Function: isAddEnabled\n * \n * Returns <addEnabled>.\n */\nmxSwimlaneManager.prototype.isAddEnabled = function()\n{\n\treturn this.addEnabled;\n};\n\n/**\n * Function: setAddEnabled\n * \n * Sets <addEnabled>.\n */\nmxSwimlaneManager.prototype.setAddEnabled = function(value)\n{\n\tthis.addEnabled = value;\n};\n\n/**\n * Function: isResizeEnabled\n * \n * Returns <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.isResizeEnabled = function()\n{\n\treturn this.resizeEnabled;\n};\n\n/**\n * Function: setResizeEnabled\n * \n * Sets <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.setResizeEnabled = function(value)\n{\n\tthis.resizeEnabled = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this manager operates on.\n */\nmxSwimlaneManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the manager operates on.\n */\nmxSwimlaneManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.removeListener(this.addHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.addListener(mxEvent.ADD_CELLS, this.addHandler);\n\t\tthis.graph.addListener(mxEvent.CELLS_RESIZED, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: isSwimlaneIgnored\n * \n * Returns true if the given swimlane should be ignored.\n */\nmxSwimlaneManager.prototype.isSwimlaneIgnored = function(swimlane)\n{\n\treturn !this.getGraph().isSwimlane(swimlane);\n};\n\n/**\n * Function: isCellHorizontal\n * \n * Returns true if the given cell is horizontal. If the given cell is not a\n * swimlane, then the global orientation is returned.\n */\nmxSwimlaneManager.prototype.isCellHorizontal = function(cell)\n{\n\tif (this.graph.isSwimlane(cell))\n\t{\n\t\tvar style = this.graph.getCellStyle(cell);\n\t\t\n\t\treturn mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n\t}\n\t\n\treturn !this.isHorizontal();\n};\n\n/**\n * Function: cellsAdded\n * \n * Called if any cells have been added.\n * \n * Parameters:\n * \n * cell - Array of <mxCells> that have been added.\n */\nmxSwimlaneManager.prototype.cellsAdded = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.swimlaneAdded(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swimlaneAdded\n * \n * Updates the size of the given swimlane to match that of any existing\n * siblings swimlanes.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that represents the new swimlane.\n */\nmxSwimlaneManager.prototype.swimlaneAdded = function(swimlane)\n{\n\tvar model = this.getGraph().getModel();\n\tvar parent = model.getParent(swimlane);\n\tvar childCount = model.getChildCount(parent);\n\tvar geo = null;\n\t\n\t// Finds the first valid sibling swimlane as reference\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (child != swimlane && !this.isSwimlaneIgnored(child))\n\t\t{\n\t\t\tgeo = model.getGeometry(child);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Applies the size of the refernece to the newly added swimlane\n\tif (geo != null)\n\t{\n\t\tvar parentHorizontal = (parent != null) ? this.isCellHorizontal(parent) : this.horizontal;\n\t\tthis.resizeSwimlane(swimlane, geo.width, geo.height, parentHorizontal);\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called if any cells have been resizes. Calls <swimlaneResized> for all\n * swimlanes where <isSwimlaneIgnored> returns false.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose size was changed.\n */\nmxSwimlaneManager.prototype.cellsResized = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Finds the top-level swimlanes and adds offsets\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = model.getGeometry(cells[i]);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = new mxRectangle(0, 0, geo.width, geo.height);\n\t\t\t\t\t\tvar top = cells[i];\n\t\t\t\t\t\tvar current = top;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (current != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttop = current;\n\t\t\t\t\t\t\tcurrent = model.getParent(current);\n\t\t\t\t\t\t\tvar tmp = (this.graph.isSwimlane(current)) ?\n\t\t\t\t\t\t\t\t\tthis.graph.getStartSize(current) :\n\t\t\t\t\t\t\t\t\tnew mxRectangle();\n\t\t\t\t\t\t\tsize.width += tmp.width;\n\t\t\t\t\t\t\tsize.height += tmp.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar parentHorizontal = (current != null) ? this.isCellHorizontal(current) : this.horizontal;\n\t\t\t\t\t\tthis.resizeSwimlane(top, size.width, size.height, parentHorizontal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeSwimlane\n * \n * Called from <cellsResized> for all swimlanes that are not ignored to update\n * the size of the siblings and the size of the parent swimlanes, recursively,\n * if <bubbling> is true.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose size has changed.\n */\nmxSwimlaneManager.prototype.resizeSwimlane = function(swimlane, w, h, parentHorizontal)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar horizontal = this.isCellHorizontal(swimlane);\n\t\t\n\t\tif (!this.isSwimlaneIgnored(swimlane))\n\t\t{\n\t\t\tvar geo = model.getGeometry(swimlane);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tif ((parentHorizontal && geo.height != h) || (!parentHorizontal && geo.width != w))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (parentHorizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = h;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = w;\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.setGeometry(swimlane, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = (this.graph.isSwimlane(swimlane)) ?\n\t\t\t\tthis.graph.getStartSize(swimlane) :\n\t\t\t\tnew mxRectangle();\n\t\tw -= tmp.width;\n\t\th -= tmp.height;\n\t\t\n\t\tvar childCount = model.getChildCount(swimlane);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(swimlane, i);\n\t\t\tthis.resizeSwimlane(child, w, h, horizontal);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxSwimlaneManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxTemporaryCellStates\n * \n * Creates a temporary set of cell states.\n */\nfunction mxTemporaryCellStates(view, scale, cells, isCellVisibleFn, getLinkForCellState)\n{\n\tscale = (scale != null) ? scale : 1;\n\tthis.view = view;\n\t\n\t// Stores the previous state\n\tthis.oldValidateCellState = view.validateCellState;\n\tthis.oldBounds = view.getGraphBounds();\n\tthis.oldStates = view.getStates();\n\tthis.oldScale = view.getScale();\n\tthis.oldDoRedrawShape = view.graph.cellRenderer.doRedrawShape;\n\n\tvar self = this;\n\n\t// Overrides doRedrawShape and paint shape to add links on shapes\n\tif (getLinkForCellState != null)\n\t{\n\t\tview.graph.cellRenderer.doRedrawShape = function(state)\n\t\t{\n\t\t\tvar oldPaint = state.shape.paint;\n\t\t\t\n\t\t\tstate.shape.paint = function(c)\n\t\t\t{\n\t\t\t\tvar link = getLinkForCellState(state);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(link);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toldPaint.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(null);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tself.oldDoRedrawShape.apply(view.graph.cellRenderer, arguments);\n\t\t\tstate.shape.paint = oldPaint;\n\t\t};\n\t}\n\n\t// Overrides validateCellState to ignore invisible cells\n\tview.validateCellState = function(cell, resurse)\n\t{\n\t\tif (cell == null || isCellVisibleFn == null || isCellVisibleFn(cell))\n\t\t{\n\t\t\treturn self.oldValidateCellState.apply(view, arguments);\n\t\t}\n\t\t\n\t\treturn null;\n\t};\n\t\n\t// Creates space for new states\n\tview.setStates(new mxDictionary());\n\tview.setScale(scale);\n\t\n\tif (cells != null)\n\t{\n\t\tview.resetValidationState();\n\t\tvar bbox = null;\n\n\t\t// Validates the vertices and edges without adding them to\n\t\t// the model so that the original cells are not modified\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar bounds = view.getBoundingBox(view.validateCellState(view.validateCell(cells[i])));\n\t\t\t\n\t\t\tif (bbox == null)\n\t\t\t{\n\t\t\t\tbbox = bounds;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox.add(bounds);\n\t\t\t}\n\t\t}\n\n\t\tview.setGraphBounds(bbox || new mxRectangle());\n\t}\n};\n\n/**\n * Variable: view\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.view = null;\n\n/**\n * Variable: oldStates\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldStates = null;\n\n/**\n * Variable: oldBounds\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldBounds = null;\n\n/**\n * Variable: oldScale\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldScale = null;\n\n/**\n * Function: destroy\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxTemporaryCellStates.prototype.destroy = function()\n{\n\tthis.view.setScale(this.oldScale);\n\tthis.view.setStates(this.oldStates);\n\tthis.view.setGraphBounds(this.oldBounds);\n\tthis.view.validateCellState = this.oldValidateCellState;\n\tthis.view.graph.cellRenderer.doRedrawShape = this.oldDoRedrawShape;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxCellStatePreview\n * \n * Implements a live preview for moving cells.\n * \n * Constructor: mxCellStatePreview\n * \n * Constructs a move preview for the given graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellStatePreview(graph)\n{\n\tthis.deltas = new mxDictionary();\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.graph = null;\n\n/**\n * Variable: deltas\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.deltas = null;\n\n/**\n * Variable: count\n * \n * Contains the number of entries in the map.\n */\nmxCellStatePreview.prototype.count = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if this contains no entries.\n */\nmxCellStatePreview.prototype.isEmpty = function()\n{\n\treturn this.count == 0;\n};\n\n/**\n * Function: moveState\n */\nmxCellStatePreview.prototype.moveState = function(state, dx, dy, add, includeEdges)\n{\n\tadd = (add != null) ? add : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar delta = this.deltas.get(state.cell);\n\n\tif (delta == null)\n\t{\n\t\t// Note: Deltas stores the point and the state since the key is a string.\n\t\tdelta = {point: new mxPoint(dx, dy), state: state};\n\t\tthis.deltas.put(state.cell, delta);\n\t\tthis.count++;\n\t}\n\telse if (add)\n\t{\n\t\tdelta.point.x += dx;\n\t\tdelta.point.y += dy;\n\t}\n\telse\n\t{\n\t\tdelta.point.x = dx;\n\t\tdelta.point.y = dy;\n\t}\n\t\n\tif (includeEdges)\n\t{\n\t\tthis.addEdges(state);\n\t}\n\t\n\treturn delta.point;\n};\n\n/**\n * Function: show\n */\nmxCellStatePreview.prototype.show = function(visitor)\n{\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.translateState(delta.state, delta.point.x, delta.point.y);\n\t}));\n\t\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.revalidateState(delta.state, delta.point.x, delta.point.y, visitor);\n\t}));\n};\n\n/**\n * Function: translateState\n */\nmxCellStatePreview.prototype.translateState = function(state, dx, dy)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tif (model.isVertex(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t\tvar geo = model.getGeometry(state.cell);\n\t\t\t\n\t\t\t// Moves selection cells and non-relative vertices in\n\t\t\t// the first phase so that edge terminal points will\n\t\t\t// be updated in the second phase\n\t\t\tif ((dx != 0 || dy != 0) && geo != null && (!geo.relative || this.deltas.get(state.cell) != null))\n\t\t\t{\n\t\t\t\tstate.x += dx;\n\t\t\t\tstate.y += dy;\n\t\t\t}\n\t\t}\n\t    \n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.translateState(state.view.getState(model.getChildAt(state.cell, i)), dx, dy);\n\t    }\n\t}\n};\n\n/**\n * Function: revalidateState\n */\nmxCellStatePreview.prototype.revalidateState = function(state, dx, dy, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\t// Updates the edge terminal points and restores the\n\t\t// (relative) positions of any (relative) children\n\t\tif (model.isEdge(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t}\n\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\n\t\tvar pState = state.view.getState(model.getParent(state.cell));\n\t\t\n\t\t// Moves selection vertices which are relative\n\t\tif ((dx != 0 || dy != 0) && geo != null && geo.relative &&\n\t\t\tmodel.isVertex(state.cell) && (pState == null ||\n\t\t\tmodel.isVertex(pState.cell) || this.deltas.get(state.cell) != null))\n\t\t{\n\t\t\tstate.x += dx;\n\t\t\tstate.y += dy;\n\t\t}\n\t\t\n\t\tthis.graph.cellRenderer.redraw(state);\n\t\n\t\t// Invokes the visitor on the given state\n\t\tif (visitor != null)\n\t\t{\n\t\t\tvisitor(state);\n\t\t}\n\t\t\t\t\t\t\n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.revalidateState(this.graph.view.getState(model.getChildAt(state.cell, i)), dx, dy, visitor);\n\t    }\n\t}\n};\n\n/**\n * Function: addEdges\n */\nmxCellStatePreview.prototype.addEdges = function(state)\n{\n\tvar model = this.graph.getModel();\n\tvar edgeCount = model.getEdgeCount(state.cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar s = state.view.getState(model.getEdgeAt(state.cell, i));\n\n\t\tif (s != null)\n\t\t{\n\t\t\tthis.moveState(s, 0, 0);\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnectionConstraint\n * \n * Defines an object that contains the constraints about how to connect one\n * side of an edge to its terminal.\n * \n * Constructor: mxConnectionConstraint\n * \n * Constructs a new connection constraint for the given point and boolean\n * arguments.\n * \n * Parameters:\n * \n * point - Optional <mxPoint> that specifies the fixed location of the point\n * in relative coordinates. Default is null.\n * perimeter - Optional boolean that specifies if the fixed point should be\n * projected onto the perimeter of the terminal. Default is true.\n */\nfunction mxConnectionConstraint(point, perimeter, name, dx, dy)\n{\n\tthis.point = point;\n\tthis.perimeter = (perimeter != null) ? perimeter : true;\n\tthis.name = name;\n\tthis.dx = dx? dx : 0;\n\tthis.dy = dy? dy : 0;\n};\n\n/**\n * Variable: point\n * \n * <mxPoint> that specifies the fixed location of the connection point.\n */\nmxConnectionConstraint.prototype.point = null;\n\n/**\n * Variable: perimeter\n * \n * Boolean that specifies if the point should be projected onto the perimeter\n * of the terminal.\n */\nmxConnectionConstraint.prototype.perimeter = null;\n\n/**\n * Variable: name\n * \n * Optional string that specifies the name of the constraint.\n */\nmxConnectionConstraint.prototype.name = null;\n\n/**\n * Variable: dx\n * \n * Optional float that specifies the horizontal offset of the constraint.\n */\nmxConnectionConstraint.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Optional float that specifies the vertical offset of the constraint.\n */\nmxConnectionConstraint.prototype.dy = null;\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHandler\n * \n * Graph event handler that handles selection. Individual cells are handled\n * separately using <mxVertexHandler> or one of the edge handlers. These\n * handlers are created using <mxGraph.createHandler> in\n * <mxGraphSelectionModel.cellAdded>.\n * \n * To avoid the container to scroll a moved cell into view, set\n * <scrollAfterMove> to false.\n * \n * Constructor: mxGraphHandler\n * \n * Constructs an event handler that creates handles for the\n * selection cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphHandler(graph)\n{\n\tthis.graph = graph;\n\tthis.graph.addMouseListener(this);\n\t\n\t// Repaints the handler after autoscroll\n\tthis.panHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.updatePreview();\n\t\tthis.updateHint();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Handles escape keystrokes\n\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t\n\t// Updates the preview box for remote changes\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.first != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\t\t\t\tthis.pBounds = this.getPreviewBounds(this.cells);\n\t\t\t\tthis.updatePreview(true);\n\t\t\t\t\n\t\t\t\t// Resets handlers after they have been refreshed\n\t\t\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tif (this.livePreviewUsed)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setHandlesVisibleForCells(this.cells, false);\n\t\t\t\t\t\tthis.updatePreview();\n\t\t\t\t\t}\n\t\t\t\t}), 0);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Resets the handler if cells have vanished\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t}\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphHandler.prototype.graph = null;\n\n/**\n * Variable: maxCells\n * \n * Defines the maximum number of cells to paint subhandles\n * for. Default is 50 for Firefox and 20 for IE. Set this\n * to 0 if you want an unlimited number of handles to be\n * displayed. This is only recommended if the number of\n * cells in the graph is limited to a small number, eg.\n * 500.\n */\nmxGraphHandler.prototype.maxCells = (mxClient.IS_IE) ? 20 : 50;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxGraphHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightEnabled\n * \n * Specifies if drop targets under the mouse should be enabled. Default is\n * true.\n */\nmxGraphHandler.prototype.highlightEnabled = true;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxGraphHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: moveEnabled\n * \n * Specifies if moving is enabled. Default is true.\n */\nmxGraphHandler.prototype.moveEnabled = true;\n\n/**\n * Variable: guidesEnabled\n * \n * Specifies if other cells should be used for snapping the right, center or\n * left side of the current selection. Default is false.\n */\nmxGraphHandler.prototype.guidesEnabled = false;\n\n/**\n * Variable: guide\n * \n * Holds the <mxGuide> instance that is used for alignment.\n */\nmxGraphHandler.prototype.guide = null;\n\n/**\n * Variable: currentDx\n * \n * Stores the x-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDx = null;\n\n/**\n * Variable: currentDy\n * \n * Stores the y-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDy = null;\n\n/**\n * Variable: updateCursor\n * \n * Specifies if a move cursor should be shown if the mouse is over a movable\n * cell. Default is true.\n */\nmxGraphHandler.prototype.updateCursor = true;\n\n/**\n * Variable: selectEnabled\n * \n * Specifies if selecting is enabled. Default is true.\n */\nmxGraphHandler.prototype.selectEnabled = true;\n\n/**\n * Variable: removeCellsFromParent\n * \n * Specifies if cells may be moved out of their parents. Default is true.\n */\nmxGraphHandler.prototype.removeCellsFromParent = true;\n\n/**\n * Variable: removeEmptyParents\n * \n * If empty parents should be removed from the model after all child cells\n * have been moved out. Default is true.\n */\nmxGraphHandler.prototype.removeEmptyParents = false;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if drop events are interpreted as new connections if no other\n * drop action is defined. Default is false.\n */\nmxGraphHandler.prototype.connectOnDrop = false;\n\n/**\n * Variable: scrollOnMove\n * \n * Specifies if the view should be scrolled so that a moved cell is\n * visible. Default is true.\n */\nmxGraphHandler.prototype.scrollOnMove = true;\n\n/**\n * Variable: minimumSize\n * \n * Specifies the minimum number of pixels for the width and height of a\n * selection border. Default is 6.\n */\nmxGraphHandler.prototype.minimumSize = 6;\n\n/**\n * Variable: previewColor\n * \n * Specifies the color of the preview shape. Default is black.\n */\nmxGraphHandler.prototype.previewColor = 'black';\n\n/**\n * Variable: htmlPreview\n * \n * Specifies if the graph container should be used for preview. If this is used\n * then drop target detection relies entirely on <mxGraph.getCellAt> because\n * the HTML preview does not \"let events through\". Default is false.\n */\nmxGraphHandler.prototype.htmlPreview = false;\n\n/**\n * Variable: shape\n * \n * Reference to the <mxShape> that represents the preview.\n */\nmxGraphHandler.prototype.shape = null;\n\n/**\n * Variable: scaleGrid\n * \n * Specifies if the grid should be scaled. Default is false.\n */\nmxGraphHandler.prototype.scaleGrid = false;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if the bounding box should allow for rotation. Default is true.\n */\nmxGraphHandler.prototype.rotationEnabled = true;\n\n/**\n * Variable: maxLivePreview\n * \n * Maximum number of cells for which live preview should be used. Default is 0\n * which means no live preview.\n */\nmxGraphHandler.prototype.maxLivePreview = 0;\n\n/**\n * Variable: allowLivePreview\n * \n * If live preview is allowed on this system. Default is true for systems with\n * SVG support.\n */\nmxGraphHandler.prototype.allowLivePreview = mxClient.IS_SVG;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxGraphHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxGraphHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isCloneEnabled\n * \n * Returns <cloneEnabled>.\n */\nmxGraphHandler.prototype.isCloneEnabled = function()\n{\n\treturn this.cloneEnabled;\n};\n\n/**\n * Function: setCloneEnabled\n * \n * Sets <cloneEnabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new clone enabled state.\n */\nmxGraphHandler.prototype.setCloneEnabled = function(value)\n{\n\tthis.cloneEnabled = value;\n};\n\n/**\n * Function: isMoveEnabled\n * \n * Returns <moveEnabled>.\n */\nmxGraphHandler.prototype.isMoveEnabled = function()\n{\n\treturn this.moveEnabled;\n};\n\n/**\n * Function: setMoveEnabled\n * \n * Sets <moveEnabled>.\n */\nmxGraphHandler.prototype.setMoveEnabled = function(value)\n{\n\tthis.moveEnabled = value;\n};\n\n/**\n * Function: isSelectEnabled\n * \n * Returns <selectEnabled>.\n */\nmxGraphHandler.prototype.isSelectEnabled = function()\n{\n\treturn this.selectEnabled;\n};\n\n/**\n * Function: setSelectEnabled\n * \n * Sets <selectEnabled>.\n */\nmxGraphHandler.prototype.setSelectEnabled = function(value)\n{\n\tthis.selectEnabled = value;\n};\n\n/**\n * Function: isRemoveCellsFromParent\n * \n * Returns <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.isRemoveCellsFromParent = function()\n{\n\treturn this.removeCellsFromParent;\n};\n\n/**\n * Function: setRemoveCellsFromParent\n * \n * Sets <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.setRemoveCellsFromParent = function(value)\n{\n\tthis.removeCellsFromParent = value;\n};\n\n/**\n * Function: getInitialCellForEvent\n * \n * Hook to return initial cell for the given event.\n */\nmxGraphHandler.prototype.getInitialCellForEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: isDelayedSelection\n * \n * Hook to return true for delayed selections.\n */\nmxGraphHandler.prototype.isDelayedSelection = function(cell, me)\n{\n\treturn this.graph.isCellSelected(cell);\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given mouse event. NOTE: This may be used to enable click\n * events for links in labels on iOS as follows as consuming the initial\n * touchStart disables firing the subsequent click event on the link.\n * \n * <code>\n * mxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n * {\n *   var source = mxEvent.getSource(me.getEvent());\n *   \n *   if (!mxEvent.isTouchEvent(me.getEvent()) || source.nodeName != 'A')\n *   {\n *     me.consume();\n *   }\n * }\n * </code>\n */\nmxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by selecing the given cell and creating a handle for\n * it. By consuming the event all subsequent events of the gesture are\n * redirected to this handler.\n */\nmxGraphHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() != null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar cell = this.getInitialCellForEvent(me);\n\t\tthis.delayedSelection = this.isDelayedSelection(cell, me);\n\t\tthis.cell = null;\n\t\t\n\t\tif (this.isSelectEnabled() && !this.delayedSelection)\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\n\t\tif (this.isMoveEnabled())\n\t\t{\n\t\t\tvar model = this.graph.model;\n\t\t\tvar geo = model.getGeometry(cell);\n\n\t\t\tif (this.graph.isCellMovable(cell) && ((!model.isEdge(cell) || this.graph.getSelectionCount() > 1 ||\n\t\t\t\t(geo.points != null && geo.points.length > 0) || model.getTerminal(cell, true) == null ||\n\t\t\t\tmodel.getTerminal(cell, false) == null) || this.graph.allowDanglingEdges || \n\t\t\t\t(this.graph.isCloneEvent(me.getEvent()) && this.graph.isCellsCloneable())))\n\t\t\t{\n\t\t\t\tthis.start(cell, me.getX(), me.getY());\n\t\t\t}\n\t\t\telse if (this.delayedSelection)\n\t\t\t{\n\t\t\t\tthis.cell = cell;\n\t\t\t}\n\n\t\t\tthis.cellWasClicked = true;\n\t\t\tthis.consumeMouseEvent(mxEvent.MOUSE_DOWN, me);\n\t\t}\n\t}\n};\n\n/**\n * Function: getGuideStates\n * \n * Creates an array of cell states which should be used as guides.\n */\nmxGraphHandler.prototype.getGuideStates = function()\n{\n\tvar parent = this.graph.getDefaultParent();\n\tvar model = this.graph.getModel();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.graph.view.getState(cell) != null &&\n\t\t\tmodel.isVertex(cell) &&\n\t\t\tmodel.getGeometry(cell) != null &&\n\t\t\t!model.getGeometry(cell).relative;\n\t});\n\t\n\treturn this.graph.view.getCellStates(model.filterDescendants(filter, parent));\n};\n\n/**\n * Function: getCells\n * \n * Returns the cells to be modified by this handler. This implementation\n * returns all selection cells that are movable, or the given initial cell if\n * the given cell is not selected and movable. This handles the case of moving\n * unselectable or unselected cells.\n * \n * Parameters:\n * \n * initialCell - <mxCell> that triggered this handler.\n */\nmxGraphHandler.prototype.getCells = function(initialCell)\n{\n\tif (!this.delayedSelection && this.graph.isCellMovable(initialCell))\n\t{\n\t\treturn [initialCell];\n\t}\n\telse\n\t{\n\t\treturn this.graph.getMovableCells(this.graph.getSelectionCells());\n\t}\n};\n\n/**\n * Function: getPreviewBounds\n * \n * Returns the <mxRectangle> used as the preview bounds for\n * moving the given cells.\n */\nmxGraphHandler.prototype.getPreviewBounds = function(cells)\n{\n\tvar bounds = this.getBoundingBox(cells);\n\t\n\tif (bounds != null)\n\t{\n\t\t// Corrects width and height\n\t\tbounds.width = Math.max(0, bounds.width - 1);\n\t\tbounds.height = Math.max(0, bounds.height - 1);\n\t\t\n\t\tif (bounds.width < this.minimumSize)\n\t\t{\n\t\t\tvar dx = this.minimumSize - bounds.width;\n\t\t\tbounds.x -= dx / 2;\n\t\t\tbounds.width = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.x = Math.round(bounds.x);\n\t\t\tbounds.width = Math.ceil(bounds.width);\n\t\t}\n\t\t\n\t\tvar tr = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (bounds.height < this.minimumSize)\n\t\t{\n\t\t\tvar dy = this.minimumSize - bounds.height;\n\t\t\tbounds.y -= dy / 2;\n\t\t\tbounds.height = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.y = Math.round(bounds.y);\n\t\t\tbounds.height = Math.ceil(bounds.height);\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the union of the <mxCellStates> for the given array of <mxCells>.\n * For vertices, this method uses the bounding box of the corresponding shape\n * if one exists. The bounding box of the corresponding text label and all\n * controls and overlays are ignored. See also: <mxGraphView.getBounds> and\n * <mxGraph.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraphHandler.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = state;\n\t\t\t\t\t\n\t\t\t\t\tif (model.isVertex(cells[i]) && state.shape != null && state.shape.boundingBox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = state.shape.boundingBox;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createPreviewShape\n * \n * Creates the shape used to draw the preview for the given bounds.\n */\nmxGraphHandler.prototype.createPreviewShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.previewColor);\n\tshape.isDashed = true;\n\t\n\tif (this.htmlPreview)\n\t{\n\t\tshape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tshape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t// event-transparency on the background area of the rectangle since\n\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\tshape.init(this.graph.getView().getOverlayPane());\n\t\tshape.pointerEvents = false;\n\t\t\n\t\t// Workaround for artifacts on iOS\n\t\tif (mxClient.IS_IOS)\n\t\t{\n\t\t\tshape.getSvgScreenOffset = function()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxGraphHandler.prototype.start = function(cell, x, y)\n{\n\tthis.cell = cell;\n\tthis.first = mxUtils.convertPoint(this.graph.container, x, y);\n\tthis.cells = this.getCells(this.cell);\n\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\tthis.pBounds = this.getPreviewBounds(this.cells);\n\tthis.allCells = new mxDictionary();\n\tthis.cloning = false;\n\tthis.cellCount = 0;\n\t\n\tfor (var i = 0; i < this.cells.length; i++)\n\t{\n\t\tthis.cellCount += this.addStates(this.cells[i], this.allCells);\n\t}\n\t\n\tif (this.guidesEnabled)\n\t{\n\t\tthis.guide = new mxGuide(this.graph, this.getGuideStates());\n\t\tvar parent = this.graph.model.getParent(cell);\n\t\tvar ignore = this.graph.model.getChildCount(parent) < 2;\n\t\t\n\t\tthis.guide.isStateIgnored = mxUtils.bind(this, function(state)\n\t\t{\n\t\t\tvar p = this.graph.model.getParent(state.cell);\n\t\t\t\n\t\t\treturn state.cell != null && ((!this.cloning &&\n\t\t\t\tthis.isCellMoving(state.cell)) ||\n\t\t\t\t(state.cell != (this.target || parent) && !ignore &&\n\t\t\t\t(this.target == null || this.graph.model.getChildCount(\n\t\t\t\tthis.target) >= 2) && p != (this.target || parent)));  \n\t\t});\n\t}\n};\n\n/**\n * Function: addStates\n * \n * Adds the states for the given cell recursively to the given dictionary.\n */\nmxGraphHandler.prototype.addStates = function(cell, dict)\n{\n\tvar state = this.graph.view.getState(cell);\n\tvar count = 0;\n\t\n\tif (state != null && dict.get(cell) == null)\n\t{\n\t\tdict.put(cell, state);\n\t\tcount++;\n\t\t\n\t\tvar childCount = this.graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tcount += this.addStates(this.graph.model.getChildAt(cell, i), dict);\n\t\t}\n\t}\n\t\n\treturn count;\n};\n\n/**\n * Function: isCellMoving\n * \n * Returns true if the given cell is currently being moved.\n */\nmxGraphHandler.prototype.isCellMoving = function(cell)\n{\n\treturn this.allCells.get(cell) != null;\n};\n\n/**\n * Function: useGuidesForEvent\n * \n * Returns true if the guides should be used for the given <mxMouseEvent>.\n * This implementation returns <mxGuide.isEnabledForEvent>.\n */\nmxGraphHandler.prototype.useGuidesForEvent = function(me)\n{\n\treturn (this.guide != null) ? this.guide.isEnabledForEvent(me.getEvent()) : true;\n};\n\n\n/**\n * Function: snap\n * \n * Snaps the given vector to the grid and returns the given mxPoint instance.\n */\nmxGraphHandler.prototype.snap = function(vector)\n{\n\tvar scale = (this.scaleGrid) ? this.graph.view.scale : 1;\n\t\n\tvector.x = this.graph.snap(vector.x / scale) * scale;\n\tvector.y = this.graph.snap(vector.y / scale) * scale;\n\t\n\treturn vector;\n};\n\n/**\n * Function: getDelta\n * \n * Returns an <mxPoint> that represents the vector for moving the cells\n * for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.getDelta = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar s = this.graph.view.scale;\n\t\n\treturn new mxPoint(this.roundLength((point.x - this.first.x - this.graph.panDx) / s) * s,\n\t\tthis.roundLength((point.y - this.first.y - this.graph.panDy) / s) * s);\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxGraphHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxGraphHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled vector. This uses Math.round.\n */\nmxGraphHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 2) / 2;\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting possible drop targets and updating the\n * preview.\n */\nmxGraphHandler.prototype.mouseMove = function(sender, me)\n{\n\tvar graph = this.graph;\n\n\tif (!me.isConsumed() && graph.isMouseDown && this.cell != null &&\n\t\tthis.first != null && this.bounds != null)\n\t{\n\t\t// Stops moving if a multi touch event is received\n\t\tif (mxEvent.isMultiTouchEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.reset();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar delta = this.getDelta(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar tol = graph.tolerance;\n\n\t\tif (this.shape != null || this.livePreviewActive || Math.abs(dx) > tol || Math.abs(dy) > tol)\n\t\t{\n\t\t\t// Highlight is used for highlighting drop targets\n\t\t\tif (this.highlight == null)\n\t\t\t{\n\t\t\t\tthis.highlight = new mxCellHighlight(this.graph,\n\t\t\t\t\tmxConstants.DROP_TARGET_COLOR, 3);\n\t\t\t}\n\n\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\tvar gridEnabled = graph.isGridEnabledEvent(me.getEvent());\n\t\t\tvar cell = me.getCell();\n\t\t\tvar hideGuide = true;\n\t\t\tvar target = null;\n\t\t\tthis.cloning = clone;\n\t\t\t\n\t\t\tif (graph.isDropEnabled() && this.highlightEnabled)\n\t\t\t{\n\t\t\t\t// Contains a call to getCellAt to find the cell under the mouse\n\t\t\t\ttarget = graph.getDropTarget(this.cells, me.getEvent(), cell, clone);\n\t\t\t}\n\n\t\t\tvar state = graph.getView().getState(target);\n\t\t\tvar highlight = false;\n\t\t\t\n\t\t\tif (state != null && (graph.model.getParent(this.cell) != target || clone))\n\t\t\t{\n\t\t\t    if (this.target != target)\n\t\t\t    {\n\t\t\t\t    this.target = target;\n\t\t\t\t    this.setHighlightColor(mxConstants.DROP_TARGET_COLOR);\n\t\t\t\t}\n\t\t\t    \n\t\t\t    highlight = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.target = null;\n\n\t\t\t\tif (this.connectOnDrop && cell != null && this.cells.length == 1 &&\n\t\t\t\t\tgraph.getModel().isVertex(cell) && graph.isCellConnectable(cell))\n\t\t\t\t{\n\t\t\t\t\tstate = graph.getView().getState(cell);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar error = graph.getEdgeValidationError(null, this.cell, cell);\n\t\t\t\t\t\tvar color = (error == null) ?\n\t\t\t\t\t\t\tmxConstants.VALID_COLOR :\n\t\t\t\t\t\t\tmxConstants.INVALID_CONNECT_TARGET_COLOR;\n\t\t\t\t\t\tthis.setHighlightColor(color);\n\t\t\t\t\t\thighlight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (state != null && highlight)\n\t\t\t{\n\t\t\t\tthis.highlight.highlight(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.highlight.hide();\n\t\t\t}\n\t\t\t\n\t\t\tif (this.livePreviewActive && clone)\n\t\t\t{\n\t\t\t\tthis.resetLivePreview();\n\t\t\t\tthis.livePreviewActive = false;\n\t\t\t}\n\t\t\telse if (this.maxLivePreview >= this.cellCount && !this.livePreviewActive && this.allowLivePreview)\n\t\t\t{\n\t\t\t\tthis.setHandlesVisibleForCells(this.cells, false);\n\t\t\t\tthis.livePreviewActive = true;\n\t\t\t\tthis.livePreviewUsed = true;\n\t\t\t}\n\t\t\telse if (!this.livePreviewUsed && this.shape == null)\n\t\t\t{\n\t\t\t\tthis.shape = this.createPreviewShape(this.bounds);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.guide != null && this.useGuidesForEvent(me))\n\t\t\t{\n\t\t\t\tdelta = this.guide.move(this.bounds, new mxPoint(dx, dy), gridEnabled, clone);\n\t\t\t\thideGuide = false;\n\t\t\t\tdx = delta.x;\n\t\t\t\tdy = delta.y;\n\t\t\t}\n\t\t\telse if (gridEnabled)\n\t\t\t{\n\t\t\t\tvar trx = graph.getView().translate;\n\t\t\t\tvar scale = graph.getView().scale;\t\t\t\t\n\t\t\t\t\n\t\t\t\tvar tx = this.bounds.x - (graph.snap(this.bounds.x / scale - trx.x) + trx.x) * scale;\n\t\t\t\tvar ty = this.bounds.y - (graph.snap(this.bounds.y / scale - trx.y) + trx.y) * scale;\n\t\t\t\tvar v = this.snap(new mxPoint(dx, dy));\n\t\t\t\t\n\t\t\t\tdx = v.x - tx;\n\t\t\t\tdy = v.y - ty;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.guide != null && hideGuide)\n\t\t\t{\n\t\t\t\tthis.guide.hide();\n\t\t\t}\n\n\t\t\t// Constrained movement if shift key is pressed\n\t\t\tif (graph.isConstrainedEvent(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(dx) > Math.abs(dy))\n\t\t\t\t{\n\t\t\t\t\tdy = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdx = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.currentDx = dx;\n\t\t\tthis.currentDy = dy;\n\t\t\tthis.updatePreview();\n\t\t}\n\n\t\tthis.updateHint(me);\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_MOVE, me);\n\t\t\n\t\t// Cancels the bubbling of events to the container so\n\t\t// that the droptarget is not reset due to an mouseMove\n\t\t// fired on the container with no associated state.\n\t\tmxEvent.consume(me.getEvent());\n\t}\n\telse if ((this.isMoveEnabled() || this.isCloneEnabled()) && this.updateCursor && !me.isConsumed() &&\n\t\t(me.getState() != null || me.sourceState != null) && !graph.isMouseDown)\n\t{\n\t\tvar cursor = graph.getCursorForMouseEvent(me);\n\t\t\n\t\tif (cursor == null && graph.isEnabled() && graph.isCellMovable(me.getCell()))\n\t\t{\n\t\t\tif (graph.getModel().isEdge(me.getCell()))\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_EDGE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_VERTEX;\n\t\t\t}\n\t\t}\n\n\t\t// Sets the cursor on the original source state under the mouse\n\t\t// instead of the event source state which can be the parent\n\t\tif (cursor != null && me.sourceState != null)\n\t\t{\n\t\t\tme.sourceState.setCursor(cursor);\n\t\t}\n\t}\n};\n\n/**\n * Function: updatePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreview = function(remote)\n{\n\tif (this.livePreviewUsed && !remote)\n\t{\n\t\tif (this.cells != null)\n\t\t{\n\t\t\tthis.updateLivePreview(this.currentDx, this.currentDy);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.updatePreviewShape();\n\t}\n};\n\n/**\n * Function: updatePreviewShape\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreviewShape = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.bounds = new mxRectangle(Math.round(this.pBounds.x + this.currentDx),\n\t\t\t\tMath.round(this.pBounds.y + this.currentDy), this.pBounds.width, this.pBounds.height);\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updateLivePreview = function(dx, dy)\n{\n\tvar states = [];\n\t\n\tif (this.allCells != null)\n\t{\n\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t{\n\t\t\t// Saves current state\n\t\t\tvar tempState = state.clone();\n\t\t\tstates.push([state, tempState]);\n\n\t\t\t// Makes transparent for events to detect drop targets\n\t\t\tif (state.shape != null)\n\t\t\t{\n\t\t\t\tif (state.shape.originalPointerEvents == null)\n\t\t\t\t{\n\t\t\t\t\tstate.shape.originalPointerEvents = state.shape.pointerEvents;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstate.shape.pointerEvents = false;\n\n\t\t\t\tif (state.text != null && state.text.node != null)\n\t\t\t\t{\n\t\t\t\t\tvar node = state.text.node;\n\t\t\t\t\t\n\t\t\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.firstChild.firstChild.setAttribute('pointer-events', 'none');\n\t\t\t\t\t}\n\t\t\t\t\telse if (node.ownerSVGElement != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('pointer-events', 'none');\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.pointerEvents = 'none';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Temporarily changes position\n\t\t\tif (this.graph.model.isVertex(state.cell))\n\t\t\t{\n\t\t\t\tstate.x += dx;\n\t\t\t\tstate.y += dy;\n\n\t\t\t\t// Draws the live preview\n\t\t\t\tif (!this.cloning)\n\t\t\t\t{\n\t\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t\t\t\n\t\t\t\t\t// Forces redraw of connected edges after all states\n\t\t\t\t\t// have been updated but avoids update of state\n\t\t\t\t\tstate.view.invalidate(state.cell);\n\t\t\t\t\tstate.invalid = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Hides folding icon\n\t\t\t\tif (state.control != null && state.control.node != null)\n\t\t\t\t{\n\t\t\t\t\tstate.control.node.style.visibility = 'hidden';\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\t// Redraws connected edges\n\tvar s = this.graph.view.scale;\n\t\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tvar state = states[i][0];\n\t\t\n\t\tif (this.graph.model.isEdge(state.cell))\n\t\t{\n\t\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\tvar points = [];\n\t\t\t\n\t\t\tif (geometry != null && geometry.points != null)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < geometry.points.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (geometry.points[j] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoints.push(new mxPoint(\n\t\t\t\t\t\t\tgeometry.points[j].x + dx / s,\n\t\t\t\t\t\t\tgeometry.points[j].y + dy / s));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar source = state.visibleSourceState;\n\t\t\tvar target = state.visibleTargetState;\n\t\t\tvar pts = states[i][1].absolutePoints;\n\t\t\t\n\t\t\tif (source == null || !this.isCellMoving(source.cell))\n\t\t\t{\n\t\t\t\tvar pt0 = pts[0];\n\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(pt0.x + dx, pt0.y + dy), true);\n\t\t\t\tsource = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.view.updateFixedTerminalPoint(state, source, true,\n\t\t\t\t\tthis.graph.getConnectionConstraint(state, source, true));\n\t\t\t}\n\t\t\t\n\t\t\tif (target == null || !this.isCellMoving(target.cell))\n\t\t\t{\n\t\t\t\tvar ptn = pts[pts.length - 1];\n\t\t\t\tstate.setAbsoluteTerminalPoint(new mxPoint(ptn.x + dx, ptn.y + dy), false);\n\t\t\t\ttarget = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.view.updateFixedTerminalPoint(state, target, false,\n\t\t\t\t\tthis.graph.getConnectionConstraint(state, target, false));\n\t\t\t}\n\t\t\t\n\t\t\tstate.view.updatePoints(state, points, source, target);\n\t\t\tstate.view.updateFloatingTerminalPoints(state, source, target);\n\t\t\tstate.invalid = false;\n\t\t\t\t\t\n\t\t\t// Draws the live preview but avoids update of state\n\t\t\tif (!this.cloning)\n\t\t\t{\n\t\t\t\tstate.view.graph.cellRenderer.redraw(state, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.graph.view.validate();\n\tthis.redrawHandles(states);\n\tthis.resetPreviewStates(states);\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the preview shape for the given states array.\n */\nmxGraphHandler.prototype.redrawHandles = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tvar handler = this.graph.selectionCellsHandler.getHandler(states[i][0].cell);\n\t\t\n\t\tif (handler != null)\n\t\t{\n\t\t\thandler.redraw(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetPreviewStates\n * \n * Resets the given preview states array.\n */\nmxGraphHandler.prototype.resetPreviewStates = function(states)\n{\n\tfor (var i = 0; i < states.length; i++)\n\t{\n\t\tstates[i][0].setState(states[i][1]);\n\t}\n};\n\n/**\n * Function: resetLivePreview\n * \n * Resets the livew preview.\n */\nmxGraphHandler.prototype.resetLivePreview = function()\n{\n\tif (this.allCells != null)\n\t{\n\t\tthis.allCells.visit(mxUtils.bind(this, function(key, state)\n\t\t{\n\t\t\t// Restores event handling\n\t\t\tif (state.shape != null && state.shape.originalPointerEvents != null)\n\t\t\t{\n\t\t\t\tstate.shape.pointerEvents = state.shape.originalPointerEvents;\n\t\t\t\tstate.shape.originalPointerEvents = null;\n\t\t\t\t\n\t\t\t\t// Forces a repaint event if not moved\n\t\t\t\tstate.shape.bounds = null;\n\n\t\t\t\tif (state.text != null && state.text.node != null)\n\t\t\t\t{\n\t\t\t\t\tvar node = state.text.node;\n\t\t\t\t\t\n\t\t\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.firstChild.firstChild.setAttribute('pointer-events', 'all');\n\t\t\t\t\t}\n\t\t\t\t\telse if (node.ownerSVGElement != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.removeAttribute('pointer-events');\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.pointerEvents = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Shows folding icon\n\t\t\tif (state.control != null && state.control.node != null)\n\t\t\t{\n\t\t\t\tstate.control.node.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\t// Forces repaint of state and connected edges\n\t\t\tstate.view.invalidate(state.cell);\n\t\t}));\n\n\t\t// Repaints all invalid states\n\t\tthis.graph.view.validate();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.setHandlesVisibleForCells = function(cells, visible)\n{\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tvar cell = cells[i];\n\n\t\tvar handler = this.graph.selectionCellsHandler.getHandler(cell);\n\t\t\n\t\tif (handler != null)\n\t\t{\n\t\t\thandler.setHandlesVisible(visible);\n\t\t\t\n\t\t\tif (visible)\n\t\t\t{\n\t\t\t\thandler.redraw();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxGraphHandler.prototype.setHighlightColor = function(color)\n{\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.setHighlightColor(color);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the selection cells.\n */\nmxGraphHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed())\n\t{\n\t\tif (this.livePreviewUsed)\n\t\t{\n\t\t\tthis.resetLivePreview();\n\t\t}\n\t\t\n\t\tif (this.cell != null && this.first != null && (this.shape != null || this.livePreviewUsed) &&\n\t\t\tthis.currentDx != null && this.currentDy != null)\n\t\t{\n\t\t\tvar graph = this.graph;\n\t\t\tvar cell = me.getCell();\n\t\t\t\n\t\t\tif (this.connectOnDrop && this.target == null && cell != null && graph.getModel().isVertex(cell) &&\n\t\t\t\tgraph.isCellConnectable(cell) && graph.isEdgeValid(null, this.cell, cell))\n\t\t\t{\n\t\t\t\tgraph.connectionHandler.connect(this.cell, cell, me.getEvent());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\t\tvar scale = graph.getView().scale;\n\t\t\t\tvar dx = this.roundLength(this.currentDx / scale);\n\t\t\t\tvar dy = this.roundLength(this.currentDy / scale);\n\t\t\t\tvar target = this.target;\n\t\t\t\t\n\t\t\t\tif (graph.isSplitEnabled() && graph.isSplitTarget(target, this.cells, me.getEvent()))\n\t\t\t\t{\n\t\t\t\t\tgraph.splitEdge(target, this.cells, null, dx, dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.moveCells(this.cells, dx, dy, clone, this.target, me.getEvent());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSelectEnabled() && this.delayedSelection && this.cell != null)\n\t\t{\n\t\t\tthis.selectDelayed(me);\n\t\t}\n\t}\n\n\t// Consumes the event if a cell was initially clicked\n\tif (this.cellWasClicked)\n\t{\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_UP, me);\n\t}\n\n\tthis.reset();\n};\n\n/**\n * Function: selectDelayed\n * \n * Implements the delayed selection for the given mouse event.\n */\nmxGraphHandler.prototype.selectDelayed = function(me)\n{\n\tif (!this.graph.isCellSelected(this.cell) || !this.graph.popupMenuHandler.isPopupTrigger(me))\n\t{\n\t\tthis.graph.selectCellForEvent(this.cell, me.getEvent());\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.reset = function()\n{\n\tif (this.livePreviewUsed)\n\t{\n\t\tthis.resetLivePreview();\n\t\tthis.setHandlesVisibleForCells(this.cells, true);\n\t}\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n\n\tthis.delayedSelection = false;\n\tthis.livePreviewActive = null;\n\tthis.livePreviewUsed = null;\n\tthis.cellWasClicked = false;\n\tthis.currentDx = null;\n\tthis.currentDy = null;\n\tthis.cellCount = null;\n\tthis.cloning = false;\n\tthis.allCells = null;\n\tthis.guides = null;\n\tthis.target = null;\n\tthis.first = null;\n\tthis.cells = null;\n\tthis.cell = null;\n};\n\n/**\n * Function: shouldRemoveCellsFromParent\n * \n * Returns true if the given cells should be removed from the parent for the specified\n * mousereleased event.\n */\nmxGraphHandler.prototype.shouldRemoveCellsFromParent = function(parent, cells, evt)\n{\n\tif (this.graph.getModel().isVertex(parent))\n\t{\n\t\tvar pState = this.graph.getView().getState(parent);\n\t\t\n\t\tif (pState != null)\n\t\t{\n\t\t\tvar pt = mxUtils.convertPoint(this.graph.container,\n\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(pState.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, cx);\n\t\t\t}\n\t\t\n\t\t\treturn !mxUtils.contains(pState, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: moveCells\n * \n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.moveCells = function(cells, dx, dy, clone, target, evt)\n{\n\tif (clone)\n\t{\n\t\tcells = this.graph.getCloneableCells(cells);\n\t}\n\t\n\t// Removes cells from parent\n\tvar parent = this.graph.getModel().getParent(this.cell);\n\t\n\tif (target == null && this.isRemoveCellsFromParent() &&\n\t\tthis.shouldRemoveCellsFromParent(parent, cells, evt))\n\t{\n\t\ttarget = this.graph.getDefaultParent();\n\t}\n\t\n\t// Cloning into locked cells is not allowed\n\tclone = clone && !this.graph.isCellLocked(target || this.graph.getDefaultParent());\n\n\tthis.graph.getModel().beginUpdate();\n\ttry\n\t{\n\t\tvar parents = [];\n\t\t\n\t\t// Removes parent if all child cells are removed\n\t\tif (!clone && target != null && this.removeEmptyParents)\n\t\t{\n\t\t\t// Collects all non-selected parents\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Recurse up the cell hierarchy\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar par = this.graph.model.getParent(cells[i]);\n\n\t\t\t\tif (par != null && !dict.get(par))\n\t\t\t\t{\n\t\t\t\t\tdict.put(par, true);\n\t\t\t\t\tparents.push(par);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Passes all selected cells in order to correctly clone or move into\n\t\t// the target cell. The method checks for each cell if its movable.\n\t\tcells = this.graph.moveCells(cells, dx, dy, clone, target, evt);\n\n\t\t// Removes parent if all child cells are removed\n\t\tvar temp = [];\n\t\t\n\t\tfor (var i = 0; i < parents.length; i++)\n\t\t{\n\t\t\tif (this.shouldRemoveParent(parents[i]))\n\t\t\t{\n\t\t\t\ttemp.push(parents[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.graph.removeCells(temp, false);\n\t}\n\tfinally\n\t{\n\t\tthis.graph.getModel().endUpdate();\n\t}\n\n\t// Selects the new cells if cells have been cloned\n\tif (clone)\n\t{\n\t\tthis.graph.setSelectionCells(cells);\n\t}\n\n\tif (this.isSelectEnabled() && this.scrollOnMove)\n\t{\n\t\tthis.graph.scrollCellToVisible(cells[0]);\n\t}\n};\n\n/**\n * Function: moveCells\n * \n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.shouldRemoveParent = function(parent)\n{\n\tvar state = this.graph.view.getState(parent);\n\t\n\tif (state != null && (this.graph.model.isEdge(state.cell) || this.graph.model.isVertex(state.cell)) &&\n\t\tthis.graph.isCellDeletable(state.cell) && this.graph.model.getChildCount(state.cell) == 0)\n\t{\n\t\tvar stroke = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\t\tvar fill = mxUtils.getValue(state.style, mxConstants.STYLE_FILLCOLOR, mxConstants.NONE);\n\t\t\n\t\treturn stroke == mxConstants.NONE && fill == mxConstants.NONE;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: destroyShapes\n * \n * Destroy the preview and highlight shapes.\n */\nmxGraphHandler.prototype.destroyShapes = function()\n{\n\t// Destroys the preview dashed rectangle\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.guide != null)\n\t{\n\t\tthis.guide.destroy();\n\t\tthis.guide = null;\n\t}\n\t\n\t// Destroys the drop target highlight\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.destroy();\n\t\tthis.highlight = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxGraphHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.panHandler);\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningHandler\n * \n * Event handler that pans and creates popupmenus. To use the left\n * mousebutton for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>. This handler is built-into\n * <mxGraph.panningHandler> and enabled using <mxGraph.setPanning>.\n * \n * Constructor: mxPanningHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>\n * and pans the graph.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n */\nfunction mxPanningHandler(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force panning event\n\t\tthis.forcePanningHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForcePanningEvent(me))\n\t\t\t{\n\t\t\t\tthis.start(me);\n\t\t\t\tthis.active = true;\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n\t\t\n\t\t// Handles pinch gestures\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.isPinchEnabled())\n\t\t\t{\n\t\t\t\tvar evt = eo.getProperty('event');\n\t\t\t\t\n\t\t\t\tif (!mxEvent.isConsumed(evt) && evt.type == 'gesturestart')\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\t\t// Forces start of panning when pinch gesture starts\n\t\t\t\t\tif (!this.active && this.mouseDownEvent != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.start(this.mouseDownEvent);\n\t\t\t\t\t\tthis.mouseDownEvent = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (evt.type == 'gestureend' && this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tvar value = Math.round(this.initialScale * evt.scale * 100) / 100;\n\t\t\t\t\t\n\t\t\t\t\tif (this.minScale != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = Math.max(this.minScale, value);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.maxScale != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = Math.min(this.maxScale, value);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (this.graph.view.scale != value)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.zoomTo(value);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t\t{\n\t\t    \tif (this.active)\n\t\t    \t{\n\t\t    \t\tthis.reset();\n\t\t    \t}\n\t\t});\n\t\t\n\t\t// Stops scrolling on every mouseup anywhere in the document\n\t\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPanningHandler.prototype = new mxEventSource();\nmxPanningHandler.prototype.constructor = mxPanningHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPanningHandler.prototype.graph = null;\n\n/**\n * Variable: useLeftButtonForPanning\n * \n * Specifies if panning should be active for the left mouse button.\n * Setting this to true may conflict with <mxRubberband>. Default is false.\n */\nmxPanningHandler.prototype.useLeftButtonForPanning = false;\n\n/**\n * Variable: usePopupTrigger\n * \n * Specifies if <mxEvent.isPopupTrigger> should also be used for panning.\n */\nmxPanningHandler.prototype.usePopupTrigger = true;\n\n/**\n * Variable: ignoreCell\n * \n * Specifies if panning should be active even if there is a cell under the\n * mousepointer. Default is false.\n */\nmxPanningHandler.prototype.ignoreCell = false;\n\n/**\n * Variable: previewEnabled\n * \n * Specifies if the panning should be previewed. Default is true.\n */\nmxPanningHandler.prototype.previewEnabled = true;\n\n/**\n * Variable: useGrid\n * \n * Specifies if the panning steps should be aligned to the grid size.\n * Default is false.\n */\nmxPanningHandler.prototype.useGrid = false;\n\n/**\n * Variable: panningEnabled\n * \n * Specifies if panning should be enabled. Default is true.\n */\nmxPanningHandler.prototype.panningEnabled = true;\n\n/**\n * Variable: pinchEnabled\n * \n * Specifies if pinch gestures should be handled as zoom. Default is true.\n */\nmxPanningHandler.prototype.pinchEnabled = true;\n\n/**\n * Variable: maxScale\n * \n * Specifies the maximum scale. Default is 8.\n */\nmxPanningHandler.prototype.maxScale = 8;\n\n/**\n * Variable: minScale\n * \n * Specifies the minimum scale. Default is 0.01.\n */\nmxPanningHandler.prototype.minScale = 0.01;\n\n/**\n * Variable: dx\n * \n * Holds the current horizontal offset.\n */\nmxPanningHandler.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Holds the current vertical offset.\n */\nmxPanningHandler.prototype.dy = null;\n\n/**\n * Variable: startX\n * \n * Holds the x-coordinate of the start point.\n */\nmxPanningHandler.prototype.startX = 0;\n\n/**\n * Variable: startY\n * \n * Holds the y-coordinate of the start point.\n */\nmxPanningHandler.prototype.startY = 0;\n\n/**\n * Function: isActive\n * \n * Returns true if the handler is currently active.\n */\nmxPanningHandler.prototype.isActive = function()\n{\n\treturn this.active || this.initialScale != null;\n};\n\n/**\n * Function: isPanningEnabled\n * \n * Returns <panningEnabled>.\n */\nmxPanningHandler.prototype.isPanningEnabled = function()\n{\n\treturn this.panningEnabled;\n};\n\n/**\n * Function: setPanningEnabled\n * \n * Sets <panningEnabled>.\n */\nmxPanningHandler.prototype.setPanningEnabled = function(value)\n{\n\tthis.panningEnabled = value;\n};\n\n/**\n * Function: isPinchEnabled\n * \n * Returns <pinchEnabled>.\n */\nmxPanningHandler.prototype.isPinchEnabled = function()\n{\n\treturn this.pinchEnabled;\n};\n\n/**\n * Function: setPinchEnabled\n * \n * Sets <pinchEnabled>.\n */\nmxPanningHandler.prototype.setPinchEnabled = function(value)\n{\n\tthis.pinchEnabled = value;\n};\n\n/**\n * Function: isPanningTrigger\n * \n * Returns true if the given event is a panning trigger for the optional\n * given cell. This returns true if control-shift is pressed or if\n * <usePopupTrigger> is true and the event is a popup trigger.\n */\nmxPanningHandler.prototype.isPanningTrigger = function(me)\n{\n\tvar evt = me.getEvent();\n\t\n\treturn (this.useLeftButtonForPanning && me.getState() == null &&\n\t\t\tmxEvent.isLeftMouseButton(evt)) || (mxEvent.isControlDown(evt) &&\n\t\t\tmxEvent.isShiftDown(evt)) || (this.usePopupTrigger && mxEvent.isPopupTrigger(evt));\n};\n\n/**\n * Function: isForcePanningEvent\n * \n * Returns true if the given <mxMouseEvent> should start panning. This\n * implementation always returns true if <ignoreCell> is true or for\n * multi touch events.\n */\nmxPanningHandler.prototype.isForcePanningEvent = function(me)\n{\n\treturn this.ignoreCell || mxEvent.isMultiTouchEvent(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPanningHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownEvent = me;\n\t\n\tif (!me.isConsumed() && this.isPanningEnabled() && !this.active && this.isPanningTrigger(me))\n\t{\n\t\tthis.start(me);\n\t\tthis.consumePanningTrigger(me);\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts panning at the given event.\n */\nmxPanningHandler.prototype.start = function(me)\n{\n\tthis.dx0 = -this.graph.container.scrollLeft;\n\tthis.dy0 = -this.graph.container.scrollTop;\n\n\t// Stores the location of the trigger event\n\tthis.startX = me.getX();\n\tthis.startY = me.getY();\n\tthis.dx = null;\n\tthis.dy = null;\n\t\n\tthis.panningTrigger = true;\n};\n\n/**\n * Function: consumePanningTrigger\n * \n * Consumes the given <mxMouseEvent> if it was a panning trigger in\n * <mouseDown>. The default is to invoke <mxMouseEvent.consume>. Note that this\n * will block any further event processing. If you haven't disabled built-in\n * context menus and require immediate selection of the cell on mouseDown in\n * Safari and/or on the Mac, then use the following code:\n * \n * (code)\n * mxPanningHandler.prototype.consumePanningTrigger = function(me)\n * {\n *   if (me.evt.preventDefault)\n *   {\n *     me.evt.preventDefault();\n *   }\n *   \n *   // Stops event processing in IE\n *   me.evt.returnValue = false;\n *   \n *   // Sets local consumed state\n *   if (!mxClient.IS_SF && !mxClient.IS_MAC)\n *   {\n *     me.consumed = true;\n *   }\n * };\n * (end)\n */\nmxPanningHandler.prototype.consumePanningTrigger = function(me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPanningHandler.prototype.mouseMove = function(sender, me)\n{\n\tthis.dx = me.getX() - this.startX;\n\tthis.dy = me.getY() - this.startY;\n\t\n\tif (this.active)\n\t{\n\t\tif (this.previewEnabled)\n\t\t{\n\t\t\t// Applies the grid to the panning steps\n\t\t\tif (this.useGrid)\n\t\t\t{\n\t\t\t\tthis.dx = this.graph.snap(this.dx);\n\t\t\t\tthis.dy = this.graph.snap(this.dy);\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN, 'event', me));\n\t}\n\telse if (this.panningTrigger)\n\t{\n\t\tvar tmp = this.active;\n\n\t\t// Panning is activated only if the mouse is moved\n\t\t// beyond the graph tolerance\n\t\tthis.active = Math.abs(this.dx) > this.graph.tolerance || Math.abs(this.dy) > this.graph.tolerance;\n\n\t\tif (!tmp && this.active)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t}\n\t}\n\t\n\tif (this.active || this.panningTrigger)\n\t{\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tif (this.dx != null && this.dy != null)\n\t\t{\n\t\t\t// Ignores if scrollbars have been used for panning\n\t\t\tif (!this.graph.useScrollbarsForPanning || !mxUtils.hasScrollbars(this.graph.container))\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar t = this.graph.getView().translate;\n\t\t\t\tthis.graph.panGraph(0, 0);\n\t\t\t\tthis.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n\t\t\t}\n\t\t\t\n\t\t\tme.consume();\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_END, 'event', me));\n\t}\n\t\n\tthis.reset();\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.reset = function()\n{\n\tthis.panningTrigger = false;\n\tthis.mouseDownEvent = null;\n\tthis.active = false;\n\tthis.dx = null;\n\tthis.dy = null;\n};\n\n/**\n * Function: panGraph\n * \n * Pans <graph> by the given amount.\n */\nmxPanningHandler.prototype.panGraph = function(dx, dy)\n{\n\tthis.graph.getView().setTranslate(dx, dy);\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPanningHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.forcePanningHandler);\n\tthis.graph.removeListener(this.gestureHandler);\n\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenuHandler\n * \n * Event handler that creates popupmenus.\n * \n * Constructor: mxPopupMenuHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>.\n */\nfunction mxPopupMenuHandler(graph, factoryMethod)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.graph.addMouseListener(this);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxPopupMenu.\n */\nmxPopupMenuHandler.prototype = new mxPopupMenu();\nmxPopupMenuHandler.prototype.constructor = mxPopupMenuHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPopupMenuHandler.prototype.graph = null;\n\n/**\n * Variable: selectOnPopup\n * \n * Specifies if cells should be selected if a popupmenu is displayed for\n * them. Default is true.\n */\nmxPopupMenuHandler.prototype.selectOnPopup = true;\n\n/**\n * Variable: clearSelectionOnBackground\n * \n * Specifies if cells should be deselected if a popupmenu is displayed for\n * the diagram background. Default is true.\n */\nmxPopupMenuHandler.prototype.clearSelectionOnBackground = true;\n\n/**\n * Variable: triggerX\n * \n * X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerX = null;\n\n/**\n * Variable: triggerY\n * \n * Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerY = null;\n\n/**\n * Variable: screenX\n * \n * Screen X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenX = null;\n\n/**\n * Variable: screenY\n * \n * Screen Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenY = null;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenuHandler.prototype.init = function()\n{\n\t// Supercall\n\tmxPopupMenu.prototype.init.apply(this);\n\n\t// Hides the tooltip if the mouse is over\n\t// the context menu\n\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.tooltipHandler.hide();\n\t}));\n};\n\n/**\n * Function: isSelectOnPopup\n * \n * Hook for returning if a cell should be selected for a given <mxMouseEvent>.\n * This implementation returns <selectOnPopup>.\n */\nmxPopupMenuHandler.prototype.isSelectOnPopup = function(me)\n{\n\treturn this.selectOnPopup;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPopupMenuHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.isEnabled() && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\t// Hides the popupmenu if is is being displayed\n\t\tthis.hideMenu();\n\t\tthis.triggerX = me.getGraphX();\n\t\tthis.triggerY = me.getGraphY();\n\t\tthis.screenX = mxEvent.getMainEvent(me.getEvent()).screenX;\n\t\tthis.screenY = mxEvent.getMainEvent(me.getEvent()).screenY;\n\t\tthis.popupTrigger = this.isPopupTrigger(me);\n\t\tthis.inTolerance = true;\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPopupMenuHandler.prototype.mouseMove = function(sender, me)\n{\n\t// Popup trigger may change on mouseUp so ignore it\n\tif (this.inTolerance && this.screenX != null && this.screenY != null)\n\t{\n\t\tif (Math.abs(mxEvent.getMainEvent(me.getEvent()).screenX - this.screenX) > this.graph.tolerance ||\n\t\t\tMath.abs(mxEvent.getMainEvent(me.getEvent()).screenY - this.screenY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPopupMenuHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.popupTrigger && this.inTolerance && this.triggerX != null && this.triggerY != null)\n\t{\n\t\tvar cell = this.getCellForPopupEvent(me);\n\n\t\t// Selects the cell for which the context menu is being displayed\n\t\tif (this.graph.isEnabled() && this.isSelectOnPopup(me) &&\n\t\t\tcell != null && !this.graph.isCellSelected(cell))\n\t\t{\n\t\t\tthis.graph.setSelectionCell(cell);\n\t\t}\n\t\telse if (this.clearSelectionOnBackground && cell == null)\n\t\t{\n\t\t\tthis.graph.clearSelection();\n\t\t}\n\t\t\n\t\t// Hides the tooltip if there is one\n\t\tthis.graph.tooltipHandler.hide();\n\n\t\t// Menu is shifted by 1 pixel so that the mouse up event\n\t\t// is routed via the underlying shape instead of the DIV\n\t\tvar origin = mxUtils.getScrollOrigin();\n\t\tthis.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());\n\t\tme.consume();\n\t}\n\t\n\tthis.popupTrigger = false;\n\tthis.inTolerance = false;\n};\n\n/**\n * Function: getCellForPopupEvent\n * \n * Hook to return the cell for the mouse up popup trigger handling.\n */\nmxPopupMenuHandler.prototype.getCellForPopupEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenuHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.gestureHandler);\n\t\n\t// Supercall\n\tmxPopupMenu.prototype.destroy.apply(this);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellMarker\n * \n * A helper class to process mouse locations and highlight cells.\n * \n * Helper class to highlight cells. To add a cell marker to an existing graph\n * for highlighting all cells, the following code is used:\n * \n * (code)\n * var marker = new mxCellMarker(graph);\n * graph.addMouseListener({\n *   mouseDown: function() {},\n *   mouseMove: function(sender, me)\n *   {\n *     marker.process(me);\n *   },\n *   mouseUp: function() {}\n * });\n * (end)\n *\n * Event: mxEvent.MARK\n * \n * Fires after a cell has been marked or unmarked. The <code>state</code>\n * property contains the marked <mxCellState> or null if no state is marked.\n * \n * Constructor: mxCellMarker\n * \n * Constructs a new cell marker.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * validColor - Optional marker color for valid states. Default is\n * <mxConstants.DEFAULT_VALID_COLOR>.\n * invalidColor - Optional marker color for invalid states. Default is\n * <mxConstants.DEFAULT_INVALID_COLOR>.\n * hotspot - Portion of the width and hight where a state intersects a\n * given coordinate pair. A value of 0 means always highlight. Default is\n * <mxConstants.DEFAULT_HOTSPOT>.\n */\nfunction mxCellMarker(graph, validColor, invalidColor, hotspot)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.validColor = (validColor != null) ? validColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.invalidColor = (invalidColor != null) ? invalidColor : mxConstants.DEFAULT_INVALID_COLOR;\n\t\tthis.hotspot = (hotspot != null) ? hotspot : mxConstants.DEFAULT_HOTSPOT;\n\t\t\n\t\tthis.highlight = new mxCellHighlight(graph);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxCellMarker, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellMarker.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if the marker is enabled. Default is true.\n */\nmxCellMarker.prototype.enabled = true;\n\n/**\n * Variable: hotspot\n * \n * Specifies the portion of the width and height that should trigger\n * a highlight. The area around the center of the cell to be marked is used\n * as the hotspot. Possible values are between 0 and 1. Default is\n * mxConstants.DEFAULT_HOTSPOT.\n */\nmxCellMarker.prototype.hotspot = mxConstants.DEFAULT_HOTSPOT; \n\n/**\n * Variable: hotspotEnabled\n * \n * Specifies if the hotspot is enabled. Default is false.\n */\nmxCellMarker.prototype.hotspotEnabled = false;\n\n/**\n * Variable: validColor\n * \n * Holds the valid marker color.\n */\nmxCellMarker.prototype.validColor = null;\n\n/**\n * Variable: invalidColor\n * \n * Holds the invalid marker color.\n */\nmxCellMarker.prototype.invalidColor = null;\n\n/**\n * Variable: currentColor\n * \n * Holds the current marker color.\n */\nmxCellMarker.prototype.currentColor = null;\n\n/**\n * Variable: validState\n * \n * Holds the marked <mxCellState> if it is valid.\n */\nmxCellMarker.prototype.validState = null; \n\n/**\n * Variable: markedState\n * \n * Holds the marked <mxCellState>.\n */\nmxCellMarker.prototype.markedState = null;\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxCellMarker.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxCellMarker.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setHotspot\n * \n * Sets the <hotspot>.\n */\nmxCellMarker.prototype.setHotspot = function(hotspot)\n{\n\tthis.hotspot = hotspot;\n};\n\n/**\n * Function: getHotspot\n * \n * Returns the <hotspot>.\n */\nmxCellMarker.prototype.getHotspot = function()\n{\n\treturn this.hotspot;\n};\n\n/**\n * Function: setHotspotEnabled\n * \n * Specifies whether the hotspot should be used in <intersects>.\n */\nmxCellMarker.prototype.setHotspotEnabled = function(enabled)\n{\n\tthis.hotspotEnabled = enabled;\n};\n\n/**\n * Function: isHotspotEnabled\n * \n * Returns true if hotspot is used in <intersects>.\n */\nmxCellMarker.prototype.isHotspotEnabled = function()\n{\n\treturn this.hotspotEnabled;\n};\n\n/**\n * Function: hasValidState\n * \n * Returns true if <validState> is not null.\n */\nmxCellMarker.prototype.hasValidState = function()\n{\n\treturn this.validState != null;\n};\n\n/**\n * Function: getValidState\n * \n * Returns the <validState>.\n */\nmxCellMarker.prototype.getValidState = function()\n{\n\treturn this.validState;\n};\n\n/**\n * Function: getMarkedState\n * \n * Returns the <markedState>.\n */\nmxCellMarker.prototype.getMarkedState = function()\n{\n\treturn this.markedState;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the cell marker.\n */\nmxCellMarker.prototype.reset = function()\n{\n\tthis.validState = null;\n\t\n\tif (this.markedState != null)\n\t{\n\t\tthis.markedState = null;\n\t\tthis.unmark();\n\t}\n};\n\n/**\n * Function: process\n * \n * Processes the given event and cell and marks the state returned by\n * <getState> with the color returned by <getMarkerColor>. If the\n * markerColor is not null, then the state is stored in <markedState>. If\n * <isValidState> returns true, then the state is stored in <validState>\n * regardless of the marker color. The state is returned regardless of the\n * marker color and valid state. \n */\nmxCellMarker.prototype.process = function(me)\n{\n\tvar state = null;\n\t\n\tif (this.isEnabled())\n\t{\n\t\tstate = this.getState(me);\n\t\tthis.setCurrentState(state, me);\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: setCurrentState\n * \n * Sets and marks the current valid state.\n */\nmxCellMarker.prototype.setCurrentState = function(state, me, color)\n{\n\tvar isValid = (state != null) ? this.isValidState(state) : false;\n\tcolor = (color != null) ? color : this.getMarkerColor(me.getEvent(), state, isValid);\n\t\n\tif (isValid)\n\t{\n\t\tthis.validState = state;\n\t}\n\telse\n\t{\n\t\tthis.validState = null;\n\t}\n\t\n\tif (state != this.markedState || color != this.currentColor)\n\t{\n\t\tthis.currentColor = color;\n\t\t\n\t\tif (state != null && this.currentColor != null)\n\t\t{\n\t\t\tthis.markedState = state;\n\t\t\tthis.mark();\t\t\n\t\t}\n\t\telse if (this.markedState != null)\n\t\t{\n\t\t\tthis.markedState = null;\n\t\t\tthis.unmark();\n\t\t}\n\t}\n};\n\n/**\n * Function: markCell\n * \n * Marks the given cell using the given color, or <validColor> if no color is specified.\n */\nmxCellMarker.prototype.markCell = function(cell, color)\n{\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tthis.currentColor = (color != null) ? color : this.validColor;\n\t\tthis.markedState = state;\n\t\tthis.mark();\n\t}\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellMarker.prototype.mark = function()\n{\n\tthis.highlight.setHighlightColor(this.currentColor);\n\tthis.highlight.highlight(this.markedState);\n\tthis.fireEvent(new mxEventObject(mxEvent.MARK, 'state', this.markedState));\n};\n\n/**\n * Function: unmark\n * \n * Hides the marker and fires a <mark> event.\n */\nmxCellMarker.prototype.unmark = function()\n{\n\tthis.mark();\n};\n\n/**\n * Function: isValidState\n * \n * Returns true if the given <mxCellState> is a valid state. If this\n * returns true, then the state is stored in <validState>. The return value\n * of this method is used as the argument for <getMarkerColor>.\n */\nmxCellMarker.prototype.isValidState = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMarkerColor\n * \n * Returns the valid- or invalidColor depending on the value of isValid.\n * The given <mxCellState> is ignored by this implementation.\n */\nmxCellMarker.prototype.getMarkerColor = function(evt, state, isValid)\n{\n\treturn (isValid) ? this.validColor : this.invalidColor;\n};\n\n/**\n * Function: getState\n * \n * Uses <getCell>, <getStateToMark> and <intersects> to return the\n * <mxCellState> for the given <mxMouseEvent>.\n */\nmxCellMarker.prototype.getState = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar cell = this.getCell(me);\n\tvar state = this.getStateToMark(view.getState(cell));\n\n\treturn (state != null && this.intersects(state, me)) ? state : null;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> for the given event and cell. This returns the\n * given cell.\n */\nmxCellMarker.prototype.getCell = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: getStateToMark\n * \n * Returns the <mxCellState> to be marked for the given <mxCellState> under\n * the mouse. This returns the given state.\n */\nmxCellMarker.prototype.getStateToMark = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given coordinate pair intersects the given state.\n * This returns true if the <hotspot> is 0 or the coordinates are inside\n * the hotspot for the given cell state.\n */\nmxCellMarker.prototype.intersects = function(state, me)\n{\n\tif (this.hotspotEnabled)\n\t{\n\t\treturn mxUtils.intersectsHotspot(state, me.getGraphX(), me.getGraphY(),\n\t\t\tthis.hotspot, mxConstants.MIN_HOTSPOT_SIZE,\n\t\t\tmxConstants.MAX_HOTSPOT_SIZE);\n\t}\n\t\n\treturn true;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellMarker.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getModel().removeListener(this.resetHandler);\n\tthis.highlight.destroy();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSelectionCellsHandler\n * \n * An event handler that manages cell handlers and invokes their mouse event\n * processing functions.\n * \n * Group: Events\n * \n * Event: mxEvent.ADD\n * \n * Fires if a cell has been added to the selection. The <code>state</code>\n * property contains the <mxCellState> that has been added.\n * \n * Event: mxEvent.REMOVE\n * \n * Fires if a cell has been remove from the selection. The <code>state</code>\n * property contains the <mxCellState> that has been removed.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxSelectionCellsHandler(graph)\n{\n\tmxEventSource.call(this);\n\t\n\tthis.graph = graph;\n\tthis.handlers = new mxDictionary();\n\tthis.graph.addMouseListener(this);\n\t\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.refresh();\n\t\t}\n\t});\n\t\n\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.refreshHandler);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxSelectionCellsHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSelectionCellsHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxSelectionCellsHandler.prototype.enabled = true;\n\n/**\n * Variable: refreshHandler\n * \n * Keeps a reference to an event listener for later removal.\n */\nmxSelectionCellsHandler.prototype.refreshHandler = null;\n\n/**\n * Variable: maxHandlers\n * \n * Defines the maximum number of handlers to paint individually. Default is 100.\n */\nmxSelectionCellsHandler.prototype.maxHandlers = 100;\n\n/**\n * Variable: handlers\n * \n * <mxDictionary> that maps from cells to handlers.\n */\nmxSelectionCellsHandler.prototype.handlers = null;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxSelectionCellsHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxSelectionCellsHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getHandler\n * \n * Returns the handler for the given cell.\n */\nmxSelectionCellsHandler.prototype.getHandler = function(cell)\n{\n\treturn this.handlers.get(cell);\n};\n\n/**\n * Function: reset\n * \n * Resets all handlers.\n */\nmxSelectionCellsHandler.prototype.reset = function()\n{\n\tthis.handlers.visit(function(key, handler)\n\t{\n\t\thandler.reset.apply(handler);\n\t});\n};\n\n/**\n * Function: refresh\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.refresh = function()\n{\n\t// Removes all existing handlers\n\tvar oldHandlers = this.handlers;\n\tthis.handlers = new mxDictionary();\n\t\n\t// Creates handles for all selection cells\n\tvar tmp = this.graph.getSelectionCells();\n\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = oldHandlers.remove(tmp[i]);\n\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tif (handler.state != state)\n\t\t\t\t{\n\t\t\t\t\thandler.destroy();\n\t\t\t\t\thandler = null;\n\t\t\t\t}\n\t\t\t\telse if (!this.isHandlerActive(handler))\n\t\t\t\t{\n\t\t\t\t\tif (handler.refresh != null)\n\t\t\t\t\t{\n\t\t\t\t\t\thandler.refresh();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (handler == null)\n\t\t\t{\n\t\t\t\thandler = this.graph.createHandler(state);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'state', state));\n\t\t\t}\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Destroys all unused handlers\n\toldHandlers.visit(mxUtils.bind(this, function(key, handler)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE, 'state', handler.state));\n\t\thandler.destroy();\n\t}));\n};\n\n/**\n * Function: isHandlerActive\n * \n * Returns true if the given handler is active and should not be redrawn.\n */\nmxSelectionCellsHandler.prototype.isHandlerActive = function(handler)\n{\n\treturn handler.index != null;\n};\n\n/**\n * Function: updateHandler\n * \n * Updates the handler for the given shape if one exists.\n */\nmxSelectionCellsHandler.prototype.updateHandler = function(state)\n{\n\tvar handler = this.handlers.remove(state.cell);\n\t\n\tif (handler != null)\n\t{\n\t\t// Transfers the current state to the new handler\n\t\tvar index = handler.index;\n\t\tvar x = handler.startX;\n\t\tvar y = handler.startY;\n\t\t\n\t\thandler.destroy();\n\t\thandler = this.graph.createHandler(state);\n\n\t\tif (handler != null)\n\t\t{\n\t\t\tthis.handlers.put(state.cell, handler);\n\t\t\t\n\t\t\tif (index != null && x != null && y != null)\n\t\t\t{\n\t\t\t\thandler.start(x, y, index);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseDown.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseMove.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseUp.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxSelectionCellsHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getSelectionModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getView().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxConnectionHandler\n *\n * Graph event handler that creates new connections. Uses <mxTerminalMarker>\n * for finding and highlighting the source and target vertices and\n * <factoryMethod> to create the edge instance. This handler is built-into\n * <mxGraph.connectionHandler> and enabled using <mxGraph.setConnectable>.\n *\n * Example:\n * \n * (code)\n * new mxConnectionHandler(graph, function(source, target, style)\n * {\n *   edge = new mxCell('', new mxGeometry());\n *   edge.setEdge(true);\n *   edge.setStyle(style);\n *   edge.geometry.relative = true;\n *   return edge;\n * });\n * (end)\n * \n * Here is an alternative solution that just sets a specific user object for\n * new edges by overriding <insertEdge>.\n *\n * (code)\n * mxConnectionHandlerInsertEdge = mxConnectionHandler.prototype.insertEdge;\n * mxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n * {\n *   value = 'Test';\n * \n *   return mxConnectionHandlerInsertEdge.apply(this, arguments);\n * };\n * (end)\n * \n * Using images to trigger connections:\n * \n * This handler uses mxTerminalMarker to find the source and target cell for\n * the new connection and creates a new edge using <connect>. The new edge is\n * created using <createEdge> which in turn uses <factoryMethod> or creates a\n * new default edge.\n * \n * The handler uses a \"highlight-paradigm\" for indicating if a cell is being\n * used as a source or target terminal, as seen in other diagramming products.\n * In order to allow both, moving and connecting cells at the same time,\n * <mxConstants.DEFAULT_HOTSPOT> is used in the handler to determine the hotspot\n * of a cell, that is, the region of the cell which is used to trigger a new\n * connection. The constant is a value between 0 and 1 that specifies the\n * amount of the width and height around the center to be used for the hotspot\n * of a cell and its default value is 0.5. In addition,\n * <mxConstants.MIN_HOTSPOT_SIZE> defines the minimum number of pixels for the\n * width and height of the hotspot.\n * \n * This solution, while standards compliant, may be somewhat confusing because\n * there is no visual indicator for the hotspot and the highlight is seen to\n * switch on and off while the mouse is being moved in and out. Furthermore,\n * this paradigm does not allow to create different connections depending on\n * the highlighted hotspot as there is only one hotspot per cell and it\n * normally does not allow cells to be moved and connected at the same time as\n * there is no clear indication of the connectable area of the cell.\n * \n * To come across these issues, the handle has an additional <createIcons> hook\n * with a default implementation that allows to create one icon to be used to\n * trigger new connections. If this icon is specified, then new connections can\n * only be created if the image is clicked while the cell is being highlighted.\n * The <createIcons> hook may be overridden to create more than one\n * <mxImageShape> for creating new connections, but the default implementation\n * supports one image and is used as follows:\n * \n * In order to display the \"connect image\" whenever the mouse is over the cell,\n * an DEFAULT_HOTSPOT of 1 should be used:\n * \n * (code)\n * mxConstants.DEFAULT_HOTSPOT = 1;\n * (end)\n * \n * In order to avoid confusion with the highlighting, the highlight color\n * should not be used with a connect image:\n * \n * (code)\n * mxConstants.HIGHLIGHT_COLOR = null;\n * (end)\n * \n * To install the image, the connectImage field of the mxConnectionHandler must\n * be assigned a new <mxImage> instance:\n * \n * (code)\n * mxConnectionHandler.prototype.connectImage = new mxImage('images/green-dot.gif', 14, 14);\n * (end)\n * \n * This will use the green-dot.gif with a width and height of 14 pixels as the\n * image to trigger new connections. In createIcons the icon field of the\n * handler will be set in order to remember the icon that has been clicked for\n * creating the new connection. This field will be available under selectedIcon\n * in the connect method, which may be overridden to take the icon that\n * triggered the new connection into account. This is useful if more than one\n * icon may be used to create a connection.\n *\n * Group: Events\n * \n * Event: mxEvent.START\n * \n * Fires when a new connection is being created by the user. The <code>state</code>\n * property contains the state of the source cell.\n * \n * Event: mxEvent.CONNECT\n * \n * Fires between begin- and endUpdate in <connect>. The <code>cell</code>\n * property contains the inserted edge, the <code>event</code> and <code>target</code> \n * properties contain the respective arguments that were passed to <connect> (where\n * target corresponds to the dropTarget argument). Finally, the <code>terminal</code>\n * property corresponds to the target argument in <connect> or the clone of the source\n * terminal if <createTarget> is enabled.\n * \n * Note that the target is the cell under the mouse where the mouse button was released.\n * Depending on the logic in the handler, this doesn't necessarily have to be the target\n * of the inserted edge. To print the source, target or any optional ports IDs that the\n * edge is connected to, the following code can be used. To get more details about the\n * actual connection point, <mxGraph.getConnectionConstraint> can be used. To resolve\n * the port IDs, use <mxGraphModel.getCell>.\n * \n * (code)\n * graph.connectionHandler.addListener(mxEvent.CONNECT, function(sender, evt)\n * {\n *   var edge = evt.getProperty('cell');\n *   var source = graph.getModel().getTerminal(edge, true);\n *   var target = graph.getModel().getTerminal(edge, false);\n *   \n *   var style = graph.getCellStyle(edge);\n *   var sourcePortId = style[mxConstants.STYLE_SOURCE_PORT];\n *   var targetPortId = style[mxConstants.STYLE_TARGET_PORT];\n *   \n *   mxLog.show();\n *   mxLog.debug('connect', edge, source.id, target.id, sourcePortId, targetPortId);\n * });\n * (end)\n *\n * Event: mxEvent.RESET\n * \n * Fires when the <reset> method is invoked.\n *\n * Constructor: mxConnectionHandler\n *\n * Constructs an event handler that connects vertices using the specified\n * factory method to create the new edges. Modify\n * <mxConstants.ACTIVE_REGION> to setup the region on a cell which triggers\n * the creation of a new connection or use connect icons as explained\n * above.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and an\n * optional cell style from the preview as the third argument. It returns\n * the <mxCell> that represents the new edge.\n */\nfunction mxConnectionHandler(graph, factoryMethod)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxConnectionHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConnectionHandler.prototype.graph = null;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used for creating new edges. The function takes the\n * source and target <mxCell> as the first and second argument and returns\n * a new <mxCell> that represents the edge. This is used in <createEdge>.\n */\nmxConnectionHandler.prototype.factoryMethod = true;\n\n/**\n * Variable: moveIconFront\n * \n * Specifies if icons should be displayed inside the graph container instead\n * of the overlay pane. This is used for HTML labels on vertices which hide\n * the connect icon. This has precendence over <moveIconBack> when set\n * to true. Default is false.\n */\nmxConnectionHandler.prototype.moveIconFront = false;\n\n/**\n * Variable: moveIconBack\n * \n * Specifies if icons should be moved to the back of the overlay pane. This can\n * be set to true if the icons of the connection handler conflict with other\n * handles, such as the vertex label move handle. Default is false.\n */\nmxConnectionHandler.prototype.moveIconBack = false;\n\n/**\n * Variable: connectImage\n * \n * <mxImage> that is used to trigger the creation of a new connection. This\n * is used in <createIcons>. Default is null.\n */\nmxConnectionHandler.prototype.connectImage = null;\n\n/**\n * Variable: targetConnectImage\n * \n * Specifies if the connect icon should be centered on the target state\n * while connections are being previewed. Default is false.\n */\nmxConnectionHandler.prototype.targetConnectImage = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConnectionHandler.prototype.enabled = true;\n\n/**\n * Variable: select\n * \n * Specifies if new edges should be selected. Default is true.\n */\nmxConnectionHandler.prototype.select = true;\n\n/**\n * Variable: createTarget\n * \n * Specifies if <createTargetVertex> should be called if no target was under the\n * mouse for the new connection. Setting this to true means the connection\n * will be drawn as valid if no target is under the mouse, and\n * <createTargetVertex> will be called before the connection is created between\n * the source cell and the newly created vertex in <createTargetVertex>, which\n * can be overridden to create a new target. Default is false.\n */\nmxConnectionHandler.prototype.createTarget = false;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> used for finding source and target cells.\n */\nmxConnectionHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxConnectionHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while connections are being created.\n */\nmxConnectionHandler.prototype.error = null;\n\n/**\n * Variable: waypointsEnabled\n * \n * Specifies if single clicks should add waypoints on the new edge. Default is\n * false.\n */\nmxConnectionHandler.prototype.waypointsEnabled = false;\n\n/**\n * Variable: ignoreMouseDown\n * \n * Specifies if the connection handler should ignore the state of the mouse\n * button when highlighting the source. Default is false, that is, the\n * handler only highlights the source if no button is being pressed.\n */\nmxConnectionHandler.prototype.ignoreMouseDown = false;\n\n/**\n * Variable: first\n * \n * Holds the <mxPoint> where the mouseDown took place while the handler is\n * active.\n */\nmxConnectionHandler.prototype.first = null;\n\n/**\n * Variable: connectIconOffset\n * \n * Holds the offset for connect icons during connection preview.\n * Default is mxPoint(0, <mxConstants.TOOLTIP_VERTICAL_OFFSET>).\n * Note that placing the icon under the mouse pointer with an\n * offset of (0,0) will affect hit detection.\n */\nmxConnectionHandler.prototype.connectIconOffset = new mxPoint(0, mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\n/**\n * Variable: edgeState\n * \n * Optional <mxCellState> that represents the preview edge while the\n * handler is active. This is created in <createEdgeState>.\n */\nmxConnectionHandler.prototype.edgeState = null;\n\n/**\n * Variable: changeHandler\n * \n * Holds the change event listener for later removal.\n */\nmxConnectionHandler.prototype.changeHandler = null;\n\n/**\n * Variable: drillHandler\n * \n * Holds the drill event listener for later removal.\n */\nmxConnectionHandler.prototype.drillHandler = null;\n\n/**\n * Variable: mouseDownCounter\n * \n * Counts the number of mouseDown events since the start. The initial mouse\n * down event counts as 1.\n */\nmxConnectionHandler.prototype.mouseDownCounter = 0;\n\n/**\n * Variable: movePreviewAway\n * \n * Switch to enable moving the preview away from the mousepointer. This is required in browsers\n * where the preview cannot be made transparent to events and if the built-in hit detection on\n * the HTML elements in the page should be used. Default is the value of <mxClient.IS_VML>.\n */\nmxConnectionHandler.prototype.movePreviewAway = mxClient.IS_VML;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxConnectionHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: livePreview\n * \n * Specifies if the actual shape of the edge state should be used for the preview.\n * Default is false. (Ignored if no edge state is created in <createEdgeState>.)\n */\nmxConnectionHandler.prototype.livePreview = false;\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used while the handler is active. Default is null.\n */\nmxConnectionHandler.prototype.cursor = null;\n\n/**\n * Variable: insertBeforeSource\n * \n * Specifies if new edges should be inserted before the source vertex in the\n * cell hierarchy. Default is false for backwards compatibility.\n */\nmxConnectionHandler.prototype.insertBeforeSource = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConnectionHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConnectionHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isInsertBefore\n * \n * Returns <insertBeforeSource> for non-loops and false for loops.\n *\n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be inserted.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.isInsertBefore = function(edge, source, target, evt, dropTarget)\n{\n\treturn this.insertBeforeSource && source != target;\n};\n\n/**\n * Function: isCreateTarget\n * \n * Returns <createTarget>.\n *\n * Parameters:\n *\n * evt - Current active native pointer event.\n */\nmxConnectionHandler.prototype.isCreateTarget = function(evt)\n{\n\treturn this.createTarget;\n};\n\n/**\n * Function: setCreateTarget\n * \n * Sets <createTarget>.\n */\nmxConnectionHandler.prototype.setCreateTarget = function(value)\n{\n\tthis.createTarget = value;\n};\n\n/**\n * Function: createShape\n * \n * Creates the preview shape for new connections.\n */\nmxConnectionHandler.prototype.createShape = function()\n{\n\t// Creates the edge preview\n\tvar shape = (this.livePreview && this.edgeState != null) ?\n\t\tthis.graph.cellRenderer.createShape(this.edgeState) :\n\t\tnew mxPolyline([], mxConstants.INVALID_COLOR);\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.scale = this.graph.view.scale;\n\tshape.pointerEvents = false;\n\tshape.isDashed = true;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, null);\n\n\treturn shape;\n};\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this connection handler. This should\n * be invoked if <mxGraph.container> is assigned after the connection\n * handler has been created.\n */\nmxConnectionHandler.prototype.init = function()\n{\n\tthis.graph.addMouseListener(this);\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\n\t// Redraws the icons if the graph changes\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.iconState = this.graph.getView().getState(this.iconState.cell);\n\t\t}\n\t\t\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.redrawIcons(this.icons, this.iconState);\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != null && this.graph.view.getState(this.previous.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.changeHandler);\n\t\n\t// Removes the icon if we step into/up or start editing\n\tthis.drillHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.START_EDITING, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.drillHandler);\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxConnectionHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxConnectionHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tmarker.hotspotEnabled = true;\n\n\t// Overrides to return cell at location only if valid (so that\n\t// there is no highlight for invalid cells)\n\tmarker.getCell = mxUtils.bind(this, function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(marker, arguments);\n\t\tthis.error = null;\n\t\t\n\t\t// Checks for cell at preview point (with grid)\n\t\tif (cell == null && this.currentPoint != null)\n\t\t{\n\t\t\tcell = this.graph.getCellAt(this.currentPoint.x, this.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && this.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, this.currentPoint.x, this.currentPoint.y)) ||\n\t\t\t!this.isConnectableCell(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isConnecting())\n\t\t\t{\n\t\t\t\tif (this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tthis.error = this.validateConnection(this.previous.cell, cell);\n\t\t\t\t\t\n\t\t\t\t\tif (this.error != null && this.error.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell = null;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Enables create target inside groups\n\t\t\t\t\t\tif (this.isCreateTarget(me.getEvent()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.error = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!this.isValidSource(cell, me))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.isConnecting() && !this.isCreateTarget(me.getEvent()) &&\n\t\t\t\t!this.graph.allowDanglingEdges)\n\t\t{\n\t\t\tthis.error = '';\n\t\t}\n\n\t\treturn cell;\n\t});\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = mxUtils.bind(this, function(state)\n\t{\n\t\tif (this.isConnecting())\n\t\t{\n\t\t\treturn this.error == null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxCellMarker.prototype.isValidState.apply(marker, arguments);\n\t\t}\n\t});\n\n\t// Overrides to use marker color only in highlight mode or for\n\t// target selection\n\tmarker.getMarkerColor = mxUtils.bind(this, function(evt, state, isValid)\n\t{\n\t\treturn (this.connectImage == null || this.isConnecting()) ?\n\t\t\tmxCellMarker.prototype.getMarkerColor.apply(marker, arguments) :\n\t\t\tnull;\n\t});\n\n\t// Overrides to use hotspot only for source selection otherwise\n\t// intersects always returns true when over a cell\n\tmarker.intersects = mxUtils.bind(this, function(state, evt)\n\t{\n\t\tif (this.connectImage != null || this.isConnecting())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxCellMarker.prototype.intersects.apply(marker, arguments);\n\t});\n\n\treturn marker;\n};\n\n/**\n * Function: start\n * \n * Starts a new connection for the given state and coordinates.\n */\nmxConnectionHandler.prototype.start = function(state, x, y, edgeState)\n{\n\tthis.previous = state;\n\tthis.first = new mxPoint(x, y);\n\tthis.edgeState = (edgeState != null) ? edgeState : this.createEdgeState(null);\n\t\n\t// Marks the source state\n\tthis.marker.currentColor = this.marker.validColor;\n\tthis.marker.markedState = state;\n\tthis.marker.mark();\n\n\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n};\n\n/**\n * Function: isConnecting\n * \n * Returns true if the source terminal has been clicked and a new\n * connection is currently being previewed.\n */\nmxConnectionHandler.prototype.isConnecting = function()\n{\n\treturn this.first != null && this.shape != null;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns <mxGraph.isValidSource> for the given source terminal.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the source terminal.\n * me - <mxMouseEvent> that is associated with this call.\n */\nmxConnectionHandler.prototype.isValidSource = function(cell, me)\n{\n\treturn this.graph.isValidSource(cell);\n};\n\n/**\n * Function: isValidTarget\n * \n * Returns true. The call to <mxGraph.isValidTarget> is implicit by calling\n * <mxGraph.getEdgeValidationError> in <validateConnection>. This is an\n * additional hook for disabling certain targets in this specific handler.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.isValidTarget = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.validateConnection = function(source, target)\n{\n\tif (!this.isValidTarget(target))\n\t{\n\t\treturn '';\n\t}\n\t\n\treturn this.graph.getEdgeValidationError(null, source, target);\n};\n\n/**\n * Function: getConnectImage\n * \n * Hook to return the <mxImage> used for the connection icon of the given\n * <mxCellState>. This implementation returns <connectImage>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect image should be returned.\n */\nmxConnectionHandler.prototype.getConnectImage = function(state)\n{\n\treturn this.connectImage;\n};\n\n/**\n * Function: isMoveIconToFrontForState\n * \n * Returns true if the state has a HTML label in the graph's container, otherwise\n * it returns <moveIconFront>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.isMoveIconToFrontForState = function(state)\n{\n\tif (state.text != null && state.text.node.parentNode == this.graph.container)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn this.moveIconFront;\n};\n\n/**\n * Function: createIcons\n * \n * Creates the array <mxImageShapes> that represent the connect icons for\n * the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.createIcons = function(state)\n{\n\tvar image = this.getConnectImage(state);\n\t\n\tif (image != null && state != null)\n\t{\n\t\tthis.iconState = state;\n\t\tvar icons = [];\n\n\t\t// Cannot use HTML for the connect icons because the icon receives all\n\t\t// mouse move events in IE, must use VML and SVG instead even if the\n\t\t// connect-icon appears behind the selection border and the selection\n\t\t// border consumes the events before the icon gets a chance\n\t\tvar bounds = new mxRectangle(0, 0, image.width, image.height);\n\t\tvar icon = new mxImageShape(bounds, image.src, null, null, 0);\n\t\ticon.preserveImageAspect = false;\n\t\t\n\t\tif (this.isMoveIconToFrontForState(state))\n\t\t{\n\t\t\ticon.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\ticon.init(this.graph.container);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ticon.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\ticon.init(this.graph.getView().getOverlayPane());\n\n\t\t\t// Move the icon back in the overlay pane\n\t\t\tif (this.moveIconBack && icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\t\t}\n\n\t\ticon.node.style.cursor = mxConstants.CURSOR_CONNECT;\n\n\t\t// Events transparency\n\t\tvar getState = mxUtils.bind(this, function()\n\t\t{\n\t\t\treturn (this.currentState != null) ? this.currentState : state;\n\t\t});\n\t\t\n\t\t// Updates the local icon before firing the mouse down event.\n\t\tvar mouseDown = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tthis.icon = icon;\n\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN,\n\t\t\t\t\tnew mxMouseEvent(evt, getState()));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState, mouseDown);\n\t\t\n\t\ticons.push(icon);\n\t\tthis.redrawIcons(icons, this.iconState);\n\t\t\n\t\treturn icons;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.redrawIcons = function(icons, state)\n{\n\tif (icons != null && icons[0] != null && state != null)\n\t{\n\t\tvar pos = this.getIconPosition(icons[0], state);\n\t\ticons[0].bounds.x = pos.x;\n\t\ticons[0].bounds.y = pos.y;\n\t\ticons[0].redraw();\n\t}\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.getIconPosition = function(icon, state)\n{\n\tvar scale = this.graph.getView().scale;\n\tvar cx = state.getCenterX();\n\tvar cy = state.getCenterY();\n\t\n\tif (this.graph.isSwimlane(state.cell))\n\t{\n\t\tvar size = this.graph.getStartSize(state.cell);\n\t\t\n\t\tcx = (size.width != 0) ? state.x + size.width * scale / 2 : cx;\n\t\tcy = (size.height != 0) ? state.y + size.height * scale / 2 : cy;\n\t\t\n\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin, ct);\n\t\t\tcx = pt.x;\n\t\t\tcy = pt.y;\n\t\t}\n\t}\n\n\treturn new mxPoint(cx - icon.bounds.width / 2,\n\t\t\tcy - icon.bounds.height / 2);\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the connect icons and resets the respective state.\n */\nmxConnectionHandler.prototype.destroyIcons = function()\n{\n\tif (this.icons != null)\n\t{\n\t\tfor (var i = 0; i < this.icons.length; i++)\n\t\t{\n\t\t\tthis.icons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.icons = null;\n\t\tthis.icon = null;\n\t\tthis.selectedIcon = null;\n\t\tthis.iconState = null;\n\t}\n};\n\n/**\n * Function: isStartEvent\n * \n * Returns true if the given mouse down event should start this handler. The\n * This implementation returns true if the event does not force marquee\n * selection, and the currentConstraint and currentFocus of the\n * <constraintHandler> are not null, or <previous> and <error> are not null and\n * <icons> is null or <icons> and <icon> are not null.\n */\nmxConnectionHandler.prototype.isStartEvent = function(me)\n{\n\treturn ((this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null) ||\n\t\t(this.previous != null && this.error == null && (this.icons == null || (this.icons != null &&\n\t\tthis.icon != null))));\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a new connection.\n */\nmxConnectionHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownCounter++;\n\t\n\tif (this.isEnabled() && this.graph.isEnabled() && !me.isConsumed() &&\n\t\t!this.isConnecting() && this.isStartEvent(me))\n\t{\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t{\n\t\t\tthis.sourceConstraint = this.constraintHandler.currentConstraint;\n\t\t\tthis.previous = this.constraintHandler.currentFocus;\n\t\t\tthis.first = this.constraintHandler.currentPoint.clone();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Stores the location of the initial mousedown\n\t\t\tthis.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t}\n\t\n\t\tthis.edgeState = this.createEdgeState(me);\n\t\tthis.mouseDownCounter = 1;\n\t\t\n\t\tif (this.waypointsEnabled && this.shape == null)\n\t\t{\n\t\t\tthis.waypoints = null;\n\t\t\tthis.shape = this.createShape();\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t}\n\t\t}\n\n\t\t// Stores the starting point in the geometry of the preview\n\t\tif (this.previous == null && this.edgeState != null)\n\t\t{\n\t\t\tvar pt = this.graph.getPointForEvent(me.getEvent());\n\t\t\tthis.edgeState.cell.geometry.setTerminalPoint(pt, true);\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n\n\t\tme.consume();\n\t}\n\n\tthis.selectedIcon = this.icon;\n\tthis.icon = null;\n};\n\n/**\n * Function: isImmediateConnectSource\n * \n * Returns true if a tap on the given source state should immediately start\n * connecting. This implementation returns true if the state is not movable\n * in the graph. \n */\nmxConnectionHandler.prototype.isImmediateConnectSource = function(state)\n{\n\treturn !this.graph.isCellMovable(state.cell);\n};\n\n/**\n * Function: createEdgeState\n * \n * Hook to return an <mxCellState> which may be used during the preview.\n * This implementation returns null.\n * \n * Use the following code to create a preview for an existing edge style:\n * \n * (code)\n * graph.connectionHandler.createEdgeState = function(me)\n * {\n *   var edge = graph.createEdge(null, null, null, null, null, 'edgeStyle=elbowEdgeStyle');\n *   \n *   return new mxCellState(this.graph.view, edge, this.graph.getCellStyle(edge));\n * };\n * (end)\n */\nmxConnectionHandler.prototype.createEdgeState = function(me)\n{\n\treturn null;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxConnectionHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updateCurrentState\n * \n * Updates the current state for a given mouse move event by using\n * the <marker>.\n */\nmxConnectionHandler.prototype.updateCurrentState = function(me, point)\n{\n\tthis.constraintHandler.update(me, this.first == null, false, (this.first == null ||\n\t\tme.isSource(this.marker.highlight.shape)) ? null : point);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\n\t\t// Updates validation state\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.error = this.validateConnection(this.previous.cell, this.constraintHandler.currentFocus.cell);\n\t\t\t\n\t\t\tif (this.error == null)\n\t\t\t{\n\t\t\t\tthis.currentState = this.constraintHandler.currentFocus;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.constraintHandler.reset();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.process(me);\n\t\t\tthis.currentState = this.marker.getValidState();\n\t\t\t\n\t\t\tif (this.currentState != null && !this.isCellEnabled(this.currentState.cell))\n\t\t\t{\n\t\t\t\tthis.currentState = null;\n\t\t\t}\n\t\t}\n\n\t\tvar outline = this.isOutlineConnectEvent(me);\n\t\t\n\t\tif (this.currentState != null && outline)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tvar constraint = this.graph.getOutlineConstraint(point, this.currentState, me);\n\t\t\tthis.constraintHandler.setFocus(me, this.currentState, false);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\n\t\tif (this.outlineConnect)\n\t\t{\n\t\t\tif (this.marker.highlight != null && this.marker.highlight.shape != null)\n\t\t\t{\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.OUTLINE_HIGHLIGHT_COLOR;\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t} \n\t\t\t\telse if (this.marker.hasValidState())\n\t\t\t\t{\n\t\t\t\t\t// Handles special case where actual end point of edge and current mouse point\n\t\t\t\t\t// are not equal (due to grid snapping) and there is no hit on shape or highlight\n\t\t\t\t\tif (this.marker.getValidState() != me.getState())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\t\tthis.currentState = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.DEFAULT_VALID_COLOR;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell does not allow new connections to be created.\n */\nmxConnectionHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: convertWaypoint\n * \n * Converts the given point from screen coordinates to model coordinates.\n */\nmxConnectionHandler.prototype.convertWaypoint = function(point)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\n\tpoint.x = point.x / scale - tr.x;\n\tpoint.y = point.y / scale - tr.y;\n};\n\n/**\n * Function: snapToPreview\n * \n * Called to snap the given point to the current preview. This snaps to the\n * first point of the preview if alt is not pressed.\n */\nmxConnectionHandler.prototype.snapToPreview = function(me, point)\n{\n\tif (!mxEvent.isAltDown(me.getEvent()) && this.previous != null)\n\t{\n\t\tvar tol = this.graph.gridSize * this.graph.view.scale / 2;\t\n\t\tvar tmp = (this.sourceConstraint != null) ? this.first :\n\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\n\t\tif (Math.abs(tmp.x - me.getGraphX()) < tol)\n\t\t{\n\t\t\tpoint.x = tmp.x;\n\t\t}\n\t\t\n\t\tif (Math.abs(tmp.y - me.getGraphY()) < tol)\n\t\t{\n\t\t\tpoint.y = tmp.y;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview edge or by highlighting\n * a possible source or target terminal.\n */\nmxConnectionHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && (this.ignoreMouseDown || this.first != null || !this.graph.isMouseDown))\n\t{\n\t\t// Handles special case when handler is disabled during highlight\n\t\tif (!this.isEnabled() && this.currentState != null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar view = this.graph.getView();\n\t\tvar scale = view.scale;\n\t\tvar tr = view.translate;\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tthis.error = null;\n\n\t\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t\t{\n\t\t\tpoint = new mxPoint((this.graph.snap(point.x / scale - tr.x) + tr.x) * scale,\n\t\t\t\t(this.graph.snap(point.y / scale - tr.y) + tr.y) * scale);\n\t\t}\n\t\t\n\t\tthis.snapToPreview(me, point);\n\t\tthis.currentPoint = point;\n\t\t\n\t\tif ((this.first != null || (this.isEnabled() && this.graph.isEnabled())) &&\n\t\t\t(this.shape != null || this.first == null ||\n\t\t\tMath.abs(me.getGraphX() - this.first.x) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.first.y) > this.graph.tolerance))\n\t\t{\n\t\t\tthis.updateCurrentState(me, point);\n\t\t}\n\n\t\tif (this.first != null)\n\t\t{\n\t\t\tvar constraint = null;\n\t\t\tvar current = point;\n\t\t\t\n\t\t\t// Uses the current point from the constraint handler if available\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tconstraint = this.constraintHandler.currentConstraint;\n\t\t\t\tcurrent = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.previous != null && !this.graph.isIgnoreTerminalEvent(me.getEvent()) &&\n\t\t\t\tmxEvent.isShiftDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(this.previous.getCenterX() - point.x) <\n\t\t\t\t\tMath.abs(this.previous.getCenterY() - point.y))\n\t\t\t\t{\n\t\t\t\t\tpoint.x = this.previous.getCenterX();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpoint.y = this.previous.getCenterY();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pt2 = this.first;\n\t\t\t\n\t\t\t// Moves the connect icon with the mouse\n\t\t\tif (this.selectedIcon != null)\n\t\t\t{\n\t\t\t\tvar w = this.selectedIcon.bounds.width;\n\t\t\t\tvar h = this.selectedIcon.bounds.height;\n\t\t\t\t\n\t\t\t\tif (this.currentState != null && this.targetConnectImage)\n\t\t\t\t{\n\t\t\t\t\tvar pos = this.getIconPosition(this.selectedIcon, this.currentState);\n\t\t\t\t\tthis.selectedIcon.bounds.x = pos.x;\n\t\t\t\t\tthis.selectedIcon.bounds.y = pos.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar bounds = new mxRectangle(me.getGraphX() + this.connectIconOffset.x,\n\t\t\t\t\t\tme.getGraphY() + this.connectIconOffset.y, w, h);\n\t\t\t\t\tthis.selectedIcon.bounds = bounds;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.selectedIcon.redraw();\n\t\t\t}\n\n\t\t\t// Uses edge state to compute the terminal points\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(current, constraint);\n\t\t\t\tcurrent = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 1];\n\t\t\t\tpt2 = this.edgeState.absolutePoints[0];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.currentState != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.constraintHandler.currentConstraint == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = this.getTargetPerimeterPoint(this.currentState, me);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Computes the source perimeter point\n\t\t\t\tif (this.sourceConstraint == null && this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\t\t\t\tthis.waypoints[0] : current;\n\t\t\t\t\tvar tmp = this.getSourcePerimeterPoint(this.previous, next, me);\n\t\t\t\t\t\n\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt2 = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Makes sure the cell under the mousepointer can be detected\n\t\t\t// by moving the preview shape away from the mouse. This\n\t\t\t// makes sure the preview shape does not prevent the detection\n\t\t\t// of the cell under the mousepointer even for slow gestures.\n\t\t\tif (this.currentState == null && this.movePreviewAway)\n\t\t\t{\n\t\t\t\tvar tmp = pt2; \n\t\t\t\t\n\t\t\t\tif (this.edgeState != null && this.edgeState.absolutePoints.length >= 2)\n\t\t\t\t{\n\t\t\t\t\tvar tmp2 = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 2];\n\t\t\t\t\t\n\t\t\t\t\tif (tmp2 != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = tmp2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = current.x - tmp.x;\n\t\t\t\tvar dy = current.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\n\t\t\t\tif (len == 0)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Stores old point to reuse when creating edge\n\t\t\t\tthis.originalPoint = current.clone();\n\t\t\t\tcurrent.x -= dx * 4 / len;\n\t\t\t\tcurrent.y -= dy * 4 / len;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.originalPoint = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the preview shape (lazy)\n\t\t\tif (this.shape == null)\n\t\t\t{\n\t\t\t\tvar dx = Math.abs(me.getGraphX() - this.first.x);\n\t\t\t\tvar dy = Math.abs(me.getGraphY() - this.first.y);\n\n\t\t\t\tif (dx > this.graph.tolerance || dy > this.graph.tolerance)\n\t\t\t\t{\n\t\t\t\t\tthis.shape = this.createShape();\n\n\t\t\t\t\tif (this.edgeState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Revalidates current connection\n\t\t\t\t\tthis.updateCurrentState(me, point);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Updates the points in the preview edge\n\t\t\tif (this.shape != null)\n\t\t\t{\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.points = this.edgeState.absolutePoints;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pts = [pt2];\n\t\t\t\t\t\n\t\t\t\t\tif (this.waypoints != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpts = pts.concat(this.waypoints);\n\t\t\t\t\t}\n\n\t\t\t\t\tpts.push(current);\n\t\t\t\t\tthis.shape.points = pts;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.drawPreview();\n\t\t\t}\n\t\t\t\n\t\t\t// Makes sure endpoint of edge is visible during connect\n\t\t\tif (this.cursor != null)\n\t\t\t{\n\t\t\t\tthis.graph.container.style.cursor = this.cursor;\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(me.getEvent());\n\t\t\tme.consume();\n\t\t}\n\t\telse if (!this.isEnabled() || !this.graph.isEnabled())\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != this.currentState && this.edgeState == null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\t\n\t\t\t// Sets the cursor on the current shape\t\t\t\t\n\t\t\tif (this.currentState != null && this.error == null && this.constraintHandler.currentConstraint == null)\n\t\t\t{\n\t\t\t\tthis.icons = this.createIcons(this.currentState);\n\n\t\t\t\tif (this.icons == null)\n\t\t\t\t{\n\t\t\t\t\tthis.currentState.setCursor(mxConstants.CURSOR_CONNECT);\n\t\t\t\t\tme.consume();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.previous = this.currentState;\n\t\t}\n\t\telse if (this.previous == this.currentState && this.currentState != null && this.icons == null &&\n\t\t\t!this.graph.isMouseDown)\n\t\t{\n\t\t\t// Makes sure that no cursors are changed\n\t\t\tme.consume();\n\t\t}\n\n\t\tif (!this.graph.isMouseDown && this.currentState != null && this.icons != null)\n\t\t{\n\t\t\tvar hitsIcon = false;\n\t\t\tvar target = me.getSource();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.icons.length && !hitsIcon; i++)\n\t\t\t{\n\t\t\t\thitsIcon = target == this.icons[i].node || target.parentNode == this.icons[i].node;\n\t\t\t}\n\n\t\t\tif (!hitsIcon)\n\t\t\t{\n\t\t\t\tthis.updateIcons(this.currentState, this.icons, me);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n};\n\n/**\n * Function: updateEdgeState\n * \n * Updates <edgeState>.\n */\nmxConnectionHandler.prototype.updateEdgeState = function(current, constraint)\n{\n\t// TODO: Use generic method for writing constraint to style\n\tif (this.sourceConstraint != null && this.sourceConstraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_X] = this.sourceConstraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_Y] = this.sourceConstraint.point.y;\n\t}\n\n\tif (constraint != null && constraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t}\n\telse\n\t{\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_X];\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_Y];\n\t}\n\t\n\tthis.edgeState.absolutePoints = [null, (this.currentState != null) ? null : current];\n\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.previous, true, this.sourceConstraint);\n\t\n\tif (this.currentState != null)\n\t{\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = this.graph.getConnectionConstraint(this.edgeState, this.previous, false);\n\t\t}\n\t\t\n\t\tthis.edgeState.setAbsoluteTerminalPoint(null, false);\n\t\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.currentState, false, constraint);\n\t}\n\t\n\t// Scales and translates the waypoints to the model\n\tvar realPoints = null;\n\t\n\tif (this.waypoints != null)\n\t{\n\t\trealPoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t{\n\t\t\tvar pt = this.waypoints[i].clone();\n\t\t\tthis.convertWaypoint(pt);\n\t\t\trealPoints[i] = pt;\n\t\t}\n\t}\n\t\n\tthis.graph.view.updatePoints(this.edgeState, realPoints, this.previous, this.currentState);\n\tthis.graph.view.updateFloatingTerminalPoints(this.edgeState, this.previous, this.currentState);\n};\n\n/**\n * Function: getTargetPerimeterPoint\n * \n * Returns the perimeter point for the given target state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getTargetPerimeterPoint = function(state, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar targetPerimeter = view.getPerimeterFunction(state);\n\t\n\tif (targetPerimeter != null)\n\t{\n\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\tthis.waypoints[this.waypoints.length - 1] :\n\t\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\t\tvar tmp = targetPerimeter(view.getPerimeterBounds(state),\n\t\t\tthis.edgeState, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint(state.getCenterX(), state.getCenterY());\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSourcePerimeterPoint\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * next - <mxPoint> that represents the next point along the previewed edge.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getSourcePerimeterPoint = function(state, next, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar sourcePerimeter = view.getPerimeterFunction(state);\n\tvar c = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\n\tif (sourcePerimeter != null)\n\t{\n\t\tvar theta = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\tvar rad = -theta * (Math.PI / 180);\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\tnext = mxUtils.getRotatedPoint(new mxPoint(next.x, next.y), Math.cos(rad), Math.sin(rad), c);\n\t\t}\n\t\t\n\t\tvar tmp = sourcePerimeter(view.getPerimeterBounds(state), state, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tif (theta != 0)\n\t\t\t{\n\t\t\t\ttmp = mxUtils.getRotatedPoint(new mxPoint(tmp.x, tmp.y), Math.cos(-rad), Math.sin(-rad), c);\n\t\t\t}\n\t\t\t\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = c;\n\t}\n\t\n\treturn result;\n};\n\n\n/**\n * Function: updateIcons\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> under the mouse.\n * icons - Array of currently displayed icons.\n * me - <mxMouseEvent> that contains the mouse event.\n */\nmxConnectionHandler.prototype.updateIcons = function(state, icons, me)\n{\n\t// empty\n};\n\n/**\n * Function: isStopEvent\n * \n * Returns true if the given mouse up event should stop this handler. The\n * connection will be created if <error> is null. Note that this is only\n * called if <waypointsEnabled> is true. This implemtation returns true\n * if there is a cell state in the given event.\n */\nmxConnectionHandler.prototype.isStopEvent = function(me)\n{\n\treturn me.getState() != null;\n};\n\n/**\n * Function: addWaypoint\n * \n * Adds the waypoint for the given event to <waypoints>.\n */\nmxConnectionHandler.prototype.addWaypointForEvent = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar dx = Math.abs(point.x - this.first.x);\n\tvar dy = Math.abs(point.y - this.first.y);\n\tvar addPoint = this.waypoints != null || (this.mouseDownCounter > 1 &&\n\t\t\t(dx > this.graph.tolerance || dy > this.graph.tolerance));\n\n\tif (addPoint)\n\t{\n\t\tif (this.waypoints == null)\n\t\t{\n\t\t\tthis.waypoints = [];\n\t\t}\n\t\t\n\t\tvar scale = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.graph.snap(me.getGraphX() / scale) * scale,\n\t\t\t\tthis.graph.snap(me.getGraphY() / scale) * scale);\n\t\tthis.waypoints.push(point);\n\t}\n};\n\n/**\n * Function: checkConstraints\n * \n * Returns true if the connection for the given constraints is valid. This\n * implementation returns true if the constraints are not pointing to the\n * same fixed connection point.\n */\nmxConnectionHandler.prototype.checkConstraints = function(c1, c2)\n{\n\treturn (c1 == null || c2 == null || c1.point == null || c2.point == null ||\n\t\t!c1.point.equals(c2.point) || c1.dx != c2.dx || c1.dy != c2.dy ||\n\t\tc1.perimeter != c2.perimeter);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by inserting the new connection.\n */\nmxConnectionHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isConnecting())\n\t{\n\t\tif (this.waypointsEnabled && !this.isStopEvent(me))\n\t\t{\n\t\t\tthis.addWaypointForEvent(me);\n\t\t\tme.consume();\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar c1 = this.sourceConstraint;\n\t\tvar c2 = this.constraintHandler.currentConstraint;\n\n\t\tvar source = (this.previous != null) ? this.previous.cell : null;\n\t\tvar target = null;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\ttarget = this.constraintHandler.currentFocus.cell;\n\t\t}\n\t\t\n\t\tif (target == null && this.currentState != null)\n\t\t{\n\t\t\ttarget = this.currentState.cell;\n\t\t}\n\t\t\n\t\t// Inserts the edge if no validation error exists and if constraints differ\n\t\tif (this.error == null && (source == null || target == null ||\n\t\t\tsource != target || this.checkConstraints(c1, c2)))\n\t\t{\n\t\t\tthis.connect(source, target, me.getEvent(), me.getCell());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Selects the source terminal for self-references\n\t\t\tif (this.previous != null && this.marker.validState != null &&\n\t\t\t\tthis.previous.cell == this.marker.validState.cell)\n\t\t\t{\n\t\t\t\tthis.graph.selectCellForEvent(this.marker.source, me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\t// Displays the error message if it is not an empty string,\n\t\t\t// for empty error messages, the event is silently dropped\n\t\t\tif (this.error != null && this.error.length > 0)\n\t\t\t{\n\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Redraws the connect icons and resets the handler state\n\t\tthis.destroyIcons();\n\t\tme.consume();\n\t}\n\n\tif (this.first != null)\n\t{\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConnectionHandler.prototype.reset = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\t// Resets the cursor on the container\n\tif (this.cursor != null && this.graph.container != null)\n\t{\n\t\tthis.graph.container.style.cursor = '';\n\t}\n\t\n\tthis.destroyIcons();\n\tthis.marker.reset();\n\tthis.constraintHandler.reset();\n\tthis.originalPoint = null;\n\tthis.currentPoint = null;\n\tthis.edgeState = null;\n\tthis.previous = null;\n\tthis.error = null;\n\tthis.sourceConstraint = null;\n\tthis.mouseDownCounter = 0;\n\tthis.first = null;\n\n\tthis.fireEvent(new mxEventObject(mxEvent.RESET));\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview edge using the color and width returned by\n * <getEdgeColor> and <getEdgeWidth>.\n */\nmxConnectionHandler.prototype.drawPreview = function()\n{\n\tthis.updatePreview(this.error == null);\n\tthis.shape.redraw();\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.updatePreview = function(valid)\n{\n\tthis.shape.strokewidth = this.getEdgeWidth(valid);\n\tthis.shape.stroke = this.getEdgeColor(valid);\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeColor = function(valid)\n{\n\treturn (valid) ? mxConstants.VALID_COLOR : mxConstants.INVALID_COLOR;\n};\n\t\n/**\n * Function: getEdgeWidth\n * \n * Returns the width used to draw the preview edge. This returns 3 if\n * there is no edge validation error and 1 otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the width for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeWidth = function(valid)\n{\n\treturn (valid) ? 3 : 1;\n};\n\n/**\n * Function: connect\n * \n * Connects the given source and target using a new edge. This\n * implementation uses <createEdge> to create the edge.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.connect = function(source, target, evt, dropTarget)\n{\n\tif (target != null || this.isCreateTarget(evt) || this.graph.allowDanglingEdges)\n\t{\n\t\t// Uses the common parent of source and target or\n\t\t// the default parent to insert the edge\n\t\tvar model = this.graph.getModel();\n\t\tvar terminalInserted = false;\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (source != null && target == null && !this.graph.isIgnoreTerminalEvent(evt) && this.isCreateTarget(evt))\n\t\t\t{\n\t\t\t\ttarget = this.createTargetVertex(evt, source);\n\t\t\t\t\n\t\t\t\tif (target != null)\n\t\t\t\t{\n\t\t\t\t\tdropTarget = this.graph.getDropTarget([target], evt, dropTarget);\n\t\t\t\t\tterminalInserted = true;\n\t\t\t\t\t\n\t\t\t\t\t// Disables edges as drop targets if the target cell was created\n\t\t\t\t\t// FIXME: Should not shift if vertex was aligned (same in Java)\n\t\t\t\t\tif (dropTarget == null || !this.graph.getModel().isEdge(dropTarget))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pstate = this.graph.getView().getState(dropTarget);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = model.getGeometry(target);\n\t\t\t\t\t\t\ttmp.x -= pstate.origin.x;\n\t\t\t\t\t\t\ttmp.y -= pstate.origin.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdropTarget = this.graph.getDefaultParent();\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tthis.graph.addCell(target, dropTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar parent = this.graph.getDefaultParent();\n\n\t\t\tif (source != null && target != null &&\n\t\t\t\tmodel.getParent(source) == model.getParent(target) &&\n\t\t\t\tmodel.getParent(model.getParent(source)) != model.getRoot())\n\t\t\t{\n\t\t\t\tparent = model.getParent(source);\n\n\t\t\t\tif ((source.geometry != null && source.geometry.relative) &&\n\t\t\t\t\t(target.geometry != null && target.geometry.relative))\n\t\t\t\t{\n\t\t\t\t\tparent = model.getParent(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Uses the value of the preview edge state for inserting\n\t\t\t// the new edge into the graph\n\t\t\tvar value = null;\n\t\t\tvar style = null;\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tvalue = this.edgeState.cell.value;\n\t\t\t\tstyle = this.edgeState.cell.style;\n\t\t\t}\n\n\t\t\tedge = this.insertEdge(parent, null, value, source, target, style);\n\t\t\t\n\t\t\tif (edge != null)\n\t\t\t{\n\t\t\t\t// Updates the connection constraints\n\t\t\t\tthis.graph.setConnectionConstraint(edge, source, true, this.sourceConstraint);\n\t\t\t\tthis.graph.setConnectionConstraint(edge, target, false, this.constraintHandler.currentConstraint);\n\t\t\t\t\n\t\t\t\t// Uses geometry of the preview edge state\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmodel.setGeometry(edge, this.edgeState.cell.geometry);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar parent = model.getParent(source);\n\t\t\t\t\n\t\t\t\t// Inserts edge before source\n\t\t\t\tif (this.isInsertBefore(edge, source, target, evt, dropTarget))\n\t\t\t\t{\n\t\t\t\t\tvar index = null;\n\t\t\t\t\tvar tmp = source;\n\n\t\t\t\t\twhile (tmp.parent != null && tmp.geometry != null &&\n\t\t\t\t\t\ttmp.geometry.relative && tmp.parent != edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = this.graph.model.getParent(tmp);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmp != null && tmp.parent != null && tmp.parent == edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.add(parent, edge, tmp.parent.getIndex(tmp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Makes sure the edge has a non-null, relative geometry\n\t\t\t\tvar geo = model.getGeometry(edge);\n\n\t\t\t\tif (geo == null)\n\t\t\t\t{\n\t\t\t\t\tgeo = new mxGeometry();\n\t\t\t\t\tgeo.relative = true;\n\t\t\t\t\t\n\t\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Uses scaled waypoints in geometry\n\t\t\t\tif (this.waypoints != null && this.waypoints.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar tr = this.graph.view.translate;\n\t\t\t\t\tgeo.points = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt = this.waypoints[i];\n\t\t\t\t\t\tgeo.points.push(new mxPoint(pt.x / s - tr.x, pt.y / s - tr.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar t = this.graph.view.translate;\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar pt = (this.originalPoint != null) ?\n\t\t\t\t\t\t\tnew mxPoint(this.originalPoint.x / s - t.x, this.originalPoint.y / s - t.y) :\n\t\t\t\t\t\tnew mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\tgeo.setTerminalPoint(pt, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT, 'cell', edge, 'terminal', target,\n\t\t\t\t\t'event', evt, 'target', dropTarget, 'terminalInserted', terminalInserted));\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxLog.show();\n\t\t\tmxLog.debug(e.message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tif (this.select)\n\t\t{\n\t\t\tthis.selectCells(edge, (terminalInserted) ? target : null);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectCells\n * \n * Selects the given edge after adding a new connection. The target argument\n * contains the target vertex if one has been inserted.\n */\nmxConnectionHandler.prototype.selectCells = function(edge, target)\n{\n\tthis.graph.setSelectionCell(edge);\n};\n\n/**\n * Function: insertEdge\n * \n * Creates, inserts and returns the new edge for the given parameters. This\n * implementation does only use <createEdge> if <factoryMethod> is defined,\n * otherwise <mxGraph.insertEdge> will be used.\n */\nmxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tif (this.factoryMethod == null)\n\t{\n\t\treturn this.graph.insertEdge(parent, id, value, source, target, style);\n\t}\n\telse\n\t{\n\t\tvar edge = this.createEdge(value, source, target, style);\n\t\tedge = this.graph.addEdge(edge, parent, source, target);\n\t\t\n\t\treturn edge;\n\t}\n};\n\n/**\n * Function: createTargetVertex\n * \n * Hook method for creating new vertices on the fly if no target was\n * under the mouse. This is only called if <createTarget> is true and\n * returns null.\n * \n * Parameters:\n * \n * evt - Mousedown event of the connect gesture.\n * source - <mxCell> that represents the source terminal.\n */\nmxConnectionHandler.prototype.createTargetVertex = function(evt, source)\n{\n\t// Uses the first non-relative source\n\tvar geo = this.graph.getCellGeometry(source);\n\t\n\twhile (geo != null && geo.relative)\n\t{\n\t\tsource = this.graph.getModel().getParent(source);\n\t\tgeo = this.graph.getCellGeometry(source);\n\t}\n\t\n\tvar clone = this.graph.cloneCell(source);\n\tvar geo = this.graph.getModel().getGeometry(clone);\n\t\n\tif (geo != null)\n\t{\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\tgeo.x = Math.round(point.x - geo.width / 2 - this.graph.panDx / s);\n\t\tgeo.y = Math.round(point.y - geo.height / 2 - this.graph.panDy / s);\n\n\t\t// Aligns with source if within certain tolerance\n\t\tvar tol = this.getAlignmentTolerance();\n\t\t\n\t\tif (tol > 0)\n\t\t{\n\t\t\tvar sourceState = this.graph.view.getState(source);\n\t\t\t\n\t\t\tif (sourceState != null)\n\t\t\t{\n\t\t\t\tvar x = sourceState.x / s - t.x;\n\t\t\t\tvar y = sourceState.y / s - t.y;\n\t\t\t\t\n\t\t\t\tif (Math.abs(x - geo.x) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.x = Math.round(x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(y - geo.y) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.y = Math.round(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn clone;\t\t\n};\n\n/**\n * Function: getAlignmentTolerance\n * \n * Returns the tolerance for aligning new targets to sources. This returns the grid size / 2.\n */\nmxConnectionHandler.prototype.getAlignmentTolerance = function(evt)\n{\n\treturn (this.graph.isGridEnabled()) ? this.graph.gridSize / 2 : this.graph.tolerance;\n};\n\n/**\n * Function: createEdge\n * \n * Creates and returns a new edge using <factoryMethod> if one exists. If\n * no factory method is defined, then a new default edge is returned. The\n * source and target arguments are informal, the actual connection is\n * setup later by the caller of this function.\n * \n * Parameters:\n * \n * value - Value to be used for creating the edge.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * style - Optional style from the preview edge.\n */\nmxConnectionHandler.prototype.createEdge = function(value, source, target, style)\n{\n\tvar edge = null;\n\t\n\t// Creates a new edge using the factoryMethod\n\tif (this.factoryMethod != null)\n\t{\n\t\tedge = this.factoryMethod(source, target, style);\n\t}\n\t\n\tif (edge == null)\n\t{\n\t\tedge = new mxCell(value || '');\n\t\tedge.setEdge(true);\n\t\tedge.setStyle(style);\n\t\t\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\tedge.setGeometry(geo);\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This should be\n * called on all instances. It is called automatically for the built-in\n * instance created for each <mxGraph>.\n */\nmxConnectionHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.graph.getView().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\t\n\tif (this.drillHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.drillHandler);\n\t\tthis.graph.getView().removeListener(this.drillHandler);\n\t\tthis.drillHandler = null;\n\t}\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConstraintHandler\n *\n * Handles constraints on connection targets. This class is in charge of\n * showing fixed points when the mouse is over a vertex and handles constraints\n * to establish new connections.\n *\n * Constructor: mxConstraintHandler\n *\n * Constructs an new constraint handler.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and\n * returns the <mxCell> that represents the new edge.\n */\nfunction mxConstraintHandler(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Adds a graph model listener to update the current focus on changes\n\tthis.resetHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.currentFocus != null && this.graph.view.getState(this.currentFocus.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.redraw();\n\t\t}\n\t});\n\t\n\tthis.graph.model.addListener(mxEvent.CHANGE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE, this.resetHandler);\n\tthis.graph.addListener(mxEvent.ROOT, this.resetHandler);\n};\n\n/**\n * Variable: pointImage\n * \n * <mxImage> to be used as the image for fixed connection points.\n */\nmxConstraintHandler.prototype.pointImage = new mxImage(mxClient.imageBasePath + '/point.gif', 5, 5);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConstraintHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConstraintHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightColor\n * \n * Specifies the color for the highlight. Default is <mxConstants.DEFAULT_VALID_COLOR>.\n */\nmxConstraintHandler.prototype.highlightColor = mxConstants.DEFAULT_VALID_COLOR;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConstraintHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConstraintHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConstraintHandler.prototype.reset = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t}\n\t\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n\t\n\tthis.currentConstraint = null;\n\tthis.currentFocusArea = null;\n\tthis.currentPoint = null;\n\tthis.currentFocus = null;\n\tthis.focusPoints = null;\n};\n\n/**\n * Function: getTolerance\n * \n * Returns the tolerance to be used for intersecting connection points. This\n * implementation returns <mxGraph.tolerance>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose tolerance should be returned.\n */\nmxConstraintHandler.prototype.getTolerance = function(me)\n{\n\treturn this.graph.getTolerance();\n};\n\n/**\n * Function: getImageForConstraint\n * \n * Returns the tolerance to be used for intersecting connection points.\n */\nmxConstraintHandler.prototype.getImageForConstraint = function(state, constraint, point)\n{\n\treturn this.pointImage;\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given <mxMouseEvent> should be ignored in <update>. This\n * implementation always returns false.\n */\nmxConstraintHandler.prototype.isEventIgnored = function(me, source)\n{\n\treturn false;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored. This always returns false.\n */\nmxConstraintHandler.prototype.isStateIgnored = function(state, source)\n{\n\treturn false;\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the <focusIcons> if they exist.\n */\nmxConstraintHandler.prototype.destroyIcons = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t\tthis.focusPoints = null;\n\t}\n};\n\n/**\n * Function: destroyFocusHighlight\n * \n * Destroys the <focusHighlight> if one exists.\n */\nmxConstraintHandler.prototype.destroyFocusHighlight = function()\n{\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n};\n\n/**\n * Function: isKeepFocusEvent\n * \n * Returns true if the current focused state should not be changed for the given event.\n * This returns true if shift and alt are pressed.\n */\nmxConstraintHandler.prototype.isKeepFocusEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent());\n};\n\n/**\n * Function: getCellForEvent\n * \n * Returns the cell for the given event.\n */\nmxConstraintHandler.prototype.getCellForEvent = function(me, point)\n{\n\tvar cell = me.getCell();\n\t\n\t// Gets cell under actual point if different from event location\n\tif (cell == null && point != null && (me.getGraphX() != point.x || me.getGraphY() != point.y))\n\t{\n\t\tcell = this.graph.getCellAt(point.x, point.y);\n\t}\n\t\n\t// Uses connectable parent vertex if one exists\n\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\n\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t{\n\t\t\tcell = parent;\n\t\t}\n\t}\n\t\n\treturn (this.graph.isCellLocked(cell)) ? null : cell;\n};\n\n/**\n * Function: update\n * \n * Updates the state of this handler based on the given <mxMouseEvent>.\n * Source is a boolean indicating if the cell is a source or target.\n */\nmxConstraintHandler.prototype.update = function(me, source, existingEdge, point)\n{\n\tif (this.isEnabled() && !this.isEventIgnored(me))\n\t{\n\t\t// Lazy installation of mouseleave handler\n\t\tif (this.mouseleaveHandler == null && this.graph.container != null)\n\t\t{\n\t\t\tthis.mouseleaveHandler = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t});\n\n\t\t\tmxEvent.addListener(this.graph.container, 'mouseleave', this.resetHandler);\t\n\t\t}\n\t\t\n\t\tvar tol = this.getTolerance(me);\n\t\tvar x = (point != null) ? point.x : me.getGraphX();\n\t\tvar y = (point != null) ? point.y : me.getGraphY();\n\t\tvar grid = new mxRectangle(x - tol, y - tol, 2 * tol, 2 * tol);\n\t\tvar mouse = new mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol);\n\t\tvar state = this.graph.view.getState(this.getCellForEvent(me, point));\n\n\t\t// Keeps focus icons visible while over vertex bounds and no other cell under mouse or shift is pressed\n\t\tif (!this.isKeepFocusEvent(me) && (this.currentFocusArea == null || this.currentFocus == null ||\n\t\t\t(state != null) || !this.graph.getModel().isVertex(this.currentFocus.cell) ||\n\t\t\t!mxUtils.intersects(this.currentFocusArea, mouse)) && (state != this.currentFocus))\n\t\t{\n\t\t\tthis.currentFocusArea = null;\n\t\t\tthis.currentFocus = null;\n\t\t\tthis.setFocus(me, state, source);\n\t\t}\n\n\t\tthis.currentConstraint = null;\n\t\tthis.currentPoint = null;\n\t\tvar minDistSq = null;\n\t\t\n\t\tif (this.focusIcons != null && this.constraints != null &&\n\t\t\t(state == null || this.currentFocus == state))\n\t\t{\n\t\t\tvar cx = mouse.getCenterX();\n\t\t\tvar cy = mouse.getCenterY();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tvar dx = cx - this.focusIcons[i].bounds.getCenterX();\n\t\t\t\tvar dy = cy - this.focusIcons[i].bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\t\n\t\t\t\tif ((this.intersects(this.focusIcons[i], mouse, source, existingEdge) || (point != null &&\n\t\t\t\t\tthis.intersects(this.focusIcons[i], grid, source, existingEdge))) &&\n\t\t\t\t\t(minDistSq == null || tmp < minDistSq))\n\t\t\t\t{\n\t\t\t\t\tthis.currentConstraint = this.constraints[i];\n\t\t\t\t\tthis.currentPoint = this.focusPoints[i];\n\t\t\t\t\tminDistSq = tmp;\n\t\t\t\t\t\n\t\t\t\t\tvar tmp = this.focusIcons[i].bounds.clone();\n\t\t\t\t\ttmp.grow(mxConstants.HIGHLIGHT_SIZE + 1);\n\t\t\t\t\ttmp.width -= 1;\n\t\t\t\t\ttmp.height -= 1;\n\t\t\t\t\t\n\t\t\t\t\tif (this.focusHighlight == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar hl = this.createHighlightShape();\n\t\t\t\t\t\thl.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\t\t\t\thl.pointerEvents = false;\n\n\t\t\t\t\t\thl.init(this.graph.getView().getOverlayPane());\n\t\t\t\t\t\tthis.focusHighlight = hl;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\tmxEvent.redirectMouseEvents(hl.node, this.graph, getState);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.focusHighlight.bounds = tmp;\n\t\t\t\t\tthis.focusHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.currentConstraint == null)\n\t\t{\n\t\t\tthis.destroyFocusHighlight();\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.currentConstraint = null;\n\t\tthis.currentFocus = null;\n\t\tthis.currentPoint = null;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.redraw = function()\n{\n\tif (this.currentFocus != null && this.constraints != null && this.focusIcons != null)\n\t{\n\t\tvar state = this.graph.view.getState(this.currentFocus.cell);\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tthis.focusIcons[i].bounds = bounds;\n\t\t\tthis.focusIcons[i].redraw();\n\t\t\tthis.currentFocusArea.add(this.focusIcons[i].bounds);\n\t\t\tthis.focusPoints[i] = cp;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: setFocus\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.setFocus = function(me, state, source)\n{\n\tthis.constraints = (state != null && !this.isStateIgnored(state, source) &&\n\t\tthis.graph.isCellConnectable(state.cell)) ? ((this.isEnabled()) ?\n\t\t(this.graph.getAllConnectionConstraints(state, source) || []) : []) : null;\n\n\t// Only uses cells which have constraints\n\tif (this.constraints != null)\n\t{\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tif (this.focusIcons != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tthis.focusIcons[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tthis.focusIcons = null;\n\t\t\tthis.focusPoints = null;\n\t\t}\n\t\t\n\t\tthis.focusPoints = [];\n\t\tthis.focusIcons = [];\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar src = img.src;\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tvar icon = new mxImageShape(bounds, src);\n\t\t\ticon.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\ticon.preserveImageAspect = false;\n\t\t\ticon.init(this.graph.getView().getDecoratorPane());\n\t\t\t\n\t\t\t// Fixes lost event tracking for images in quirks / IE8 standards\n\t\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(icon.node, 'dragstart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// Move the icon behind all other overlays\n\t\t\tif (icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\n\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t});\n\t\t\t\n\t\t\ticon.redraw();\n\n\t\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState);\n\t\t\tthis.currentFocusArea.add(icon.bounds);\n\t\t\tthis.focusIcons.push(icon);\n\t\t\tthis.focusPoints.push(cp);\n\t\t}\n\t\t\n\t\tthis.currentFocusArea.grow(this.getTolerance(me));\n\t}\n\telse\n\t{\n\t\tthis.destroyIcons();\n\t\tthis.destroyFocusHighlight();\n\t}\n};\n\n/**\n * Function: createHighlightShape\n * \n * Create the shape used to paint the highlight.\n * \n * Returns true if the given icon intersects the given point.\n */\nmxConstraintHandler.prototype.createHighlightShape = function()\n{\n\tvar hl = new mxRectangleShape(null, this.highlightColor, this.highlightColor, mxConstants.HIGHLIGHT_STROKEWIDTH);\n\thl.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\t\n\treturn hl;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given icon intersects the given rectangle.\n */\nmxConstraintHandler.prototype.intersects = function(icon, mouse, source, existingEdge)\n{\n\treturn mxUtils.intersects(icon.bounds, mouse);\n};\n\n/**\n * Function: destroy\n * \n * Destroy this handler.\n */\nmxConstraintHandler.prototype.destroy = function()\n{\n\tthis.reset();\n\t\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.graph.model.removeListener(this.resetHandler);\n\t\tthis.graph.view.removeListener(this.resetHandler);\n\t\tthis.graph.removeListener(this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.mouseleaveHandler != null && this.graph.container != null)\n\t{\n\t\tmxEvent.removeListener(this.graph.container, 'mouseleave', this.mouseleaveHandler);\n\t\tthis.mouseleaveHandler = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxRubberband\n * \n * Event handler that selects rectangular regions. This is not built-into\n * <mxGraph>. To enable rubberband selection in a graph, use the following code.\n * \n * Example:\n * \n * (code)\n * var rubberband = new mxRubberband(graph);\n * (end)\n * \n * Constructor: mxRubberband\n * \n * Constructs an event handler that selects rectangular regions in the graph\n * using rubberband selection.\n */\nfunction mxRubberband(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force rubberband event\n\t\tthis.forceRubberbandHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForceRubberbandEvent(me))\n\t\t\t{\n\t\t\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\t\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\t\t\torigin.x -= offset.x;\n\t\t\t\torigin.y -= offset.y;\n\t\t\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\t\t\t\tme.consume(false);\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forceRubberbandHandler);\n\t\t\n\t\t// Repaints the marquee after autoscroll\n\t\tthis.panHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.repaint();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.first != null)\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: defaultOpacity\n * \n * Specifies the default opacity to be used for the rubberband div. Default\n * is 20.\n */\nmxRubberband.prototype.defaultOpacity = 20;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxRubberband.prototype.enabled = true;\n\n/**\n * Variable: div\n * \n * Holds the DIV element which is currently visible.\n */\nmxRubberband.prototype.div = null;\n\n/**\n * Variable: sharedDiv\n * \n * Holds the DIV element which is used to display the rubberband.\n */\nmxRubberband.prototype.sharedDiv = null;\n\n/**\n * Variable: currentX\n * \n * Holds the value of the x argument in the last call to <update>.\n */\nmxRubberband.prototype.currentX = 0;\n\n/**\n * Variable: currentY\n * \n * Holds the value of the y argument in the last call to <update>.\n */\nmxRubberband.prototype.currentY = 0;\n\n/**\n * Variable: fadeOut\n * \n * Optional fade out effect. Default is false.\n */\nmxRubberband.prototype.fadeOut = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxRubberband.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation updates\n * <enabled>.\n */\nmxRubberband.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isForceRubberbandEvent\n * \n * Returns true if the given <mxMouseEvent> should start rubberband selection.\n * This implementation returns true if the alt key is pressed.\n */\nmxRubberband.prototype.isForceRubberbandEvent = function(me)\n{\n\treturn mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxRubberband.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() == null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\n\t\t// Does not prevent the default for this event so that the\n\t\t// event processing chain is still executed even if we start\n\t\t// rubberbanding. This is required eg. in ExtJs to hide the\n\t\t// current context menu. In mouseMove we'll make sure we're\n\t\t// not selecting anything while we're rubberbanding.\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: start\n * \n * Sets the start point for the rubberband selection.\n */\nmxRubberband.prototype.start = function(x, y)\n{\n\tthis.first = new mxPoint(x, y);\n\n\tvar container = this.graph.container;\n\t\n\tfunction createMouseEvent(evt)\n\t{\n\t\tvar me = new mxMouseEvent(evt);\n\t\tvar pt = mxUtils.convertPoint(container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x;\n\t\tme.graphY = pt.y;\n\t\t\n\t\treturn me;\n\t};\n\n\tthis.dragHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseMove(this.graph, createMouseEvent(evt));\n\t});\n\n\tthis.dropHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseUp(this.graph, createMouseEvent(evt));\n\t});\n\n\t// Workaround for rubberband stopping if the mouse leaves the container in Firefox\n\tif (mxClient.IS_FF)\n\t{\n\t\tmxEvent.addGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating therubberband selection.\n */\nmxRubberband.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.first != null)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tvar x = me.getX() + origin.x;\n\t\tvar y = me.getY() + origin.y;\n\t\tvar dx = this.first.x - x;\n\t\tvar dy = this.first.y - y;\n\t\tvar tol = this.graph.tolerance;\n\t\t\n\t\tif (this.div != null || Math.abs(dx) > tol ||  Math.abs(dy) > tol)\n\t\t{\n\t\t\tif (this.div == null)\n\t\t\t{\n\t\t\t\tthis.div = this.createShape();\n\t\t\t}\n\t\t\t\n\t\t\t// Clears selection while rubberbanding. This is required because\n\t\t\t// the event is not consumed in mouseDown.\n\t\t\tmxUtils.clearSelection();\n\t\t\t\n\t\t\tthis.update(x, y);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates the rubberband selection shape.\n */\nmxRubberband.prototype.createShape = function()\n{\n\tif (this.sharedDiv == null)\n\t{\n\t\tthis.sharedDiv = document.createElement('div');\n\t\tthis.sharedDiv.className = 'mxRubberband';\n\t\tmxUtils.setOpacity(this.sharedDiv, this.defaultOpacity);\n\t}\n\n\tthis.graph.container.appendChild(this.sharedDiv);\n\tvar result = this.sharedDiv;\n\t\n\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t{\n\t\tthis.sharedDiv = null;\n\t}\n\t\t\n\treturn result;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this handler is active.\n */\nmxRubberband.prototype.isActive = function(sender, me)\n{\n\treturn this.div != null && this.div.style.display != 'none';\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by selecting the region of the rubberband using\n * <mxGraph.selectRegion>.\n */\nmxRubberband.prototype.mouseUp = function(sender, me)\n{\n\tvar active = this.isActive();\n\tthis.reset();\n\t\n\tif (active)\n\t{\n\t\tthis.execute(me.getEvent());\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: execute\n * \n * Resets the state of this handler and selects the current region\n * for the given event.\n */\nmxRubberband.prototype.execute = function(evt)\n{\n\tvar rect = new mxRectangle(this.x, this.y, this.width, this.height);\n\tthis.graph.selectRegion(rect, evt);\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the rubberband selection.\n */\nmxRubberband.prototype.reset = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t\t{\n\t\t\tvar temp = this.div;\n\t\t\tmxUtils.setPrefixedStyle(temp.style, 'transition', 'all 0.2s linear');\n\t\t\ttemp.style.pointerEvents = 'none';\n\t\t\ttemp.style.opacity = 0;\n\t\t    \n\t\t    window.setTimeout(function()\n\t\t    \t{\n\t\t    \t\ttemp.parentNode.removeChild(temp);\n\t\t    \t}, 200);\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t}\n\n\tmxEvent.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\tthis.dragHandler = null;\n\tthis.dropHandler = null;\n\t\n\tthis.currentX = 0;\n\tthis.currentY = 0;\n\tthis.first = null;\n\tthis.div = null;\n};\n\n/**\n * Function: update\n * \n * Sets <currentX> and <currentY> and calls <repaint>.\n */\nmxRubberband.prototype.update = function(x, y)\n{\n\tthis.currentX = x;\n\tthis.currentY = y;\n\t\n\tthis.repaint();\n};\n\n/**\n * Function: repaint\n * \n * Computes the bounding box and updates the style of the <div>.\n */\nmxRubberband.prototype.repaint = function()\n{\n\tif (this.div != null)\n\t{\n\t\tvar x = this.currentX - this.graph.panDx;\n\t\tvar y = this.currentY - this.graph.panDy;\n\t\t\n\t\tthis.x = Math.min(this.first.x, x);\n\t\tthis.y = Math.min(this.first.y, y);\n\t\tthis.width = Math.max(this.first.x, x) - this.x;\n\t\tthis.height =  Math.max(this.first.y, y) - this.y;\n\n\t\tvar dx = (mxClient.IS_VML) ? this.graph.panDx : 0;\n\t\tvar dy = (mxClient.IS_VML) ? this.graph.panDy : 0;\n\t\t\n\t\tthis.div.style.left = (this.x + dx) + 'px';\n\t\tthis.div.style.top = (this.y + dy) + 'px';\n\t\tthis.div.style.width = Math.max(1, this.width) + 'px';\n\t\tthis.div.style.height = Math.max(1, this.height) + 'px';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called, it is called automatically when the\n * window unloads.\n */\nmxRubberband.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\tthis.graph.removeMouseListener(this);\n\t\tthis.graph.removeListener(this.forceRubberbandHandler);\n\t\tthis.graph.removeListener(this.panHandler);\n\t\tthis.reset();\n\t\t\n\t\tif (this.sharedDiv != null)\n\t\t{\n\t\t\tthis.sharedDiv = null;\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHandle\n * \n * Implements a single custom handle for vertices.\n * \n * Constructor: mxHandle\n * \n * Constructs a new handle for the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxHandle(state, cursor, image)\n{\n\tthis.graph = state.view.graph;\n\tthis.state = state;\n\tthis.cursor = (cursor != null) ? cursor : this.cursor;\n\tthis.image = (image != null) ? image : this.image;\n\tthis.init();\n};\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used for this handle. Default is 'default'.\n */\nmxHandle.prototype.cursor = 'default';\n\n/**\n * Variable: image\n * \n * Specifies the <mxImage> to be used to render the handle. Default is null.\n */\nmxHandle.prototype.image = null;\n\n/**\n * Variable: ignoreGrid\n * \n * Default is false.\n */\nmxHandle.prototype.ignoreGrid = false;\n\n/**\n * Function: getPosition\n * \n * Hook for subclassers to return the current position of the handle.\n */\nmxHandle.prototype.getPosition = function(bounds) { };\n\n/**\n * Function: setPosition\n * \n * Hooks for subclassers to update the style in the <state>.\n */\nmxHandle.prototype.setPosition = function(bounds, pt, me) { };\n\n/**\n * Function: execute\n * \n * Hook for subclassers to execute the handle.\n */\nmxHandle.prototype.execute = function() { };\n\n/**\n * Function: copyStyle\n * \n * Sets the cell style with the given name to the corresponding value in <state>.\n */\nmxHandle.prototype.copyStyle = function(key)\n{\n\tthis.graph.setCellStyles(key, this.state.style[key], [this.state.cell]);\n};\n\n/**\n * Function: processEvent\n * \n * Processes the given <mxMouseEvent> and invokes <setPosition>.\n */\nmxHandle.prototype.processEvent = function(me)\n{\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\tvar pt = new mxPoint(me.getGraphX() / scale - tr.x, me.getGraphY() / scale - tr.y);\n\t\n\t// Center shape on mouse cursor\n\tif (this.shape != null && this.shape.bounds != null)\n\t{\n\t\tpt.x -= this.shape.bounds.width / scale / 4;\n\t\tpt.y -= this.shape.bounds.height / scale / 4;\n\t}\n\n\t// Snaps to grid for the rotated position then applies the rotation for the direction after that\n\tvar alpha1 = -mxUtils.toRadians(this.getRotation());\n\tvar alpha2 = -mxUtils.toRadians(this.getTotalRotation()) - alpha1;\n\tpt = this.flipPoint(this.rotatePoint(this.snapPoint(this.rotatePoint(pt, alpha1),\n\t\t\tthis.ignoreGrid || !this.graph.isGridEnabledEvent(me.getEvent())), alpha2));\n\tthis.setPosition(this.state.getPaintBounds(), pt, me);\n\tthis.positionChanged();\n\tthis.redraw();\n};\n\n/**\n * Function: positionChanged\n * \n * Called after <setPosition> has been called in <processEvent>. This repaints\n * the state using <mxCellRenderer>.\n */\nmxHandle.prototype.positionChanged = function()\n{\n\tif (this.state.text != null)\n\t{\n\t\tthis.state.text.apply(this.state);\n\t}\n\t\n\tif (this.state.shape != null)\n\t{\n\t\tthis.state.shape.apply(this.state);\n\t}\n\t\n\tthis.graph.cellRenderer.redraw(this.state, true);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation defined in the style of the cell.\n */\nmxHandle.prototype.getRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: getTotalRotation\n * \n * Returns the rotation from the style and the rotation from the direction of\n * the cell.\n */\nmxHandle.prototype.getTotalRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getShapeRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: init\n * \n * Creates and initializes the shapes required for this handle.\n */\nmxHandle.prototype.init = function()\n{\n\tvar html = this.isHtmlRequired();\n\t\n\tif (this.image != null)\n\t{\n\t\tthis.shape = new mxImageShape(new mxRectangle(0, 0, this.image.width, this.image.height), this.image.src);\n\t\tthis.shape.preserveImageAspect = false;\n\t}\n\telse\n\t{\n\t\tthis.shape = this.createShape(html);\n\t}\n\t\n\tthis.initShape(html);\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for this handle.\n */\nmxHandle.prototype.createShape = function(html)\n{\n\tvar bounds = new mxRectangle(0, 0, mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE);\n\t\n\treturn new mxRectangleShape(bounds, mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n};\n\n/**\n * Function: initShape\n * \n * Initializes <shape> and sets its cursor.\n */\nmxHandle.prototype.initShape = function(html)\n{\n\tif (html && this.shape.isHtmlAllowed())\n\t{\n\t\tthis.shape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tthis.shape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\n\t\tif (this.cursor != null)\n\t\t{\n\t\t\tthis.shape.init(this.graph.getView().getOverlayPane());\n\t\t}\n\t}\n\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\tthis.shape.node.style.cursor = this.cursor;\n};\n\n/**\n * Function: redraw\n * \n * Renders the shape for this handle.\n */\nmxHandle.prototype.redraw = function()\n{\n\tif (this.shape != null && this.state.shape != null)\n\t{\n\t\tvar pt = this.getPosition(this.state.getPaintBounds());\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(this.getTotalRotation());\n\t\t\tpt = this.rotatePoint(this.flipPoint(pt), alpha);\n\t\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar tr = this.graph.view.translate;\n\t\t\tthis.shape.bounds.x = Math.floor((pt.x + tr.x) * scale - this.shape.bounds.width / 2);\n\t\t\tthis.shape.bounds.y = Math.floor((pt.y + tr.y) * scale - this.shape.bounds.height / 2);\n\t\t\t\n\t\t\t// Needed to force update of text bounds\n\t\t\tthis.shape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHtmlRequired\n * \n * Returns true if this handle should be rendered in HTML. This returns true if\n * the text node is in the graph container.\n */\nmxHandle.prototype.isHtmlRequired = function()\n{\n\treturn this.state.text != null && this.state.text.node.parentNode == this.graph.container;\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the point by the given angle.\n */\nmxHandle.prototype.rotatePoint = function(pt, alpha)\n{\n\tvar bounds = this.state.getCellBounds();\n\tvar cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\tvar cos = Math.cos(alpha);\n\tvar sin = Math.sin(alpha); \n\n\treturn mxUtils.getRotatedPoint(pt, cos, sin, cx);\n};\n\n/**\n * Function: flipPoint\n * \n * Flips the given point vertically and/or horizontally.\n */\nmxHandle.prototype.flipPoint = function(pt)\n{\n\tif (this.state.shape != null)\n\t{\n\t\tvar bounds = this.state.getCellBounds();\n\t\t\n\t\tif (this.state.shape.flipH)\n\t\t{\n\t\t\tpt.x = 2 * bounds.x + bounds.width - pt.x;\n\t\t}\n\t\t\n\t\tif (this.state.shape.flipV)\n\t\t{\n\t\t\tpt.y = 2 * bounds.y + bounds.height - pt.y;\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: snapPoint\n * \n * Snaps the given point to the grid if ignore is false. This modifies\n * the given point in-place and also returns it.\n */\nmxHandle.prototype.snapPoint = function(pt, ignore)\n{\n\tif (!ignore)\n\t{\n\t\tpt.x = this.graph.snap(pt.x);\n\t\tpt.y = this.graph.snap(pt.y);\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides this handle.\n */\nmxHandle.prototype.setVisible = function(visible)\n{\n\tif (this.shape != null && this.shape.node != null)\n\t{\n\t\tthis.shape.node.style.display = (visible) ? '' : 'none';\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handle by setting its visibility to true.\n */\nmxHandle.prototype.reset = function()\n{\n\tthis.setVisible(true);\n\tthis.state.style = this.graph.getCellStyle(this.state.cell);\n\tthis.positionChanged();\n};\n\n/**\n * Function: destroy\n * \n * Destroys this handle.\n */\nmxHandle.prototype.destroy = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxVertexHandler\n * \n * Event handler for resizing cells. This handler is automatically created in\n * <mxGraph.createHandler>.\n * \n * Constructor: mxVertexHandler\n * \n * Constructs an event handler that allows to resize vertices\n * and groups.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be resized.\n */\nfunction mxVertexHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tif (this.livePreview && this.index != null)\n\t\t\t{\n\t\t\t\t// Redraws the live preview\n\t\t\t\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\t\t\t\n\t\t\t\t// Redraws connected edges\n\t\t\t\tthis.state.view.invalidate(this.state.cell);\n\t\t\t\tthis.state.invalid = false;\n\t\t\t\tthis.state.view.validate();\n\t\t\t}\n\t\t\t\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxVertexHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxVertexHandler.prototype.state = null;\n\n/**\n * Variable: singleSizer\n * \n * Specifies if only one sizer handle at the bottom, right corner should be\n * used. Default is false.\n */\nmxVertexHandler.prototype.singleSizer = false;\n\n/**\n * Variable: index\n * \n * Holds the index of the current handle.\n */\nmxVertexHandler.prototype.index = null;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE or\n * if <tolerance> > 0. Default is true.\n */\nmxVertexHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxVertexHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxVertexHandler.prototype.tolerance = 0;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if a rotation handle should be visible. Default is false.\n */\nmxVertexHandler.prototype.rotationEnabled = false;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxVertexHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: rotationRaster\n * \n * Specifies if rotation steps should be \"rasterized\" depening on the distance\n * to the handle. Default is true.\n */\nmxVertexHandler.prototype.rotationRaster = true;\n\n/**\n * Variable: rotationCursor\n * \n * Specifies the cursor for the rotation handle. Default is 'crosshair'.\n */\nmxVertexHandler.prototype.rotationCursor = 'crosshair';\n\n/**\n * Variable: livePreview\n * \n * Specifies if resize should change the cell in-place. This is an experimental\n * feature for non-touch devices. Default is false.\n */\nmxVertexHandler.prototype.livePreview = false;\n\n/**\n * Variable: manageSizers\n * \n * Specifies if sizers should be hidden and spaced if the vertex is small.\n * Default is false.\n */\nmxVertexHandler.prototype.manageSizers = false;\n\n/**\n * Variable: constrainGroupByChildren\n * \n * Specifies if the size of groups should be constrained by the children.\n * Default is false.\n */\nmxVertexHandler.prototype.constrainGroupByChildren = false;\n\n/**\n * Variable: rotationHandleVSpacing\n * \n * Vertical spacing for rotation icon. Default is -16.\n */\nmxVertexHandler.prototype.rotationHandleVSpacing = -16;\n\n/**\n * Variable: horizontalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset horizontally.\n */\nmxVertexHandler.prototype.horizontalOffset = 0;\n\n/**\n * Variable: verticalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset vertically.\n */\nmxVertexHandler.prototype.verticalOffset = 0;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.selectionBorder = this.createSelectionShape(this.bounds);\n\t// VML dialect required here for event transparency in IE\n\tthis.selectionBorder.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tthis.selectionBorder.pointerEvents = false;\n\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tthis.selectionBorder.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(this.selectionBorder.node, this.graph, this.state);\n\t\n\tif (this.graph.isCellMovable(this.state.cell))\n\t{\n\t\tthis.selectionBorder.setCursor(mxConstants.CURSOR_MOVABLE_VERTEX);\n\t}\n\n\t// Adds the sizer handles\n\tif (mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells)\n\t{\n\t\tvar resizable = this.graph.isCellResizable(this.state.cell);\n\t\tthis.sizers = [];\n\n\t\tif (resizable || (this.graph.isLabelMovable(this.state.cell) &&\n\t\t\tthis.state.width >= 2 && this.state.height >= 2))\n\t\t{\n\t\t\tvar i = 0;\n\n\t\t\tif (resizable)\n\t\t\t{\n\t\t\t\tif (!this.singleSizer)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers.push(this.createSizer('nw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('n-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('ne-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('w-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('e-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('sw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('s-resize', i++));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.sizers.push(this.createSizer('se-resize', i++));\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.model.getGeometry(this.state.cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative && !this.graph.isSwimlane(this.state.cell) &&\n\t\t\t\tthis.graph.isLabelMovable(this.state.cell))\n\t\t\t{\n\t\t\t\t// Marks this as the label handle for getHandleForEvent\n\t\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_LABEL_HANDLE, mxEvent.LABEL_HANDLE, mxConstants.LABEL_HANDLE_SIZE, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\t\tthis.sizers.push(this.labelShape);\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isCellMovable(this.state.cell) && !this.graph.isCellResizable(this.state.cell) &&\n\t\t\tthis.state.width < 2 && this.state.height < 2)\n\t\t{\n\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_MOVABLE_VERTEX,\n\t\t\t\tmxEvent.LABEL_HANDLE, null, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\tthis.sizers.push(this.labelShape);\n\t\t}\n\t}\n\t\n\t// Adds the rotation handler\n\tif (this.isRotationHandleVisible())\n\t{\n\t\tthis.rotationShape = this.createSizer(this.rotationCursor, mxEvent.ROTATION_HANDLE,\n\t\t\tmxConstants.HANDLE_SIZE + 3, mxConstants.HANDLE_FILLCOLOR);\n\t\tthis.sizers.push(this.rotationShape);\n\t}\n\n\tthis.customHandles = this.createCustomHandles();\n\tthis.redraw();\n\t\n\tif (this.constrainGroupByChildren)\n\t{\n\t\tthis.updateMinBounds();\n\t}\n};\n\n/**\n * Function: isRotationHandleVisible\n * \n * Returns true if the rotation handle should be showing.\n */\nmxVertexHandler.prototype.isRotationHandleVisible = function()\n{\n\treturn this.graph.isEnabled() && this.rotationEnabled && this.graph.isCellRotatable(this.state.cell) &&\n\t\t(mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells) &&\n\t\tthis.state.width >= 2 && this.state.height >= 2;\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the aspect ratio if the cell should be maintained.\n */\nmxVertexHandler.prototype.isConstrainedEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent()) || this.state.style[mxConstants.STYLE_ASPECT] == 'fixed';\n};\n\n/**\n * Function: isCenteredEvent\n * \n * Returns true if the center of the vertex should be maintained during the resize.\n */\nmxVertexHandler.prototype.isCenteredEvent = function(state, me)\n{\n\treturn false;\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxVertexHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: updateMinBounds\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.updateMinBounds = function()\n{\n\tvar children = this.graph.getChildCells(this.state.cell);\n\t\n\tif (children.length > 0)\n\t{\n\t\tthis.minBounds = this.graph.view.getBounds(children);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tvar s = this.state.view.scale;\n\t\t\tvar t = this.state.view.translate;\n\n\t\t\tthis.minBounds.x -= this.state.x;\n\t\t\tthis.minBounds.y -= this.state.y;\n\t\t\tthis.minBounds.x /= s;\n\t\t\tthis.minBounds.y /= s;\n\t\t\tthis.minBounds.width /= s;\n\t\t\tthis.minBounds.height /= s;\n\t\t\tthis.x0 = this.state.x / s - t.x;\n\t\t\tthis.y0 = this.state.y / s - t.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: getSelectionBounds\n * \n * Returns the mxRectangle that defines the bounds of the selection\n * border.\n */\nmxVertexHandler.prototype.getSelectionBounds = function(state)\n{\n\treturn new mxRectangle(Math.round(state.x), Math.round(state.y), Math.round(state.width), Math.round(state.height));\n};\n\n/**\n * Function: createParentHighlightShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\treturn this.createSelectionShape(bounds);\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createSelectionShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.VERTEX_SELECTION_COLOR>.\n */\nmxVertexHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.VERTEX_SELECTION_STROKEWIDTH>.\n */\nmxVertexHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.VERTEX_SELECTION_DASHED>.\n */\nmxVertexHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_DASHED;\n};\n\n/**\n * Function: createSizer\n * \n * Creates a sizer handle for the specified cursor and index and returns\n * the new <mxRectangleShape> that represents the handle.\n */\nmxVertexHandler.prototype.createSizer = function(cursor, index, size, fillColor)\n{\n\tsize = size || mxConstants.HANDLE_SIZE;\n\t\n\tvar bounds = new mxRectangle(0, 0, size, size);\n\tvar sizer = this.createSizerShape(bounds, index, fillColor);\n\n\tif (sizer.isHtmlAllowed() && this.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t{\n\t\tsizer.bounds.height -= 1;\n\t\tsizer.bounds.width -= 1;\n\t\tsizer.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tsizer.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tsizer.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tsizer.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(sizer.node, this.graph, this.state);\n\t\n\tif (this.graph.isEnabled())\n\t{\n\t\tsizer.setCursor(cursor);\n\t}\n\t\n\tif (!this.isSizerVisible(index))\n\t{\n\t\tsizer.visible = false;\n\t}\n\t\n\treturn sizer;\n};\n\n/**\n * Function: isSizerVisible\n * \n * Returns true if the sizer for the given index is visible.\n * This returns true for all given indices.\n */\nmxVertexHandler.prototype.isSizerVisible = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: createSizerShape\n * \n * Creates the shape used for the sizer handle for the specified bounds an\n * index. Only images and rectangles should be returned if support for HTML\n * labels with not foreign objects is required.\n */\nmxVertexHandler.prototype.createSizerShape = function(bounds, index, fillColor)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tbounds = new mxRectangle(bounds.x, bounds.y, this.handleImage.width, this.handleImage.height);\n\t\tvar shape = new mxImageShape(bounds, this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse if (index == mxEvent.ROTATION_HANDLE)\n\t{\n\t\treturn new mxEllipse(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangleShape(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createBounds\n * \n * Helper method to create an <mxRectangle> around the given centerpoint\n * with a width and height of 2*s or 6, if no s is given.\n */\nmxVertexHandler.prototype.moveSizerTo = function(shape, x, y)\n{\n\tif (shape != null)\n\t{\n\t\tshape.bounds.x = Math.floor(x - shape.bounds.width / 2);\n\t\tshape.bounds.y = Math.floor(y - shape.bounds.height / 2);\n\t\t\n\t\t// Fixes visible inactive handles in VML\n\t\tif (shape.node != null && shape.node.style.display != 'none')\n\t\t{\n\t\t\tshape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event. This returns the index\n * of the sizer from where the event originated or <mxEvent.LABEL_INDEX>.\n */\nmxVertexHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\n\tfunction checkShape(shape)\n\t{\n\t\treturn shape != null && (me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit) &&\n\t\t\tshape.node.style.display != 'none' && shape.node.style.visibility != 'hidden'));\n\t}\n\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (checkShape(this.rotationShape))\n\t{\n\t\treturn mxEvent.ROTATION_HANDLE;\n\t}\n\telse if (checkShape(this.labelShape))\n\t{\n\t\treturn mxEvent.LABEL_HANDLE;\n\t}\n\t\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.sizers[i]))\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxVertexHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event if a handle has been clicked. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxVertexHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 0;\n\t\n\tif (!me.isConsumed() && this.graph.isEnabled() && (tol > 0 || me.getState() == this.state))\n\t{\n\t\tvar handle = this.getHandleForEvent(me);\n\n\t\tif (handle != null)\n\t\t{\n\t\t\tthis.start(me.getGraphX(), me.getGraphY(), handle);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: isLivePreviewBorder\n * \n * Called if <livePreview> is enabled to check if a border should be painted.\n * This implementation returns true if the shape is transparent.\n */\nmxVertexHandler.prototype.isLivePreviewBorder = function()\n{\n\treturn this.state.shape != null && this.state.shape.fill == null && this.state.shape.stroke == null;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.start = function(x, y, index)\n{\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.livePreviewActive = this.livePreview && this.graph.model.getChildCount(this.state.cell) == 0;\n\t\tthis.inTolerance = true;\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t\tthis.index = index;\n\t\tthis.startX = x;\n\t\tthis.startY = y;\n\t\t\n\t\t// Saves reference to parent state\n\t\tvar model = this.state.view.graph.model;\n\t\tvar parent = model.getParent(this.state.cell);\n\t\t\n\t\tif (this.state.view.currentRoot != parent && (model.isVertex(parent) || model.isEdge(parent)))\n\t\t{\n\t\t\tthis.parentState = this.state.view.graph.view.getState(parent);\n\t\t}\n\t\t\n\t\t// Creates a preview that can be on top of any HTML label\n\t\tthis.selectionBorder.node.style.display = (index == mxEvent.ROTATION_HANDLE) ? 'inline' : 'none';\n\t\t\n\t\t// Creates the border that represents the new bounds\n\t\tif (!this.livePreviewActive || this.isLivePreviewBorder())\n\t\t{\n\t\t\tthis.preview = this.createSelectionShape(this.bounds);\n\t\t\t\n\t\t\tif (!(mxClient.IS_SVG && Number(this.state.style[mxConstants.STYLE_ROTATION] || '0') != 0) &&\n\t\t\t\tthis.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t\t\t{\n\t\t\t\tthis.preview.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\t\tthis.preview.init(this.graph.container);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.preview.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.preview.init(this.graph.view.getOverlayPane());\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Prepares the handles for live preview\n\t\tif (this.livePreviewActive)\n\t\t{\n\t\t\tthis.hideSizers();\n\t\t\t\n\t\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tthis.rotationShape.node.style.display = '';\n\t\t\t}\n\t\t\telse if (index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.labelShape.node.style.display = '';\n\t\t\t}\n\t\t\telse if (this.sizers != null && this.sizers[index] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[index].node.style.display = '';\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].setVisible(true);\n\t\t\t}\n\t\t\t\n\t\t\t// Gets the array of connected edge handlers for redrawing\n\t\t\tvar edges = this.graph.getEdges(this.state.cell);\n\t\t\tthis.edgeHandlers = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(edges[i]);\n\t\t\t\t\n\t\t\t\tif (handler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.edgeHandlers.push(handler);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxVertexHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: hideSizers\n * \n * Hides all sizers except.\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.hideSizers = function()\n{\n\tthis.setHandlesVisible(false);\n};\n\n/**\n * Function: checkTolerance\n * \n * Checks if the coordinates for the given event are within the\n * <mxGraph.tolerance>. If the event is a mouse event then the tolerance is\n * ignored.\n */\nmxVertexHandler.prototype.checkTolerance = function(me)\n{\n\tif (this.inTolerance && this.startX != null && this.startY != null)\n\t{\n\t\tif (mxEvent.isMouseEvent(me.getEvent()) ||\n\t\t\tMath.abs(me.getGraphX() - this.startX) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.startY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxVertexHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxVertexHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundAngle\n * \n * Hook for rounding the angle. This uses Math.round.\n */\nmxVertexHandler.prototype.roundAngle = function(angle)\n{\n\treturn Math.round(angle * 10) / 10;\n};\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxVertexHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxVertexHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.index != null)\n\t{\n\t\t// Checks tolerance for ignoring single clicks\n\t\tthis.checkTolerance(me);\n\n\t\tif (!this.inTolerance)\n\t\t{\n\t\t\tif (this.index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].active = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.moveLabel(me);\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tthis.rotateVertex(me);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.resizeVertex(me);\n\t\t\t}\n\n\t\t\tthis.updateHint(me);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (!this.graph.isMouseDown && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.moveLabel = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\t\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t}\n\n\tvar index = (this.rotationShape != null) ? this.sizers.length - 2 : this.sizers.length - 1;\n\tthis.moveSizerTo(this.sizers[index], point.x, point.y);\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.rotateVertex = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar dx = this.state.x + this.state.width / 2 - point.x;\n\tvar dy = this.state.y + this.state.height / 2 - point.y;\n\tthis.currentAlpha = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : ((dy < 0) ? 180 : 0);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.currentAlpha -= 180;\n\t}\n\n\t// Rotation raster\n\tif (this.rotationRaster && this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar dx = point.x - this.state.getCenterX();\n\t\tvar dy = point.y - this.state.getCenterY();\n\t\tvar dist = Math.abs(Math.sqrt(dx * dx + dy * dy) - 20) * 3;\n\t\tvar raster = Math.max(1, 5 * Math.min(3, Math.max(0, Math.round(80 / Math.abs(dist)))));\n\t\t\n\t\tthis.currentAlpha = Math.round(this.currentAlpha / raster) * raster;\n\t}\n\telse\n\t{\n\t\tthis.currentAlpha = this.roundAngle(this.currentAlpha);\n\t}\n\n\tthis.selectionBorder.rotation = this.currentAlpha;\n\tthis.selectionBorder.redraw();\n\t\t\t\t\t\n\tif (this.livePreviewActive)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.resizeVertex = function(me)\n{\n\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\tvar cos = Math.cos(-alpha);\n\tvar sin = Math.sin(-alpha);\n\t\n\tvar dx = point.x - this.startX;\n\tvar dy = point.y - this.startY;\n\n\t// Rotates vector for mouse gesture\n\tvar tx = cos * dx - sin * dy;\n\tvar ty = sin * dx + cos * dy;\n\t\n\tdx = tx;\n\tdy = ty;\n\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tthis.unscaledBounds = this.union(geo, dx / scale, dy / scale, this.index,\n\t\tthis.graph.isGridEnabledEvent(me.getEvent()), 1,\n\t\tnew mxPoint(0, 0), this.isConstrainedEvent(me),\n\t\tthis.isCenteredEvent(this.state, me));\n\t\n\t// Keeps vertex within maximum graph or parent bounds\n\tif (!geo.relative)\n\t{\n\t\tvar max = this.graph.getMaximumGraphBounds();\n\t\t\n\t\t// Handles child cells\n\t\tif (max != null && this.parentState != null)\n\t\t{\n\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\n\t\t\tmax.x -= (this.parentState.x - tr.x * scale) / scale;\n\t\t\tmax.y -= (this.parentState.y - tr.y * scale) / scale;\n\t\t}\n\t\t\n\t\tif (this.graph.isConstrainChild(this.state.cell))\n\t\t{\n\t\t\tvar tmp = this.graph.getCellContainmentArea(this.state.cell);\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar overlap = this.graph.getOverlap(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (overlap > 0)\n\t\t\t\t{\n\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\n\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (max == null)\n\t\t\t\t{\n\t\t\t\t\tmax = tmp;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (max != null)\n\t\t{\n\t\t\tif (this.unscaledBounds.x < max.x)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= max.x - this.unscaledBounds.x;\n\t\t\t\tthis.unscaledBounds.x = max.x;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y < max.y)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= max.y - this.unscaledBounds.y;\n\t\t\t\tthis.unscaledBounds.y = max.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.x + this.unscaledBounds.width > max.x + max.width)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= this.unscaledBounds.x +\n\t\t\t\t\tthis.unscaledBounds.width - max.x - max.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y + this.unscaledBounds.height > max.y + max.height)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= this.unscaledBounds.y +\n\t\t\t\t\tthis.unscaledBounds.height - max.y - max.height;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.bounds = new mxRectangle(((this.parentState != null) ? this.parentState.x : tr.x * scale) +\n\t\t(this.unscaledBounds.x) * scale, ((this.parentState != null) ? this.parentState.y : tr.y * scale) +\n\t\t(this.unscaledBounds.y) * scale, this.unscaledBounds.width * scale, this.unscaledBounds.height * scale);\n\n\tif (geo.relative && this.parentState != null)\n\t{\n\t\tthis.bounds.x += this.state.x - this.parentState.x;\n\t\tthis.bounds.y += this.state.y - this.parentState.y;\n\t}\n\n\tcos = Math.cos(alpha);\n\tsin = Math.sin(alpha);\n\t\n\tvar c2 = new mxPoint(this.bounds.getCenterX(), this.bounds.getCenterY());\n\n\tvar dx = c2.x - ct.x;\n\tvar dy = c2.y - ct.y;\n\t\n\tvar dx2 = cos * dx - sin * dy;\n\tvar dy2 = sin * dx + cos * dy;\n\t\n\tvar dx3 = dx2 - dx;\n\tvar dy3 = dy2 - dy;\n\t\n\tvar dx4 = this.bounds.x - this.state.x;\n\tvar dy4 = this.bounds.y - this.state.y;\n\t\n\tvar dx5 = cos * dx4 - sin * dy4;\n\tvar dy5 = sin * dx4 + cos * dy4;\n\t\n\tthis.bounds.x += dx3;\n\tthis.bounds.y += dy3;\n\t\n\t// Rounds unscaled bounds to int\n\tthis.unscaledBounds.x = this.roundLength(this.unscaledBounds.x + dx3 / scale);\n\tthis.unscaledBounds.y = this.roundLength(this.unscaledBounds.y + dy3 / scale);\n\tthis.unscaledBounds.width = this.roundLength(this.unscaledBounds.width);\n\tthis.unscaledBounds.height = this.roundLength(this.unscaledBounds.height);\n\t\n\t// Shifts the children according to parent offset\n\tif (!this.graph.isCellCollapsed(this.state.cell) && (dx3 != 0 || dy3 != 0))\n\t{\n\t\tthis.childOffsetX = this.state.x - this.bounds.x + dx5;\n\t\tthis.childOffsetY = this.state.y - this.bounds.y + dy5;\n\t}\n\telse\n\t{\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t}\n\t\n\tif (this.livePreviewActive)\n\t{\n\t\tthis.updateLivePreview(me);\n\t}\n\t\n\tif (this.preview != null)\n\t{\n\t\tthis.drawPreview();\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Repaints the live preview.\n */\nmxVertexHandler.prototype.updateLivePreview = function(me)\n{\n\t// TODO: Apply child offset to children in live preview\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\t\n\t// Saves current state\n\tvar tempState = this.state.clone();\n\n\t// Temporarily changes size and origin\n\tthis.state.x = this.bounds.x;\n\tthis.state.y = this.bounds.y;\n\tthis.state.origin = new mxPoint(this.state.x / scale - tr.x, this.state.y / scale - tr.y);\n\tthis.state.width = this.bounds.width;\n\tthis.state.height = this.bounds.height;\n\t\n\t// Needed to force update of text bounds\n\tthis.state.unscaledWidth = null;\n\t\n\t// Redraws cell and handles\n\tvar off = this.state.absoluteOffset;\n\toff = new mxPoint(off.x, off.y);\n\n\t// Required to store and reset absolute offset for updating label position\n\tthis.state.absoluteOffset.x = 0;\n\tthis.state.absoluteOffset.y = 0;\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\t\t\t\t\n\n\tif (geo != null)\n\t{\n\t\tvar offset = geo.offset || this.EMPTY_POINT;\n\n\t\tif (offset != null && !geo.relative)\n\t\t{\n\t\t\tthis.state.absoluteOffset.x = this.state.view.scale * offset.x;\n\t\t\tthis.state.absoluteOffset.y = this.state.view.scale * offset.y;\n\t\t}\n\t\t\n\t\tthis.state.view.updateVertexLabelOffset(this.state);\n\t}\n\t\n\t// Draws the live preview\n\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\n\t// Redraws connected edges TODO: Include child edges\n\tthis.state.view.invalidate(this.state.cell);\n\tthis.state.invalid = false;\n\tthis.state.view.validate();\n\tthis.redrawHandles();\n\t\n\t// Hides folding icon\n\tif (this.state.control != null && this.state.control.node != null)\n\t{\n\t\tthis.state.control.node.style.visibility = 'hidden';\n\t}\n\t\n\t// Restores current state\n\tthis.state.setState(tempState);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.index != null && this.state != null)\n\t{\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\n\t\tthis.graph.getModel().beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].active = false;\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.currentAlpha != null)\n\t\t\t\t{\n\t\t\t\t\tvar delta = this.currentAlpha - (this.state.style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\t\t\n\t\t\t\t\tif (delta != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(this.state.cell, delta);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.rotateClick();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gridEnabled = this.graph.isGridEnabledEvent(me.getEvent());\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\t\n\t\t\t\tvar dx = point.x - this.startX;\n\t\t\t\tvar dy = point.y - this.startY;\n\t\t\t\t\n\t\t\t\t// Rotates vector for mouse gesture\n\t\t\t\tvar tx = cos * dx - sin * dy;\n\t\t\t\tvar ty = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tdx = tx;\n\t\t\t\tdy = ty;\n\t\t\t\t\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\tvar recurse = this.isRecursiveResize(this.state, me);\n\t\t\t\tthis.resizeCell(this.state.cell, this.roundLength(dx / s), this.roundLength(dy / s),\n\t\t\t\t\tindex, gridEnabled, this.isConstrainedEvent(me), recurse);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.graph.getModel().endUpdate();\n\t\t}\n\n\t\tme.consume();\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell to the given rotation.\n */\nmxVertexHandler.prototype.isRecursiveResize = function(state, me)\n{\n\treturn this.graph.isRecursiveResize(this.state);\n};\n\n/**\n * Function: rotateClick\n * \n * Hook for subclassers to implement a single click on the rotation handle.\n * This code is executed as part of the model transaction. This implementation\n * is empty.\n */\nmxVertexHandler.prototype.rotateClick = function() { };\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell and its children by the given angle in degrees.\n * \n * Parameters:\n * \n * cell - <mxCell> to be rotated.\n * angle - Angle in degrees.\n */\nmxVertexHandler.prototype.rotateCell = function(cell, angle, parent)\n{\n\tif (angle != 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isVertex(cell) || model.isEdge(cell))\n\t\t{\n\t\t\tif (!model.isEdge(cell))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cell);\n\t\t\t\tvar style = (state != null) ? state.style : this.graph.getCellStyle(cell);\n\t\t\n\t\t\t\tif (style != null)\n\t\t\t\t{\n\t\t\t\t\tvar total = (style[mxConstants.STYLE_ROTATION] || 0) + angle;\n\t\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ROTATION, total, [cell]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null && !model.isEdge(parent))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.rotate(angle, new mxPoint(pgeo.width / 2, pgeo.height / 2));\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((model.isVertex(cell) && !geo.relative) || model.isEdge(cell))\n\t\t\t\t{\n\t\t\t\t\t// Recursive rotation\n\t\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(model.getChildAt(cell, i), angle, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxVertexHandler.prototype.reset = function()\n{\n\tif (this.sizers != null && this.index != null && this.sizers[this.index] != null &&\n\t\tthis.sizers[this.index].node.style.display == 'none')\n\t{\n\t\tthis.sizers[this.index].node.style.display = '';\n\t}\n\n\tthis.currentAlpha = null;\n\tthis.inTolerance = null;\n\tthis.index = null;\n\n\t// TODO: Reset and redraw cell states for live preview\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\n\tif (this.livePreviewActive && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Shows folding icon\n\t\tif (this.state.control != null && this.state.control.node != null)\n\t\t{\n\t\t\tthis.state.control.node.style.visibility = '';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tif (this.customHandles[i].active)\n\t\t\t{\n\t\t\t\tthis.customHandles[i].active = false;\n\t\t\t\tthis.customHandles[i].reset();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.customHandles[i].setVisible(true);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Checks if handler has been destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.node.style.display = 'inline';\n\t\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\t\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y,\n\t\t\tthis.selectionBounds.width, this.selectionBounds.height);\n\t\tthis.drawPreview();\n\t}\n\n\tthis.removeHint();\n\tthis.redrawHandles();\n\tthis.edgeHandlers = null;\n\tthis.unscaledBounds = null;\n\tthis.livePreviewActive = null;\n};\n\n/**\n * Function: resizeCell\n * \n * Uses the given vector to change the bounds of the given cell\n * in the graph using <mxGraph.resizeCell>.\n */\nmxVertexHandler.prototype.resizeCell = function(cell, dx, dy, index, gridEnabled, constrained, recurse)\n{\n\tvar geo = this.graph.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (index == mxEvent.LABEL_HANDLE)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tdx = Math.round((this.labelShape.bounds.getCenterX() - this.startX) / scale);\n\t\t\tdy = Math.round((this.labelShape.bounds.getCenterY() - this.startY) / scale);\n\t\t\t\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x += dx;\n\t\t\t\tgeo.offset.y += dy;\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(cell, geo);\n\t\t}\n\t\telse if (this.unscaledBounds != null)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\n\t\t\tif (this.childOffsetX != 0 || this.childOffsetY != 0)\n\t\t\t{\n\t\t\t\tthis.moveChildren(cell, Math.round(this.childOffsetX / scale), Math.round(this.childOffsetY / scale));\n\t\t\t}\n\n\t\t\tthis.graph.resizeCell(cell, this.unscaledBounds, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: moveChildren\n * \n * Moves the children of the given cell by the given vector.\n */\nmxVertexHandler.prototype.moveChildren = function(cell, dx, dy)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\t\tvar geo = this.graph.getCellGeometry(child);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.translate(dx, dy);\n\t\t\tmodel.setGeometry(child, geo);\n\t\t}\n\t}\n};\n/**\n * Function: union\n * \n * Returns the union of the given bounds and location for the specified\n * handle index.\n * \n * To override this to limit the size of vertex via a minWidth/-Height style,\n * the following code can be used.\n * \n * (code)\n * var vertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = vertexHandlerUnion.apply(this, arguments);\n *   \n *   result.width = Math.max(result.width, mxUtils.getNumber(this.state.style, 'minWidth', 0));\n *   result.height = Math.max(result.height, mxUtils.getNumber(this.state.style, 'minHeight', 0));\n *   \n *   return result;\n * };\n * (end)\n * \n * The minWidth/-Height style can then be used as follows:\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'minWidth=100;minHeight=100;');\n * (end)\n * \n * To override this to update the height for a wrapped text if the width of a vertex is\n * changed, the following can be used.\n * \n * (code)\n * var mxVertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = mxVertexHandlerUnion.apply(this, arguments);\n *   var s = this.state;\n *   \n *   if (this.graph.isHtmlLabel(s.cell) && (index == 3 || index == 4) &&\n *       s.text != null && s.style[mxConstants.STYLE_WHITE_SPACE] == 'wrap')\n *   {\n *     var label = this.graph.getLabel(s.cell);\n *     var fontSize = mxUtils.getNumber(s.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n *     var ww = result.width / s.view.scale - s.text.spacingRight - s.text.spacingLeft\n *     \n *     result.height = mxUtils.getSizeForString(label, fontSize, s.style[mxConstants.STYLE_FONTFAMILY], ww).height;\n *   }\n *   \n *   return result;\n * };\n * (end)\n */\nmxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained, centered)\n{\n\tif (this.singleSizer)\n\t{\n\t\tvar x = bounds.x + bounds.width + dx;\n\t\tvar y = bounds.y + bounds.height + dy;\n\t\t\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tx = this.graph.snap(x / scale) * scale;\n\t\t\ty = this.graph.snap(y / scale) * scale;\n\t\t}\n\t\t\n\t\tvar rect = new mxRectangle(bounds.x, bounds.y, 0, 0);\n\t\trect.add(new mxRectangle(x, y, 0, 0));\n\t\t\n\t\treturn rect;\n\t}\n\telse\n\t{\n\t\tvar w0 = bounds.width;\n\t\tvar h0 = bounds.height;\n\t\tvar left = bounds.x - tr.x * scale;\n\t\tvar right = left + w0;\n\t\tvar top = bounds.y - tr.y * scale;\n\t\tvar bottom = top + h0;\n\t\t\n\t\tvar cx = left + w0 / 2;\n\t\tvar cy = top + h0 / 2;\n\t\t\n\t\tif (index > 4 /* Bottom Row */)\n\t\t{\n\t\t\tbottom = bottom + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tbottom = this.graph.snap(bottom / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index < 3 /* Top Row */)\n\t\t{\n\t\t\ttop = top + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\ttop = this.graph.snap(top / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (index == 0 || index == 3 || index == 5 /* Left */)\n\t\t{\n\t\t\tleft += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tleft = this.graph.snap(left / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index == 2 || index == 4 || index == 7 /* Right */)\n\t\t{\n\t\t\tright += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tright = this.graph.snap(right / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar width = right - left;\n\t\tvar height = bottom - top;\n\n\t\tif (constrained)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar aspect = geo.width / geo.height;\n\t\t\t\t\n\t\t\t\tif (index== 1 || index== 2 || index == 7 || index == 6)\n\t\t\t\t{\n\t\t\t\t\twidth = height * aspect;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\theight = width / aspect;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (index == 0)\n\t\t\t\t{\n\t\t\t\t\tleft = right - width;\n\t\t\t\t\ttop = bottom - height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (centered)\n\t\t{\n\t\t\twidth += (width - w0);\n\t\t\theight += (height - h0);\n\t\t\t\n\t\t\tvar cdx = cx - (left + width / 2);\n\t\t\tvar cdy = cy - (top + height / 2);\n\n\t\t\tleft += cdx;\n\t\t\ttop += cdy;\n\t\t\tright += cdx;\n\t\t\tbottom += cdy;\n\t\t}\n\n\t\t// Flips over left side\n\t\tif (width < 0)\n\t\t{\n\t\t\tleft += width;\n\t\t\twidth = Math.abs(width);\n\t\t}\n\t\t\n\t\t// Flips over top side\n\t\tif (height < 0)\n\t\t{\n\t\t\ttop += height;\n\t\t\theight = Math.abs(height);\n\t\t}\n\n\t\tvar result = new mxRectangle(left + tr.x * scale, top + tr.y * scale, width, height);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tresult.width = Math.max(result.width, this.minBounds.x * scale + this.minBounds.width * scale +\n\t\t\t\tMath.max(0, this.x0 * scale - result.x));\n\t\t\tresult.height = Math.max(result.height, this.minBounds.y * scale + this.minBounds.height * scale +\n\t\t\t\tMath.max(0, this.y0 * scale - result.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Redraws the handles and the preview.\n */\nmxVertexHandler.prototype.redraw = function(ignoreHandles)\n{\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.drawPreview();\n\n\tif (!ignoreHandles)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Returns the padding to be used for drawing handles for the current <bounds>.\n */\nmxVertexHandler.prototype.getHandlePadding = function()\n{\n\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\tvar result = new mxPoint(0, 0);\n\tvar tol = this.tolerance;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null &&\n\t\t(this.bounds.width < 2 * this.sizers[0].bounds.width + 2 * tol ||\n\t\tthis.bounds.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t{\n\t\ttol /= 2;\n\t\t\n\t\tresult.x = this.sizers[0].bounds.width + tol;\n\t\tresult.y = this.sizers[0].bounds.height + tol;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles. To hide certain handles the following code can be used.\n * \n * (code)\n * mxVertexHandler.prototype.redrawHandles = function()\n * {\n *   mxVertexHandlerRedrawHandles.apply(this, arguments);\n *   \n *   if (this.sizers != null && this.sizers.length > 7)\n *   {\n *     this.sizers[1].node.style.display = 'none';\n *     this.sizers[6].node.style.display = 'none';\n *   }\n * };\n * (end)\n */\nmxVertexHandler.prototype.redrawHandles = function()\n{\n\tvar tol = this.tolerance;\n\tthis.horizontalOffset = 0;\n\tthis.verticalOffset = 0;\n\tvar s = this.bounds;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null)\n\t{\n\t\tif (this.index == null && this.manageSizers && this.sizers.length >= 8)\n\t\t{\n\t\t\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\t\t\tvar padding = this.getHandlePadding();\n\t\t\tthis.horizontalOffset = padding.x;\n\t\t\tthis.verticalOffset = padding.y;\n\t\t\t\n\t\t\tif (this.horizontalOffset != 0 || this.verticalOffset != 0)\n\t\t\t{\n\t\t\t\ts = new mxRectangle(s.x, s.y, s.width, s.height);\n\n\t\t\t\ts.x -= this.horizontalOffset / 2;\n\t\t\t\ts.width += this.horizontalOffset;\n\t\t\t\ts.y -= this.verticalOffset / 2;\n\t\t\t\ts.height += this.verticalOffset;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tif ((s.width < 2 * this.sizers[0].bounds.width + 2 * tol) ||\n\t\t\t\t\t(s.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[2].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[5].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[7].node.style.display = 'none';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = '';\n\t\t\t\t\tthis.sizers[2].node.style.display = '';\n\t\t\t\t\tthis.sizers[5].node.style.display = '';\n\t\t\t\t\tthis.sizers[7].node.style.display = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar r = s.x + s.width;\n\t\tvar b = s.y + s.height;\n\t\t\n\t\tif (this.singleSizer)\n\t\t{\n\t\t\tthis.moveSizerTo(this.sizers[0], r, b);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cx = s.x + s.width / 2;\n\t\t\tvar cy = s.y + s.height / 2;\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tvar crs = ['nw-resize', 'n-resize', 'ne-resize', 'e-resize', 'se-resize', 's-resize', 'sw-resize', 'w-resize'];\n\t\t\t\t\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\t\t\t\n\t\t\t\tvar da = Math.round(alpha * 4 / Math.PI);\n\t\t\t\t\n\t\t\t\tvar ct = new mxPoint(s.getCenterX(), s.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(s.x, s.y), cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[0], pt.x, pt.y);\n\t\t\t\tthis.sizers[0].setCursor(crs[mxUtils.mod(0 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[1], pt.x, pt.y);\n\t\t\t\tthis.sizers[1].setCursor(crs[mxUtils.mod(1 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[2], pt.x, pt.y);\n\t\t\t\tthis.sizers[2].setCursor(crs[mxUtils.mod(2 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[3], pt.x, pt.y);\n\t\t\t\tthis.sizers[3].setCursor(crs[mxUtils.mod(7 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[4], pt.x, pt.y);\n\t\t\t\tthis.sizers[4].setCursor(crs[mxUtils.mod(3 + da, crs.length)]);\n\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[5], pt.x, pt.y);\n\t\t\t\tthis.sizers[5].setCursor(crs[mxUtils.mod(6 + da, crs.length)]);\n\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[6], pt.x, pt.y);\n\t\t\t\tthis.sizers[6].setCursor(crs[mxUtils.mod(5 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[7], pt.x, pt.y);\n\t\t\t\tthis.sizers[7].setCursor(crs[mxUtils.mod(4 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[8], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse if (this.state.width >= 2 && this.state.height >= 2)\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], this.state.x, this.state.y);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.rotationShape != null)\n\t{\n\t\tvar alpha = mxUtils.toRadians((this.currentAlpha != null) ? this.currentAlpha : this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\t\n\t\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(this.getRotationHandlePosition(), cos, sin, ct);\n\n\t\tif (this.rotationShape.node != null)\n\t\t{\n\t\t\tthis.moveSizerTo(this.rotationShape, pt.x, pt.y);\n\n\t\t\t// Hides rotation handle during text editing\n\t\t\tthis.rotationShape.node.style.visibility = (this.state.view.graph.isEditing()) ? 'hidden' : '';\n\t\t}\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t}\n\t\n\tif (this.edgeHandlers != null)\n\t{\t\t\n\t\tfor (var i = 0; i < this.edgeHandlers.length; i++)\n\t\t{\n\t\t\tthis.edgeHandlers[i].redraw();\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility = (this.graph.isEditing()) ? 'hidden' : '';\n\t\t}\n\t}\n\n\tthis.updateParentHighlight();\n};\n\n/**\n * Function: getRotationHandlePosition\n * \n * Returns an <mxPoint> that defines the rotation handle position.\n */\nmxVertexHandler.prototype.getRotationHandlePosition = function()\n{\n\treturn new mxPoint(this.bounds.x + this.bounds.width / 2, this.bounds.y + this.rotationHandleVSpacing)\n};\n\n/**\n * Function: updateParentHighlight\n * \n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxVertexHandler.prototype.updateParentHighlight = function()\n{\n\t// If not destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tif (this.parentHighlight != null)\n\t\t{\n\t\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\n\t\t\tif (this.graph.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\tvar b = this.parentHighlight.bounds;\n\t\t\t\t\n\t\t\t\tif (pstate != null && (b.x != pstate.x || b.y != pstate.y ||\n\t\t\t\t\tb.width != pstate.width || b.height != pstate.height))\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight.bounds = pstate;\n\t\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.parentHighlight.destroy();\n\t\t\t\tthis.parentHighlight = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.parentHighlightEnabled)\n\t\t{\n\t\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\t\n\t\t\tif (this.graph.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\t\n\t\t\t\tif (pstate != null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxVertexHandler.prototype.drawPreview = function()\n{\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.bounds = this.bounds;\n\t\t\n\t\tif (this.preview.node.parentNode == this.graph.container)\n\t\t{\n\t\t\tthis.preview.bounds.width = Math.max(0, this.preview.bounds.width - 1);\n\t\t\tthis.preview.bounds.height = Math.max(0, this.preview.bounds.height - 1);\n\t\t}\n\t\n\t\tthis.preview.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tthis.preview.redraw();\n\t}\n\t\n\tthis.selectionBorder.bounds = this.bounds;\n\tthis.selectionBorder.redraw();\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.redraw();\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxVertexHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tthis.labelShape = null;\n\tthis.removeHint();\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].destroy();\n\t\t}\n\t\t\n\t\tthis.sizers = null;\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].destroy();\n\t\t}\n\t\t\n\t\tthis.customHandles = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler> for each selected edge.\n * \n * To enable adding/removing control points, the following code can be used:\n * \n * (code)\n * mxEdgeHandler.prototype.addEnabled = true;\n * mxEdgeHandler.prototype.removeEnabled = true;\n * (end)\n * \n * Note: This experimental feature is not recommended for production use.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxEdgeHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar dirty = this.index != null;\n\t\t\tthis.reset();\n\t\t\t\n\t\t\tif (dirty)\n\t\t\t{\n\t\t\t\tthis.graph.cellRenderer.redraw(this.state, false, state.view.isRendering());\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxEdgeHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxEdgeHandler.prototype.state = null;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> which is used for highlighting terminals.\n */\nmxEdgeHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxEdgeHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while a connection is being changed.\n */\nmxEdgeHandler.prototype.error = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the preview edge.\n */\nmxEdgeHandler.prototype.shape = null;\n\n/**\n * Variable: bends\n * \n * Holds the <mxShapes> that represent the points.\n */\nmxEdgeHandler.prototype.bends = null;\n\n/**\n * Variable: labelShape\n * \n * Holds the <mxShape> that represents the label position.\n */\nmxEdgeHandler.prototype.labelShape = null;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxEdgeHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if adding bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.addEnabled = false;\n\n/**\n * Variable: removeEnabled\n * \n * Specifies if removing bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.removeEnabled = false;\n\n/**\n * Variable: dblClickRemoveEnabled\n * \n * Specifies if removing bends by double click is enabled. Default is false.\n */\nmxEdgeHandler.prototype.dblClickRemoveEnabled = false;\n\n/**\n * Variable: mergeRemoveEnabled\n * \n * Specifies if removing bends by dropping them on other bends is enabled.\n * Default is false.\n */\nmxEdgeHandler.prototype.mergeRemoveEnabled = false;\n\n/**\n * Variable: straightRemoveEnabled\n * \n * Specifies if removing bends by creating straight segments should be enabled.\n * If enabled, this can be overridden by holding down the alt key while moving.\n * Default is false.\n */\nmxEdgeHandler.prototype.straightRemoveEnabled = false;\n\n/**\n * Variable: virtualBendsEnabled\n * \n * Specifies if virtual bends should be added in the center of each\n * segments. These bends can then be used to add new waypoints.\n * Default is false.\n */\nmxEdgeHandler.prototype.virtualBendsEnabled = false;\n\n/**\n * Variable: virtualBendOpacity\n * \n * Opacity to be used for virtual bends (see <virtualBendsEnabled>).\n * Default is 20.\n */\nmxEdgeHandler.prototype.virtualBendOpacity = 20;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxEdgeHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: preferHtml\n * \n * Specifies if bends should be added to the graph container. This is updated\n * in <init> based on whether the edge or one of its terminals has an HTML\n * label in the container.\n */\nmxEdgeHandler.prototype.preferHtml = false;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE\n * Default is true.\n */\nmxEdgeHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: snapToTerminals\n * \n * Specifies if waypoints should snap to the routing centers of terminals.\n * Default is false.\n */\nmxEdgeHandler.prototype.snapToTerminals = false;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxEdgeHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxEdgeHandler.prototype.tolerance = 0;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxEdgeHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: manageLabelHandle\n * \n * Specifies if the label handle should be moved if it intersects with another\n * handle. Uses <checkLabelHandle> for checking and moving. Default is false.\n */\nmxEdgeHandler.prototype.manageLabelHandle = false;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this edge handler.\n */\nmxEdgeHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\t\n\t// Clones the original points from the cell\n\t// and makes sure at least one point exists\n\tthis.points = [];\n\t\n\t// Uses the absolute points of the state\n\t// for the initial configuration and preview\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.shape = this.createSelectionShape(this.abspoints);\n\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\tthis.shape.init(this.graph.getView().getOverlayPane());\n\tthis.shape.pointerEvents = false;\n\tthis.shape.setCursor(mxConstants.CURSOR_MOVABLE_EDGE);\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\n\t// Updates preferHtml\n\tthis.preferHtml = this.state.text != null &&\n\t\tthis.state.text.node.parentNode == this.graph.container;\n\t\n\tif (!this.preferHtml)\n\t{\n\t\t// Checks source terminal\n\t\tvar sourceState = this.state.getVisibleTerminalState(true);\n\t\t\n\t\tif (sourceState != null)\n\t\t{\n\t\t\tthis.preferHtml = sourceState.text != null &&\n\t\t\t\tsourceState.text.node.parentNode == this.graph.container;\n\t\t}\n\t\t\n\t\tif (!this.preferHtml)\n\t\t{\n\t\t\t// Checks target terminal\n\t\t\tvar targetState = this.state.getVisibleTerminalState(false);\n\t\t\t\n\t\t\tif (targetState != null)\n\t\t\t{\n\t\t\t\tthis.preferHtml = targetState.text != null &&\n\t\t\t\ttargetState.text.node.parentNode == this.graph.container;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Adds highlight for parent group\n\tif (this.parentHighlightEnabled)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\n\t\t\tif (pstate != null)\n\t\t\t{\n\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Creates bends for the non-routed absolute points\n\t// or bends that don't correspond to points\n\tif (this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells ||\n\t\tmxGraphHandler.prototype.maxCells <= 0)\n\t{\n\t\tthis.bends = this.createBends();\n\n\t\tif (this.isVirtualBendsEnabled())\n\t\t{\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t}\n\n\t// Adds a rectangular handle for the label position\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape = this.createLabelHandleShape();\n\tthis.initBend(this.labelShape);\n\tthis.labelShape.setCursor(mxConstants.CURSOR_LABEL_HANDLE);\n\t\n\tthis.customHandles = this.createCustomHandles();\n\t\n\tthis.redraw();\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxEdgeHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: isVirtualBendsEnabled\n * \n * Returns true if virtual bends should be added. This returns true if\n * <virtualBendsEnabled> is true and the current style allows and\n * renders custom waypoints.\n */\nmxEdgeHandler.prototype.isVirtualBendsEnabled = function(evt)\n{\n\treturn this.virtualBendsEnabled && (this.state.style[mxConstants.STYLE_EDGE] == null ||\n\t\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.NONE ||\n\t\t\tthis.state.style[mxConstants.STYLE_NOEDGESTYLE] == 1)  &&\n\t\t\tmxUtils.getValue(this.state.style, mxConstants.STYLE_SHAPE, null) != 'arrow';\n};\n\n/**\n * Function: isAddPointEvent\n * \n * Returns true if the given event is a trigger to add a new point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isAddPointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isRemovePointEvent\n * \n * Returns true if the given event is a trigger to remove a point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isRemovePointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: getSelectionPoints\n * \n * Returns the list of points that defines the selection stroke.\n */\nmxEdgeHandler.prototype.getSelectionPoints = function(state)\n{\n\treturn state.absolutePoints;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createSelectionShape = function(points)\n{\n\tvar shape = new this.state.shape.constructor();\n\tshape.outline = true;\n\tshape.apply(this.state);\n\t\n\tshape.isDashed = this.isSelectionDashed();\n\tshape.stroke = this.getSelectionColor();\n\tshape.isShadow = false;\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.EDGE_SELECTION_COLOR>.\n */\nmxEdgeHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.EDGE_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.EDGE_SELECTION_STROKEWIDTH>.\n */\nmxEdgeHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.EDGE_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.EDGE_SELECTION_DASHED>.\n */\nmxEdgeHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.EDGE_SELECTION_DASHED;\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxEdgeHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: getCellAt\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.getCellAt = function(x, y)\n{\n\treturn (!this.outlineConnect) ? this.graph.getCellAt(x, y) : null;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tvar self = this; // closure\n\n\t// Only returns edges if they are connectable and never returns\n\t// the edge that is currently being modified\n\tmarker.getCell = function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(this, arguments);\n\n\t\t// Checks for cell at preview point (with grid)\n\t\tif ((cell == self.state.cell || cell == null) && self.currentPoint != null)\n\t\t{\n\t\t\tcell = self.graph.getCellAt(self.currentPoint.x, self.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar model = self.graph.getModel();\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && self.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, self.currentPoint.x, self.currentPoint.y)) ||\n\t\t\t(!self.isConnectableCell(cell)) || (cell == self.state.cell ||\n\t\t\t(cell != null && !self.graph.connectableEdges && model.isEdge(cell))) ||\n\t\t\tmodel.isAncestor(self.state.cell, cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (!this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\treturn cell;\n\t};\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = function(state)\n\t{\n\t\tvar model = self.graph.getModel();\n\t\tvar other = self.graph.view.getTerminalPort(state,\n\t\t\tself.graph.view.getState(model.getTerminal(self.state.cell,\n\t\t\t!self.isSource)), !self.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (self.isSource) ? state.cell : otherCell;\n\t\tvar target = (self.isSource) ? otherCell : state.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tself.error = self.validateConnection(source, target);\n\n\t\treturn self.error == null;\n\t};\n\t\n\treturn marker;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source, target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxEdgeHandler.prototype.validateConnection = function(source, target)\n{\n\treturn this.graph.getEdgeValidationError(this.state.cell, source, target);\n};\n\n/**\n * Function: createBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar bends = [];\n\n\tfor (var i = 0; i < this.abspoints.length; i++)\n\t{\n\t\tif (this.isHandleVisible(i))\n\t\t{\n\t\t\tvar source = i == 0;\n\t\t\tvar target = i == this.abspoints.length - 1;\n\t\t\tvar terminal = source || target;\n\n\t\t\tif (terminal || this.graph.isCellBendable(cell))\n\t\t\t{\n\t\t\t\t(mxUtils.bind(this, function(index)\n\t\t\t\t{\n\t\t\t\t\tvar bend = this.createHandleShape(index);\n\t\t\t\t\tthis.initBend(bend, mxUtils.bind(this, mxUtils.bind(this, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.dblClickRemoveEnabled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.removePoint(this.state, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t})));\n\t\n\t\t\t\t\tif (this.isHandleEnabled(i))\n\t\t\t\t\t{\n\t\t\t\t\t\tbend.setCursor((terminal) ? mxConstants.CURSOR_TERMINAL_HANDLE : mxConstants.CURSOR_BEND_HANDLE);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbends.push(bend);\n\t\t\t\t\n\t\t\t\t\tif (!terminal)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t\t\t\t\tbend.node.style.visibility = 'hidden';\n\t\t\t\t\t}\n\t\t\t\t}))(i);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: createVirtualBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createVirtualBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar last = this.abspoints[0];\n\tvar bends = [];\n\n\tif (this.graph.isCellBendable(cell))\n\t{\n\t\tfor (var i = 1; i < this.abspoints.length; i++)\n\t\t{\n\t\t\t(mxUtils.bind(this, function(bend)\n\t\t\t{\n\t\t\t\tthis.initBend(bend);\n\t\t\t\tbend.setCursor(mxConstants.CURSOR_VIRTUAL_BEND_HANDLE);\n\t\t\t\tbends.push(bend);\n\t\t\t}))(this.createHandleShape());\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: isHandleEnabled\n * \n * Creates the shape used to display the given bend.\n */\nmxEdgeHandler.prototype.isHandleEnabled = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: isHandleVisible\n * \n * Returns true if the handle at the given index is visible.\n */\nmxEdgeHandler.prototype.isHandleVisible = function(index)\n{\n\tvar source = this.state.getVisibleTerminalState(true);\n\tvar target = this.state.getVisibleTerminalState(false);\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tvar edgeStyle = (geo != null) ? this.graph.view.getEdgeStyle(this.state, geo.points, source, target) : null;\n\n\treturn edgeStyle != mxEdgeStyle.EntityRelation || index == 0 || index == this.abspoints.length - 1;\n};\n\n/**\n * Function: createHandleShape\n * \n * Creates the shape used to display the given bend. Note that the index may be\n * null for special cases, such as when called from\n * <mxElbowEdgeHandler.createVirtualBend>. Only images and rectangles should be\n * returned if support for HTML labels with not foreign objects is required.\n * Index if null for virtual handles.\n */\nmxEdgeHandler.prototype.createHandleShape = function(index)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.handleImage.width, this.handleImage.height), this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.HANDLE_SIZE;\n\t\t\n\t\tif (this.preferHtml)\n\t\t{\n\t\t\ts -= 1;\n\t\t}\n\t\t\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createLabelHandleShape\n * \n * Creates the shape used to display the the label handle.\n */\nmxEdgeHandler.prototype.createLabelHandleShape = function()\n{\n\tif (this.labelHandleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.labelHandleImage.width, this.labelHandleImage.height), this.labelHandleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.LABEL_HANDLE_SIZE;\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.LABEL_HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: initBend\n * \n * Helper method to initialize the given bend.\n * \n * Parameters:\n * \n * bend - <mxShape> that represents the bend to be initialized.\n */\nmxEdgeHandler.prototype.initBend = function(bend, dblClick)\n{\n\tif (this.preferHtml)\n\t{\n\t\tbend.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tbend.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tbend.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tbend.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(bend.node, this.graph, this.state,\n\t\t\tnull, null, null, dblClick);\n\t\n\t// Fixes lost event tracking for images in quirks / IE8 standards\n\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t{\n\t\tmxEvent.addListener(bend.node, 'dragstart', function(evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t}\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tbend.node.setAttribute('pointer-events', 'none');\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event.\n */\nmxEdgeHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\tvar minDistSq = null;\n\tvar result = null;\n\n\tfunction checkShape(shape)\n\t{\n\t\tif (shape != null && shape.node.style.display != 'none' && shape.node.style.visibility != 'hidden' &&\n\t\t\t(me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit))))\n\t\t{\n\t\t\tvar dx = me.getGraphX() - shape.bounds.getCenterX();\n\t\t\tvar dy = me.getGraphY() - shape.bounds.getCenterY();\n\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\n\t\t\tif (minDistSq == null || tmp <= minDistSq)\n\t\t\t{\n\t\t\t\tminDistSq = tmp;\n\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (me.isSource(this.state.text) || checkShape(this.labelShape))\n\t{\n\t\tresult = mxEvent.LABEL_HANDLE;\n\t}\n\t\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.bends[i]))\n\t\t\t{\n\t\t\t\tresult = i;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null && this.isAddVirtualBendEvent(me))\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.virtualBends[i]))\n\t\t\t{\n\t\t\t\tresult = mxEvent.VIRTUAL_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isAddVirtualBendEvent\n * \n * Returns true if the given event allows virtual bends to be added. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isAddVirtualBendEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by checking if a special element of the handler\n * was clicked, in which case the index parameter is non-null. The\n * indices may be one of <LABEL_HANDLE> or the number of the respective\n * control point. The source and target points are used for reconnecting\n * the edge.\n */\nmxEdgeHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar handle = this.getHandleForEvent(me);\n\t\n\tif (this.bends != null && this.bends[handle] != null)\n\t{\n\t\tvar b = this.bends[handle].bounds;\n\t\tthis.snapPoint = new mxPoint(b.getCenterX(), b.getCenterY());\n\t}\n\t\n\tif (this.addEnabled && handle == null && this.isAddPointEvent(me.getEvent()))\n\t{\n\t\tthis.addPoint(this.state, me.getEvent());\n\t\tme.consume();\n\t}\n\telse if (handle != null && !me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tif (this.removeEnabled && this.isRemovePointEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.removePoint(this.state, handle);\n\t\t}\n\t\telse if (handle != mxEvent.LABEL_HANDLE || this.graph.isLabelMovable(me.getCell()))\n\t\t{\n\t\t\tif (handle <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.virtualBends[mxEvent.VIRTUAL_HANDLE - handle].node, 100);\n\t\t\t}\n\t\t\t\n\t\t\tthis.start(me.getX(), me.getY(), handle);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxEdgeHandler.prototype.start = function(x, y, index)\n{\n\tthis.startX = x;\n\tthis.startY = y;\n\n\tthis.isSource = (this.bends == null) ? false : index == 0;\n\tthis.isTarget = (this.bends == null) ? false : index == this.bends.length - 1;\n\tthis.isLabel = index == mxEvent.LABEL_HANDLE;\n\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tvar cell = this.state.cell;\n\t\tvar terminal = this.graph.model.getTerminal(cell, this.isSource);\n\n\t\tif ((terminal == null && this.graph.isTerminalPointMovable(cell, this.isSource)) ||\n\t\t\t(terminal != null && this.graph.isCellDisconnectable(cell, terminal, this.isSource)))\n\t\t{\n\t\t\tthis.index = index;\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.index = index;\n\t}\n\t\n\t// Hides other custom handles\n\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t{\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t\t{\n\t\t\t\tif (i != mxEvent.CUSTOM_HANDLE - this.index)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[i].setVisible(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: clonePreviewState\n * \n * Returns a clone of the current preview state for the given point and terminal.\n */\nmxEdgeHandler.prototype.clonePreviewState = function(point, terminal)\n{\n\treturn this.state.clone();\n};\n\n/**\n * Function: getSnapToTerminalTolerance\n * \n * Returns the tolerance for the guides. Default value is\n * gridSize * scale / 2.\n */\nmxEdgeHandler.prototype.getSnapToTerminalTolerance = function()\n{\n\treturn this.graph.gridSize * this.graph.view.scale / 2;\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxEdgeHandler.prototype.updateHint = function(me, point) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxEdgeHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxEdgeHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: isSnapToTerminalsEvent\n * \n * Returns true if <snapToTerminals> is true and if alt is not pressed.\n */\nmxEdgeHandler.prototype.isSnapToTerminalsEvent = function(me)\n{\n\treturn this.snapToTerminals && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns the point for the given event.\n */\nmxEdgeHandler.prototype.getPointForEvent = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar scale = view.scale;\n\tvar point = new mxPoint(this.roundLength(me.getGraphX() / scale) * scale,\n\t\tthis.roundLength(me.getGraphY() / scale) * scale);\n\t\n\tvar tt = this.getSnapToTerminalTolerance();\n\tvar overrideX = false;\n\tvar overrideY = false;\t\t\n\t\n\tif (tt > 0 && this.isSnapToTerminalsEvent(me))\n\t{\n\t\tfunction snapToPoint(pt)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar x = pt.x;\n\n\t\t\t\tif (Math.abs(point.x - x) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = x;\n\t\t\t\t\toverrideX = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar y = pt.y;\n\n\t\t\t\tif (Math.abs(point.y - y) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = y;\n\t\t\t\t\toverrideY = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Temporary function\n\t\tfunction snapToTerminal(terminal)\n\t\t{\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, new mxPoint(view.getRoutingCenterX(terminal),\n\t\t\t\t\t\tview.getRoutingCenterY(terminal)));\n\t\t\t}\n\t\t};\n\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(true));\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(false));\n\n\t\tif (this.state.absolutePoints != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, this.state.absolutePoints[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar tr = view.translate;\n\t\t\n\t\tif (!overrideX)\n\t\t{\n\t\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\t}\n\t\t\n\t\tif (!overrideY)\n\t\t{\n\t\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getPreviewTerminalState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.getPreviewTerminalState = function(me)\n{\n\tthis.constraintHandler.update(me, this.isSource, true, me.isSource(this.marker.highlight.shape) ? null : this.currentPoint);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\t\t\n\t\tvar model = this.graph.getModel();\n\t\tvar other = this.graph.view.getTerminalPort(this.state,\n\t\t\t\tthis.graph.view.getState(model.getTerminal(this.state.cell,\n\t\t\t!this.isSource)), !this.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (this.isSource) ? this.constraintHandler.currentFocus.cell : otherCell;\n\t\tvar target = (this.isSource) ? otherCell : this.constraintHandler.currentFocus.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tthis.error = this.validateConnection(source, target);\n\t\tvar result = null;\n\t\t\n\t\tif (this.error == null)\n\t\t{\n\t\t\tresult = this.constraintHandler.currentFocus;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\telse if (!this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t{\n\t\tthis.marker.process(me);\n\t\tvar state = this.marker.getValidState();\n\t\t\n\t\tif (state != null && this.graph.isCellLocked(state.cell))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t}\n\t\t\n\t\treturn this.marker.getValidState();\n\t}\n\telse\n\t{\n\t\tthis.marker.reset();\n\t\t\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n * \n * Parameters:\n * \n * pt - <mxPoint> that contains the current pointer position.\n * me - Optional <mxMouseEvent> that contains the current event.\n */\nmxEdgeHandler.prototype.getPreviewPoints = function(pt, me)\n{\n\tvar geometry = this.graph.getCellGeometry(this.state.cell);\n\tvar points = (geometry.points != null) ? geometry.points.slice() : null;\n\tvar point = new mxPoint(pt.x, pt.y);\n\tvar result = null;\n\t\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tthis.convertPoint(point, false);\n\t\t\n\t\tif (points == null)\n\t\t{\n\t\t\tpoints = [point];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adds point from virtual bend\n\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 0, point);\n\t\t\t}\n\n\t\t\t// Removes point if dragged on terminal point\n\t\t\tif (!this.isSource && !this.isTarget)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (i != this.index)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar bend = this.bends[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bend != null && mxUtils.contains(bend.bounds, pt.x, pt.y))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(this.index - 1, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Removes point if user tries to straighten a segment\n\t\t\t\tif (result == null && this.straightRemoveEnabled && (me == null || !mxEvent.isAltDown(me.getEvent())))\n\t\t\t\t{\n\t\t\t\t\tvar tol = this.graph.tolerance * this.graph.tolerance;\n\t\t\t\t\tvar abs = this.state.absolutePoints.slice();\n\t\t\t\t\tabs[this.index] = pt;\n\t\t\t\t\t\n\t\t\t\t\t// Handes special case where removing waypoint affects tolerance (flickering)\n\t\t\t\t\tvar src = this.state.getVisibleTerminalState(true);\n\t\t\t\t\t\n\t\t\t\t\tif (src != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, src, true);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(src, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[0] = new mxPoint(src.view.getRoutingCenterX(src), src.view.getRoutingCenterY(src));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar trg = this.state.getVisibleTerminalState(false);\n\t\t\t\t\t\n\t\t\t\t\tif (trg != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, trg, false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(trg, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[abs.length - 1] = new mxPoint(trg.view.getRoutingCenterX(trg), trg.view.getRoutingCenterY(trg));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction checkRemove(idx, tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (idx > 0 && idx < abs.length - 1 &&\n\t\t\t\t\t\t\tmxUtils.ptSegDistSq(abs[idx - 1].x, abs[idx - 1].y,\n\t\t\t\t\t\t\t\tabs[idx + 1].x, abs[idx + 1].y, tmp.x, tmp.y) < tol)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpoints.splice(idx - 1, 1);\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// LATER: Check if other points can be removed if a segment is made straight\n\t\t\t\t\tcheckRemove(this.index, pt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Updates existing point\n\t\t\tif (result == null && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints[this.index - 1] = point;\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.graph.resetEdgesOnConnect)\n\t{\n\t\tpoints = null;\n\t}\n\t\n\treturn (result != null) ? result : points;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxEdgeHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updatePreviewState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.updatePreviewState = function(edge, point, terminalState, me, outline)\n{\n\t// Computes the points for the edge style and terminals\n\tvar sourceState = (this.isSource) ? terminalState : this.state.getVisibleTerminalState(true);\n\tvar targetState = (this.isTarget) ? terminalState : this.state.getVisibleTerminalState(false);\n\t\n\tvar sourceConstraint = this.graph.getConnectionConstraint(edge, sourceState, true);\n\tvar targetConstraint = this.graph.getConnectionConstraint(edge, targetState, false);\n\n\tvar constraint = this.constraintHandler.currentConstraint;\n\n\tif (constraint == null && outline)\n\t{\n\t\tif (terminalState != null)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tconstraint = this.graph.getOutlineConstraint(point, terminalState, me);\n\t\t\tthis.constraintHandler.setFocus(me, terminalState, this.isSource);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\t}\n\t\n\tif (this.outlineConnect && this.marker.highlight != null && this.marker.highlight.shape != null)\n\t{\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (outline) ? mxConstants.OUTLINE_HIGHLIGHT_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t\telse if (this.marker.hasValidState())\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (this.marker.getValidState() == me.getState()) ?\n\t\t\t\tmxConstants.DEFAULT_VALID_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t}\n\t\n\tif (this.isSource)\n\t{\n\t\tsourceConstraint = constraint;\n\t}\n\telse if (this.isTarget)\n\t{\n\t\ttargetConstraint = constraint;\n\t}\n\t\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tif (constraint != null && constraint.point != null)\n\t\t{\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t}\n\t}\n\t\n\tedge.setVisibleTerminalState(sourceState, true);\n\tedge.setVisibleTerminalState(targetState, false);\n\t\n\tif (!this.isSource || sourceState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, sourceState, true, sourceConstraint);\n\t}\n\t\n\tif (!this.isTarget || targetState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, targetState, false, targetConstraint);\n\t}\n\t\n\tif ((this.isSource || this.isTarget) && terminalState == null)\n\t{\n\t\tedge.setAbsoluteTerminalPoint(point, this.isSource);\n\n\t\tif (this.marker.getMarkedState() == null)\n\t\t{\n\t\t\tthis.error = (this.graph.allowDanglingEdges) ? null : '';\n\t\t}\n\t}\n\t\n\tedge.view.updatePoints(edge, this.points, sourceState, targetState);\n\tedge.view.updateFloatingTerminalPoints(edge, sourceState, targetState);\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxEdgeHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tthis.currentPoint = this.getPointForEvent(me);\n\t\tthis.error = null;\n\t\t\n\t\t// Uses the current point from the constraint handler if available\n\t\tif (!this.graph.isIgnoreTerminalEvent(me.getEvent()) && mxEvent.isShiftDown(me.getEvent()) && this.snapPoint != null)\n\t\t{\n\t\t\tif (Math.abs(this.snapPoint.x - this.currentPoint.x) < Math.abs(this.snapPoint.y - this.currentPoint.y))\n\t\t\t{\n\t\t\t\tthis.currentPoint.x = this.snapPoint.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.currentPoint.y = this.snapPoint.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t{\n\t\t\tif (this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t}\n\t\t}\n\t\telse if (this.isLabel)\n\t\t{\n\t\t\tthis.label.x = this.currentPoint.x;\n\t\t\tthis.label.y = this.currentPoint.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.points = this.getPreviewPoints(this.currentPoint, me);\n\t\t\tvar terminalState = (this.isSource || this.isTarget) ? this.getPreviewTerminalState(me) : null;\n\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tthis.currentPoint = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.outlineConnect)\n\t\t\t{\n\t\t\t\t// Need to check outline before cloning terminal state\n\t\t\t\tvar outline = (this.isSource || this.isTarget) ? this.isOutlineConnectEvent(me) : false\n\t\t\t\t\t\t\n\t\t\t\tif (outline)\n\t\t\t\t{\n\t\t\t\t\tterminalState = this.marker.highlight.state;\n\t\t\t\t}\n\t\t\t\telse if (terminalState != null && terminalState != me.getState() && this.marker.highlight.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t\tterminalState = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (terminalState != null && this.graph.isCellLocked(terminalState.cell))\n\t\t\t{\n\t\t\t\tterminalState = null;\n\t\t\t\tthis.marker.reset();\n\t\t\t}\n\t\t\t\n\t\t\tvar clone = this.clonePreviewState(this.currentPoint, (terminalState != null) ? terminalState.cell : null);\n\t\t\tthis.updatePreviewState(clone, this.currentPoint, terminalState, me, outline);\n\n\t\t\t// Sets the color of the preview to valid or invalid, updates the\n\t\t\t// points of the preview and redraws\n\t\t\tvar color = (this.error == null) ? this.marker.validColor : this.marker.invalidColor;\n\t\t\tthis.setPreviewColor(color);\n\t\t\tthis.abspoints = clone.absolutePoints;\n\t\t\tthis.active = true;\n\t\t}\n\n\t\t// This should go before calling isOutlineConnectEvent above. As a workaround\n\t\t// we add an offset of gridSize to the hint to avoid problem with hit detection\n\t\t// in highlight.isHighlightAt (which uses comonentFromPoint)\n\t\tthis.updateHint(me, this.currentPoint);\n\t\tthis.drawPreview();\n\t\tmxEvent.consume(me.getEvent());\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (mxClient.IS_IE && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event to applying the previewed changes on the edge by\n * using <moveLabel>, <connect> or <changePoints>.\n */\nmxEdgeHandler.prototype.mouseUp = function(sender, me)\n{\n\t// Workaround for wrong event source in Webkit\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tvar edge = this.state.cell;\n\t\tvar index = this.index;\n\t\tthis.index = null;\n\t\t\n\t\t// Ignores event if mouse has not been moved\n\t\tif (me.getX() != this.startX || me.getY() != this.startY)\n\t\t{\n\t\t\tvar clone = !this.graph.isIgnoreTerminalEvent(me.getEvent()) && this.graph.isCloneEvent(me.getEvent()) &&\n\t\t\t\tthis.cloneEnabled && this.graph.isCellsCloneable();\n\t\t\t\n\t\t\t// Displays the reason for not carriying out the change\n\t\t\t// if there is an error message with non-zero length\n\t\t\tif (this.error != null)\n\t\t\t{\n\t\t\t\tif (this.error.length > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (index <= mxEvent.CUSTOM_HANDLE && index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].execute();\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.isLabel)\n\t\t\t{\n\t\t\t\tthis.moveLabel(this.state, this.label.x, this.label.y);\n\t\t\t}\n\t\t\telse if (this.isSource || this.isTarget)\n\t\t\t{\n\t\t\t\tvar terminal = null;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tterminal = this.constraintHandler.currentFocus.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal == null && this.marker.hasValidState() && this.marker.highlight != null &&\n\t\t\t\t\tthis.marker.highlight.shape != null &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'transparent' &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'white')\n\t\t\t\t{\n\t\t\t\t\tterminal = this.marker.validState.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\tvar parent = model.getParent(edge);\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// Clones and adds the cell\n\t\t\t\t\t\tif (clone)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\t\t\t\tvar clone = this.graph.cloneCell(edge);\n\t\t\t\t\t\t\tmodel.add(parent, clone, model.getChildCount(parent));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\tmodel.setGeometry(clone, geo);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar other = model.getTerminal(edge, !this.isSource);\n\t\t\t\t\t\t\tthis.graph.connectCell(clone, other, !this.isSource);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tedge = clone;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tedge = this.connect(edge, terminal, this.isSource, clone, me);\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.graph.isAllowDanglingEdges())\n\t\t\t\t{\n\t\t\t\t\tvar pt = this.abspoints[(this.isSource) ? 0 : this.abspoints.length - 1];\n\t\t\t\t\tpt.x = this.roundLength(pt.x / this.graph.view.scale - this.graph.view.translate.x);\n\t\t\t\t\tpt.y = this.roundLength(pt.y / this.graph.view.scale - this.graph.view.translate.y);\n\n\t\t\t\t\tvar pstate = this.graph.getView().getState(\n\t\t\t\t\t\t\tthis.graph.getModel().getParent(edge));\n\t\t\t\t\t\t\t\n\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt.x -= pstate.origin.x;\n\t\t\t\t\t\tpt.y -= pstate.origin.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t// Destroys and recreates this handler\n\t\t\t\t\tedge = this.changeTerminalPoint(edge, pt, this.isSource, clone);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.active)\n\t\t\t{\n\t\t\t\tedge = this.changePoints(edge, this.points, clone);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.graph.getView().invalidate(this.state.cell);\n\t\t\t\tthis.graph.getView().validate(this.state.cell);\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Resets the preview color the state of the handler if this\n\t\t// handler has not been recreated\n\t\tif (this.marker != null)\n\t\t{\n\t\t\tthis.reset();\n\n\t\t\t// Updates the selection if the edge has been cloned\n\t\t\tif (edge != this.state.cell)\n\t\t\t{\n\t\t\t\tthis.graph.setSelectionCell(edge);\n\t\t\t}\n\t\t}\n\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxEdgeHandler.prototype.reset = function()\n{\n\tif (this.active)\n\t{\n\t\tthis.refresh();\n\t}\n\t\n\tthis.error = null;\n\tthis.index = null;\n\tthis.label = null;\n\tthis.points = null;\n\tthis.snapPoint = null;\n\tthis.isLabel = false;\n\tthis.isSource = false;\n\tthis.isTarget = false;\n\tthis.active = false;\n\t\n\tif (this.livePreview && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.reset();\n\t}\n\t\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].reset();\n\t\t}\n\t}\n\n\tthis.setPreviewColor(mxConstants.EDGE_SELECTION_COLOR);\n\tthis.removeHint();\n\tthis.redraw();\n};\n\n/**\n * Function: setPreviewColor\n * \n * Sets the color of the preview to the given value.\n */\nmxEdgeHandler.prototype.setPreviewColor = function(color)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid. Returns the given, modified\n * point instance.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x);\n\tpoint.y = Math.round(point.y / scale - tr.y);\n\n\tvar pstate = this.graph.getView().getState(\n\t\tthis.graph.getModel().getParent(this.state.cell));\n\n\tif (pstate != null)\n\t{\n\t\tpoint.x -= pstate.origin.x;\n\t\tpoint.y -= pstate.origin.y;\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: moveLabel\n * \n * Changes the coordinates for the label of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * x - Integer that specifies the x-coordinate of the new location.\n * y - Integer that specifies the y-coordinate of the new location.\n */\nmxEdgeHandler.prototype.moveLabel = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tgeometry = geometry.clone();\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\t// Resets the relative location stored inside the geometry\n\t\t\tvar pt = this.graph.getView().getRelativePoint(edgeState, x, y);\n\t\t\tgeometry.x = Math.round(pt.x * 10000) / 10000;\n\t\t\tgeometry.y = Math.round(pt.y);\n\t\t\t\n\t\t\t// Resets the offset inside the geometry to find the offset\n\t\t\t// from the resulting point\n\t\t\tgeometry.offset = new mxPoint(0, 0);\n\t\t\tvar pt = this.graph.view.getPoint(edgeState, geometry);\n\t\t\tgeometry.offset = new mxPoint(Math.round((x - pt.x) / scale), Math.round((y - pt.y) / scale));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar points = edgeState.absolutePoints;\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar cx = p0.x + (pe.x - p0.x) / 2;\n\t\t\t\tvar cy = p0.y + (pe.y - p0.y) / 2;\n\t\t\t\t\n\t\t\t\tgeometry.offset = new mxPoint(Math.round((x - cx) / scale), Math.round((y - cy) / scale));\n\t\t\t\tgeometry.x = 0;\n\t\t\t\tgeometry.y = 0;\n\t\t\t}\n\t\t}\n\n\t\tmodel.setGeometry(edgeState.cell, geometry);\n\t}\n};\n\n/**\n * Function: connect\n * \n * Changes the terminal or terminal point of the given edge in the graph\n * model.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be reconnected.\n * terminal - <mxCell> that represents the new terminal.\n * isSource - Boolean indicating if the new terminal is the source or\n * target terminal.\n * isClone - Boolean indicating if the new connection should be a clone of\n * the old edge.\n * me - <mxMouseEvent> that contains the mouse up event.\n */\nmxEdgeHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(edge);\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar constraint = this.constraintHandler.currentConstraint;\n\t\t\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\n\t\tthis.graph.connectCell(edge, terminal, isSource, constraint);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changeTerminalPoint\n * \n * Changes the terminal point of the given edge.\n */\nmxEdgeHandler.prototype.changeTerminalPoint = function(edge, point, isSource, clone)\n{\n\tvar model = this.graph.getModel();\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar terminal = model.getTerminal(edge, !isSource);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, terminal, !isSource);\n\t\t}\n\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.setTerminalPoint(point, isSource);\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t\tthis.graph.connectCell(edge, null, isSource, new mxConnectionConstraint());\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changePoints\n * \n * Changes the control points of the given edge in the graph model.\n */\nmxEdgeHandler.prototype.changePoints = function(edge, points, clone)\n{\n\tvar model = this.graph.getModel();\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar source = model.getTerminal(edge, true);\n\t\t\tvar target = model.getTerminal(edge, false);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, source, true);\n\t\t\tmodel.setTerminal(edge, target, false);\n\t\t}\n\t\t\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points = points;\n\t\t\t\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: addPoint\n * \n * Adds a control point for the given state and event.\n */\nmxEdgeHandler.prototype.addPoint = function(state, evt)\n{\n\tvar pt = mxUtils.convertPoint(this.graph.container, mxEvent.getClientX(evt),\n\t\t\tmxEvent.getClientY(evt));\n\tvar gridEnabled = this.graph.isGridEnabledEvent(evt);\n\tthis.convertPoint(pt, gridEnabled);\n\tthis.addPointAt(state, pt.x, pt.y);\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: addPointAt\n * \n * Adds a control point at the given point.\n */\nmxEdgeHandler.prototype.addPointAt = function(state, x, y)\n{\n\tvar geo = this.graph.getCellGeometry(state.cell);\n\tvar pt = new mxPoint(x, y);\n\t\n\tif (geo != null)\n\t{\n\t\tgeo = geo.clone();\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar offset = new mxPoint(t.x * s, t.y * s);\n\t\t\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pState = this.graph.view.getState(parent);\n\t\t\toffset = new mxPoint(pState.x, pState.y);\n\t\t}\n\t\t\n\t\tvar index = mxUtils.findNearestSegment(state, pt.x * s + offset.x, pt.y * s + offset.y);\n\n\t\tif (geo.points == null)\n\t\t{\n\t\t\tgeo.points = [pt];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.points.splice(index, 0, pt);\n\t\t}\n\t\t\n\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\tthis.refresh();\t\n\t\tthis.redraw();\n\t}\n};\n\n/**\n * Function: removePoint\n * \n * Removes the control point at the given index from the given state.\n */\nmxEdgeHandler.prototype.removePoint = function(state, index)\n{\n\tif (index > 0 && index < this.abspoints.length - 1)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\t\t\n\t\tif (geo != null && geo.points != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points.splice(index - 1, 1);\n\t\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\t\tthis.refresh();\n\t\t\tthis.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleFillColor\n * \n * Returns the fillcolor for the handle at the given index.\n */\nmxEdgeHandler.prototype.getHandleFillColor = function(index)\n{\n\tvar isSource = index == 0;\n\tvar cell = this.state.cell;\n\tvar terminal = this.graph.getModel().getTerminal(cell, isSource);\n\tvar color = mxConstants.HANDLE_FILLCOLOR;\n\t\n\tif ((terminal != null && !this.graph.isCellDisconnectable(cell, terminal, isSource)) ||\n\t\t(terminal == null && !this.graph.isTerminalPointMovable(cell, isSource)))\n\t{\n\t\tcolor = mxConstants.LOCKED_HANDLE_FILLCOLOR;\n\t}\n\telse if (terminal != null && this.graph.isCellDisconnectable(cell, terminal, isSource))\n\t{\n\t\tcolor = mxConstants.CONNECT_HANDLE_FILLCOLOR;\n\t}\n\t\n\treturn color;\n};\n\n/**\n * Function: redraw\n * \n * Redraws the preview, and the bends- and label control points.\n */\nmxEdgeHandler.prototype.redraw = function(ignoreHandles)\n{\n\tthis.abspoints = this.state.absolutePoints.slice();\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = g.points;\n\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tif (pts != null)\n\t\t{\n\t\t\tif (this.points == null)\n\t\t\t{\n\t\t\t\tthis.points = [];\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i] != null && this.abspoints[i] != null)\n\t\t\t\t{\n\t\t\t\t\tthis.points[i - 1] = pts[i - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.drawPreview();\n\t\n\tif (!ignoreHandles)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles.\n */\nmxEdgeHandler.prototype.redrawHandles = function()\n{\n\tvar cell = this.state.cell;\n\n\t// Updates the handle for the label position\n\tvar b = this.labelShape.bounds;\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape.bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\n\t// Shows or hides the label handle depending on the label\n\tvar lab = this.graph.getLabel(cell);\n\tthis.labelShape.visible = (lab != null && lab.length > 0 && this.graph.isLabelMovable(cell));\n\t\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tvar n = this.abspoints.length - 1;\n\t\t\n\t\tvar p0 = this.abspoints[0];\n\t\tvar x0 = p0.x;\n\t\tvar y0 = p0.y;\n\t\t\n\t\tb = this.bends[0].bounds;\n\t\tthis.bends[0].bounds = new mxRectangle(Math.floor(x0 - b.width / 2),\n\t\t\t\tMath.floor(y0 - b.height / 2), b.width, b.height);\n\t\tthis.bends[0].fill = this.getHandleFillColor(0);\n\t\tthis.bends[0].redraw();\n\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[0].bounds);\n\t\t}\n\t\t\t\t\n\t\tvar pe = this.abspoints[n];\n\t\tvar xn = pe.x;\n\t\tvar yn = pe.y;\n\t\t\n\t\tvar bn = this.bends.length - 1;\n\t\tb = this.bends[bn].bounds;\n\t\tthis.bends[bn].bounds = new mxRectangle(Math.floor(xn - b.width / 2),\n\t\t\t\tMath.floor(yn - b.height / 2), b.width, b.height);\n\t\tthis.bends[bn].fill = this.getHandleFillColor(bn);\n\t\tthis.bends[bn].redraw();\n\t\t\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[bn].bounds);\n\t\t}\n\t\t\n\t\tthis.redrawInnerBends(p0, pe);\n\t}\n\n\tif (this.abspoints != null && this.virtualBends != null && this.virtualBends.length > 0)\n\t{\n\t\tvar last = this.abspoints[0];\n\t\t\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (this.virtualBends[i] != null && this.abspoints[i + 1] != null)\n\t\t\t{\n\t\t\t\tvar pt = this.abspoints[i + 1];\n\t\t\t\tvar b = this.virtualBends[i];\n\t\t\t\tvar x = last.x + (pt.x - last.x) / 2;\n\t\t\t\tvar y = last.y + (pt.y - last.y) / 2;\n\t\t\t\tb.bounds = new mxRectangle(Math.floor(x - b.bounds.width / 2),\n\t\t\t\t\t\tMath.floor(y - b.bounds.height / 2), b.bounds.width, b.bounds.height);\n\t\t\t\tb.redraw();\n\t\t\t\tmxUtils.setOpacity(b.node, this.virtualBendOpacity);\n\t\t\t\tlast = pt;\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(b.bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.redraw();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxEdgeHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tthis.bends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tthis.virtualBends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.node.style.display = (visible) ? '' : 'none';\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t{\n\t\tif (this.bends[i] != null)\n\t\t{\n\t\t\tif (this.abspoints[i] != null)\n\t\t\t{\n\t\t\t\tvar x = this.abspoints[i].x;\n\t\t\t\tvar y = this.abspoints[i].y;\n\t\t\t\t\n\t\t\t\tvar b = this.bends[i].bounds;\n\t\t\t\tthis.bends[i].node.style.visibility = 'visible';\n\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - b.width / 2),\n\t\t\t\t\t\tMath.round(y - b.height / 2), b.width, b.height);\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(this.bends[i].bounds);\n\t\t\t\t}\n\t\t\t\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(this.bends[i].bounds, this.labelShape.bounds))\n\t\t\t\t{\n\t\t\t\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - w / 2), Math.round(y - h / 2), w, h);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.bends[i].redraw();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.bends[i].destroy();\n\t\t\t\tthis.bends[i] = null;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: checkLabelHandle\n * \n * Checks if the label handle intersects the given bounds and moves it if it\n * intersects.\n */\nmxEdgeHandler.prototype.checkLabelHandle = function(b)\n{\n\tif (this.labelShape != null)\n\t{\n\t\tvar b2 = this.labelShape.bounds;\n\t\t\n\t\tif (mxUtils.intersects(b, b2))\n\t\t{\n\t\t\tif (b.getCenterY() < b2.getCenterY())\n\t\t\t{\n\t\t\t\tb2.y = b.y + b.height;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb2.y = b.y - b2.height;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxEdgeHandler.prototype.drawPreview = function()\n{\n\tif (this.isLabel)\n\t{\n\t\tvar b = this.labelShape.bounds;\n\t\tvar bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\t\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\t\tthis.labelShape.bounds = bounds;\n\t\tthis.labelShape.redraw();\n\t}\n\telse if (this.shape != null)\n\t{\n\t\tthis.shape.apply(this.state);\n\t\tthis.shape.points = this.abspoints;\n\t\tthis.shape.scale = this.state.view.scale;\n\t\tthis.shape.isDashed = this.isSelectionDashed();\n\t\tthis.shape.stroke = this.getSelectionColor();\n\t\tthis.shape.strokewidth = this.getSelectionStrokeWidth() / this.shape.scale / this.shape.scale;\n\t\tthis.shape.isShadow = false;\n\t\tthis.shape.redraw();\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.redraw();\n\t}\n};\n\n/**\n * Function: refresh\n * \n * Refreshes the bends of this handler.\n */\nmxEdgeHandler.prototype.refresh = function()\n{\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.points = [];\n\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.points = this.abspoints;\n\t}\n\t\n\tif (this.bends != null)\n\t{\n\t\tthis.destroyBends(this.bends);\n\t\tthis.bends = this.createBends();\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tthis.destroyBends(this.virtualBends);\n\t\tthis.virtualBends = this.createVirtualBends();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tthis.destroyBends(this.customHandles);\n\t\tthis.customHandles = this.createCustomHandles();\n\t}\n\t\n\t// Puts label node on top of bends\n\tif (this.labelShape != null && this.labelShape.node != null && this.labelShape.node.parentNode != null)\n\t{\n\t\tthis.labelShape.node.parentNode.appendChild(this.labelShape.node);\n\t}\n};\n\n/**\n * Function: destroyBends\n * \n * Destroys all elements in <bends>.\n */\nmxEdgeHandler.prototype.destroyBends = function(bends)\n{\n\tif (bends != null)\n\t{\n\t\tfor (var i = 0; i < bends.length; i++)\n\t\t{\n\t\t\tif (bends[i] != null)\n\t\t\t{\n\t\t\t\tbends[i].destroy();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called as handlers are destroyed automatically\n * when the corresponding cell is deselected.\n */\nmxEdgeHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.destroy();\n\t\tthis.labelShape = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\t\n\tthis.destroyBends(this.virtualBends);\n\tthis.virtualBends = null;\n\t\n\tthis.destroyBends(this.customHandles);\n\tthis.customHandles = null;\n\n\tthis.destroyBends(this.bends);\n\tthis.bends = null;\n\t\n\tthis.removeHint();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxElbowEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler>. It extends <mxEdgeHandler>.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be modified.\n */\nfunction mxElbowEdgeHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxElbowEdgeHandler, mxEdgeHandler);\n\n/**\n * Specifies if a double click on the middle handle should call\n * <mxGraph.flipEdge>. Default is true.\n */\nmxElbowEdgeHandler.prototype.flipEnabled = true;\n\n/**\n * Variable: doubleClickOrientationResource\n * \n * Specifies the resource key for the tooltip to be displayed on the single\n * control point for routed edges. If the resource for this key does not\n * exist then the value is used as the error message. Default is\n * 'doubleClickOrientation'.\n */\nmxElbowEdgeHandler.prototype.doubleClickOrientationResource =\n\t(mxClient.language != 'none') ? 'doubleClickOrientation' : '';\n\n/**\n * Function: createBends\n * \n * Overrides <mxEdgeHandler.createBends> to create custom bends.\n */\n mxElbowEdgeHandler.prototype.createBends = function()\n {\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\t// Virtual\n\tbends.push(this.createVirtualBend(mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt) && this.flipEnabled)\n\t\t{\n\t\t\tthis.graph.flipEdge(this.state.cell, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t})));\n\t\n\tthis.points.push(new mxPoint(0,0));\n\n\t// Target\n\tbend = this.createHandleShape(2);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\t\n\treturn bends;\n };\n\n/**\n * Function: createVirtualBend\n * \n * Creates a virtual bend that supports double clicking and calls\n * <mxGraph.flipEdge>.\n */\nmxElbowEdgeHandler.prototype.createVirtualBend = function(dblClickHandler)\n{\n\tvar bend = this.createHandleShape();\n\tthis.initBend(bend, dblClickHandler);\n\n\tbend.setCursor(this.getCursorForBend());\n\n\tif (!this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tbend.node.style.display = 'none';\n\t}\n\n\treturn bend;\n};\n\n/**\n * Function: getCursorForBend\n * \n * Returns the cursor to be used for the bend.\n */\nmxElbowEdgeHandler.prototype.getCursorForBend = function()\n{\n\treturn (this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.TopToBottom ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_TOPTOBOTTOM ||\n\t\t((this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.ElbowConnector ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_ELBOW)&&\n\t\tthis.state.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL)) ? \n\t\t'row-resize' : 'col-resize';\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns the tooltip for the given node.\n */\nmxElbowEdgeHandler.prototype.getTooltipForNode = function(node)\n{\n\tvar tip = null;\n\t\n\tif (this.bends != null && this.bends[1] != null && (node == this.bends[1].node ||\n\t\tnode.parentNode == this.bends[1].node))\n\t{\n\t\ttip = this.doubleClickOrientationResource;\n\t\ttip = mxResources.get(tip) || tip; // translate\n\t}\n\n\treturn tip;\n};\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxElbowEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\tvar origin = this.state.origin;\n\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x - origin.x);\n\tpoint.y = Math.round(point.y / scale - tr.y - origin.y);\n\t\n\treturn point;\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxElbowEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = this.state.absolutePoints;\n\tvar pt = null;\n\n\t// Keeps the virtual bend on the edge shape\n\tif (pts.length > 1)\n\t{\n\t\tp0 = pts[1];\n\t\tpe = pts[pts.length - 2];\n\t}\n\telse if (g.points != null && g.points.length > 0)\n\t{\n\t\tpt = pts[0];\n\t}\n\t\n\tif (pt == null)\n\t{\n\t\tpt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint(this.graph.getView().scale * (pt.x + this.graph.getView().translate.x + this.state.origin.x),\n\t\t\t\tthis.graph.getView().scale * (pt.y + this.graph.getView().translate.y + this.state.origin.y));\n\t}\n\n\t// Makes handle slightly bigger if the yellow  label handle\n\t// exists and intersects this green handle\n\tvar b = this.bends[1].bounds;\n\tvar w = b.width;\n\tvar h = b.height;\n\tvar bounds = new mxRectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);\n\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(bounds);\n\t}\n\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(bounds, this.labelShape.bounds))\n\t{\n\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\tbounds = new mxRectangle(Math.floor(pt.x - w / 2), Math.floor(pt.y - h / 2), w, h);\n\t}\n\n\tthis.bends[1].bounds = bounds;\n\tthis.bends[1].redraw();\n\t\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(this.bends[1].bounds);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nfunction mxEdgeSegmentHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxEdgeSegmentHandler, mxElbowEdgeHandler);\n\n/**\n * Function: getCurrentPoints\n * \n * Returns the current absolute points.\n */\nmxEdgeSegmentHandler.prototype.getCurrentPoints = function()\n{\n\tvar pts = this.state.absolutePoints;\n\t\n\tif (pts != null)\n\t{\n\t\t// Special case for straight edges where we add a virtual middle handle for moving the edge\n\t\tvar tol = Math.max(1, this.graph.view.scale);\n\t\t\n\t\tif (pts.length == 2 || (pts.length == 3 &&\n\t\t\t(Math.abs(pts[0].x - pts[1].x) < tol && Math.abs(pts[1].x - pts[2].x) < tol ||\n\t\t\tMath.abs(pts[0].y - pts[1].y) < tol && Math.abs(pts[1].y - pts[2].y) < tol)))\n\t\t{\n\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\n\t\t\tpts = [pts[0], new mxPoint(cx, cy), new mxPoint(cx, cy), pts[pts.length - 1]];\t\n\t\t}\n\t}\n\n\treturn pts;\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeSegmentHandler.prototype.getPreviewPoints = function(point)\n{\n\tif (this.isSource || this.isTarget)\n\t{\n\t\treturn mxElbowEdgeHandler.prototype.getPreviewPoints.apply(this, arguments);\n\t}\n\telse\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\tvar last = this.convertPoint(pts[0].clone(), false);\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar result = [];\n\n\t\tfor (var i = 1; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt = this.convertPoint(pts[i].clone(), false);\n\t\t\t\n\t\t\tif (i == this.index)\n\t\t\t{\n\t\t\t\tif (Math.round(last.x - pt.x) == 0)\n\t\t \t\t{\n\t\t\t\t\tlast.x = point.x;\n\t\t\t\t\tpt.x = point.x;\n\t\t \t\t}\n\t\t \t\t\n\t\t\t\tif (Math.round(last.y - pt.y) == 0)\n\t\t \t\t{\n\t\t \t\t\tlast.y = point.y;\n\t\t \t\t\tpt.y = point.y;\n\t\t \t\t}\n\t\t\t}\n\n\t\t\tif (i < pts.length - 1)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t}\n\n\t\t\tlast = pt;\n\t\t}\n\t\t\n\t\t// Replaces single point that intersects with source or target\n\t\tif (result.length == 1)\n\t\t{\n\t\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\t\tvar scale = this.state.view.getScale();\n\t\t\tvar tr = this.state.view.getTranslate();\n\t\t\t\n\t\t\tvar x = result[0].x * scale + tr.x;\n\t\t\tvar y = result[0].y * scale + tr.y;\n\t\t\t\n\t\t\tif ((source != null && mxUtils.contains(source, x, y)) ||\n\t\t\t\t(target != null && mxUtils.contains(target, x, y)))\n\t\t\t{\n\t\t\t\tresult = [point, point];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: updatePreviewState\n * \n * Overridden to perform optimization of the edge style result.\n */\nmxEdgeSegmentHandler.prototype.updatePreviewState = function(edge, point, terminalState, me)\n{\n\tmxEdgeHandler.prototype.updatePreviewState.apply(this, arguments);\n\n\t// Checks and corrects preview by running edge style again\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar pts = edge.absolutePoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t\t\n\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\tvar rpts = this.state.absolutePoints;\n\t\t\n\t\t// A straight line is represented by 3 handles\n\t\tif (result.length == 0 && (Math.round(pts[0].x - pts[pts.length - 1].x) == 0 ||\n\t\t\tMath.round(pts[0].y - pts[pts.length - 1].y) == 0))\n\t\t{\n\t\t\tresult = [point, point];\n\t\t}\n\t\t// Handles special case of transitions from straight vertical to routed\n\t\telse if (pts.length == 5 && result.length == 2 && source != null && target != null &&\n\t\t\t\trpts != null && Math.round(rpts[0].x - rpts[rpts.length - 1].x) == 0)\n\t\t{\n\t\t\tvar view = this.graph.getView();\n\t\t\tvar scale = view.getScale();\n\t\t\tvar tr = view.getTranslate();\n\t\t\t\n\t\t\tvar y0 = view.getRoutingCenterY(source) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\t\t\t\n\t\t\tif (sc != null)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(source, sc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\ty0 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar ye = view.getRoutingCenterY(target) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\t\t\n\t\t\tif (tc)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(target, tc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\tye = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult = [new mxPoint(point.x, y0), new mxPoint(point.x, ye)];\n\t\t}\n\n\t\tthis.points = result;\n\n\t\t// LATER: Check if points and result are different\n\t\tedge.view.updateFixedTerminalPoints(edge, source, target);\n\t\tedge.view.updatePoints(edge, this.points, source, target);\n\t\tedge.view.updateFloatingTerminalPoints(edge, source, target);\n\t}\n};\n\n/**\n * Overriden to merge edge segments.\n */\nmxEdgeSegmentHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar geo = model.getGeometry(edge);\n\tvar result = null;\n\t\n\t// Merges adjacent edge segments\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tvar pts = this.abspoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\t\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (result != null)\n\t\t{\n\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.points = result;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge = mxEdgeHandler.prototype.connect.apply(this, arguments);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns no tooltips.\n */\nmxEdgeSegmentHandler.prototype.getTooltipForNode = function(node)\n{\n\treturn null;\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.start = function(x, y, index)\n{\n\tmxEdgeHandler.prototype.start.apply(this, arguments);\n\t\n\tif (this.bends != null && this.bends[index] != null &&\n\t\t!this.isSource && !this.isTarget)\n\t{\n\t\tmxUtils.setOpacity(this.bends[index].node, 100);\n\t}\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.createBends = function()\n{\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\tvar pts = this.getCurrentPoints();\n\n\t// Waypoints (segment handles)\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tif (this.points == null)\n\t\t{\n\t\t\tthis.points = [];\n\t\t}\n\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tbend = this.createVirtualBend();\n\t\t\tbends.push(bend);\n\t\t\tvar horizontal = Math.round(pts[i].x - pts[i + 1].x) == 0;\n\t\t\t\n\t\t\t// Special case where dy is 0 as well\n\t\t\tif (Math.round(pts[i].y - pts[i + 1].y) == 0 && i < pts.length - 2)\n\t\t\t{\n\t\t\t\thorizontal = Math.round(pts[i].x - pts[i + 2].x) == 0;\n\t\t\t}\n\t\t\t\n\t\t\tbend.setCursor((horizontal) ? 'col-resize' : 'row-resize');\n\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t}\n\t}\n\n\t// Target\n\tvar bend = this.createHandleShape(pts.length);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\treturn bends;\n};\n\n/**\n * Function: redraw\n * \n * Overridden to invoke <refresh> before the redraw.\n */\nmxEdgeSegmentHandler.prototype.redraw = function()\n{\n\tthis.refresh();\n\tmxEdgeHandler.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates the position of the custom bends.\n */\nmxEdgeSegmentHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\t\n\t\tif (pts != null && pts.length > 1)\n\t\t{\n\t\t\tvar straight = false;\n\t\t\t\n\t\t\t// Puts handle in the center of straight edges\n\t\t\tif (pts.length == 4 && Math.round(pts[1].x - pts[2].x) == 0 && Math.round(pts[1].y - pts[2].y) == 0)\n\t\t\t{\n\t\t\t\tstraight = true;\n\t\t\t\t\n\t\t\t\tif (Math.round(pts[0].y - pts[pts.length - 1].y) == 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(cx, pts[1].y);\n\t\t\t\t\tpts[2] = new mxPoint(cx, pts[2].y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(pts[1].x, cy);\n\t\t\t\t\tpts[2] = new mxPoint(pts[2].x, cy);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i + 1] != null)\n\t\t\t\t{\n\t\t \t\t\tvar p0 = pts[i];\n\t \t\t\t\tvar pe = pts[i + 1];\n\t\t\t \t\tvar pt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t\t\t \t\tvar b = this.bends[i + 1].bounds;\n\t\t\t \t\tthis.bends[i + 1].bounds = new mxRectangle(Math.floor(pt.x - b.width / 2),\n\t\t\t \t\t\t\tMath.floor(pt.y - b.height / 2), b.width, b.height);\n\t\t\t\t \tthis.bends[i + 1].redraw();\n\t\t\t\t \t\n\t\t\t\t \tif (this.manageLabelHandle)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.checkLabelHandle(this.bends[i + 1].bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (straight)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.bends[1].node, this.virtualBendOpacity);\n\t\t\t\tmxUtils.setOpacity(this.bends[3].node, this.virtualBendOpacity);\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxKeyHandler\n *\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n * \n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descandants of <mxGraph.container>\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the <graph>.\n * \n * Example:\n * \n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n * \n * (code)\n * var keyHandler = new mxKeyHandler(graph);\n * keyHandler.bindKey(46, function(evt)\n * {\n *   if (graph.isEnabled())\n *   {\n *     graph.removeCells();\n *   }\n * });\n * (end)\n * \n * Keycodes:\n * \n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n * \n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * (code)\n * keyHandler.getFunction = function(evt)\n * {\n *   if (evt != null)\n *   {\n *     return (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *   \n *   return null;\n * };\n * (end)\n * \n * Constructor: mxKeyHandler\n *\n * Constructs an event handler that executes functions bound to specific\n * keystrokes.\n * \n * Parameters:\n * \n * graph - Reference to the associated <mxGraph>.\n * target - Optional reference to the event target. If null, the document\n * element is used as the event target, that is, the object where the key\n * event listener is installed.\n */\nfunction mxKeyHandler(graph, target)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.target = target || document.documentElement;\n\t\t\n\t\t// Creates the arrays to map from keycodes to functions\n\t\tthis.normalKeys = [];\n\t\tthis.shiftKeys = [];\n\t\tthis.controlKeys = [];\n\t\tthis.controlShiftKeys = [];\n\t\t\n\t\tthis.keydownHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.keyDown(evt);\n\t\t});\n\n\t\t// Installs the keystroke listener in the target\n\t\tmxEvent.addListener(this.target, 'keydown', this.keydownHandler);\n\t\t\n\t\t// Automatically deallocates memory in IE\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> associated with this handler.\n */\nmxKeyHandler.prototype.graph = null;\n\n/**\n * Variable: target\n * \n * Reference to the target DOM, that is, the DOM node where the key event\n * listeners are installed.\n */\nmxKeyHandler.prototype.target = null;\n\n/**\n * Variable: normalKeys\n * \n * Maps from keycodes to functions for non-pressed control keys.\n */\nmxKeyHandler.prototype.normalKeys = null;\n\n/**\n * Variable: shiftKeys\n * \n * Maps from keycodes to functions for pressed shift keys.\n */\nmxKeyHandler.prototype.shiftKeys = null;\n\n/**\n * Variable: controlKeys\n * \n * Maps from keycodes to functions for pressed control keys.\n */\nmxKeyHandler.prototype.controlKeys = null;\n\n/**\n * Variable: controlShiftKeys\n * \n * Maps from keycodes to functions for pressed control and shift keys.\n */\nmxKeyHandler.prototype.controlShiftKeys = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxKeyHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxKeyHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling by updating <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxKeyHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: bindKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is not pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindKey = function(code, funct)\n{\n\tthis.normalKeys[code] = funct;\n};\n\n/**\n * Function: bindShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the shift key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindShiftKey = function(code, funct)\n{\n\tthis.shiftKeys[code] = funct;\n};\n\n/**\n * Function: bindControlKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlKey = function(code, funct)\n{\n\tthis.controlKeys[code] = funct;\n};\n\n/**\n * Function: bindControlShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control and shift key are pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlShiftKey = function(code, funct)\n{\n\tthis.controlShiftKeys[code] = funct;\n};\n\n/**\n * Function: isControlDown\n * \n * Returns true if the control key is pressed. This uses <mxEvent.isControlDown>.\n * \n * Parameters:\n * \n * evt - Key event whose control key pressed state should be returned.\n */\nmxKeyHandler.prototype.isControlDown = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: getFunction\n * \n * Returns the function associated with the given key event or null if no\n * function is associated with the given event.\n * \n * Parameters:\n * \n * evt - Key event whose associated function should be returned.\n */\nmxKeyHandler.prototype.getFunction = function(evt)\n{\n\tif (evt != null && !mxEvent.isAltDown(evt))\n\t{\n\t\tif (this.isControlDown(evt))\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.controlShiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.controlKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.shiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.normalKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\t\n/**\n * Function: isGraphEvent\n * \n * Returns true if the event should be processed by this handler, that is,\n * if the event source is either the target, one of its direct children, a\n * descendant of the <mxGraph.container>, or the <mxGraph.cellEditor> of the\n * <graph>.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isGraphEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\t\n\t// Accepts events from the target object or\n\t// in-place editing inside graph\n\tif ((source == this.target || source.parentNode == this.target) ||\n\t\t(this.graph.cellEditor != null && this.graph.cellEditor.isEventSource(evt)))\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Accepts events from inside the container\n\treturn mxUtils.isAncestorNode(this.graph.container, source);\n};\n\n/**\n * Function: keyDown\n * \n * Handles the event by invoking the function bound to the respective keystroke\n * if <isEnabledForEvent> returns true for the given event and if\n * <isEventIgnored> returns false, except for escape for which\n * <isEventIgnored> is not invoked.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.keyDown = function(evt)\n{\n\tif (this.isEnabledForEvent(evt))\n\t{\n\t\t// Cancels the editing if escape is pressed\n\t\tif (evt.keyCode == 27 /* Escape */)\n\t\t{\n\t\t\tthis.escape(evt);\n\t\t}\n\t\t\n\t\t// Invokes the function for the keystroke\n\t\telse if (!this.isEventIgnored(evt))\n\t\t{\n\t\t\tvar boundFunction = this.getFunction(evt);\n\t\t\t\n\t\t\tif (boundFunction != null)\n\t\t\t{\n\t\t\t\tboundFunction(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the given event should be handled. <isEventIgnored> is\n * called later if the event is not an escape key stroke, in which case\n * <escape> is called. This implementation returns true if <isEnabled>\n * returns true for both, this handler and <graph>, if the event is not\n * consumed and if <isGraphEvent> returns true.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEnabledForEvent = function(evt)\n{\n\treturn (this.graph.isEnabled() && !mxEvent.isConsumed(evt) &&\n\t\tthis.isGraphEvent(evt) && this.isEnabled());\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given keystroke should be ignored. This returns\n * graph.isEditing().\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEventIgnored = function(evt)\n{\n\treturn this.graph.isEditing();\n};\n\n/**\n * Function: escape\n * \n * Hook to process ESCAPE keystrokes. This implementation invokes\n * <mxGraph.stopEditing> to cancel the current editing, connecting\n * and/or other ongoing modifications.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke. Possible keycode in this\n * case is 27 (ESCAPE).\n */\nmxKeyHandler.prototype.escape = function(evt)\n{\n\tif (this.graph.isEscapeEnabled())\n\t{\n\t\tthis.graph.escape(evt);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its references into the DOM. This does\n * normally not need to be called, it is called automatically when the\n * window unloads (in IE).\n */\nmxKeyHandler.prototype.destroy = function()\n{\n\tif (this.target != null && this.keydownHandler != null)\n\t{\n\t\tmxEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n\t\tthis.keydownHandler = null;\n\t}\n\t\n\tthis.target = null;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTooltipHandler\n * \n * Graph event handler that displays tooltips. <mxGraph.getTooltip> is used to\n * get the tooltip for a cell or handle. This handler is built-into\n * <mxGraph.tooltipHandler> and enabled using <mxGraph.setTooltips>.\n *\n * Example:\n * \n * (code>\n * new mxTooltipHandler(graph);\n * (end)\n * \n * Constructor: mxTooltipHandler\n * \n * Constructs an event handler that displays tooltips with the specified\n * delay (in milliseconds). If no delay is specified then a default delay\n * of 500 ms (0.5 sec) is used.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * delay - Optional delay in milliseconds.\n */\nfunction mxTooltipHandler(graph, delay)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.delay = delay || 500;\n\t\tthis.graph.addMouseListener(this);\n\t}\n};\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the tooltip and its shadow. Default is 10005.\n */\nmxTooltipHandler.prototype.zIndex = 10005;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxTooltipHandler.prototype.graph = null;\n\n/**\n * Variable: delay\n * \n * Delay to show the tooltip in milliseconds. Default is 500.\n */\nmxTooltipHandler.prototype.delay = null;\n\n/**\n * Variable: ignoreTouchEvents\n * \n * Specifies if touch and pen events should be ignored. Default is true.\n */\nmxTooltipHandler.prototype.ignoreTouchEvents = true;\n\n/**\n * Variable: hideOnHover\n * \n * Specifies if the tooltip should be hidden if the mouse is moved over the\n * current cell. Default is false.\n */\nmxTooltipHandler.prototype.hideOnHover = false;\n\n/**\n * Variable: destroyed\n * \n * True if this handler was destroyed using <destroy>.\n */\nmxTooltipHandler.prototype.destroyed = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxTooltipHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxTooltipHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxTooltipHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isHideOnHover\n * \n * Returns <hideOnHover>.\n */\nmxTooltipHandler.prototype.isHideOnHover = function()\n{\n\treturn this.hideOnHover;\n};\n\n/**\n * Function: setHideOnHover\n * \n * Sets <hideOnHover>.\n */\nmxTooltipHandler.prototype.setHideOnHover = function(value)\n{\n\tthis.hideOnHover = value;\n};\n\n/**\n * Function: init\n * \n * Initializes the DOM nodes required for this tooltip handler.\n */\nmxTooltipHandler.prototype.init = function()\n{\n\tif (document.body != null)\n\t{\n\t\tthis.div = document.createElement('div');\n\t\tthis.div.className = 'mxTooltip';\n\t\tthis.div.style.visibility = 'hidden';\n\n\t\tdocument.body.appendChild(this.div);\n\n\t\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}));\n\t}\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the <mxCellState> to be used for showing a tooltip for this event.\n */\nmxTooltipHandler.prototype.getStateForEvent = function(me)\n{\n\treturn me.getState();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxTooltipHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.reset(me, false);\n\tthis.hideTooltip();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the rubberband selection.\n */\nmxTooltipHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (me.getX() != this.lastX || me.getY() != this.lastY)\n\t{\n\t\tthis.reset(me, true);\n\t\tvar state = this.getStateForEvent(me);\n\t\t\n\t\tif (this.isHideOnHover() || state != this.state || (me.getSource() != this.node &&\n\t\t\t(!this.stateSource || (state != null && this.stateSource ==\n\t\t\t(me.isSource(state.shape) || !me.isSource(state.text))))))\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}\n\t}\n\t\n\tthis.lastX = me.getX();\n\tthis.lastY = me.getY();\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by resetting the tooltip timer or hiding the existing\n * tooltip.\n */\nmxTooltipHandler.prototype.mouseUp = function(sender, me)\n{\n\tthis.reset(me, true);\n\tthis.hideTooltip();\n};\n\n\n/**\n * Function: resetTimer\n * \n * Resets the timer.\n */\nmxTooltipHandler.prototype.resetTimer = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearTimeout(this.thread);\n\t\tthis.thread = null;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets and/or restarts the timer to trigger the display of the tooltip.\n */\nmxTooltipHandler.prototype.reset = function(me, restart, state)\n{\n\tif (!this.ignoreTouchEvents || mxEvent.isMouseEvent(me.getEvent()))\n\t{\n\t\tthis.resetTimer();\n\t\tstate = (state != null) ? state : this.getStateForEvent(me);\n\t\t\n\t\tif (restart && this.isEnabled() && state != null && (this.div == null ||\n\t\t\tthis.div.style.visibility == 'hidden'))\n\t\t{\n\t\t\tvar node = me.getSource();\n\t\t\tvar x = me.getX();\n\t\t\tvar y = me.getY();\n\t\t\tvar stateSource = me.isSource(state.shape) || me.isSource(state.text);\n\t\n\t\t\tthis.thread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (!this.graph.isEditing() && !this.graph.popupMenuHandler.isMenuShowing() && !this.graph.isMouseDown)\n\t\t\t\t{\n\t\t\t\t\t// Uses information from inside event cause using the event at\n\t\t\t\t\t// this (delayed) point in time is not possible in IE as it no\n\t\t\t\t\t// longer contains the required information (member not found)\n\t\t\t\t\tvar tip = this.graph.getTooltip(state, node, x, y);\n\t\t\t\t\tthis.show(tip, x, y);\n\t\t\t\t\tthis.state = state;\n\t\t\t\t\tthis.node = node;\n\t\t\t\t\tthis.stateSource = stateSource;\n\t\t\t\t}\n\t\t\t}), this.delay);\n\t\t}\n\t}\n};\n\n/**\n * Function: hide\n * \n * Hides the tooltip and resets the timer.\n */\nmxTooltipHandler.prototype.hide = function()\n{\n\tthis.resetTimer();\n\tthis.hideTooltip();\n};\n\n/**\n * Function: hideTooltip\n * \n * Hides the tooltip.\n */\nmxTooltipHandler.prototype.hideTooltip = function()\n{\n\tif (this.div != null)\n\t{\n\t\tthis.div.style.visibility = 'hidden';\n\t\tthis.div.innerHTML = '';\n\t}\n};\n\n/**\n * Function: show\n * \n * Shows the tooltip for the specified cell and optional index at the\n * specified location (with a vertical offset of 10 pixels).\n */\nmxTooltipHandler.prototype.show = function(tip, x, y)\n{\n\tif (!this.destroyed && tip != null && tip.length > 0)\n\t{\n\t\t// Initializes the DOM nodes if required\n\t\tif (this.div == null)\n\t\t{\n\t\t\tthis.init();\n\t\t}\n\t\t\n\t\tvar origin = mxUtils.getScrollOrigin();\n\n\t\tthis.div.style.zIndex = this.zIndex;\n\t\tthis.div.style.left = (x + origin.x) + 'px';\n\t\tthis.div.style.top = (y + mxConstants.TOOLTIP_VERTICAL_OFFSET +\n\t\t\torigin.y) + 'px';\n\n\t\tif (!mxUtils.isNode(tip))\n\t\t{\t\n\t\t\tthis.div.innerHTML = tip.replace(/\\n/g, '<br>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.innerHTML = '';\n\t\t\tthis.div.appendChild(tip);\n\t\t}\n\t\t\n\t\tthis.div.style.visibility = '';\n\t\tmxUtils.fit(this.div);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxTooltipHandler.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div != null && this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.destroyed = true;\n\t\tthis.div = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellTracker\n * \n * Event handler that highlights cells. Inherits from <mxCellMarker>.\n * \n * Example:\n * \n * (code)\n * new mxCellTracker(graph, '#00FF00');\n * (end)\n * \n * For detecting dragEnter, dragOver and dragLeave on cells, the following\n * code can be used:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *     \n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *       \n *       this.cell = tmp;\n *       \n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *     \n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     mxLog.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     mxLog.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     mxLog.debug('dragLeave', cell.value);\n *   }\n * });\n * (end)\n * \n * Constructor: mxCellTracker\n * \n * Constructs an event handler that highlights cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * color - Color of the highlight. Default is blue.\n * funct - Optional JavaScript function that is used to override\n * <mxCellMarker.getCell>.\n */\nfunction mxCellTracker(graph, color, funct)\n{\n\tmxCellMarker.call(this, graph, color);\n\n\tthis.graph.addMouseListener(this);\n\t\n\tif (funct != null)\n\t{\n\t\tthis.getCell = funct;\n\t}\n\t\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t}\n};\n\n/**\n * Extends mxCellMarker.\n */\nmxUtils.extend(mxCellTracker, mxCellMarker);\n\n/**\n * Function: mouseDown\n * \n * Ignores the event. The event is not consumed.\n */\nmxCellTracker.prototype.mouseDown = function(sender, me) { };\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting the cell under the mousepointer if it\n * is over the hotspot region of the cell.\n */\nmxCellTracker.prototype.mouseMove = function(sender, me)\n{\n\tif (this.isEnabled())\n\t{\n\t\tthis.process(me);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by reseting the highlight.\n */\nmxCellTracker.prototype.mouseUp = function(sender, me) { };\n\n/**\n * Function: destroy\n * \n * Destroys the object and all its resources and DOM nodes. This doesn't\n * normally need to be called. It is called automatically when the window\n * unloads.\n */\nmxCellTracker.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxCellMarker.prototype.destroy.apply(this);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellHighlight\n * \n * A helper class to highlight cells. Here is an example for a given cell.\n * \n * (code)\n * var highlight = new mxCellHighlight(graph, '#ff0000', 2);\n * highlight.highlight(graph.view.getState(cell)));\n * (end)\n * \n * Constructor: mxCellHighlight\n * \n * Constructs a cell highlight.\n */\nfunction mxCellHighlight(graph, highlightColor, strokeWidth, dashed)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.highlightColor = (highlightColor != null) ? highlightColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.strokeWidth = (strokeWidth != null) ? strokeWidth : mxConstants.HIGHLIGHT_STROKEWIDTH;\n\t\tthis.dashed = (dashed != null) ? dashed : false;\n\t\tthis.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\n\t\t// Updates the marker if the graph changes\n\t\tthis.repaintHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Updates reference to state\n\t\t\tif (this.state != null)\n\t\t\t{\n\t\t\t\tvar tmp = this.graph.view.getState(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (tmp == null)\n\t\t\t\t{\n\t\t\t\t\tthis.hide();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.state = tmp;\n\t\t\t\t\tthis.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.SCALE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.repaintHandler);\n\t\t\n\t\t// Hides the marker if the current root changes\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.hide();\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.DOWN, this.resetHandler);\n\t\tthis.graph.getView().addListener(mxEvent.UP, this.resetHandler);\n\t}\n};\n\n/**\n * Variable: keepOnTop\n * \n * Specifies if the highlights should appear on top of everything\n * else in the overlay pane. Default is false.\n */\nmxCellHighlight.prototype.keepOnTop = false;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellHighlight.prototype.graph = true;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState>.\n */\nmxCellHighlight.prototype.state = null;\n\n/**\n * Variable: spacing\n * \n * Specifies the spacing between the highlight for vertices and the vertex.\n * Default is 2.\n */\nmxCellHighlight.prototype.spacing = 2;\n\n/**\n * Variable: resetHandler\n * \n * Holds the handler that automatically invokes reset if the highlight\n * should be hidden.\n */\nmxCellHighlight.prototype.resetHandler = null;\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxCellHighlight.prototype.setHighlightColor = function(color)\n{\n\tthis.highlightColor = color;\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n/**\n * Function: drawHighlight\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.drawHighlight = function()\n{\n\tthis.shape = this.createShape();\n\tthis.repaint();\n\n\tif (!this.keepOnTop && this.shape.node.parentNode.firstChild != this.shape.node)\n\t{\n\t\tthis.shape.node.parentNode.insertBefore(this.shape.node, this.shape.node.parentNode.firstChild);\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.createShape = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\t\n\tshape.svgStrokeTolerance = this.graph.tolerance;\n\tshape.points = this.state.absolutePoints;\n\tshape.apply(this.state);\n\tshape.stroke = this.highlightColor;\n\tshape.opacity = this.opacity;\n\tshape.isDashed = this.dashed;\n\tshape.isShadow = false;\n\t\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n\t\n\tif (this.graph.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.pointerEvents = false;\n\t}\n\telse\n\t{\n\t\tshape.svgPointerEvents = 'stroke';\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.getStrokeWidth = function(state)\n{\n\treturn this.strokeWidth;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.repaint = function()\n{\n\tif (this.state != null && this.shape != null)\n\t{\n\t\tthis.shape.scale = this.state.view.scale;\n\t\t\n\t\tif (this.graph.model.isEdge(this.state.cell))\n\t\t{\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth();\n\t\t\tthis.shape.points = this.state.absolutePoints;\n\t\t\tthis.shape.outline = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.shape.bounds = new mxRectangle(this.state.x - this.spacing, this.state.y - this.spacing,\n\t\t\t\t\tthis.state.width + 2 * this.spacing, this.state.height + 2 * this.spacing);\n\t\t\tthis.shape.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth() / this.state.view.scale;\n\t\t\tthis.shape.outline = true;\n\t\t}\n\n\t\t// Uses cursor from shape in highlight\n\t\tif (this.state.shape != null)\n\t\t{\n\t\t\tthis.shape.setCursor(this.state.shape.getCursor());\n\t\t}\n\t\t\n\t\t// Workaround for event transparency in VML with transparent color\n\t\t// is to use a non-transparent color with near zero opacity\n\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t{\n\t\t\tif (this.shape.stroke == 'transparent')\n\t\t\t{\n\t\t\t\t// KNOWN: Quirks mode does not seem to catch events if\n\t\t\t\t// we do not force an update of the DOM via a change such\n\t\t\t\t// as mxLog.debug. Since IE6 is EOL we do not add a fix.\n\t\t\t\tthis.shape.stroke = 'white';\n\t\t\t\tthis.shape.opacity = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.shape.opacity = this.opacity;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: hide\n * \n * Resets the state of the cell marker.\n */\nmxCellHighlight.prototype.hide = function()\n{\n\tthis.highlight(null);\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellHighlight.prototype.highlight = function(state)\n{\n\tif (this.state != state)\n\t{\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.destroy();\n\t\t\tthis.shape = null;\n\t\t}\n\n\t\tthis.state = state;\n\t\t\n\t\tif (this.state != null)\n\t\t{\n\t\t\tthis.drawHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHighlightAt\n * \n * Returns true if this highlight is at the given position.\n */\nmxCellHighlight.prototype.isHighlightAt = function(x, y)\n{\n\tvar hit = false;\n\t\n\t// Quirks mode is currently not supported as it used a different coordinate system\n\tif (this.shape != null && document.elementFromPoint != null && !mxClient.IS_QUIRKS)\n\t{\n\t\tvar elt = document.elementFromPoint(x, y);\n\n\t\twhile (elt != null)\n\t\t{\n\t\t\tif (elt == this.shape.node)\n\t\t\t{\n\t\t\t\thit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\t\n\treturn hit;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellHighlight.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getView().removeListener(this.repaintHandler);\n\tthis.graph.getModel().removeListener(this.repaintHandler);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultKeyHandler\n *\n * Binds keycodes to actionnames in an editor. This aggregates an internal\n * <handler> and extends the implementation of <mxKeyHandler.escape> to not\n * only cancel the editing, but also hide the properties dialog and fire an\n * <mxEditor.escape> event via <editor>. An instance of this class is created\n * by <mxEditor> and stored in <mxEditor.keyHandler>.\n * \n * Example:\n * \n * Bind the delete key to the delete action in an existing editor.\n * \n * (code)\n * var keyHandler = new mxDefaultKeyHandler(editor);\n * keyHandler.bindAction(46, 'delete');\n * (end)\n *\n * Codec:\n * \n * This class uses the <mxDefaultKeyHandlerCodec> to read configuration\n * data into an existing instance. See <mxDefaultKeyHandlerCodec> for a\n * description of the configuration format.\n * \n * Keycodes:\n * \n * See <mxKeyHandler>.\n * \n * An <mxEvent.ESCAPE> event is fired via the editor if the escape key is\n * pressed.\n * \n * Constructor: mxDefaultKeyHandler\n *\n * Constructs a new default key handler for the <mxEditor.graph> in the\n * given <mxEditor>. (The editor may be null if a prototypical instance for\n * a <mxDefaultKeyHandlerCodec> is created.)\n * \n * Parameters:\n * \n * editor - Reference to the enclosing <mxEditor>.\n */\nfunction mxDefaultKeyHandler(editor)\n{\n\tif (editor != null)\n\t{\n\t\tthis.editor = editor;\n\t\tthis.handler = new mxKeyHandler(editor.graph);\n\t\t\n\t\t// Extends the escape function of the internal key\n\t\t// handle to hide the properties dialog and fire\n\t\t// the escape event via the editor instance\n\t\tvar old = this.handler.escape;\n\t\t\n\t\tthis.handler.escape = function(evt)\n\t\t{\n\t\t\told.apply(this, arguments);\n\t\t\teditor.hideProperties();\n\t\t\teditor.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n\t\t};\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.editor = null;\n\n/**\n * Variable: handler\n *\n * Holds the <mxKeyHandler> for key event handling.\n */\nmxDefaultKeyHandler.prototype.handler = null;\n\n/**\n * Function: bindAction\n *\n * Binds the specified keycode to the given action in <editor>. The\n * optional control flag specifies if the control key must be pressed\n * to trigger the action.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * action - Name of the action to execute in <editor>.\n * control - Optional boolean that specifies if control must be pressed.\n * Default is false.\n */\nmxDefaultKeyHandler.prototype.bindAction = function (code, action, control)\n{\n\tvar keyHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\n\t// Binds the function to control-down keycode\n\tif (control)\n\t{\n\t\tthis.handler.bindControlKey(code, keyHandler);\n\t}\n\n\t// Binds the function to the normal keycode\n\telse\n\t{\n\t\tthis.handler.bindKey(code, keyHandler);\t\t\t\t\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the <handler> associated with this object. This does normally\n * not need to be called, the <handler> is destroyed automatically when the\n * window unloads (in IE) by <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.destroy = function ()\n{\n\tthis.handler.destroy();\n\tthis.handler = null;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultPopupMenu\n *\n * Creates popupmenus for mouse events. This object holds an XML node\n * which is a description of the popup menu to be created. In\n * <createMenu>, the configuration is applied to the context and\n * the resulting menu items are added to the menu dynamically. See\n * <createMenu> for a description of the configuration format.\n * \n * This class does not create the DOM nodes required for the popup menu, it\n * only parses an XML description to invoke the respective methods on an\n * <mxPopupMenu> each time the menu is displayed.\n *\n * Codec:\n * \n * This class uses the <mxDefaultPopupMenuCodec> to read configuration\n * data into an existing instance, however, the actual parsing is done\n * by this class during program execution, so the format is described\n * below.\n * \n * Constructor: mxDefaultPopupMenu\n *\n * Constructs a new popupmenu-factory based on given configuration.\n *\n * Paramaters:\n *\n * config - XML node that contains the configuration data.\n */\nfunction mxDefaultPopupMenu(config)\n{\n\tthis.config = config;\n};\n\n/**\n * Variable: imageBasePath\n *\n * Base path for all icon attributes in the config. Default is null.\n */\nmxDefaultPopupMenu.prototype.imageBasePath = null;\n\n/**\n * Variable: config\n *\n * XML node used as the description of new menu items. This node is\n * used in <createMenu> to dynamically create the menu items if their\n * respective conditions evaluate to true for the given arguments.\n */\nmxDefaultPopupMenu.prototype.config = null;\n\n/**\n * Function: createMenu\n *\n * This function is called from <mxEditor> to add items to the\n * given menu based on <config>. The config is a sequence of\n * the following nodes and attributes.\n *\n * Child Nodes: \n *\n * add - Adds a new menu item. See below for attributes.\n * separator - Adds a separator. No attributes.\n * condition - Adds a custom condition. Name attribute.\n * \n * The add-node may have a child node that defines a function to be invoked\n * before the action is executed (or instead of an action to be executed).\n *\n * Attributes:\n *\n * as - Resource key for the label (needs entry in property file).\n * action - Name of the action to execute in enclosing editor.\n * icon - Optional icon (relative/absolute URL).\n * iconCls - Optional CSS class for the icon.\n * if - Optional name of condition that must be true (see below).\n * enabled-if - Optional name of condition that specifies if the menu item\n * should be enabled.\n * name - Name of custom condition. Only for condition nodes.\n *\n * Conditions:\n *\n * nocell - No cell under the mouse.\n * ncells - More than one cell selected.\n * notRoot - Drilling position is other than home.\n * cell - Cell under the mouse.\n * notEmpty - Exactly one cell with children under mouse.\n * expandable - Exactly one expandable cell under mouse.\n * collapsable - Exactly one collapsable cell under mouse.\n * validRoot - Exactly one cell which is a possible root under mouse.\n * swimlane - Exactly one cell which is a swimlane under mouse.\n *\n * Example:\n *\n * To add a new item for a given action to the popupmenu:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"delete\" action=\"delete\" icon=\"images/delete.gif\" if=\"cell\"/>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * To add a new item for a custom function:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"action1\"><![CDATA[\n *\t\tfunction (editor, cell, evt)\n *\t\t{\n *\t\t\teditor.execute('action1', cell, 'myArg');\n *\t\t}\n *   ]]></add>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * The above example invokes action1 with an additional third argument via\n * the editor instance. The third argument is passed to the function that\n * defines action1. If the add-node has no action-attribute, then only the\n * function defined in the text content is executed, otherwise first the\n * function and then the action defined in the action-attribute is\n * executed. The function in the text content has 3 arguments, namely the\n * <mxEditor> instance, the <mxCell> instance under the mouse, and the\n * native mouse event.\n *\n * Custom Conditions:\n *\n * To add a new condition for popupmenu items:\n *  \n * (code)\n * <condition name=\"condition1\"><![CDATA[\n *   function (editor, cell, evt)\n *   {\n *     return cell != null;\n *   }\n * ]]></condition>\n * (end)\n * \n * The new condition can then be used in any item as follows:\n * \n * (code)\n * <add as=\"action1\" action=\"action1\" icon=\"action1.gif\" if=\"condition1\"/>\n * (end)\n * \n * The order in which the items and conditions appear is not significant as\n * all connditions are evaluated before any items are created.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu. \n */\nmxDefaultPopupMenu.prototype.createMenu = function(editor, menu, cell, evt)\n{\n\tif (this.config != null)\n\t{\n\t\tvar conditions = this.createConditions(editor, cell, evt);\n\t\tvar item = this.config.firstChild;\n\n\t\tthis.addItems(editor, menu, cell, evt, conditions, item, null);\n\t}\n};\n\n/**\n * Function: addItems\n * \n * Recursively adds the given items and all of its children into the given menu.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu.\n * conditions - Array of names boolean conditions.\n * item - XML node that represents the current menu item.\n * parent - DOM node that represents the parent menu item.\n */\nmxDefaultPopupMenu.prototype.addItems = function(editor, menu, cell, evt, conditions, item, parent)\n{\n\tvar addSeparator = false;\n\t\n\twhile (item != null)\n\t{\n\t\tif (item.nodeName == 'add')\n\t\t{\n\t\t\tvar condition = item.getAttribute('if');\n\t\t\t\n\t\t\tif (condition == null || conditions[condition])\n\t\t\t{\n\t\t\t\tvar as = item.getAttribute('as');\n\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(item));\n\t\t\t\tvar action = item.getAttribute('action');\n\t\t\t\tvar icon = item.getAttribute('icon');\n\t\t\t\tvar iconCls = item.getAttribute('iconCls');\n\t\t\t\tvar enabledCond = item.getAttribute('enabled-if');\n\t\t\t\tvar enabled = enabledCond == null || conditions[enabledCond];\n\t\t\t\t\n\t\t\t\tif (addSeparator)\n\t\t\t\t{\n\t\t\t\t\tmenu.addSeparator(parent);\n\t\t\t\t\taddSeparator = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (icon != null && this.imageBasePath)\n\t\t\t\t{\n\t\t\t\t\ticon = this.imageBasePath + icon;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar row = this.addAction(menu, editor, as, icon, funct, action, cell, parent, iconCls, enabled);\n\t\t\t\tthis.addItems(editor, menu, cell, evt, conditions, item.firstChild, row);\n\t\t\t}\n\t\t}\n\t\telse if (item.nodeName == 'separator')\n\t\t{\n\t\t\taddSeparator = true;\n\t\t}\n\t\t\n\t\titem = item.nextSibling;\n\t}\n};\n\n/**\n * Function: addAction\n *\n * Helper method to bind an action to a new menu item.\n * \n * Parameters:\n *\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * editor - Enclosing <mxEditor> instance.\n * lab - String that represents the label of the menu item.\n * icon - Optional URL that represents the icon of the menu item.\n * action - Optional name of the action to execute in the given editor.\n * funct - Optional function to execute before the optional action. The\n * function takes an <mxEditor>, the <mxCell> under the mouse and the\n * mouse event that triggered the call.\n * cell - Optional <mxCell> to use as an argument for the action.\n * parent - DOM node that represents the parent menu item.\n * iconCls - Optional CSS class for the menu icon.\n * enabled - Optional boolean that specifies if the menu item is enabled.\n * Default is true.\n */\nmxDefaultPopupMenu.prototype.addAction = function(menu, editor, lab, icon, funct, action, cell, parent, iconCls, enabled)\n{\n\tvar clickHandler = function(evt)\n\t{\n\t\tif (typeof(funct) == 'function')\n\t\t{\n\t\t\tfunct.call(editor, editor, cell, evt);\n\t\t}\n\t\t\n\t\tif (action != null)\n\t\t{\n\t\t\teditor.execute(action, cell, evt);\n\t\t}\n\t};\n\t\n\treturn menu.addItem(lab, icon, clickHandler, parent, iconCls, enabled);\n};\n\n/**\n * Function: createConditions\n * \n * Evaluates the default conditions for the given context.\n */\nmxDefaultPopupMenu.prototype.createConditions = function(editor, cell, evt)\n{\n\t// Creates array with conditions\n\tvar model = editor.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\t// Adds some frequently used conditions\n\tvar conditions = [];\n\tconditions['nocell'] = cell == null;\n\tconditions['ncells'] = editor.graph.getSelectionCount() > 1;\n\tconditions['notRoot'] = model.getRoot() !=\n\t\tmodel.getParent(editor.graph.getDefaultParent());\n\tconditions['cell'] = cell != null;\n\t\n\tvar isCell = cell != null && editor.graph.getSelectionCount() == 1;\n\tconditions['nonEmpty'] = isCell && childCount > 0;\n\tconditions['expandable'] = isCell && editor.graph.isCellFoldable(cell, false);\n\tconditions['collapsable'] = isCell && editor.graph.isCellFoldable(cell, true);\n\tconditions['validRoot'] = isCell && editor.graph.isValidRoot(cell);\n\tconditions['emptyValidRoot'] = conditions['validRoot'] && childCount == 0;\n\tconditions['swimlane'] = isCell && editor.graph.isSwimlane(cell);\n\n\t// Evaluates dynamic conditions from config file\n\tvar condNodes = this.config.getElementsByTagName('condition');\n\t\n\tfor (var i=0; i<condNodes.length; i++)\n\t{\n\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(condNodes[i]));\n\t\tvar name = condNodes[i].getAttribute('name');\n\t\t\n\t\tif (name != null && typeof(funct) == 'function')\n\t\t{\n\t\t\tconditions[name] = funct(editor, cell, evt);\n\t\t}\n\t}\n\t\n\treturn conditions;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbar\n *\n * Toolbar for the editor. This modifies the state of the graph\n * or inserts new cells upon mouse clicks.\n * \n * Example:\n * \n * Create a toolbar with a button to copy the selection into the clipboard,\n * and a combo box with one action to paste the selection from the clipboard\n * into the graph.\n * \n * (code)\n * var toolbar = new mxDefaultToolbar(container, editor);\n * toolbar.addItem('Copy', null, 'copy');\n * \n * var combo = toolbar.addActionCombo('More actions...');\n * toolbar.addActionOption(combo, 'Paste', 'paste');\n * (end) \n *\n * Codec:\n * \n * This class uses the <mxDefaultToolbarCodec> to read configuration\n * data into an existing instance. See <mxDefaultToolbarCodec> for a\n * description of the configuration format.\n * \n * Constructor: mxDefaultToolbar\n *\n * Constructs a new toolbar for the given container and editor. The\n * container and editor may be null if a prototypical instance for a\n * <mxDefaultKeyHandlerCodec> is created.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n * editor - Reference to the enclosing <mxEditor>. \n */\nfunction mxDefaultToolbar(container, editor)\n{\n\tthis.editor = editor;\n\n\tif (container != null && editor != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultToolbar.prototype.editor = null;\n\n/**\n * Variable: toolbar\n *\n * Holds the internal <mxToolbar>.\n */\nmxDefaultToolbar.prototype.toolbar = null;\n\n/**\n * Variable: resetHandler\n *\n * Reference to the function used to reset the <toolbar>.\n */\nmxDefaultToolbar.prototype.resetHandler = null;\n\n/**\n * Variable: spacing\n *\n * Defines the spacing between existing and new vertices in\n * gridSize units when a new vertex is dropped on an existing\n * cell. Default is 4 (40 pixels).\n */\nmxDefaultToolbar.prototype.spacing = 4;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if elements should be connected if new cells are dropped onto\n * connectable elements. Default is false.\n */\nmxDefaultToolbar.prototype.connectOnDrop = false;\n\n/**\n * Function: init\n * \n * Constructs the <toolbar> for the given container and installs a listener\n * that updates the <mxEditor.insertFunction> on <editor> if an item is\n * selected in the toolbar. This assumes that <editor> is not null.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nmxDefaultToolbar.prototype.init = function(container)\n{\n\tif (container != null)\n\t{\n\t\tthis.toolbar = new mxToolbar(container);\n\t\t\n\t\t// Installs the insert function in the editor if an item is\n\t\t// selected in the toolbar\n\t\tthis.toolbar.addListener(mxEvent.SELECT, mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar funct = evt.getProperty('function');\n\t\t\t\n\t\t\tif (funct != null)\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = mxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tfunct.apply(this, arguments);\n\t\t\t\t\tthis.toolbar.resetMode();\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = null;\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Resets the selected tool after a doubleclick or escape keystroke\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.toolbar != null)\n\t\t\t{\n\t\t\t\tthis.toolbar.resetMode(true);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.graph.addListener(mxEvent.DOUBLE_CLICK, this.resetHandler);\n\t\tthis.editor.addListener(mxEvent.ESCAPE, this.resetHandler);\n\t}\n};\n\n/**\n * Function: addItem\n *\n * Adds a new item that executes the given action in <editor>. The title,\n * icon and pressedIcon are used to display the toolbar item.\n * \n * Parameters:\n *\n * title - String that represents the title (tooltip) for the item.\n * icon - URL of the icon to be used for displaying the item.\n * action - Name of the action to execute when the item is clicked.\n * pressed - Optional URL of the icon for the pressed state.\n */\nmxDefaultToolbar.prototype.addItem = function(title, icon, action, pressed)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (action != null && action.length > 0)\n\t\t{\n\t\t\tthis.editor.execute(action);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addItem(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addSeparator\n *\n * Adds a vertical separator using the optional icon.\n * \n * Parameters:\n * \n * icon - Optional URL of the icon that represents the vertical separator.\n * Default is <mxClient.imageBasePath> + '/separator.gif'.\n */\nmxDefaultToolbar.prototype.addSeparator = function(icon)\n{\n\ticon = icon || mxClient.imageBasePath + '/separator.gif';\n\tthis.toolbar.addSeparator(icon);\n};\n\t\n/**\n * Function: addCombo\n *\n * Helper method to invoke <mxToolbar.addCombo> on <toolbar> and return the\n * resulting DOM node.\n */\nmxDefaultToolbar.prototype.addCombo = function()\n{\n\treturn this.toolbar.addCombo();\n};\n\t\t\n/**\n * Function: addActionCombo\n *\n * Helper method to invoke <mxToolbar.addActionCombo> on <toolbar> using\n * the given title and return the resulting DOM node.\n * \n * Parameters:\n * \n * title - String that represents the title of the combo.\n */\nmxDefaultToolbar.prototype.addActionCombo = function(title)\n{\n\treturn this.toolbar.addActionCombo(title);\n};\n\n/**\n * Function: addActionOption\n *\n * Binds the given action to a option with the specified label in the\n * given combo. Combo is an object returned from an earlier call to\n * <addCombo> or <addActionCombo>.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * action - Name of the action to execute in <editor>.\n */\nmxDefaultToolbar.prototype.addActionOption = function(combo, title, action)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\t\n\tthis.addOption(combo, title, clickHandler);\n};\n\n/**\n * Function: addOption\n *\n * Helper method to invoke <mxToolbar.addOption> on <toolbar> and return\n * the resulting DOM node that represents the option.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * value - Object that represents the value of the option.\n */\nmxDefaultToolbar.prototype.addOption = function(combo, title, value)\n{\n\treturn this.toolbar.addOption(combo, title, value);\n};\n\t\n/**\n * Function: addMode\n *\n * Creates an item for selecting the given mode in the <editor>'s graph.\n * Supported modenames are select, connect and pan.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * mode - String that represents the mode name to be used in\n * <mxEditor.setMode>.\n * pressed - Optional URL of the icon that represents the pressed state.\n * funct - Optional JavaScript function that takes the <mxEditor> as the\n * first and only argument that is executed after the mode has been\n * selected.\n */\nmxDefaultToolbar.prototype.addMode = function(title, icon, mode, pressed, funct)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.setMode(mode);\n\t\t\n\t\tif (funct != null)\n\t\t{\n\t\t\tfunct(this.editor);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addSwitchMode(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addPrototype\n *\n * Creates an item for inserting a clone of the specified prototype cell into\n * the <editor>'s graph. The ptype may either be a cell or a function that\n * returns a cell.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * ptype - Function or object that represents the prototype cell. If ptype\n * is a function then it is invoked with no arguments to create new\n * instances.\n * pressed - Optional URL of the icon that represents the pressed state.\n * insert - Optional JavaScript function that handles an insert of the new\n * cell. This function takes the <mxEditor>, new cell to be inserted, mouse\n * event and optional <mxCell> under the mouse pointer as arguments.\n * toggle - Optional boolean that specifies if the item can be toggled.\n * Default is true.\n */\nmxDefaultToolbar.prototype.addPrototype = function(title, icon, ptype, pressed, insert, toggle)\n{\n\t// Creates a wrapper function that is in charge of constructing\n\t// the new cell instance to be inserted into the graph\n\tvar factory = mxUtils.bind(this, function()\n\t{\n\t\tif (typeof(ptype) == 'function')\n\t\t{\n\t\t\treturn ptype();\n\t\t}\n\t\telse if (ptype != null)\n\t\t{\n\t\t\treturn this.editor.graph.cloneCell(ptype);\n\t\t}\n\t\t\n\t\treturn null;\n\t});\n\t\n\t// Defines the function for a click event on the graph\n\t// after this item has been selected in the toolbar\n\tvar clickHandler = mxUtils.bind(this, function(evt, cell)\n\t{\n\t\tif (typeof(insert) == 'function')\n\t\t{\n\t\t\tinsert(this.editor, factory(), evt, cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.drop(factory(), evt, cell);\n\t\t}\n\t\t\n\t\tthis.toolbar.resetMode();\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tvar img = this.toolbar.addMode(title, icon, clickHandler, pressed, null, toggle);\n\t\t\t\t\n\t// Creates a wrapper function that calls the click handler without\n\t// the graph argument\n\tvar dropHandler = function(graph, evt, cell)\n\t{\n\t\tclickHandler(evt, cell);\n\t};\n\t\n\tthis.installDropHandler(img, dropHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: drop\n * \n * Handles a drop from a toolbar item to the graph. The given vertex\n * represents the new cell to be inserted. This invokes <insert> or\n * <connect> depending on the given target cell.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * target - Optional <mxCell> that represents the drop target.\n */\nmxDefaultToolbar.prototype.drop = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (target == null ||\n\t\tmodel.isEdge(target) ||\n\t\t!this.connectOnDrop ||\n\t\t!graph.isCellConnectable(target))\n\t{\n\t\twhile (target != null &&\n\t\t\t!graph.isValidDropTarget(target, [vertex], evt))\n\t\t{\n\t\t\ttarget = model.getParent(target);\n\t\t}\n\t\t\n\t\tthis.insert(vertex, evt, target);\n\t}\n\telse\n\t{\n\t\tthis.connect(vertex, evt, target);\n\t}\n};\n\n/**\n * Function: insert\n *\n * Handles a drop by inserting the given vertex into the given parent cell\n * or the default parent if no parent is specified.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * parent - Optional <mxCell> that represents the parent.\n */\nmxDefaultToolbar.prototype.insert = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\t\n\tif (graph.canImportCell(vertex))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\n\t\t// Splits the target edge or inserts into target group\n\t\tif (graph.isSplitEnabled() &&\n\t\t\tgraph.isSplitTarget(target, [vertex], evt))\n\t\t{\n\t\t\treturn graph.splitEdge(target, [vertex], null, pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.editor.addVertex(target, vertex, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: connect\n * \n * Handles a drop by connecting the given vertex to the given source cell.\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * source - Optional <mxCell> that represents the source terminal.\n */\nmxDefaultToolbar.prototype.connect = function(vertex, evt, source)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (source != null &&\n\t\tgraph.isCellConnectable(vertex) &&\n\t\tgraph.isEdgeValid(null, source, vertex))\n\t{\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar geo = model.getGeometry(source);\n\t\t\tvar g = model.getGeometry(vertex).clone();\n\t\t\t\n\t\t\t// Moves the vertex away from the drop target that will\n\t\t\t// be used as the source for the new connection\n\t\t\tg.x = geo.x + (geo.width - g.width) / 2;\n\t\t\tg.y = geo.y + (geo.height - g.height) / 2;\n\t\t\t\n\t\t\tvar step = this.spacing * graph.gridSize;\n\t\t\tvar dist = model.getDirectedEdgeCount(source, true) * 20;\n\t\t\t\n\t\t\tif (this.editor.horizontalFlow)\n\t\t\t{\n\t\t\t\tg.x += (g.width + geo.width) / 2 + step + dist;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.y += (g.height + geo.height) / 2 + step + dist;\n\t\t\t}\n\t\t\t\n\t\t\tvertex.setGeometry(g);\n\t\t\t\n\t\t\t// Fires two add-events with the code below - should be fixed\n\t\t\t// to only fire one add event for both inserts\n\t\t\tvar parent = model.getParent(source);\n\t\t\tgraph.addCell(vertex, parent);\n\t\t\tgraph.constrainChild(vertex);\n\n\t\t\t// Creates the edge using the editor instance and calls\n\t\t\t// the second function that fires an add event\n\t\t\tedge = this.editor.createEdge(source, vertex);\n\t\t\t\n\t\t\tif (model.getGeometry(edge) == null)\n\t\t\t{\n\t\t\t\tvar edgeGeometry = new mxGeometry();\n\t\t\t\tedgeGeometry.relative = true;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, edgeGeometry);\n\t\t\t}\n\t\t\t\n\t\t\tgraph.addEdge(edge, parent, source, vertex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tgraph.setSelectionCells([vertex, edge]);\n\t\tgraph.scrollCellToVisible(vertex);\n\t}\n};\n\n/**\n * Function: installDropHandler\n * \n * Makes the given img draggable using the given function for handling a\n * drop event.\n * \n * Parameters:\n * \n * img - DOM node that represents the image.\n * dropHandler - Function that handles a drop of the image.\n */\nmxDefaultToolbar.prototype.installDropHandler = function (img, dropHandler)\n{\n\tvar sprite = document.createElement('img');\n\tsprite.setAttribute('src', img.getAttribute('src'));\n\n\t// Handles delayed loading of the images\n\tvar loader = mxUtils.bind(this, function(evt)\n\t{\n\t\t// Preview uses the image node with double size. Later this can be\n\t\t// changed to use a separate preview and guides, but for this the\n\t\t// dropHandler must use the additional x- and y-arguments and the\n\t\t// dragsource which makeDraggable returns much be configured to\n\t\t// use guides via mxDragSource.isGuidesEnabled.\n\t\tsprite.style.width = (2 * img.offsetWidth) + 'px';\n\t\tsprite.style.height = (2 * img.offsetHeight) + 'px';\n\n\t\tmxUtils.makeDraggable(img, this.editor.graph, dropHandler,\n\t\t\tsprite);\n\t\tmxEvent.removeListener(sprite, 'load', loader);\n\t});\n\n\tif (mxClient.IS_IE)\n\t{\n\t\tloader();\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(sprite, 'load', loader);\n\t}\t\n};\n\n/**\n * Function: destroy\n * \n * Destroys the <toolbar> associated with this object and removes all\n * installed listeners. This does normally not need to be called, the\n * <toolbar> is destroyed automatically when the window unloads (in IE) by\n * <mxEditor>.\n */\nmxDefaultToolbar.prototype.destroy = function ()\n{\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.editor.graph.removeListener('dblclick', this.resetHandler);\n\t\tthis.editor.removeListener('escape', this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.toolbar != null)\n\t{\n\t\tthis.toolbar.destroy();\n\t\tthis.toolbar = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2019, JGraph Ltd\n * Copyright (c) 2006-2019, draw.io AG\n */\n/**\n * Class: mxEditor\n *\n * Extends <mxEventSource> to implement a application wrapper for a graph that\n * adds <actions>, I/O using <mxCodec>, auto-layout using <mxLayoutManager>,\n * command history using <undoManager>, and standard dialogs and widgets, eg.\n * properties, help, outline, toolbar, and popupmenu. It also adds <templates>\n * to be used as cells in toolbars, auto-validation using the <validation>\n * flag, attribute cycling using <cycleAttributeValues>, higher-level events\n * such as <root>, and backend integration using <urlPost> and <urlImage>. \n * \n * Actions:\n * \n * Actions are functions stored in the <actions> array under their names. The\n * functions take the <mxEditor> as the first, and an optional <mxCell> as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n * \n * A list of built-in actions is available in the <addActions> description.\n * \n * Read/write Diagrams:\n * \n * To read a diagram from an XML string, for example from a textfield within the \n * page, the following code is used:\n * \n * (code)\n * var doc = mxUtils.parseXML(xmlString);\n * var node = doc.documentElement;\n * editor.readGraphModel(node);\n * (end)\n * \n * For reading a diagram from a remote location, use the <open> method.\n * \n * To save diagrams in XML on a server, you can set the <urlPost> variable. \n * This variable will be used in <getUrlPost> to construct a URL for the post \n * request that is issued in the <save> method. The post request contains the \n * XML representation of the diagram as returned by <writeGraphModel> in the \n * xml parameter.\n * \n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n * \n * Here are some examples of processing a post request in various languages.\n * \n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\")\n * \n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n * \n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n * \n * Creating images:\n * \n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n * \n * Special characters:\n * \n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n * \n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n * \n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to a HTML user agent.\n * \n * If you are having problems with special characters on the server-side then\n * you may want to try the <escapePostData> flag.\n * \n * For converting decimal escape sequences inside strings, a user has provided\n * us with the following function:\n * \n * (code)\n * function html2js(text)\n * {\n *   var entitySearch = /&#[0-9]+;/;\n *   var entity;\n *   \n *   while (entity = entitySearch.exec(text))\n *   {\n *     var charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *   \n *   return text;\n * }\n * (end)\n * \n * Otherwise try using hex escape sequences and the built-in unescape function\n * for converting such strings.\n * \n * Local Files:\n * \n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n * \n * For example, in PHP the code that does this looks as follows.\n * \n * (code)\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * (end)\n * \n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n * \n * Cell Properties:\n * \n * The properties displayed in the properties dialog are the attributes and \n * values of the cell's user object, which is an XML node. The XML node is \n * defined in the templates section of the config file.\n * \n * The templates are stored in <mxEditor.templates> and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n * \n * In the following example, the task node is a business object and only the \n * mxCell node and its mxGeometry child contain graph information:\n * \n * (code)\n * <Task label=\"Task\" description=\"\">\n *   <mxCell vertex=\"true\">\n *     <mxGeometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </mxCell>\n * </Task> \n * (end)\n * \n * The idea is that the XML representation is inverse from the in-memory \n * representation: The outer XML node is the user object and the inner node is \n * the cell. This means the user object of the cell is the Task node with no \n * children for the above example:\n * \n * (code)\n * <Task label=\"Task\" description=\"\"/>\n * (end)\n * \n * The Task node can have any tag name, attributes and child nodes. The \n * <mxCodec> will use the XML hierarchy as the user object, while removing the \n * \"known annotations\", such as the mxCell node. At save-time the cell data \n * will be \"merged\" back into the user object. The user object is only modified \n * via the properties dialog during the lifecycle of the cell.\n * \n * In the default implementation of <createProperties>, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the <mxCellAttributeChange> action in the model. The dialog can be replaced \n * by overriding the <createProperties> hook or by replacing the showProperties\n * action in <actions>. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n * \n * If you want to displey the properties dialog on a doubleclick, you can set\n * <mxEditor.dblClickAction> to showProperties as follows:\n * \n * (code)\n * editor.dblClickAction = 'showProperties';\n * (end)\n * \n * Popupmenu and Toolbar:\n * \n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n * \n * (code)\n * <mxEditor>\n *   <mxDefaultPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * (end)\n * \n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the <mxDefaultPopupMenuCodec>, the format of the\n * configuration is explained in <mxDefaultPopupMenu.decode>.\n * \n * The toolbar is defined in the mxDefaultToolbar section. Items can be added\n * and removed in this section.\n * \n * (code)\n * <mxEditor>\n *   <mxDefaultToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * (end)\n * \n * The format of the configuration is described in\n * <mxDefaultToolbarCodec.decode>.\n * \n * Ids:\n * \n * For the IDs, there is an implicit behaviour in <mxCodec>: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the <mxCell.id> of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the <mxGraphModel.getCell> function. If there is a collision, a new\n * Id will be created for the cell using <mxGraphModel.createId>. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n * \n * See <mxEditorCodec>, <mxDefaultToolbarCodec> and <mxDefaultPopupMenuCodec>\n * for information about configuring the editor and user interface.\n * \n * Programmatically inserting cells:\n * \n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n * \n * (code)\n * var userObject = new Object();\n * var parent = editor.graph.getDefaultParent();\n * var model = editor.graph.model;\n * model.beginUpdate();\n * try\n * {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n * \n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n * \n * (code)\n * var template = editor.templates['task'];\n * var clone = editor.graph.model.cloneCell(template);\n * (end)\n * \n * Resources:\n *\n * resources/editor - Language resources for mxEditor\n *\n * Callback: onInit\n *\n * Called from within the constructor. In the callback,\n * \"this\" refers to the editor instance.\n *\n * Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * <resetFirstTime> to reset this cookie. This cookie\n * only exists if <onInit> is implemented.\n *\n * Event: mxEvent.OPEN\n *\n * Fires after a file was opened in <open>. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * <filename>.\n *\n * Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in <save>. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * Event: mxEvent.POST\n * \n * Fires if a successful response was received in <postDiagram>. The\n * <code>request</code> property contains the <mxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request. \n *\n * Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * Event: mxEvent.BEFORE_ADD_VERTEX\n * \n * Fires before a vertex is added in <addVertex>. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n * \n * Event: mxEvent.ADD_VERTEX\n * \n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n * \n * Event: mxEvent.AFTER_ADD_VERTEX\n * \n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n * \n * Example:\n * \n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n * \n * (code)\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt)\n * {\n *   var vertex = evt.getProperty('vertex');\n * \n *   if (editor.graph.isCellEditable(vertex))\n *   {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.ESCAPE\n * \n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n * \n * Constructor: mxEditor\n *\n * Constructs a new editor. This function invokes the <onInit> callback\n * upon completion.\n *\n * Example:\n *\n * (code)\n * var config = mxUtils.load('config/diagrameditor.xml').getDocumentElement();\n * var editor = new mxEditor(config);\n * (end)\n * \n * Parameters:\n * \n * config - Optional XML node that contains the configuration.\n */\nfunction mxEditor(config)\n{\n\tthis.actions = [];\n\tthis.addActions();\n\n\t// Executes the following only if a document has been instanciated.\n\t// That is, don't execute when the editorcodec is setup.\n\tif (document.body != null)\n\t{\n\t\t// Defines instance fields\n\t\tthis.cycleAttributeValues = [];\n\t\tthis.popupHandler = new mxDefaultPopupMenu();\n\t\tthis.undoManager = new mxUndoManager();\n\n\t\t// Creates the graph and toolbar without the containers\n\t\tthis.graph = this.createGraph();\n\t\tthis.toolbar = this.createToolbar();\n\n\t\t// Creates the global keyhandler (requires graph instance)\n\t\tthis.keyHandler = new mxDefaultKeyHandler(this);\n\n\t\t// Configures the editor using the URI\n\t\t// which was passed to the ctor\n\t\tthis.configure(config);\n\t\t\n\t\t// Assigns the swimlaneIndicatorColorAttribute on the graph\n\t\tthis.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n\n\t\t// Checks if the <onInit> hook has been set\n\t\tif (this.onInit != null)\n\t\t{\n\t\t\t// Invokes the <onInit> hook\n\t\t\tthis.onInit();\n\t\t}\n\t\t\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/editor');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/editor');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxEditor.prototype = new mxEventSource();\nmxEditor.prototype.constructor = mxEditor;\n\n/**\n * Group: Controls and Handlers\n */\n\t\n/**\n * Variable: askZoomResource\n * \n * Specifies the resource key for the zoom dialog. If the resource for this\n * key does not exist then the value is used as the error message. Default\n * is 'askZoom'.\n */\nmxEditor.prototype.askZoomResource = (mxClient.language != 'none') ? 'askZoom' : '';\n\t\n/**\n * Variable: lastSavedResource\n * \n * Specifies the resource key for the last saved info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.lastSavedResource = (mxClient.language != 'none') ? 'lastSaved' : '';\n\t\n/**\n * Variable: currentFileResource\n * \n * Specifies the resource key for the current file info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'currentFile'.\n */\nmxEditor.prototype.currentFileResource = (mxClient.language != 'none') ? 'currentFile' : '';\n\t\n/**\n * Variable: propertiesResource\n * \n * Specifies the resource key for the properties window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'properties'.\n */\nmxEditor.prototype.propertiesResource = (mxClient.language != 'none') ? 'properties' : '';\n\t\n/**\n * Variable: tasksResource\n * \n * Specifies the resource key for the tasks window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'tasks'.\n */\nmxEditor.prototype.tasksResource = (mxClient.language != 'none') ? 'tasks' : '';\n\t\n/**\n * Variable: helpResource\n * \n * Specifies the resource key for the help window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'help'.\n */\nmxEditor.prototype.helpResource = (mxClient.language != 'none') ? 'help' : '';\n\t\n/**\n * Variable: outlineResource\n * \n * Specifies the resource key for the outline window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'outline'.\n */\nmxEditor.prototype.outlineResource = (mxClient.language != 'none') ? 'outline' : '';\n\t\n/**\n * Variable: outline\n * \n * Reference to the <mxWindow> that contains the outline. The <mxOutline>\n * is stored in outline.outline.\n */\nmxEditor.prototype.outline = null;\n\n/**\n * Variable: graph\n *\n * Holds a <mxGraph> for displaying the diagram. The graph\n * is created in <setGraphContainer>.\n */\nmxEditor.prototype.graph = null;\n\n/**\n * Variable: graphRenderHint\n *\n * Holds the render hint used for creating the\n * graph in <setGraphContainer>. See <mxGraph>.\n * Default is null.\n */\nmxEditor.prototype.graphRenderHint = null;\n\n/**\n * Variable: toolbar\n *\n * Holds a <mxDefaultToolbar> for displaying the toolbar. The\n * toolbar is created in <setToolbarContainer>.\n */\nmxEditor.prototype.toolbar = null;\n\n/**\n * Variable: status\n *\n * DOM container that holds the statusbar. Default is null.\n * Use <setStatusContainer> to set this value.\n */\nmxEditor.prototype.status = null;\n\n/**\n * Variable: popupHandler\n *\n * Holds a <mxDefaultPopupMenu> for displaying\n * popupmenus.\n */\nmxEditor.prototype.popupHandler = null;\n\n/**\n * Variable: undoManager\n *\n * Holds an <mxUndoManager> for the command history.\n */\nmxEditor.prototype.undoManager = null;\n\n/**\n * Variable: keyHandler\n *\n * Holds a <mxDefaultKeyHandler> for handling keyboard events.\n * The handler is created in <setGraphContainer>.\n */\nmxEditor.prototype.keyHandler = null;\n\n/**\n * Group: Actions and Options\n */\n\n/**\n * Variable: actions\n *\n * Maps from actionnames to actions, which are functions taking\n * the editor and the cell as arguments. Use <addAction>\n * to add or replace an action and <execute> to execute an action\n * by name, passing the cell to be operated upon as the second\n * argument.\n */\nmxEditor.prototype.actions = null;\n\n/**\n * Variable: dblClickAction\n *\n * Specifies the name of the action to be executed\n * when a cell is double clicked. Default is 'edit'.\n * \n * To handle a singleclick, use the following code.\n * \n * (code)\n * editor.graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event');\n *   var cell = evt.getProperty('cell');\n * \n *   if (cell != null && !e.isConsumed())\n *   {\n *     // Do something useful with cell...\n *     e.consume();\n *   }\n * });\n * (end)\n */\nmxEditor.prototype.dblClickAction = 'edit';\n\n/**\n * Variable: swimlaneRequired\n * \n * Specifies if new cells must be inserted\n * into an existing swimlane. Otherwise, cells\n * that are not swimlanes can be inserted as\n * top-level cells. Default is false.\n */\nmxEditor.prototype.swimlaneRequired = false;\n\n/**\n * Variable: disableContextMenu\n *\n * Specifies if the context menu should be disabled in the graph container.\n * Default is true.\n */\nmxEditor.prototype.disableContextMenu = true;\n\n/**\n * Group: Templates\n */\n\n/**\n * Variable: insertFunction\n *\n * Specifies the function to be used for inserting new\n * cells into the graph. This is assigned from the\n * <mxDefaultToolbar> if a vertex-tool is clicked.\n */\nmxEditor.prototype.insertFunction = null;\n\n/**\n * Variable: forcedInserting\n *\n * Specifies if a new cell should be inserted on a single\n * click even using <insertFunction> if there is a cell \n * under the mousepointer, otherwise the cell under the \n * mousepointer is selected. Default is false.\n */\nmxEditor.prototype.forcedInserting = false;\n\n/**\n * Variable: templates\n * \n * Maps from names to protoype cells to be used\n * in the toolbar for inserting new cells into\n * the diagram.\n */\nmxEditor.prototype.templates = null;\n\n/**\n * Variable: defaultEdge\n * \n * Prototype edge cell that is used for creating\n * new edges.\n */\nmxEditor.prototype.defaultEdge = null;\n\n/**\n * Variable: defaultEdgeStyle\n * \n * Specifies the edge style to be returned in <getEdgeStyle>.\n * Default is null.\n */\nmxEditor.prototype.defaultEdgeStyle = null;\n\n/**\n * Variable: defaultGroup\n * \n * Prototype group cell that is used for creating\n * new groups.\n */\nmxEditor.prototype.defaultGroup = null;\n\n/**\n * Variable: groupBorderSize\n *\n * Default size for the border of new groups. If null,\n * then then <mxGraph.gridSize> is used. Default is\n * null.\n */\nmxEditor.prototype.groupBorderSize = null;\n\n/**\n * Group: Backend Integration\n */\n\n/**\n * Variable: filename\n *\n * Contains the URL of the last opened file as a string.\n * Default is null.\n */\nmxEditor.prototype.filename = null;\n\n/**\n * Variable: lineFeed\n *\n * Character to be used for encoding linefeeds in <save>. Default is '&#xa;'.\n */\nmxEditor.prototype.linefeed = '&#xa;';\n\n/**\n * Variable: postParameterName\n *\n * Specifies if the name of the post parameter that contains the diagram\n * data in a post request to the server. Default is 'xml'.\n */\nmxEditor.prototype.postParameterName = 'xml';\n\n/**\n * Variable: escapePostData\n *\n * Specifies if the data in the post request for saving a diagram\n * should be converted using encodeURIComponent. Default is true.\n */\nmxEditor.prototype.escapePostData = true;\n\n/**\n * Variable: urlPost\n *\n * Specifies the URL to be used for posting the diagram\n * to a backend in <save>.\n */\nmxEditor.prototype.urlPost = null;\n\n/**\n * Variable: urlImage\n *\n * Specifies the URL to be used for creating a bitmap of\n * the graph in the image action.\n */\nmxEditor.prototype.urlImage = null;\n\n/**\n * Group: Autolayout\n */\n\n/**\n * Variable: horizontalFlow\n *\n * Specifies the direction of the flow\n * in the diagram. This is used in the\n * layout algorithms. Default is false,\n * ie. vertical flow.\n */\nmxEditor.prototype.horizontalFlow = false;\n\n/**\n * Variable: layoutDiagram\n *\n * Specifies if the top-level elements in the\n * diagram should be layed out using a vertical\n * or horizontal stack depending on the setting\n * of <horizontalFlow>. The spacing between the\n * swimlanes is specified by <swimlaneSpacing>.\n * Default is false.\n * \n * If the top-level elements are swimlanes, then\n * the intra-swimlane layout is activated by\n * the <layoutSwimlanes> switch.\n */\nmxEditor.prototype.layoutDiagram = false;\n\n/**\n * Variable: swimlaneSpacing\n *\n * Specifies the spacing between swimlanes if\n * automatic layout is turned on in\n * <layoutDiagram>. Default is 0.\n */\nmxEditor.prototype.swimlaneSpacing = 0;\n\n/**\n * Variable: maintainSwimlanes\n * \n * Specifies if the swimlanes should be kept at the same\n * width or height depending on the setting of\n * <horizontalFlow>.  Default is false.\n * \n * For horizontal flows, all swimlanes\n * have the same height and for vertical flows, all swimlanes\n * have the same width. Furthermore, the swimlanes are\n * automatically \"stacked\" if <layoutDiagram> is true.\n */\nmxEditor.prototype.maintainSwimlanes = false;\n\n/**\n * Variable: layoutSwimlanes\n *\n * Specifies if the children of swimlanes should\n * be layed out, either vertically or horizontally\n * depending on <horizontalFlow>.\n * Default is false.\n */\nmxEditor.prototype.layoutSwimlanes = false;\n\n/**\n * Group: Attribute Cycling\n */\n \n/**\n * Variable: cycleAttributeValues\n * \n * Specifies the attribute values to be cycled when\n * inserting new swimlanes. Default is an empty\n * array.\n */\nmxEditor.prototype.cycleAttributeValues = null;\n\n/**\n * Variable: cycleAttributeIndex\n * \n * Index of the last consumed attribute index. If a new\n * swimlane is inserted, then the <cycleAttributeValues>\n * at this index will be used as the value for\n * <cycleAttributeName>. Default is 0.\n */\nmxEditor.prototype.cycleAttributeIndex = 0;\n\n/**\n * Variable: cycleAttributeName\n * \n * Name of the attribute to be assigned a <cycleAttributeValues>\n * when inserting new swimlanes. Default is 'fillColor'.\n */\nmxEditor.prototype.cycleAttributeName = 'fillColor';\n\n/**\n * Group: Windows\n */\n\n/**\n * Variable: tasks\n * \n * Holds the <mxWindow> created in <showTasks>.\n */\nmxEditor.prototype.tasks = null;\n\n/**\n * Variable: tasksWindowImage\n *\n * Icon for the tasks window.\n */\nmxEditor.prototype.tasksWindowImage = null;\n\n/**\n * Variable: tasksTop\n * \n * Specifies the top coordinate of the tasks window in pixels.\n * Default is 20.\n */\nmxEditor.prototype.tasksTop = 20;\n\n/**\n * Variable: help\n * \n * Holds the <mxWindow> created in <showHelp>.\n */\nmxEditor.prototype.help = null;\n\n/**\n * Variable: helpWindowImage\n *\n * Icon for the help window.\n */\nmxEditor.prototype.helpWindowImage = null;\n\n/**\n * Variable: urlHelp\n *\n * Specifies the URL to be used for the contents of the\n * Online Help window. This is usually specified in the\n * resources file under urlHelp for language-specific\n * online help support.\n */\nmxEditor.prototype.urlHelp = null;\n\n/**\n * Variable: helpWidth\n * \n * Specifies the width of the help window in pixels.\n * Default is 300.\n */\nmxEditor.prototype.helpWidth = 300;\n\t\n/**\n * Variable: helpHeight\n * \n * Specifies the height of the help window in pixels.\n * Default is 260.\n */\nmxEditor.prototype.helpHeight = 260;\n\n/**\n * Variable: propertiesWidth\n * \n * Specifies the width of the properties window in pixels.\n * Default is 240.\n */\nmxEditor.prototype.propertiesWidth = 240;\n\t\t\n/**\n * Variable: propertiesHeight\n * \n * Specifies the height of the properties window in pixels.\n * If no height is specified then the window will be automatically\n * sized to fit its contents. Default is null.\n */\nmxEditor.prototype.propertiesHeight = null;\n\t\t\n/**\n * Variable: movePropertiesDialog\n *\n * Specifies if the properties dialog should be automatically\n * moved near the cell it is displayed for, otherwise the\n * dialog is not moved. This value is only taken into \n * account if the dialog is already visible. Default is false.\n */\nmxEditor.prototype.movePropertiesDialog = false;\n\n/**\n * Variable: validating\n *\n * Specifies if <mxGraph.validateGraph> should automatically be invoked after\n * each change. Default is false.\n */\nmxEditor.prototype.validating = false;\n\n/**\n * Variable: modified\n *\n * True if the graph has been modified since it was last saved.\n */\nmxEditor.prototype.modified = false;\n\n/**\n * Function: isModified\n * \n * Returns <modified>.\n */\nmxEditor.prototype.isModified = function ()\n{\n\treturn this.modified;\n};\n\n/**\n * Function: setModified\n * \n * Sets <modified> to the specified boolean value.\n */\nmxEditor.prototype.setModified = function (value)\n{\n\tthis.modified = value;\n};\n\n/**\n * Function: addActions\n *\n * Adds the built-in actions to the editor instance.\n *\n * save - Saves the graph using <urlPost>.\n * print - Shows the graph in a new print preview window.\n * show - Shows the graph in a new window.\n * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n * refresh - Refreshes the graph's display.\n * cut - Copies the current selection into the clipboard\n * and removes it from the graph.\n * copy - Copies the current selection into the clipboard.\n * paste - Pastes the clipboard into the graph.\n * delete - Removes the current selection from the graph.\n * group - Puts the current selection into a new group.\n * ungroup - Removes the selected groups and selects the children.\n * undo - Undoes the last change on the graph model.\n * redo - Redoes the last change on the graph model.\n * zoom - Sets the zoom via a dialog.\n * zoomIn - Zooms into the graph.\n * zoomOut - Zooms out of the graph\n * actualSize - Resets the scale and translation on the graph.\n * fit - Changes the scale so that the graph fits into the window.\n * showProperties - Shows the properties dialog.\n * selectAll - Selects all cells.\n * selectNone - Clears the selection.\n * selectVertices - Selects all vertices.\n * selectEdges = Selects all edges.\n * edit - Starts editing the current selection cell.\n * enterGroup - Drills down into the current selection cell.\n * exitGroup - Moves up in the drilling hierachy\n * home - Moves to the topmost parent in the drilling hierarchy\n * selectPrevious - Selects the previous cell.\n * selectNext - Selects the next cell.\n * selectParent - Selects the parent of the selection cell.\n * selectChild - Selects the first child of the selection cell.\n * collapse - Collapses the currently selected cells.\n * expand - Expands the currently selected cells.\n * bold - Toggle bold text style.\n * italic - Toggle italic text style.\n * underline - Toggle underline text style.\n * alignCellsLeft - Aligns the selection cells at the left.\n * alignCellsCenter - Aligns the selection cells in the center.\n * alignCellsRight - Aligns the selection cells at the right.\n * alignCellsTop - Aligns the selection cells at the top.\n * alignCellsMiddle - Aligns the selection cells in the middle.\n * alignCellsBottom - Aligns the selection cells at the bottom.\n * alignFontLeft - Sets the horizontal text alignment to left.\n * alignFontCenter - Sets the horizontal text alignment to center.\n * alignFontRight - Sets the horizontal text alignment to right.\n * alignFontTop - Sets the vertical text alignment to top.\n * alignFontMiddle - Sets the vertical text alignment to middle.\n * alignFontBottom - Sets the vertical text alignment to bottom.\n * toggleTasks - Shows or hides the tasks window.\n * toggleHelp - Shows or hides the help window.\n * toggleOutline - Shows or hides the outline window.\n * toggleConsole - Shows or hides the console window.\n */\nmxEditor.prototype.addActions = function ()\n{\n\tthis.addAction('save', function(editor)\n\t{\n\t\teditor.save();\n\t});\n\t\n\tthis.addAction('print', function(editor)\n\t{\n\t\tvar preview = new mxPrintPreview(editor.graph, 1);\n\t\tpreview.open();\n\t});\n\t\n\tthis.addAction('show', function(editor)\n\t{\n\t\tmxUtils.show(editor.graph, null, 10, 10);\n\t});\n\n\tthis.addAction('exportImage', function(editor)\n\t{\n\t\tvar url = editor.getUrlImage();\n\t\t\n\t\tif (url == null || mxClient.IS_LOCAL)\n\t\t{\n\t\t\teditor.execute('show');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar node = mxUtils.getViewXml(editor.graph, 1);\n\t\t\tvar xml = mxUtils.getXml(node, '\\n');\n\n\t\t\tmxUtils.submit(url, editor.postParameterName + '=' +\n\t\t\t\tencodeURIComponent(xml), document, '_blank');\n\t\t}\n\t});\n\t\n\tthis.addAction('refresh', function(editor)\n\t{\n\t\teditor.graph.refresh();\n\t});\n\t\n\tthis.addAction('cut', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.cut(editor.graph);\n\t\t}\n\t});\n\t\n\tthis.addAction('copy', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.copy(editor.graph);\n\t\t}\n\t});\n\t\n\tthis.addAction('paste', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.paste(editor.graph);\n\t\t}\n\t});\n\t\n\tthis.addAction('delete', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCells();\n\t\t}\n\t});\n\t\n\tthis.addAction('group', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCell(editor.groupCells());\n\t\t}\n\t});\n\t\n\tthis.addAction('ungroup', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCells(editor.graph.ungroupCells());\n\t\t}\n\t});\n\t\n\tthis.addAction('removeFromParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCellsFromParent();\n\t\t}\n\t});\n\t\n\tthis.addAction('undo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.undo();\n\t\t}\n\t});\n\t\n\tthis.addAction('redo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.redo();\n\t\t}\n\t});\n\t\n\tthis.addAction('zoomIn', function(editor)\n\t{\n\t\teditor.graph.zoomIn();\n\t});\n\t\n\tthis.addAction('zoomOut', function(editor)\n\t{\n\t\teditor.graph.zoomOut();\n\t});\n\t\n\tthis.addAction('actualSize', function(editor)\n\t{\n\t\teditor.graph.zoomActual();\n\t});\n\t\n\tthis.addAction('fit', function(editor)\n\t{\n\t\teditor.graph.fit();\n\t});\n\t\n\tthis.addAction('showProperties', function(editor, cell)\n\t{\n\t\teditor.showProperties(cell);\n\t});\n\t\n\tthis.addAction('selectAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectAll();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectNone', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.clearSelection();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectVertices', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectVertices();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectEdges', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectEdges();\n\t\t}\n\t});\n\t\n\tthis.addAction('edit', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled() &&\n\t\t\teditor.graph.isCellEditable(cell))\n\t\t{\n\t\t\teditor.graph.startEditingAtCell(cell);\n\t\t}\n\t});\n\t\n\tthis.addAction('toBack', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(true);\n\t\t}\n\t});\n\t\n\tthis.addAction('toFront', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(false);\n\t\t}\n\t});\n\t\n\tthis.addAction('enterGroup', function(editor, cell)\n\t{\n\t\teditor.graph.enterGroup(cell);\n\t});\n\t\n\tthis.addAction('exitGroup', function(editor)\n\t{\n\t\teditor.graph.exitGroup();\n\t});\n\t\n\tthis.addAction('home', function(editor)\n\t{\n\t\teditor.graph.home();\n\t});\n\t\n\tthis.addAction('selectPrevious', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectPreviousCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectNext', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectNextCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectParentCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectChild', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectChildCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('collapse', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(true);\n\t\t}\n\t});\n\t\n\tthis.addAction('collapseAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(true, false, cells);\n\t\t}\n\t});\n\t\n\tthis.addAction('expand', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(false);\n\t\t}\n\t});\n\t\n\tthis.addAction('expandAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(false, false, cells);\n\t\t}\n\t});\n\t\n\tthis.addAction('bold', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_BOLD);\n\t\t}\n\t});\n\t\n\tthis.addAction('italic', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_ITALIC);\n\t\t}\n\t});\n\t\n\tthis.addAction('underline', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_UNDERLINE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsLeft', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_LEFT);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontLeft', function(editor)\n\t{\n\t\t\n\t\teditor.graph.setCellStyles(\n\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\tmxConstants.ALIGN_LEFT);\n\t});\n\t\n\tthis.addAction('alignFontCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\t\n\tthis.addAction('zoom', function(editor)\n\t{\n\t\tvar current = editor.graph.getView().scale*100;\n\t\tvar scale = parseFloat(mxUtils.prompt(\n\t\t\tmxResources.get(editor.askZoomResource) ||\n\t\t\teditor.askZoomResource,\n\t\t\tcurrent))/100;\n\n\t\tif (!isNaN(scale))\n\t\t{\n\t\t\teditor.graph.getView().setScale(scale);\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleTasks', function(editor)\n\t{\n\t\tif (editor.tasks != null)\n\t\t{\n\t\t\teditor.tasks.setVisible(!editor.tasks.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showTasks();\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleHelp', function(editor)\n\t{\n\t\tif (editor.help != null)\n\t\t{\n\t\t\teditor.help.setVisible(!editor.help.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showHelp();\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleOutline', function(editor)\n\t{\n\t\tif (editor.outline == null)\n\t\t{\n\t\t\teditor.showOutline();\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.outline.setVisible(!editor.outline.isVisible());\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleConsole', function(editor)\n\t{\n\t\tmxLog.setVisible(!mxLog.isVisible());\n\t});\n};\n\n/**\n * Function: configure\n *\n * Configures the editor using the specified node. To load the\n * configuration from a given URL the following code can be used to obtain\n * the XML node.\n * \n * (code)\n * var node = mxUtils.load(url).getDocumentElement();\n * (end)\n * \n * Parameters:\n * \n * node - XML node that contains the configuration.\n */\nmxEditor.prototype.configure = function (node)\n{\n\tif (node != null)\n\t{\n\t\t// Creates a decoder for the XML data\n\t\t// and uses it to configure the editor\n\t\tvar dec = new mxCodec(node.ownerDocument);\n\t\tdec.decode(node, this);\n\t\t\n\t\t// Resets the counters, modified state and\n\t\t// command history\n\t\tthis.resetHistory();\n\t}\n};\n\n/**\n * Function: resetFirstTime\n * \n * Resets the cookie that is used to remember if the editor has already\n * been used.\n */\nmxEditor.prototype.resetFirstTime = function ()\n{\n\tdocument.cookie =\n\t\t'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n};\n\n/**\n * Function: resetHistory\n * \n * Resets the command history, modified state and counters.\n */\nmxEditor.prototype.resetHistory = function ()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.undoManager.clear();\n\tthis.ignoredChanges = 0;\n\tthis.setModified(false);\n};\n\n/**\n * Function: addAction\n * \n * Binds the specified actionname to the specified function.\n * \n * Parameters:\n * \n * actionname - String that specifies the name of the action\n * to be added.\n * funct - Function that implements the new action. The first\n * argument of the function is the editor it is used\n * with, the second argument is the cell it operates\n * upon.\n * \n * Example:\n * (code)\n * editor.addAction('test', function(editor, cell)\n * {\n * \t\tmxUtils.alert(\"test \"+cell);\n * });\n * (end)\n */\nmxEditor.prototype.addAction = function (actionname, funct)\n{\n\tthis.actions[actionname] = funct;\n};\n\n/**\n * Function: execute\n * \n * Executes the function with the given name in <actions> passing the\n * editor instance and given cell as the first and second argument. All\n * additional arguments are passed to the action as well. This method\n * contains a try-catch block and displays an error message if an action\n * causes an exception. The exception is re-thrown after the error\n * message was displayed.\n * \n * Example:\n * \n * (code)\n * editor.execute(\"showProperties\", cell);\n * (end)\n */\nmxEditor.prototype.execute = function (actionname, cell, evt)\n{\n\tvar action = this.actions[actionname];\n\t\n\tif (action != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Creates the array of arguments by replacing the actionname\n\t\t\t// with the editor instance in the args of this function\n\t\t\tvar args = arguments;\n\t\t\targs[0] = this;\n\t\t\t\n\t\t\t// Invokes the function on the editor using the args\n\t\t\taction.apply(this, args);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxUtils.error('Cannot execute ' + actionname +\n\t\t\t\t': ' + e.message, 280, true);\n\t\t\t\n\t\t\tthrow e;\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxUtils.error('Cannot find action '+actionname, 280, true);\n\t}\n};\n\n/**\n * Function: addTemplate\n * \n * Adds the specified template under the given name in <templates>.\n */\nmxEditor.prototype.addTemplate = function (name, template)\n{\n\tthis.templates[name] = template;\n};\n\n/**\n * Function: getTemplate\n * \n * Returns the template for the given name.\n */\nmxEditor.prototype.getTemplate = function (name)\n{\n\treturn this.templates[name];\n};\n\n/**\n * Function: createGraph\n * \n * Creates the <graph> for the editor. The graph is created with no\n * container and is initialized from <setGraphContainer>.\n */\nmxEditor.prototype.createGraph = function ()\n{\n\tvar graph = new mxGraph(null, null, this.graphRenderHint);\n\t\n\t// Enables rubberband, tooltips, panning\n\tgraph.setTooltips(true);\n\tgraph.setPanning(true);\n\n\t// Overrides the dblclick method on the graph to\n\t// invoke the dblClickAction for a cell and reset\n\t// the selection tool in the toolbar\n\tthis.installDblClickHandler(graph);\n\t\n\t// Installs the command history\n\tthis.installUndoHandler(graph);\n\n\t// Installs the handlers for the root event\n\tthis.installDrillHandler(graph);\n\t\n\t// Installs the handler for validation\n\tthis.installChangeHandler(graph);\n\n\t// Installs the handler for calling the\n\t// insert function and consume the\n\t// event if an insert function is defined\n\tthis.installInsertHandler(graph);\n\n\t// Redirects the function for creating the\n\t// popupmenu items\n\tgraph.popupMenuHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(menu, cell, evt)\n\t\t{\n\t\t\treturn this.createPopupMenu(menu, cell, evt);\n\t\t});\n\n\t// Redirects the function for creating\n\t// new connections in the diagram\n\tgraph.connectionHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(source, target)\n\t\t{\n\t\t\treturn this.createEdge(source, target);\n\t\t});\n\t\n\t// Maintains swimlanes and installs autolayout\n\tthis.createSwimlaneManager(graph);\n\tthis.createLayoutManager(graph);\n\t\n\treturn graph;\n};\n\n/**\n * Function: createSwimlaneManager\n * \n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.createSwimlaneManager = function (graph)\n{\n\tvar swimlaneMgr = new mxSwimlaneManager(graph, false);\n\n\tswimlaneMgr.isHorizontal = mxUtils.bind(this, function()\n\t{\n\t\treturn this.horizontalFlow;\n\t});\n\t\n\tswimlaneMgr.isEnabled = mxUtils.bind(this, function()\n\t{\n\t\treturn this.maintainSwimlanes;\n\t});\n\t\n\treturn swimlaneMgr;\n};\n\n/**\n * Function: createLayoutManager\n * \n * Creates a layout manager for the swimlane and diagram layouts, that\n * is, the locally defined inter- and intraswimlane layouts.\n */\nmxEditor.prototype.createLayoutManager = function (graph)\n{\n\tvar layoutMgr = new mxLayoutManager(graph);\n\t\n\tvar self = this; // closure\n\tlayoutMgr.getLayout = function(cell)\n\t{\n\t\tvar layout = null;\n\t\tvar model = self.graph.getModel();\n\t\t\n\t\tif (model.getParent(cell) != null)\n\t\t{\n\t\t\t// Executes the swimlane layout if a child of\n\t\t\t// a swimlane has been changed. The layout is\n\t\t\t// lazy created in createSwimlaneLayout.\n\t\t\tif (self.layoutSwimlanes &&\n\t\t\t\tgraph.isSwimlane(cell))\n\t\t\t{\n\t\t\t\tif (self.swimlaneLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.swimlaneLayout = self.createSwimlaneLayout();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlayout = self.swimlaneLayout;\n\t\t\t}\n\t\t\t\n\t\t\t// Executes the diagram layout if the modified\n\t\t\t// cell is a top-level cell. The layout is\n\t\t\t// lazy created in createDiagramLayout.\n\t\t\telse if (self.layoutDiagram &&\n\t\t\t\t(graph.isValidRoot(cell) ||\n\t\t\t\tmodel.getParent(model.getParent(cell)) == null))\n\t\t\t{\n\t\t\t\tif (self.diagramLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.diagramLayout = self.createDiagramLayout();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlayout = self.diagramLayout;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\treturn layout;\n\t};\n\t\n\treturn layoutMgr;\n};\n\n/**\n * Function: setGraphContainer\n * \n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.setGraphContainer = function (container)\n{\n\tif (this.graph.container == null)\n\t{\n\t\t// Creates the graph instance inside the given container and render hint\n\t\t//this.graph = new mxGraph(container, null, this.graphRenderHint);\n\t\tthis.graph.init(container);\n\n\t\t// Install rubberband selection as the last\n\t\t// action handler in the chain\n\t\tthis.rubberband = new mxRubberband(this.graph);\n\n\t\t// Disables the context menu\n\t\tif (this.disableContextMenu)\n\t\t{\n\t\t\tmxEvent.disableContextMenu(container);\n\t\t}\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: installDblClickHandler\n * \n * Overrides <mxGraph.dblClick> to invoke <dblClickAction>\n * on a cell and reset the selection tool in the toolbar.\n */\nmxEditor.prototype.installDblClickHandler = function (graph)\n{\n\t// Installs a listener for double click events\n\tgraph.addListener(mxEvent.DOUBLE_CLICK,\n\t\tmxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar cell = evt.getProperty('cell');\n\t\t\t\n\t\t\tif (cell != null &&\n\t\t\t\tgraph.isEnabled() &&\n\t\t\t\tthis.dblClickAction != null)\n\t\t\t{\n\t\t\t\tthis.execute(this.dblClickAction, cell);\n\t\t\t\tevt.consume();\n\t\t\t}\n\t\t})\n\t);\n};\n\t\t\n/**\n * Function: installUndoHandler\n * \n * Adds the <undoManager> to the graph model and the view.\n */\nmxEditor.prototype.installUndoHandler = function (graph)\n{\t\t\t\t\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tvar edit = evt.getProperty('edit');\n\t\tthis.undoManager.undoableEditHappened(edit);\n\t});\n\t\n\tgraph.getModel().addListener(mxEvent.UNDO, listener);\n\tgraph.getView().addListener(mxEvent.UNDO, listener);\n\n\t// Keeps the selection state in sync\n\tvar undoHandler = function(sender, evt)\n\t{\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\tgraph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n\t};\n\t\n\tthis.undoManager.addListener(mxEvent.UNDO, undoHandler);\n\tthis.undoManager.addListener(mxEvent.REDO, undoHandler);\n};\n\t\t\n/**\n * Function: installDrillHandler\n * \n * Installs listeners for dispatching the <root> event.\n */\nmxEditor.prototype.installDrillHandler = function (graph)\n{\t\t\t\t\n\tvar listener = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t});\n\t\n\tgraph.getView().addListener(mxEvent.DOWN, listener);\n\tgraph.getView().addListener(mxEvent.UP, listener);\n};\n\n/**\n * Function: installChangeHandler\n * \n * Installs the listeners required to automatically validate\n * the graph. On each change of the root, this implementation\n * fires a <root> event.\n */\nmxEditor.prototype.installChangeHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Updates the modified state\n\t\tthis.setModified(true);\n\n\t\t// Automatically validates the graph\n\t\t// after each change\n\t\tif (this.validating == true)\n\t\t{\n\t\t\tgraph.validateGraph();\n\t\t}\n\n\t\t// Checks if the root has been changed\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\t\n\t\tfor (var i = 0; i < changes.length; i++)\n\t\t{\n\t\t\tvar change = changes[i];\n\t\t\t\n\t\t\tif (change instanceof mxRootChange ||\n\t\t\t\t(change instanceof mxValueChange &&\n\t\t\t\tchange.cell == this.graph.model.root) ||\n\t\t\t\t(change instanceof mxCellAttributeChange &&\n\t\t\t\tchange.cell == this.graph.model.root))\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t\n\tgraph.getModel().addListener(mxEvent.CHANGE, listener);\n};\n\n/**\n * Function: installInsertHandler\n * \n * Installs the handler for invoking <insertFunction> if\n * one is defined.\n */\nmxEditor.prototype.installInsertHandler = function (graph)\n{\n\tvar self = this; // closure\n\tvar insertHandler =\n\t{\n\t\tmouseDown: function(sender, me)\n\t\t{\n\t\t\tif (self.insertFunction != null &&\n\t\t\t\t!me.isPopupTrigger() &&\n\t\t\t\t(self.forcedInserting ||\n\t\t\t\tme.getState() == null))\n\t\t\t{\n\t\t\t\tself.graph.clearSelection();\n\t\t\t\tself.insertFunction(me.getEvent(), me.getCell());\n\n\t\t\t\t// Consumes the rest of the events\n\t\t\t\t// for this gesture (down, move, up)\n\t\t\t\tthis.isActive = true;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\t\t\n\t\tmouseMove: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\t\t\n\t\tmouseUp: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tthis.isActive = false;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t}\n\t};\n\t\n\tgraph.addMouseListener(insertHandler);\n};\n\n/**\n * Function: createDiagramLayout\n * \n * Creates the layout instance used to layout the\n * swimlanes in the diagram.\n */\nmxEditor.prototype.createDiagramLayout = function ()\n{\n\tvar gs = this.graph.gridSize;\n\tvar layout = new mxStackLayout(this.graph, !this.horizontalFlow,\n\t\t this.swimlaneSpacing, 2*gs, 2*gs);\n\t\n\t// Overrides isIgnored to only take into account swimlanes\n\tlayout.isVertexIgnored = function(cell)\n\t{\n\t\treturn !layout.graph.isSwimlane(cell);\n\t};\n\t\n\treturn layout;\n};\n\n/**\n * Function: createSwimlaneLayout\n * \n * Creates the layout instance used to layout the\n * children of each swimlane.\n */\nmxEditor.prototype.createSwimlaneLayout = function ()\n{\n\treturn new mxCompactTreeLayout(this.graph, this.horizontalFlow);\n};\n\n/**\n * Function: createToolbar\n * \n * Creates the <toolbar> with no container.\n */\nmxEditor.prototype.createToolbar = function ()\n{\n\treturn new mxDefaultToolbar(null, this);\n};\n\n/**\n * Function: setToolbarContainer\n * \n * Initializes the toolbar for the given container.\n */\nmxEditor.prototype.setToolbarContainer = function (container)\n{\n\tthis.toolbar.init(container);\n\t\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: setStatusContainer\n * \n * Creates the <status> using the specified container.\n * \n * This implementation adds listeners in the editor to \n * display the last saved time and the current filename \n * in the status bar.\n * \n * Parameters:\n * \n * container - DOM node that will contain the statusbar.\n */\nmxEditor.prototype.setStatusContainer = function (container)\n{\n\tif (this.status == null)\n\t{\n\t\tthis.status = container;\n\t\t\n\t\t// Prints the last saved time in the status bar\n\t\t// when files are saved\n\t\tthis.addListener(mxEvent.SAVE, mxUtils.bind(this, function()\n\t\t{\n\t\t\tvar tstamp = new Date().toLocaleString();\n\t\t\tthis.setStatus((mxResources.get(this.lastSavedResource) ||\n\t\t\t\tthis.lastSavedResource)+': '+tstamp);\n\t\t}));\n\t\t\n\t\t// Updates the statusbar to display the filename\n\t\t// when new files are opened\n\t\tthis.addListener(mxEvent.OPEN, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.setStatus((mxResources.get(this.currentFileResource) ||\n\t\t\t\tthis.currentFileResource)+': '+this.filename);\n\t\t}));\n\t\t\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: setStatus\n * \n * Display the specified message in the status bar.\n * \n * Parameters:\n * \n * message - String the specified the message to\n * be displayed.\n */\nmxEditor.prototype.setStatus = function (message)\n{\n\tif (this.status != null && message != null)\n\t{\n\t\tthis.status.innerHTML = message;\n\t}\n};\n\n/**\n * Function: setTitleContainer\n * \n * Creates a listener to update the inner HTML of the\n * specified DOM node with the value of <getTitle>.\n * \n * Parameters:\n * \n * container - DOM node that will contain the title.\n */\nmxEditor.prototype.setTitleContainer = function (container)\n{\n\tthis.addListener(mxEvent.ROOT, mxUtils.bind(this, function(sender)\n\t{\n\t\tcontainer.innerHTML = this.getTitle();\n\t}));\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: treeLayout\n * \n * Executes a vertical or horizontal compact tree layout\n * using the specified cell as an argument. The cell may\n * either be a group or the root of a tree.\n * \n * Parameters:\n * \n * cell - <mxCell> to use in the compact tree layout.\n * horizontal - Optional boolean to specify the tree's\n * orientation. Default is true.\n */\nmxEditor.prototype.treeLayout = function (cell, horizontal)\n{\n\tif (cell != null)\n\t{\n\t\tvar layout = new mxCompactTreeLayout(this.graph, horizontal);\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: getTitle\n * \n * Returns the string value for the current root of the\n * diagram.\n */\nmxEditor.prototype.getTitle = function ()\n{\n\tvar title = '';\n\tvar graph = this.graph;\n\tvar cell = graph.getCurrentRoot();\n\t\n\twhile (cell != null &&\n\t\t   graph.getModel().getParent(\n\t\t\t\tgraph.getModel().getParent(cell)) != null)\n\t{\n\t\t// Append each label of a valid root\n\t\tif (graph.isValidRoot(cell))\n\t\t{\n\t\t\ttitle = ' > ' +\n\t\t\tgraph.convertValueToString(cell) + title;\n\t\t}\n\t\t\n\t\tcell = graph.getModel().getParent(cell);\n\t}\n\t\n\tvar prefix = this.getRootTitle();\n\t\n\treturn prefix + title;\n};\n\n/**\n * Function: getRootTitle\n * \n * Returns the string value of the root cell in\n * <mxGraph.model>.\n */\nmxEditor.prototype.getRootTitle = function ()\n{\n\tvar root = this.graph.getModel().getRoot();\n\treturn this.graph.convertValueToString(root);\n};\n\n/**\n * Function: undo\n * \n * Undo the last change in <graph>.\n */\nmxEditor.prototype.undo = function ()\n{\n\tthis.undoManager.undo();\n};\n\n/**\n * Function: redo\n * \n * Redo the last change in <graph>.\n */\nmxEditor.prototype.redo = function ()\n{\n\tthis.undoManager.redo();\n};\n\n/**\n * Function: groupCells\n * \n * Invokes <createGroup> to create a new group cell and the invokes\n * <mxGraph.groupCells>, using the grid size of the graph as the spacing\n * in the group's content area.\n */\nmxEditor.prototype.groupCells = function ()\n{\n\tvar border = (this.groupBorderSize != null) ?\n\t\tthis.groupBorderSize :\n\t\tthis.graph.gridSize;\n\treturn this.graph.groupCells(this.createGroup(), border);\n};\n\n/**\n * Function: createGroup\n * \n * Creates and returns a clone of <defaultGroup> to be used\n * as a new group cell in <group>.\n */\nmxEditor.prototype.createGroup = function ()\n{\n\tvar model = this.graph.getModel();\n\t\n\treturn model.cloneCell(this.defaultGroup);\n};\n\n/**\n * Function: open\n * \n * Opens the specified file synchronously and parses it using\n * <readGraphModel>. It updates <filename> and fires an <open>-event after\n * the file has been opened. Exceptions should be handled as follows:\n * \n * (code)\n * try\n * {\n *   editor.open(filename);\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot open ' + filename +\n *     ': ' + e.message, 280, true);\n * }\n * (end)\n *\n * Parameters:\n * \n * filename - URL of the file to be opened.\n */\nmxEditor.prototype.open = function (filename)\n{\n\tif (filename != null)\n\t{\n\t\tvar xml = mxUtils.load(filename).getXml();\n\t\tthis.readGraphModel(xml.documentElement);\n\t\tthis.filename = filename;\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.OPEN, 'filename', filename));\n\t}\n};\n\n/**\n * Function: readGraphModel\n * \n * Reads the specified XML node into the existing graph model and resets\n * the command history and modified state.\n */\nmxEditor.prototype.readGraphModel = function (node)\n{\n\tvar dec = new mxCodec(node.ownerDocument);\n\tdec.decode(node, this.graph.getModel());\n\tthis.resetHistory();\n};\n\n/**\n * Function: save\n * \n * Posts the string returned by <writeGraphModel> to the given URL or the\n * URL returned by <getUrlPost>. The actual posting is carried out by\n * <postDiagram>. If the URL is null then the resulting XML will be\n * displayed using <mxUtils.popup>. Exceptions should be handled as\n * follows:\n * \n * (code)\n * try\n * {\n *   editor.save();\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot save : ' + e.message, 280, true);\n * }\n * (end)\n */\nmxEditor.prototype.save = function (url, linefeed)\n{\n\t// Gets the URL to post the data to\n\turl = url || this.getUrlPost();\n\n\t// Posts the data if the URL is not empty\n\tif (url != null && url.length > 0)\n\t{\n\t\tvar data = this.writeGraphModel(linefeed);\n\t\tthis.postDiagram(url, data);\n\t\t\n\t\t// Resets the modified flag\n\t\tthis.setModified(false);\n\t}\n\t\n\t// Dispatches a save event\n\tthis.fireEvent(new mxEventObject(mxEvent.SAVE, 'url', url));\n};\n\n/**\n * Function: postDiagram\n * \n * Hook for subclassers to override the posting of a diagram\n * represented by the given node to the given URL. This fires\n * an asynchronous <post> event if the diagram has been posted.\n * \n * Example:\n * \n * To replace the diagram with the diagram in the response, use the\n * following code.\n * \n * (code)\n * editor.addListener(mxEvent.POST, function(sender, evt)\n * {\n *   // Process response (replace diagram)\n *   var req = evt.getProperty('request');\n *   var root = req.getDocumentElement();\n *   editor.graph.readGraphModel(root)\n * });\n * (end)\n */\nmxEditor.prototype.postDiagram = function (url, data)\n{\n\tif (this.escapePostData)\n\t{\n\t\tdata = encodeURIComponent(data);\n\t}\n\n\tmxUtils.post(url, this.postParameterName+'='+data,\n\t\tmxUtils.bind(this, function(req)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.POST,\n\t\t\t\t'request', req, 'url', url, 'data', data));\n\t\t})\n\t);\n};\n\n/**\n * Function: writeGraphModel\n * \n * Hook to create the string representation of the diagram. The default\n * implementation uses an <mxCodec> to encode the graph model as\n * follows:\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(this.graph.getModel());\n * return mxUtils.getXml(node, this.linefeed);\n * (end)\n * \n * Parameters:\n * \n * linefeed - Optional character to be used as the linefeed. Default is\n * <linefeed>.\n */\nmxEditor.prototype.writeGraphModel = function (linefeed)\n{\n\tlinefeed = (linefeed != null) ? linefeed : this.linefeed;\n\tvar enc = new mxCodec();\n\tvar node = enc.encode(this.graph.getModel());\n\n\treturn mxUtils.getXml(node, linefeed);\n};\n\n/**\n * Function: getUrlPost\n * \n * Returns the URL to post the diagram to. This is used\n * in <save>. The default implementation returns <urlPost>,\n * adding <code>?draft=true</code>.\n */\nmxEditor.prototype.getUrlPost = function ()\n{\n\treturn this.urlPost;\n};\n\n/**\n * Function: getUrlImage\n * \n * Returns the URL to create the image with. This is typically\n * the URL of a backend which accepts an XML representation\n * of a graph view to create an image. The function is used\n * in the image action to create an image. This implementation\n * returns <urlImage>.\n */\nmxEditor.prototype.getUrlImage = function ()\n{\n\treturn this.urlImage;\n};\n\n/**\n * Function: swapStyles\n * \n * Swaps the styles for the given names in the graph's\n * stylesheet and refreshes the graph.\n */\nmxEditor.prototype.swapStyles = function (first, second)\n{\n\tvar style = this.graph.getStylesheet().styles[second];\n\tthis.graph.getView().getStylesheet().putCellStyle(\n\t\tsecond, this.graph.getStylesheet().styles[first]);\n\tthis.graph.getStylesheet().putCellStyle(first, style);\n\tthis.graph.refresh();\n};\n\n/**\n * Function: showProperties\n * \n * Creates and shows the properties dialog for the given\n * cell. The content area of the dialog is created using\n * <createProperties>.\n */\nmxEditor.prototype.showProperties = function (cell)\n{\n\tcell = cell || this.graph.getSelectionCell();\n\t\n\t// Uses the root node for the properties dialog\n\t// if not cell was passed in and no cell is\n\t// selected\n\tif (cell == null)\n\t{\n\t\tcell = this.graph.getCurrentRoot();\n\t\t\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.graph.getModel().getRoot();\n\t\t}\n\t}\n\t\n\tif (cell != null)\n\t{\n\t\t// Makes sure there is no in-place editor in the\n\t\t// graph and computes the location of the dialog\n\t\tthis.graph.stopEditing(true);\n\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar x = offset.x+10;\n\t\tvar y = offset.y;\n\t\t\n\t\t// Avoids moving the dialog if it is alredy open\n\t\tif (this.properties != null && !this.movePropertiesDialog)\n\t\t{\n\t\t\tx = this.properties.getX();\n\t\t\ty = this.properties.getY();\n\t\t}\n\t\t\n\t\t// Places the dialog near the cell for which it\n\t\t// displays the properties\n\t\telse\n\t\t{\n\t\t\tvar bounds = this.graph.getCellBounds(cell);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tx += bounds.x+Math.min(200, bounds.width);\n\t\t\t\ty += bounds.y;\t\t\t\t\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\t// Hides the existing properties dialog and creates a new one with the\n\t\t// contents created in the hook method\n\t\tthis.hideProperties();\n\t\tvar node = this.createProperties(cell);\n\t\t\n\t\tif (node != null)\n\t\t{\n\t\t\t// Displays the contents in a window and stores a reference to the\n\t\t\t// window for later hiding of the window\n\t\t\tthis.properties = new mxWindow(mxResources.get(this.propertiesResource) ||\n\t\t\t\tthis.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n\t\t\tthis.properties.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: isPropertiesVisible\n * \n * Returns true if the properties dialog is currently visible.\n */\nmxEditor.prototype.isPropertiesVisible = function ()\n{\n\treturn this.properties != null;\n};\n\n/**\n * Function: createProperties\n * \n * Creates and returns the DOM node that represents the contents\n * of the properties dialog for the given cell. This implementation\n * works for user objects that are XML nodes and display all the\n * node attributes in a form.\n */\nmxEditor.prototype.createProperties = function (cell)\n{\n\tvar model = this.graph.getModel();\n\tvar value = model.getValue(cell);\n\t\n\tif (mxUtils.isNode(value))\n\t{\n\t\t// Creates a form for the user object inside\n\t\t// the cell\n\t\tvar form = new mxForm('properties');\n\t\t\n\t\t// Adds a readonly field for the cell id\n\t\tvar id = form.addText('ID', cell.getId());\n\t\tid.setAttribute('readonly', 'true');\n\n\t\tvar geo = null;\n\t\tvar yField = null;\n\t\tvar xField = null;\n\t\tvar widthField = null;\n\t\tvar heightField = null;\n\n\t\t// Adds fields for the location and size\n\t\tif (model.isVertex(cell))\n\t\t{\n\t\t\tgeo = model.getGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tyField = form.addText('top', geo.y);\n\t\t\t\txField = form.addText('left', geo.x);\n\t\t\t\twidthField = form.addText('width', geo.width);\n\t\t\t\theightField = form.addText('height', geo.height);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Adds a field for the cell style\t\t\t\n\t\tvar tmp = model.getStyle(cell);\n\t\tvar style = form.addText('Style', tmp || '');\n\t\t\n\t\t// Creates textareas for each attribute of the\n\t\t// user object within the cell\n\t\tvar attrs = value.attributes;\n\t\tvar texts = [];\n\t\t\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\t// Creates a textarea with more lines for\n\t\t\t// the cell label\n\t\t\tvar val = attrs[i].value;\n\t\t\ttexts[i] = form.addTextarea(attrs[i].nodeName, val,\n\t\t\t\t(attrs[i].nodeName == 'label') ? 4 : 2);\n\t\t}\n\t\t\n\t\t// Adds an OK and Cancel button to the dialog\n\t\t// contents and implements the respective\n\t\t// actions below\n\t\t\n\t\t// Defines the function to be executed when the\n\t\t// OK button is pressed in the dialog\n\t\tvar okFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t\t\n\t\t\t// Supports undo for the changes on the underlying\n\t\t\t// XML structure / XML node attribute changes.\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tgeo.x = parseFloat(xField.value);\n\t\t\t\t\tgeo.y = parseFloat(yField.value);\n\t\t\t\t\tgeo.width = parseFloat(widthField.value);\n\t\t\t\t\tgeo.height = parseFloat(heightField.value);\n\t\t\t\t\t\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Applies the style\n\t\t\t\tif (style.value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, style.value);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Creates an undoable change for each\n\t\t\t\t// attribute and executes it using the\n\t\t\t\t// model, which will also make the change\n\t\t\t\t// part of the current transaction\n\t\t\t\tfor (var i=0; i<attrs.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar edit = new mxCellAttributeChange(\n\t\t\t\t\t\tcell, attrs[i].nodeName,\n\t\t\t\t\t\ttexts[i].value);\n\t\t\t\t\tmodel.execute(edit);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if the graph wants cells to \n\t\t\t\t// be automatically sized and updates\n\t\t\t\t// the size as an undoable step if\n\t\t\t\t// the feature is enabled\n\t\t\t\tif (this.graph.isAutoSizeCell(cell))\n\t\t\t\t{\n\t\t\t\t\tthis.graph.updateCellSize(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Defines the function to be executed when the\n\t\t// Cancel button is pressed in the dialog\n\t\tvar cancelFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t});\n\t\t\n\t\tform.addButtons(okFunction, cancelFunction);\n\t\t\n\t\treturn form.table;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: hideProperties\n * \n * Hides the properties dialog.\n */\nmxEditor.prototype.hideProperties = function ()\n{\n\tif (this.properties != null)\n\t{\n\t\tthis.properties.destroy();\n\t\tthis.properties = null;\n\t}\n};\n\n/**\n * Function: showTasks\n * \n * Shows the tasks window. The tasks window is created using <createTasks>. The\n * default width of the window is 200 pixels, the y-coordinate of the location\n * can be specifies in <tasksTop> and the x-coordinate is right aligned with a\n * 20 pixel offset from the right border. To change the location of the tasks\n * window, the following code can be used:\n * \n * (code)\n * var oldShowTasks = mxEditor.prototype.showTasks;\n * mxEditor.prototype.showTasks = function()\n * {\n *   oldShowTasks.apply(this, arguments); // \"supercall\"\n *   \n *   if (this.tasks != null)\n *   {\n *     this.tasks.setLocation(10, 10);\n *   }\n * };\n * (end)\n */\nmxEditor.prototype.showTasks = function ()\n{\n\tif (this.tasks == null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '4px';\n\t\tdiv.style.paddingLeft = '20px';\n\t\tvar w = document.body.clientWidth;\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.tasksResource) ||\n\t\t\tthis.tasksResource,\n\t\t\tdiv, w - 220, this.tasksTop, 200);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\t\n\t\t// Installs a function to update the contents\n\t\t// of the tasks window on every change of the\n\t\t// model, selection or root.\n\t\tvar funct = mxUtils.bind(this, function(sender)\n\t\t{\n\t\t\tmxEvent.release(div);\n\t\t\tdiv.innerHTML = '';\n\t\t\tthis.createTasks(div);\n\t\t});\n\t\t\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.addListener(mxEvent.ROOT, funct);\n\t\t\n\t\t// Assigns the icon to the tasks window\n\t\tif (this.tasksWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.tasksWindowImage);\n\t\t}\n\t\t\n\t\tthis.tasks = wnd;\n\t\tthis.createTasks(div);\n\t}\n\t\n\tthis.tasks.setVisible(true);\n};\n\t\t\n/**\n * Function: refreshTasks\n * \n * Updates the contents of the tasks window using <createTasks>.\n */\nmxEditor.prototype.refreshTasks = function (div)\n{\n\tif (this.tasks != null)\n\t{\n\t\tvar div = this.tasks.content;\n\t\tmxEvent.release(div);\n\t\tdiv.innerHTML = '';\n\t\tthis.createTasks(div);\n\t}\n};\n\t\t\n/**\n * Function: createTasks\n * \n * Updates the contents of the given DOM node to\n * display the tasks associated with the current\n * editor state. This is invoked whenever there\n * is a possible change of state in the editor.\n * Default implementation is empty.\n */\nmxEditor.prototype.createTasks = function (div)\n{\n\t// override\n};\n\t\n/**\n * Function: showHelp\n * \n * Shows the help window. If the help window does not exist\n * then it is created using an iframe pointing to the resource\n * for the <code>urlHelp</code> key or <urlHelp> if the resource\n * is undefined.\n */\nmxEditor.prototype.showHelp = function (tasks)\n{\n\tif (this.help == null)\n\t{\n\t\tvar frame = document.createElement('iframe');\n\t\tframe.setAttribute('src', mxResources.get('urlHelp') || this.urlHelp);\n\t\tframe.setAttribute('height', '100%');\n\t\tframe.setAttribute('width', '100%');\n\t\tframe.setAttribute('frameBorder', '0');\n\t\tframe.style.backgroundColor = 'white';\n\t\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\t\n\t\tvar wnd = new mxWindow(mxResources.get(this.helpResource) || this.helpResource,\n\t\t\tframe, (w-this.helpWidth)/2, (h-this.helpHeight)/3, this.helpWidth, this.helpHeight);\n\t\twnd.setMaximizable(true);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\twnd.setResizable(true);\n\n\t\t// Assigns the icon to the help window\n\t\tif (this.helpWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.helpWindowImage);\n\t\t}\n\t\t\n\t\t// Workaround for ignored iframe height 100% in FF\n\t\tif (mxClient.IS_NS)\n\t\t{\n\t\t\tvar handler = function(sender)\n\t\t\t{\n\t\t\t\tvar h = wnd.div.offsetHeight;\n\t\t\t\tframe.setAttribute('height', (h-26)+'px');\n\t\t\t};\n\t\t\t\n\t\t\twnd.addListener(mxEvent.RESIZE_END, handler);\n\t\t\twnd.addListener(mxEvent.MAXIMIZE, handler);\n\t\t\twnd.addListener(mxEvent.NORMALIZE, handler);\n\t\t\twnd.addListener(mxEvent.SHOW, handler);\n\t\t}\n\t\t\n\t\tthis.help = wnd;\n\t}\n\t\n\tthis.help.setVisible(true);\n};\n\n/**\n * Function: showOutline\n * \n * Shows the outline window. If the window does not exist, then it is\n * created using an <mxOutline>.\n */\nmxEditor.prototype.showOutline = function ()\n{\n\tvar create = this.outline == null;\n\t\n\tif (create)\n\t{\n\t\tvar div = document.createElement('div');\n\t\t\n\t\tdiv.style.overflow = 'hidden';\n\t\tdiv.style.position = 'relative';\n\t\tdiv.style.width = '100%';\n\t\tdiv.style.height = '100%';\n\t\tdiv.style.background = 'white';\n\t\tdiv.style.cursor = 'move';\n\t\t\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdiv.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n\t\t}\n\t\t\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.outlineResource) ||\n\t\t\tthis.outlineResource,\n\t\t\tdiv, 600, 480, 200, 200, false);\n\t\t\t\t\n\t\t// Creates the outline in the specified div\n\t\t// and links it to the existing graph\n\t\tvar outline = new mxOutline(this.graph, div);\t\t\t\n\t\twnd.setClosable(true);\n\t\twnd.setResizable(true);\n\t\twnd.destroyOnClose = false;\n\t\t\n\t\twnd.addListener(mxEvent.RESIZE_END, function()\n\t\t{\n\t\t\toutline.update();\n\t\t});\n\t\t\n\t\tthis.outline = wnd;\n\t\tthis.outline.outline = outline;\n\t}\n\t\n\t// Finally shows the outline\n\tthis.outline.setVisible(true);\n\tthis.outline.outline.update(true);\n};\n\t\t\n/**\n * Function: setMode\n *\n * Puts the graph into the specified mode. The following modenames are\n * supported:\n * \n * select - Selects using the left mouse button, new connections\n * are disabled.\n * connect - Selects using the left mouse button or creates new\n * connections if mouse over cell hotspot. See <mxConnectionHandler>.\n * pan - Pans using the left mouse button, new connections are disabled.\n */\nmxEditor.prototype.setMode = function(modename)\n{\n\tif (modename == 'select')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(false);\n\t}\n\telse if (modename == 'connect')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(true);\n\t}\n\telse if (modename == 'pan')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = true;\n\t\tthis.graph.setConnectable(false);\n\t}\n};\n\n/**\n * Function: createPopupMenu\n * \n * Uses <popupHandler> to create the menu in the graph's\n * panning handler. The redirection is setup in\n * <setToolbarContainer>.\n */\nmxEditor.prototype.createPopupMenu = function (menu, cell, evt)\n{\n\tthis.popupHandler.createMenu(this, menu, cell, evt);\n};\n\n/**\n * Function: createEdge\n * \n * Uses <defaultEdge> as the prototype for creating new edges\n * in the connection handler of the graph. The style of the\n * edge will be overridden with the value returned by\n * <getEdgeStyle>.\n */\nmxEditor.prototype.createEdge = function (source, target)\n{\n\t// Clones the defaultedge prototype\n\tvar e = null;\n\t\n\tif (this.defaultEdge != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\te = model.cloneCell(this.defaultEdge);\n\t}\n\telse\n\t{\n\t\te = new mxCell('');\n\t\te.setEdge(true);\n\t\t\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\te.setGeometry(geo);\n\t}\n\t\n\t// Overrides the edge style\n\tvar style = this.getEdgeStyle();\n\t\n\tif (style != null)\n\t{\n\t\te.setStyle(style);\n\t}\n\t\n\treturn e;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns a string identifying the style of new edges.\n * The function is used in <createEdge> when new edges\n * are created in the graph.\n */\nmxEditor.prototype.getEdgeStyle = function ()\n{\n\treturn this.defaultEdgeStyle;\n};\n\n/**\n * Function: consumeCycleAttribute\n * \n * Returns the next attribute in <cycleAttributeValues>\n * or null, if not attribute should be used in the\n * specified cell.\n */\nmxEditor.prototype.consumeCycleAttribute = function (cell)\n{\n\treturn (this.cycleAttributeValues != null &&\n\t\tthis.cycleAttributeValues.length > 0 &&\n\t\tthis.graph.isSwimlane(cell)) ?\n\t\tthis.cycleAttributeValues[this.cycleAttributeIndex++ %\n\t\t\tthis.cycleAttributeValues.length] : null;\n};\n\n/**\n * Function: cycleAttribute\n * \n * Uses the returned value from <consumeCycleAttribute>\n * as the value for the <cycleAttributeName> key in\n * the given cell's style.\n */\nmxEditor.prototype.cycleAttribute = function (cell)\n{\n\tif (this.cycleAttributeName != null)\n\t{\n\t\tvar value = this.consumeCycleAttribute(cell);\n\t\t\n\t\tif (value != null)\n\t\t{\n\t\t\tcell.setStyle(cell.getStyle()+';'+\n\t\t\t\tthis.cycleAttributeName+'='+value);\n\t\t}\n\t}\n};\n\n/**\n * Function: addVertex\n * \n * Adds the given vertex as a child of parent at the specified\n * x and y coordinate and fires an <addVertex> event.\n */\nmxEditor.prototype.addVertex = function (parent, vertex, x, y)\n{\n\tvar model = this.graph.getModel();\n\t\n\twhile (parent != null && !this.graph.isValidDropTarget(parent))\n\t{\n\t\tparent = model.getParent(parent);\n\t}\n\t\n\tparent = (parent != null) ? parent : this.graph.getSwimlaneAt(x, y);\n\tvar scale = this.graph.getView().scale;\n\t\n\tvar geo = model.getGeometry(vertex);\n\tvar pgeo = model.getGeometry(parent);\n\t\n\tif (this.graph.isSwimlane(vertex) &&\n\t\t!this.graph.swimlaneNesting)\n\t{\n\t\tparent = null;\n\t}\n\telse if (parent == null && this.swimlaneRequired)\n\t{\n\t\treturn null;\n\t}\n\telse if (parent != null && pgeo != null)\n\t{\n\t\t// Keeps vertex inside parent\n\t\tvar state = this.graph.getView().getState(parent);\n\t\t\n\t\tif (state != null)\n\t\t{\t\t\t\n\t\t\tx -= state.origin.x * scale;\n\t\t\ty -= state.origin.y * scale;\n\t\t\t\n\t\t\tif (this.graph.isConstrainedMoving)\n\t\t\t{\n\t\t\t\tvar width = geo.width;\n\t\t\t\tvar height = geo.height;\t\t\t\t\n\t\t\t\tvar tmp = state.x+state.width;\n\t\t\t\t\n\t\t\t\tif (x+width > tmp)\n\t\t\t\t{\n\t\t\t\t\tx -= x+width - tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp = state.y+state.height;\n\t\t\t\t\n\t\t\t\tif (y+height > tmp)\n\t\t\t\t{\n\t\t\t\t\ty -= y+height - tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (pgeo != null)\n\t\t{\n\t\t\tx -= pgeo.x*scale;\n\t\t\ty -= pgeo.y*scale;\n\t\t}\n\t}\n\t\n\tgeo = geo.clone();\n\tgeo.x = this.graph.snap(x / scale -\n\t\tthis.graph.getView().translate.x -\n\t\tthis.graph.gridSize/2);\n\tgeo.y = this.graph.snap(y / scale -\n\t\tthis.graph.getView().translate.y -\n\t\tthis.graph.gridSize/2);\n\tvertex.setGeometry(geo);\n\t\n\tif (parent == null)\n\t{\n\t\tparent = this.graph.getDefaultParent();\n\t}\n\n\tthis.cycleAttribute(vertex);\n\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_ADD_VERTEX,\n\t\t\t'vertex', vertex, 'parent', parent));\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvertex = this.graph.addCell(vertex, parent);\n\t\t\n\t\tif (vertex != null)\n\t\t{\n\t\t\tthis.graph.constrainChild(vertex);\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_VERTEX, 'vertex', vertex));\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\tif (vertex != null)\n\t{\n\t\tthis.graph.setSelectionCell(vertex);\n\t\tthis.graph.scrollCellToVisible(vertex);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.AFTER_ADD_VERTEX, 'vertex', vertex));\n\t}\n\t\n\treturn vertex;\n};\n\n/**\n * Function: destroy\n * \n * Removes the editor and all its associated resources. This does not\n * normally need to be called, it is called automatically when the window\n * unloads.\n */\nmxEditor.prototype.destroy = function ()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tif (this.tasks != null)\n\t\t{\n\t\t\tthis.tasks.destroy();\n\t\t}\n\t\t\n\t\tif (this.outline != null)\n\t\t{\n\t\t\tthis.outline.destroy();\n\t\t}\n\t\t\n\t\tif (this.properties != null)\n\t\t{\n\t\t\tthis.properties.destroy();\n\t\t}\n\t\t\n\t\tif (this.keyHandler != null)\n\t\t{\n\t\t\tthis.keyHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.rubberband != null)\n\t\t{\n\t\t\tthis.rubberband.destroy();\n\t\t}\n\t\t\n\t\tif (this.toolbar != null)\n\t\t{\n\t\t\tthis.toolbar.destroy();\n\t\t}\n\t\t\n\t\tif (this.graph != null)\n\t\t{\n\t\t\tthis.graph.destroy();\n\t\t}\n\t\n\t\tthis.status = null;\n\t\tthis.templates = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCodecRegistry =\n{\n\t/**\n\t * Class: mxCodecRegistry\n\t *\n\t * Singleton class that acts as a global registry for codecs.\n\t *\n\t * Adding an <mxCodec>:\n\t *\n\t * 1. Define a default codec with a new instance of the \n\t * object to be handled.\n\t *\n\t * (code)\n\t * var codec = new mxObjectCodec(new mxGraphModel());\n\t * (end)\n\t *\n\t * 2. Define the functions required for encoding and decoding\n\t * objects.\n\t *\n\t * (code)\n\t * codec.encode = function(enc, obj) { ... }\n\t * codec.decode = function(dec, node, into) { ... }\n\t * (end)\n\t *\n\t * 3. Register the codec in the <mxCodecRegistry>.\n\t *\n\t * (code)\n\t * mxCodecRegistry.register(codec);\n\t * (end)\n\t *\n\t * <mxObjectCodec.decode> may be used to either create a new \n\t * instance of an object or to configure an existing instance, \n\t * in which case the into argument points to the existing\n\t * object. In this case, we say the codec \"configures\" the\n\t * object.\n\t * \n\t * Variable: codecs\n\t *\n\t * Maps from constructor names to codecs.\n\t */\n\tcodecs: [],\n\t\n\t/**\n\t * Variable: aliases\n\t *\n\t * Maps from classnames to codecnames.\n\t */\n\taliases: [],\n\n\t/**\n\t * Function: register\n\t *\n\t * Registers a new codec and associates the name of the template\n\t * constructor in the codec with the codec object.\n\t *\n\t * Parameters:\n\t *\n\t * codec - <mxObjectCodec> to be registered.\n\t */\n\tregister: function(codec)\n\t{\n\t\tif (codec != null)\n\t\t{\n\t\t\tvar name = codec.getName();\n\t\t\tmxCodecRegistry.codecs[name] = codec;\n\t\t\t\n\t\t\tvar classname = mxUtils.getFunctionName(codec.template.constructor);\n\n\t\t\tif (classname != name)\n\t\t\t{\n\t\t\t\tmxCodecRegistry.addAlias(classname, name);\n\t\t\t}\n\t\t}\n\n\t\treturn codec;\n\t},\n\n\t/**\n\t * Function: addAlias\n\t *\n\t * Adds an alias for mapping a classname to a codecname.\n\t */\n\taddAlias: function(classname, codecname)\n\t{\n\t\tmxCodecRegistry.aliases[classname] = codecname;\n\t},\n\n\t/**\n\t * Function: getCodec\n\t *\n\t * Returns a codec that handles objects that are constructed\n\t * using the given constructor.\n\t *\n\t * Parameters:\n\t *\n\t * ctor - JavaScript constructor function. \n\t */\n\tgetCodec: function(ctor)\n\t{\n\t\tvar codec = null;\n\t\t\n\t\tif (ctor != null)\n\t\t{\n\t\t\tvar name = mxUtils.getFunctionName(ctor);\n\t\t\tvar tmp = mxCodecRegistry.aliases[name];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tname = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tcodec = mxCodecRegistry.codecs[name];\n\t\t\t\n\t\t\t// Registers a new default codec for the given constructor\n\t\t\t// if no codec has been previously defined.\n\t\t\tif (codec == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tcodec = new mxObjectCodec(new ctor());\n\t\t\t\t\tmxCodecRegistry.register(codec);\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn codec;\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCodec\n *\n * XML codec for JavaScript object graphs. See <mxObjectCodec> for a\n * description of the general encoding/decoding scheme. This class uses the\n * codecs registered in <mxCodecRegistry> for encoding/decoding each object.\n * \n * References:\n * \n * In order to resolve references, especially forward references, the mxCodec\n * constructor must be given the document that contains the referenced\n * elements.\n *\n * Examples:\n *\n * The following code is used to encode a graph model.\n *\n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = mxUtils.getXml(result);\n * (end)\n * \n * Example:\n * \n * Using the code below, an XML document is decoded into an existing model. The\n * document may be obtained using one of the functions in mxUtils for loading\n * an XML file, eg. <mxUtils.get>, or using <mxUtils.parseXml> for parsing an\n * XML string.\n * \n * (code)\n * var doc = mxUtils.parseXml(xmlString);\n * var codec = new mxCodec(doc);\n * codec.decode(doc.documentElement, graph.getModel());\n * (end)\n * \n * Example:\n * \n * This example demonstrates parsing a list of isolated cells into an existing\n * graph model. Note that the cells do not have a parent reference so they can\n * be added anywhere in the cell hierarchy after parsing.\n * \n * (code)\n * var xml = '<root><mxCell id=\"2\" value=\"Hello,\" vertex=\"1\"><mxGeometry x=\"20\" y=\"20\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"3\" value=\"World!\" vertex=\"1\"><mxGeometry x=\"200\" y=\"150\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"4\" value=\"\" edge=\"1\" source=\"2\" target=\"3\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root>';\n * var doc = mxUtils.parseXml(xml);\n * var codec = new mxCodec(doc);\n * var elt = doc.documentElement.firstChild;\n * var cells = [];\n * \n * while (elt != null)\n * {\n *   cells.push(codec.decode(elt));\n *   elt = elt.nextSibling;\n * }\n * \n * graph.addCells(cells);\n * (end)\n * \n * Example:\n * \n * Using the following code, the selection cells of a graph are encoded and the\n * output is displayed in a dialog box.\n * \n * (code)\n * var enc = new mxCodec();\n * var cells = graph.getSelectionCells();\n * mxUtils.alert(mxUtils.getPrettyXml(enc.encode(cells)));\n * (end)\n * \n * Newlines in the XML can be converted to <br>, in which case a '<br>' argument\n * must be passed to <mxUtils.getXml> as the second argument.\n * \n * Debugging:\n * \n * For debugging I/O you can use the following code to get the sequence of\n * encoded objects:\n * \n * (code)\n * var oldEncode = mxCodec.prototype.encode;\n * mxCodec.prototype.encode = function(obj)\n * {\n *   mxLog.show();\n *   mxLog.debug('mxCodec.encode: obj='+mxUtils.getFunctionName(obj.constructor));\n *   \n *   return oldEncode.apply(this, arguments);\n * };\n * (end)\n * \n * Note that the I/O system adds object codecs for new object automatically. For\n * decoding those objects, the constructor should be written as follows:\n * \n * (code)\n * var MyObj = function(name)\n * {\n *   // ...\n * };\n * (end)\n * \n * Constructor: mxCodec\n *\n * Constructs an XML encoder/decoder for the specified\n * owner document.\n *\n * Parameters:\n *\n * document - Optional XML document that contains the data.\n * If no document is specified then a new document is created\n * using <mxUtils.createXmlDocument>.\n */\nfunction mxCodec(document)\n{\n\tthis.document = document || mxUtils.createXmlDocument();\n\tthis.objects = [];\n};\n\n/**\n * Variable: document\n *\n * The owner document of the codec.\n */\nmxCodec.prototype.document = null;\n\n/**\n * Variable: objects\n *\n * Maps from IDs to objects.\n */\nmxCodec.prototype.objects = null;\n\n/**\n * Variable: elements\n * \n * Lookup table for resolving IDs to elements.\n */\nmxCodec.prototype.elements = null;\n\n/**\n * Variable: encodeDefaults\n *\n * Specifies if default values should be encoded. Default is false.\n */\nmxCodec.prototype.encodeDefaults = false;\n\n\n/**\n * Function: putObject\n * \n * Assoiates the given object with the given ID and returns the given object.\n * \n * Parameters\n * \n * id - ID for the object to be associated with.\n * obj - Object to be associated with the ID.\n */\nmxCodec.prototype.putObject = function(id, obj)\n{\n\tthis.objects[id] = obj;\n\t\n\treturn obj;\n};\n\n/**\n * Function: getObject\n *\n * Returns the decoded object for the element with the specified ID in\n * <document>. If the object is not known then <lookup> is used to find an\n * object. If no object is found, then the element with the respective ID\n * from the document is parsed using <decode>.\n */\nmxCodec.prototype.getObject = function(id)\n{\n\tvar obj = null;\n\n\tif (id != null)\n\t{\n\t\tobj = this.objects[id];\n\t\t\n\t\tif (obj == null)\n\t\t{\n\t\t\tobj = this.lookup(id);\n\t\t\t\n\t\t\tif (obj == null)\n\t\t\t{\n\t\t\t\tvar node = this.getElementById(id);\n\t\t\t\t\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tobj = this.decode(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: lookup\n *\n * Hook for subclassers to implement a custom lookup mechanism for cell IDs.\n * This implementation always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * };\n * (end)\n *\n * Parameters:\n *\n * id - ID of the object to be returned.\n */\nmxCodec.prototype.lookup = function(id)\n{\n\treturn null;\n};\n\n/**\n * Function: getElementById\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.getElementById = function(id)\n{\n\tthis.updateElements();\n\t\n\treturn this.elements[id];\n};\n\n/**\n * Function: updateElements\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.updateElements = function()\n{\n\tif (this.elements == null)\n\t{\n\t\tthis.elements = new Object();\n\t\t\n\t\tif (this.document.documentElement != null)\n\t\t{\n\t\t\tthis.addElement(this.document.documentElement);\n\t\t}\n\t}\n};\n\n/**\n * Function: addElement\n *\n * Adds the given element to <elements> if it has an ID.\n */\nmxCodec.prototype.addElement = function(node)\n{\n\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tif (this.elements[id] == null)\n\t\t\t{\n\t\t\t\tthis.elements[id] = node;\n\t\t\t}\n\t\t\telse if (this.elements[id] != node)\n\t\t\t{\n\t\t\t\tthrow new Error(id + ': Duplicate ID');\n\t\t\t}\n\t\t}\n\t}\n\t\n\tnode = node.firstChild;\n\t\n\twhile (node != null)\n\t{\n\t\tthis.addElement(node);\n\t\tnode = node.nextSibling;\n\t}\n};\n\n/**\n * Function: getId\n *\n * Returns the ID of the specified object. This implementation\n * calls <reference> first and if that returns null handles\n * the object as an <mxCell> by returning their IDs using\n * <mxCell.getId>. If no ID exists for the given cell, then\n * an on-the-fly ID is generated using <mxCellPath.create>.\n *\n * Parameters:\n *\n * obj - Object to return the ID for.\n */\nmxCodec.prototype.getId = function(obj)\n{\n\tvar id = null;\n\t\n\tif (obj != null)\n\t{\n\t\tid = this.reference(obj);\n\t\t\n\t\tif (id == null && obj instanceof mxCell)\n\t\t{\n\t\t\tid = obj.getId();\n\t\t\t\n\t\t\tif (id == null)\n\t\t\t{\n\t\t\t\t// Uses an on-the-fly Id\n\t\t\t\tid = mxCellPath.create(obj);\n\t\t\t\t\n\t\t\t\tif (id.length == 0)\n\t\t\t\t{\n\t\t\t\t\tid = 'root';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn id;\n};\n\n/**\n * Function: reference\n *\n * Hook for subclassers to implement a custom method\n * for retrieving IDs from objects. This implementation\n * always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.reference = function(obj)\n * {\n *   return obj.getCustomId();\n * };\n * (end)\n *\n * Parameters:\n *\n * obj - Object whose ID should be returned.\n */\nmxCodec.prototype.reference = function(obj)\n{\n\treturn null;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns the resulting\n * XML node.\n *\n * Parameters:\n *\n * obj - Object to be encoded. \n */\nmxCodec.prototype.encode = function(obj)\n{\n\tvar node = null;\n\t\n\tif (obj != null && obj.constructor != null)\n\t{\n\t\tvar enc = mxCodecRegistry.getCodec(obj.constructor);\n\t\t\n\t\tif (enc != null)\n\t\t{\n\t\t\tnode = enc.encode(this, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxUtils.isNode(obj))\n\t\t\t{\n\t\t\t\tnode = mxUtils.importNode(this.document, obj, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t    \t\tmxLog.warn('mxCodec.encode: No codec for ' + mxUtils.getFunctionName(obj.constructor));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Decodes the given XML node. The optional \"into\"\n * argument specifies an existing object to be\n * used. If no object is given, then a new instance\n * is created using the constructor from the codec.\n *\n * The function returns the passed in object or\n * the new instance if no object was given.\n *\n * Parameters:\n *\n * node - XML node to be decoded.\n * into - Optional object to be decodec into.\n */\nmxCodec.prototype.decode = function(node, into)\n{\n\tthis.updateElements();\n\tvar obj = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar ctor = null;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tctor = window[node.nodeName];\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t\t\n\t\tvar dec = mxCodecRegistry.getCodec(ctor);\n\t\t\n\t\tif (dec != null)\n\t\t{\n\t\t\tobj = dec.decode(this, node, into);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj = node.cloneNode(true);\n\t\t\tobj.removeAttribute('as');\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: encodeCell\n *\n * Encoding of cell hierarchies is built-into the core, but\n * is a higher-level function that needs to be explicitely\n * used by the respective object encoders (eg. <mxModelCodec>,\n * <mxChildChangeCodec> and <mxRootChangeCodec>). This\n * implementation writes the given cell and its children as a\n * (flat) sequence into the given node. The children are not\n * encoded if the optional includeChildren is false. The\n * function is in charge of adding the result into the\n * given node and has no return value.\n *\n * Parameters:\n *\n * cell - <mxCell> to be encoded.\n * node - Parent XML node to add the encoded cell into.\n * includeChildren - Optional boolean indicating if the\n * function should include all descendents. Default is true. \n */\nmxCodec.prototype.encodeCell = function(cell, node, includeChildren)\n{\n\tnode.appendChild(this.encode(cell));\n\t\n\tif (includeChildren == null || includeChildren)\n\t{\n\t\tvar childCount = cell.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.encodeCell(cell.getChildAt(i), node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellCodec\n * \n * Returns true if the given codec is a cell codec. This uses\n * <mxCellCodec.isCellCodec> to check if the codec is of the\n * given type.\n */\nmxCodec.prototype.isCellCodec = function(codec)\n{\n\tif (codec != null && typeof(codec.isCellCodec) == 'function')\n\t{\n\t\treturn codec.isCellCodec();\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: decodeCell\n *\n * Decodes cells that have been encoded using inversion, ie.\n * where the user object is the enclosing node in the XML,\n * and restores the group and graph structure in the cells.\n * Returns a new <mxCell> instance that represents the\n * given node.\n *\n * Parameters:\n *\n * node - XML node that contains the cell data.\n * restoreStructures - Optional boolean indicating whether\n * the graph structure should be restored by calling insert\n * and insertEdge on the parent and terminals, respectively.\n * Default is true.\n */\nmxCodec.prototype.decodeCell = function(node, restoreStructures)\n{\n\trestoreStructures = (restoreStructures != null) ? restoreStructures : true;\n\tvar cell = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\t// Tries to find a codec for the given node name. If that does\n\t\t// not return a codec then the node is the user object (an XML node\n\t\t// that contains the mxCell, aka inversion).\n\t\tvar decoder = mxCodecRegistry.getCodec(node.nodeName);\n\t\t\n\t\t// Tries to find the codec for the cell inside the user object.\n\t\t// This assumes all node names inside the user object are either\n\t\t// not registered or they correspond to a class for cells.\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tvar child = node.firstChild;\n\t\t\t\n\t\t\twhile (child != null && !this.isCellCodec(decoder))\n\t\t\t{\n\t\t\t\tdecoder = mxCodecRegistry.getCodec(child.nodeName);\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tdecoder = mxCodecRegistry.getCodec(mxCell);\n\t\t}\n\n\t\tcell = decoder.decode(this, node);\n\t\t\n\t\tif (restoreStructures)\n\t\t{\n\t\t\tthis.insertIntoGraph(cell);\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: insertIntoGraph\n *\n * Inserts the given cell into its parent and terminal cells.\n */\nmxCodec.prototype.insertIntoGraph = function(cell)\n{\n\tvar parent = cell.parent;\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\n\t// Fixes possible inconsistencies during insert into graph\n\tcell.setTerminal(null, false);\n\tcell.setTerminal(null, true);\n\tcell.parent = null;\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent == cell)\n\t\t{\n\t\t\tthrow new Error(parent.id + ': Self Reference');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tparent.insert(cell);\n\t\t}\n\t}\n\n\tif (source != null)\n\t{\n\t\tsource.insertEdge(cell, true);\n\t}\n\n\tif (target != null)\n\t{\n\t\ttarget.insertEdge(cell, false);\n\t}\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the attribute on the specified node to value. This is a\n * helper method that makes sure the attribute and value arguments\n * are not null.\n *\n * Parameters:\n *\n * node - XML node to set the attribute for.\n * attributes - Attributename to be set.\n * value - New value of the attribute.\n */\nmxCodec.prototype.setAttribute = function(node, attribute, value)\n{\n\tif (attribute != null && value != null)\n\t{\n\t\tnode.setAttribute(attribute, value);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxObjectCodec\n *\n * Generic codec for JavaScript objects that implements a mapping between\n * JavaScript objects and XML nodes that maps each field or element to an\n * attribute or child node, and vice versa.\n * \n * Atomic Values:\n * \n * Consider the following example.\n * \n * (code)\n * var obj = new Object();\n * obj.foo = \"Foo\";\n * obj.bar = \"Bar\";\n * (end)\n * \n * This object is encoded into an XML node using the following.\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(obj);\n * (end)\n * \n * The output of the encoding may be viewed using <mxLog> as follows.\n * \n * (code)\n * mxLog.show();\n * mxLog.debug(mxUtils.getPrettyXml(node));\n * (end)\n * \n * Finally, the result of the encoding looks as follows.\n * \n * (code)\n * <Object foo=\"Foo\" bar=\"Bar\"/>\n * (end)\n * \n * In the above output, the foo and bar fields have been mapped to attributes\n * with the same names, and the name of the constructor was used for the\n * nodename.\n * \n * Booleans:\n *\n * Since booleans are numbers in JavaScript, all boolean values are encoded\n * into 1 for true and 0 for false. The decoder also accepts the string true\n * and false for boolean values.\n * \n * Objects:\n * \n * The above scheme is applied to all atomic fields, that is, to all non-object\n * fields of an object. For object fields, a child node is created with a\n * special attribute that contains the fieldname. This special attribute is\n * called \"as\" and hence, as is a reserved word that should not be used for a\n * fieldname.\n * \n * Consider the following example where foo is an object and bar is an atomic\n * property of foo.\n * \n * (code)\n * var obj = {foo: {bar: \"Bar\"}};\n * (end)\n * \n * This will be mapped to the following XML structure by mxObjectCodec.\n * \n * (code)\n * <Object>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Object>\n * (end)\n * \n * In the above output, the inner Object node contains the as-attribute that\n * specifies the fieldname in the enclosing object. That is, the field foo was\n * mapped to a child node with an as-attribute that has the value foo.\n * \n * Arrays:\n * \n * Arrays are special objects that are either associative, in which case each\n * key, value pair is treated like a field where the key is the fieldname, or\n * they are a sequence of atomic values and objects, which is mapped to a\n * sequence of child nodes. For object elements, the above scheme is applied\n * without the use of the special as-attribute for creating each child. For\n * atomic elements, a special add-node is created with the value stored in the\n * value-attribute.\n * \n * For example, the following array contains one atomic value and one object\n * with a field called bar. Furthermore it contains two associative entries\n * called bar with an atomic value, and foo with an object value.\n * \n * (code)\n * var obj = [\"Bar\", {bar: \"Bar\"}];\n * obj[\"bar\"] = \"Bar\";\n * obj[\"foo\"] = {bar: \"Bar\"};\n * (end)\n * \n * This array is represented by the following XML nodes.\n * \n * (code)\n * <Array bar=\"Bar\">\n *   <add value=\"Bar\"/>\n *   <Object bar=\"Bar\"/>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Array>\n * (end)\n * \n * The Array node name is the name of the constructor. The additional\n * as-attribute in the last child contains the key of the associative entry,\n * whereas the second last child is part of the array sequence and does not\n * have an as-attribute.\n * \n * References:\n * \n * Objects may be represented as child nodes or attributes with ID values,\n * which are used to lookup the object in a table within <mxCodec>. The\n * <isReference> function is in charge of deciding if a specific field should\n * be encoded as a reference or not. Its default implementation returns true if\n * the fieldname is in <idrefs>, an array of strings that is used to configure\n * the <mxObjectCodec>.\n * \n * Using this approach, the mapping does not guarantee that the referenced\n * object itself exists in the document. The fields that are encoded as\n * references must be carefully chosen to make sure all referenced objects\n * exist in the document, or may be resolved by some other means if necessary.\n * \n * For example, in the case of the graph model all cells are stored in a tree\n * whose root is referenced by the model's root field. A tree is a structure\n * that is well suited for an XML representation, however, the additional edges\n * in the graph model have a reference to a source and target cell, which are\n * also contained in the tree. To handle this case, the source and target cell\n * of an edge are treated as references, whereas the children are treated as\n * objects. Since all cells are contained in the tree and no edge references a\n * source or target outside the tree, this setup makes sure all referenced\n * objects are contained in the document.\n * \n * In the case of a tree structure we must further avoid infinite recursion by\n * ignoring the parent reference of each child. This is done by returning true\n * in <isExcluded>, whose default implementation uses the array of excluded\n * fieldnames passed to the mxObjectCodec constructor.\n * \n * References are only used for cells in mxGraph. For defining other\n * referencable object types, the codec must be able to work out the ID of an\n * object. This is done by implementing <mxCodec.reference>. For decoding a\n * reference, the XML node with the respective id-attribute is fetched from the\n * document, decoded, and stored in a lookup table for later reference. For\n * looking up external objects, <mxCodec.lookup> may be implemented.\n * \n * Expressions:\n * \n * For decoding JavaScript expressions, the add-node may be used with a text\n * content that contains the JavaScript expression. For example, the following\n * creates a field called foo in the enclosing object and assigns it the value\n * of <mxConstants.ALIGN_LEFT>.\n * \n * (code)\n * <Object>\n *   <add as=\"foo\">mxConstants.ALIGN_LEFT</add>\n * </Object>\n * (end)\n * \n * The resulting object has a field called foo with the value \"left\". Its XML\n * representation looks as follows.\n * \n * (code)\n * <Object foo=\"left\"/>\n * (end)\n * \n * This means the expression is evaluated at decoding time and the result of\n * the evaluation is stored in the respective field. Valid expressions are all\n * JavaScript expressions, including function definitions, which are mapped to\n * functions on the resulting object.\n * \n * Expressions are only evaluated if <allowEval> is true.\n * \n * Constructor: mxObjectCodec\n *\n * Constructs a new codec for the specified template object.\n * The variables in the optional exclude array are ignored by\n * the codec. Variables in the optional idrefs array are\n * turned into references in the XML. The optional mapping\n * may be used to map from variable names to XML attributes.\n * The argument is created as follows:\n *\n * (code)\n * var mapping = new Object();\n * mapping['variableName'] = 'attribute-name';\n * (end)\n *\n * Parameters:\n *\n * template - Prototypical instance of the object to be\n * encoded/decoded.\n * exclude - Optional array of fieldnames to be ignored.\n * idrefs - Optional array of fieldnames to be converted to/from\n * references.\n * mapping - Optional mapping from field- to attributenames.\n */\nfunction mxObjectCodec(template, exclude, idrefs, mapping)\n{\n\tthis.template = template;\n\t\n\tthis.exclude = (exclude != null) ? exclude : [];\n\tthis.idrefs = (idrefs != null) ? idrefs : [];\n\tthis.mapping = (mapping != null) ? mapping : [];\n\t\n\tthis.reverse = new Object();\n\t\n\tfor (var i in this.mapping)\n\t{\n\t\tthis.reverse[this.mapping[i]] = i;\n\t}\n};\n\n/**\n * Variable: allowEval\n *\n * Static global switch that specifies if expressions in arrays are allowed.\n * Default is false. NOTE: Enabling this carries a possible security risk.\n */\nmxObjectCodec.allowEval = false;\n\n/**\n * Variable: template\n *\n * Holds the template object associated with this codec.\n */\nmxObjectCodec.prototype.template = null;\n\n/**\n * Variable: exclude\n *\n * Array containing the variable names that should be\n * ignored by the codec.\n */\nmxObjectCodec.prototype.exclude = null;\n\n/**\n * Variable: idrefs\n *\n * Array containing the variable names that should be\n * turned into or converted from references. See\n * <mxCodec.getId> and <mxCodec.getObject>.\n */\nmxObjectCodec.prototype.idrefs = null;\n\n/**\n * Variable: mapping\n *\n * Maps from from fieldnames to XML attribute names.\n */\nmxObjectCodec.prototype.mapping = null;\n\n/**\n * Variable: reverse\n *\n * Maps from from XML attribute names to fieldnames.\n */\nmxObjectCodec.prototype.reverse = null;\n\n/**\n * Function: getName\n * \n * Returns the name used for the nodenames and lookup of the codec when\n * classes are encoded and nodes are decoded. For classes to work with\n * this the codec registry automatically adds an alias for the classname\n * if that is different than what this returns. The default implementation\n * returns the classname of the template class.\n */\nmxObjectCodec.prototype.getName = function()\n{\n\treturn mxUtils.getFunctionName(this.template.constructor);\n};\n\n/**\n * Function: cloneTemplate\n * \n * Returns a new instance of the template for this codec.\n */\nmxObjectCodec.prototype.cloneTemplate = function()\n{\n\treturn new this.template.constructor();\n};\n\n/**\n * Function: getFieldName\n * \n * Returns the fieldname for the given attributename.\n * Looks up the value in the <reverse> mapping or returns\n * the input if there is no reverse mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getFieldName = function(attributename)\n{\n\tif (attributename != null)\n\t{\n\t\tvar mapped = this.reverse[attributename];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tattributename = mapped;\n\t\t}\n\t}\n\t\n\treturn attributename;\n};\n\n/**\n * Function: getAttributeName\n * \n * Returns the attributename for the given fieldname.\n * Looks up the value in the <mapping> or returns\n * the input if there is no mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getAttributeName = function(fieldname)\n{\n\tif (fieldname != null)\n\t{\n\t\tvar mapped = this.mapping[fieldname];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tfieldname = mapped;\n\t\t}\n\t}\n\t\n\treturn fieldname;\n};\n\n/**\n * Function: isExcluded\n *\n * Returns true if the given attribute is to be ignored by the codec. This\n * implementation returns true if the given fieldname is in <exclude> or\n * if the fieldname equals <mxObjectIdentity.FIELD_NAME>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field.\n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isExcluded = function(obj, attr, value, write)\n{\n\treturn attr == mxObjectIdentity.FIELD_NAME ||\n\t\tmxUtils.indexOf(this.exclude, attr) >= 0;\n};\n\n/**\n * Function: isReference\n *\n * Returns true if the given fieldname is to be treated\n * as a textual reference (ID). This implementation returns\n * true if the given fieldname is in <idrefs>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field. \n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isReference = function(obj, attr, value, write)\n{\n\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns a node\n * representing then given object. Calls <beforeEncode>\n * after creating the node and <afterEncode> with the \n * resulting node after processing.\n *\n * Enc is a reference to the calling encoder. It is used\n * to encode complex objects and create references.\n *\n * This implementation encodes all variables of an\n * object according to the following rules:\n *\n * - If the variable name is in <exclude> then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getId>\n * is used to replace the object with its ID.\n * - The variable name is mapped using <mapping>.\n * - If obj is an array and the variable name is numeric\n * (ie. an index) then it is not encoded.\n * - If the value is an object, then the codec is used to\n * create a child node with the variable name encoded into\n * the \"as\" attribute.\n * - Else, if <encodeDefaults> is true or the value differs\n * from the template value, then ...\n * - ... if obj is not an array, then the value is mapped to\n * an attribute.\n * - ... else if obj is an array, the value is mapped to an\n * add child with a value attribute or a text child node,\n * if the value is a function.\n *\n * If no ID exists for a variable in <idrefs> or if an object\n * cannot be encoded, a warning is issued using <mxLog.warn>.\n *\n * Returns the resulting XML node that represents the given\n * object.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n */\nmxObjectCodec.prototype.encode = function(enc, obj)\n{\n\tvar node = enc.document.createElement(this.getName());\n\t\n\tobj = this.beforeEncode(enc, obj, node);\n\tthis.encodeObject(enc, obj, node);\n\t\n\treturn this.afterEncode(enc, obj, node);\n};\n\t\n/**\n * Function: encodeObject\n *\n * Encodes the value of each member in then given obj into the given node using\n * <encodeValue>.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeObject = function(enc, obj, node)\n{\n\tenc.setAttribute(node, 'id', enc.getId(obj));\n\t\n    for (var i in obj)\n    {\n\t\tvar name = i;\n\t\tvar value = obj[name];\n\t\t\n    \tif (value != null && !this.isExcluded(obj, name, value, true))\n    \t{\n    \t\tif (mxUtils.isInteger(name))\n    \t\t{\n    \t\t\tname = null;\n    \t\t}\n    \t\t\n    \t\tthis.encodeValue(enc, obj, name, value, node);\n    \t}\n    }\n};\n\n/**\n * Function: encodeValue\n * \n * Converts the given value according to the mappings\n * and id-refs in this codec and uses <writeAttribute>\n * to write the attribute into the given node.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object whose property is going to be encoded.\n * name - XML node that contains the encoded object.\n * value - Value of the property to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeValue = function(enc, obj, name, value, node)\n{\n\tif (value != null)\n\t{\n\t\tif (this.isReference(obj, name, value, true))\n\t\t{\n\t\t\tvar tmp = enc.getId(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.encode: No ID for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tvar defaultValue = this.template[name];\n\t\t\n\t\t// Checks if the value is a default value and\n\t\t// the name is correct\n\t\tif (name == null || enc.encodeDefaults || defaultValue != value)\n\t\t{\n\t\t\tname = this.getAttributeName(name);\n\t\t\tthis.writeAttribute(enc, obj, name, value, node);\t\n\t\t}\n\t}\n};\n\n/**\n * Function: writeAttribute\n * \n * Writes the given value into node using <writePrimitiveAttribute>\n * or <writeComplexAttribute> depending on the type of the value.\n */\nmxObjectCodec.prototype.writeAttribute = function(enc, obj, name, value, node)\n{\n\tif (typeof(value) != 'object' /* primitive type */)\n\t{\n\t\tthis.writePrimitiveAttribute(enc, obj, name, value, node);\n\t}\n\telse /* complex type */\n\t{\n\t\tthis.writeComplexAttribute(enc, obj, name, value, node);\n\t}\n};\n\n/**\n * Function: writePrimitiveAttribute\n * \n * Writes the given value as an attribute of the given node.\n */\nmxObjectCodec.prototype.writePrimitiveAttribute = function(enc, obj, name, value, node)\n{\n\tvalue = this.convertAttributeToXml(enc, obj, name, value, node);\n\t\n\tif (name == null)\n\t{\n\t\tvar child = enc.document.createElement('add');\n\t\t\n\t\tif (typeof(value) == 'function')\n\t\t{\n    \t\tchild.appendChild(enc.document.createTextNode(value));\n    \t}\n    \telse\n    \t{\n    \t\tenc.setAttribute(child, 'value', value);\n    \t}\n    \t\n\t\tnode.appendChild(child);\n\t}\n\telse if (typeof(value) != 'function')\n\t{\n    \tenc.setAttribute(node, name, value);\n\t}\t\t\n};\n\t\n/**\n * Function: writeComplexAttribute\n * \n * Writes the given value as a child node of the given node.\n */\nmxObjectCodec.prototype.writeComplexAttribute = function(enc, obj, name, value, node)\n{\n\tvar child = enc.encode(value);\n\t\n\tif (child != null)\n\t{\n\t\tif (name != null)\n\t\t{\n    \t\tchild.setAttribute('as', name);\n    \t}\n    \t\n    \tnode.appendChild(child);\n\t}\n\telse\n\t{\n\t\tmxLog.warn('mxObjectCodec.encode: No node for ' + this.getName() + '.' + name + ': ' + value);\n\t}\n};\n\n/**\n * Function: convertAttributeToXml\n * \n * Converts true to \"1\" and false to \"0\" is <isBooleanAttribute> returns true.\n * All other values are not converted.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value to be converted.\n */\nmxObjectCodec.prototype.convertAttributeToXml = function(enc, obj, name, value)\n{\n\t// Makes sure to encode boolean values as numeric values\n\tif (this.isBooleanAttribute(enc, obj, name, value))\n\t{\t\n\t\t// Checks if the value is true (do not use the value as is, because\n\t\t// this would check if the value is not null, so 0 would be true)\n\t\tvalue = (value == true) ? '1' : '0';\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isBooleanAttribute\n * \n * Returns true if the given object attribute is a boolean value.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value of the attribute to be converted.\n */\nmxObjectCodec.prototype.isBooleanAttribute = function(enc, obj, name, value)\n{\n\treturn (typeof(value.length) == 'undefined' && (value == true || value == false));\n};\n\n/**\n * Function: convertAttributeFromXml\n * \n * Converts booleans and numeric values to the respective types. Values are\n * numeric if <isNumericAttribute> returns true.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.convertAttributeFromXml = function(dec, attr, obj)\n{\n\tvar value = attr.value;\n\t\n\tif (this.isNumericAttribute(dec, attr, obj))\n\t{\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value) || !isFinite(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isNumericAttribute\n * \n * Returns true if the given XML attribute is or should be a numeric value.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.isNumericAttribute = function(dec, attr, obj)\n{\n\t// Handles known numeric attributes for generic objects\n\tvar result = (obj.constructor == mxGeometry &&\n\t\t(attr.name == 'x' || attr.name == 'y' ||\n\t\tattr.name == 'width' || attr.name == 'height')) ||\n\t\t(obj.constructor == mxPoint &&\n\t\t(attr.name == 'x' || attr.name == 'y')) ||\n\t\tmxUtils.isNumeric(attr.value);\n\t\n\treturn result;\n};\n\n/**\n * Function: beforeEncode\n *\n * Hook for subclassers to pre-process the object before\n * encoding. This returns the input object. The return\n * value of this function is used in <encode> to perform\n * the default encoding into the given node.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node to encode the object into.\n */\nmxObjectCodec.prototype.beforeEncode = function(enc, obj, node)\n{\n\treturn obj;\n};\n\n/**\n * Function: afterEncode\n *\n * Hook for subclassers to post-process the node\n * for the given object after encoding and return the\n * post-processed node. This implementation returns \n * the input node. The return value of this method\n * is returned to the encoder from <encode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that represents the default encoding.\n */\nmxObjectCodec.prototype.afterEncode = function(enc, obj, node)\n{\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Parses the given node into the object or returns a new object\n * representing the given node.\n *\n * Dec is a reference to the calling decoder. It is used to decode\n * complex objects and resolve references.\n *\n * If a node has an id attribute then the object cache is checked for the\n * object. If the object is not yet in the cache then it is constructed\n * using the constructor of <template> and cached in <mxCodec.objects>.\n *\n * This implementation decodes all attributes and childs of a node\n * according to the following rules:\n *\n * - If the variable name is in <exclude> or if the attribute name is \"id\"\n * or \"as\" then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getObject> is used\n * to replace the reference with an object.\n * - The variable name is mapped using a reverse <mapping>.\n * - If the value has a child node, then the codec is used to create a\n * child object with the variable name taken from the \"as\" attribute.\n * - If the object is an array and the variable name is empty then the\n * value or child object is appended to the array.\n * - If an add child has no value or the object is not an array then\n * the child text content is evaluated using <mxUtils.eval>.\n *\n * For add nodes where the object is not an array and the variable name\n * is defined, the default mechanism is used, allowing to override/add\n * methods as follows:\n *\n * (code)\n * <Object>\n *   <add as=\"hello\"><![CDATA[\n *     function(arg1) {\n *       mxUtils.alert('Hello '+arg1);\n *     }\n *   ]]></add>\n * </Object>\n * (end) \n *\n * If no object exists for an ID in <idrefs> a warning is issued\n * using <mxLog.warn>.\n *\n * Returns the resulting object that represents the given XML node\n * or the object given to the method as the into parameter.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * into - Optional objec to encode the node into.\n */\nmxObjectCodec.prototype.decode = function(dec, node, into)\n{\n\tvar id = node.getAttribute('id');\n\tvar obj = dec.objects[id];\n\t\n\tif (obj == null)\n\t{\n\t\tobj = into || this.cloneTemplate();\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.putObject(id, obj);\n\t\t}\n\t}\n\t\n\tnode = this.beforeDecode(dec, node, obj);\n\tthis.decodeNode(dec, node, obj);\n\t\n    return this.afterDecode(dec, node, obj);\n};\t\n\n/**\n * Function: decodeNode\n * \n * Calls <decodeAttributes> and <decodeChildren> for the given node.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeNode = function(dec, node, obj)\n{\n\tif (node != null)\n\t{\n\t\tthis.decodeAttributes(dec, node, obj);\n\t\tthis.decodeChildren(dec, node, obj);\n\t}\n};\n\n/**\n * Function: decodeAttributes\n * \n * Decodes all attributes of the given node using <decodeAttribute>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeAttributes = function(dec, node, obj)\n{\n\tvar attrs = node.attributes;\n\t\n\tif (attrs != null)\n\t{\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\tthis.decodeAttribute(dec, attrs[i], obj);\n\t\t}\n\t}\n};\n\n/**\n * Function: isIgnoredAttribute\n * \n * Returns true if the given attribute should be ignored. This implementation\n * returns true if the attribute name is \"as\" or \"id\".\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.isIgnoredAttribute = function(dec, attr, obj)\n{\n\treturn attr.nodeName == 'as' || attr.nodeName == 'id';\n};\n\n/**\n * Function: decodeAttribute\n * \n * Reads the given attribute into the specified object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.decodeAttribute = function(dec, attr, obj)\n{\n\tif (!this.isIgnoredAttribute(dec, attr, obj))\n\t{\n\t\tvar name = attr.nodeName;\n\t\t\n\t\t// Converts the string true and false to their boolean values.\n\t\t// This may require an additional check on the obj to see if\n\t\t// the existing field is a boolean value or uninitialized, in\n\t\t// which case we may want to convert true and false to a string.\n\t\tvar value = this.convertAttributeFromXml(dec, attr, obj);\n\t\tvar fieldname = this.getFieldName(name);\n\t\t\n\t\tif (this.isReference(obj, fieldname, value, false))\n\t\t{\n\t\t\tvar tmp = dec.getObject(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.decode: No object for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tif (!this.isExcluded(obj, name, value, false))\n\t\t{\n\t\t\t//mxLog.debug(mxUtils.getFunctionName(obj.constructor)+'.'+name+'='+value);\n\t\t\tobj[name] = value;\n\t\t}\n\t}\n};\n\n/**\n * Function: decodeChildren\n * \n * Decodes all children of the given node using <decodeChild>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChildren = function(dec, node, obj)\n{\n\tvar child = node.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar tmp = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_ELEMENT &&\n\t\t\t!this.processInclude(dec, child, obj))\n\t\t{\n\t\t\tthis.decodeChild(dec, child, obj);\n\t\t}\n\t\t\n\t\tchild = tmp;\n\t}\n};\n\n/**\n * Function: decodeChild\n * \n * Reads the specified child into the given object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * child - XML child element to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChild = function(dec, child, obj)\n{\n\tvar fieldname = this.getFieldName(child.getAttribute('as'));\n\t\n\tif (fieldname == null || !this.isExcluded(obj, fieldname, child, false))\n\t{\n\t\tvar template = this.getFieldTemplate(obj, fieldname, child);\n\t\tvar value = null;\n\t\t\n\t\tif (child.nodeName == 'add')\n\t\t{\n\t\t\tvalue = child.getAttribute('value');\n\t\t\t\n\t\t\tif (value == null && mxObjectCodec.allowEval)\n\t\t\t{\n\t\t\t\tvalue = mxUtils.eval(mxUtils.getTextContent(child));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvalue = dec.decode(child, template);\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tthis.addObjectValue(obj, fieldname, value, template);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tthrow new Error(e.message + ' for ' + child.nodeName);\n\t\t}\n\t}\n};\n\n/**\n * Function: getFieldTemplate\n * \n * Returns the template instance for the given field. This returns the\n * value of the field, null if the value is an array or an empty collection\n * if the value is a collection. The value is then used to populate the\n * field for a new instance. For strongly typed languages it may be\n * required to override this to return the correct collection instance\n * based on the encoded child.\n */\t\nmxObjectCodec.prototype.getFieldTemplate = function(obj, fieldname, child)\n{\n\tvar template = obj[fieldname];\n\t\n\t// Non-empty arrays are replaced completely\n    if (template instanceof Array && template.length > 0)\n    {\n        template = null;\n    }\n    \n    return template;\n};\n\n/**\n * Function: addObjectValue\n * \n * Sets the decoded child node as a value of the given object. If the\n * object is a map, then the value is added with the given fieldname as a\n * key. If the fieldname is not empty, then setFieldValue is called or\n * else, if the object is a collection, the value is added to the\n * collection. For strongly typed languages it may be required to\n * override this with the correct code to add an entry to an object.\n */\t\nmxObjectCodec.prototype.addObjectValue = function(obj, fieldname, value, template)\n{\n\tif (value != null && value != template)\n\t{\n\t\tif (fieldname != null && fieldname.length > 0)\n\t\t{\n\t\t\tobj[fieldname] = value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj.push(value);\n\t\t}\n\t\t//mxLog.debug('Decoded '+mxUtils.getFunctionName(obj.constructor)+'.'+fieldname+': '+value);\n\t}\n};\n\n/**\n * Function: processInclude\n *\n * Returns true if the given node is an include directive and\n * executes the include by decoding the XML document. Returns\n * false if the given node is not an include directive.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the encoding/decoding process.\n * node - XML node to be checked.\n * into - Optional object to pass-thru to the codec.\n */\nmxObjectCodec.prototype.processInclude = function(dec, node, into)\n{\n\tif (node.nodeName == 'include')\n\t{\n\t\tvar name = node.getAttribute('name');\n\t\t\n\t\tif (name != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar xml = mxUtils.load(name).getDocumentElement();\n\t\t\t\t\n\t\t\t\tif (xml != null)\n\t\t\t\t{\n\t\t\t\t\tdec.decode(xml, into);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: beforeDecode\n *\n * Hook for subclassers to pre-process the node for\n * the specified object and return the node to be\n * used for further processing by <decode>.\n * The object is created based on the template in the \n * calling method and is never null. This implementation\n * returns the input node. The return value of this\n * function is used in <decode> to perform\n * the default decoding into the given object.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Object to encode the node into.\n */\nmxObjectCodec.prototype.beforeDecode = function(dec, node, obj)\n{\n\treturn node;\n};\n\n/**\n * Function: afterDecode\n *\n * Hook for subclassers to post-process the object after\n * decoding. This implementation returns the given object\n * without any changes. The return value of this method\n * is returned to the decoder from <decode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * node - XML node to be decoded.\n * obj - Object that represents the default decoding.\n */\nmxObjectCodec.prototype.afterDecode = function(dec, node, obj)\n{\n\treturn obj;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxCellCodec\n\t *\n\t * Codec for <mxCell>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - children\n\t * - edges\n\t * - overlays\n\t * - mxTransient\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t * - source\n\t * - target\n\t * \n\t * Transient fields can be added using the following code:\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).exclude.push('name_of_field');\n\t * \n\t * To subclass <mxCell>, replace the template and add an alias as\n\t * follows.\n\t * \n\t * (code)\n\t * function CustomCell(value, geometry, style)\n\t * {\n\t *   mxCell.apply(this, arguments);\n\t * }\n\t * \n\t * mxUtils.extend(CustomCell, mxCell);\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).template = new CustomCell();\n\t * mxCodecRegistry.addAlias('CustomCell', 'mxCell');\n\t * (end)\n\t */\n\tvar codec = new mxObjectCodec(new mxCell(),\n\t\t['children', 'edges', 'overlays', 'mxTransient'],\n\t\t['parent', 'source', 'target']);\n\n\t/**\n\t * Function: isCellCodec\n\t *\n\t * Returns true since this is a cell codec.\n\t */\n\tcodec.isCellCodec = function()\n\t{\n\t\treturn true;\n\t};\n\n\t/**\n\t * Overidden to disable conversion of value to number.\n\t */\n\tcodec.isNumericAttribute = function(dec, attr, obj)\n\t{\n\t\treturn attr.nodeName !== 'value' && mxObjectCodec.prototype.isNumericAttribute.apply(this, arguments);\n\t};\n\t\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes user objects that are XML nodes.\n\t */ \n\tcodec.isExcluded = function(obj, attr, value, isWrite)\n\t{\n\t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n\t\t\t(isWrite && attr == 'value' &&\n\t\t\tvalue.nodeType == mxConstants.NODETYPE_ELEMENT);\n\t};\n\t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes an <mxCell> and wraps the XML up inside the\n\t * XML of the user object (inversion).\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (obj.value != null && obj.value.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Wraps the graphical annotation up in the user object (inversion)\n\t\t\t// by putting the result of the default encoding into a clone of the\n\t\t\t// user object (node type 1) and returning this cloned user object.\n\t\t\tvar tmp = node;\n\t\t\tnode = mxUtils.importNode(enc.document, obj.value, true);\n\t\t\tnode.appendChild(tmp);\n\t\t\t\n\t\t\t// Moves the id attribute to the outermost XML node, namely the\n\t\t\t// node which denotes the object boundaries in the file.\n\t\t\tvar id = tmp.getAttribute('id');\n\t\t\tnode.setAttribute('id', id);\n\t\t\ttmp.removeAttribute('id');\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes an <mxCell> and uses the enclosing XML node as\n\t * the user object for the cell (inversion).\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tvar inner = node.cloneNode(true);\n\t\tvar classname = this.getName();\n\t\t\n\t\tif (node.nodeName != classname)\n\t\t{\n\t\t\t// Passes the inner graphical annotation node to the\n\t\t\t// object codec for further processing of the cell.\n\t\t\tvar tmp = node.getElementsByTagName(classname)[0];\n\t\t\t\n\t\t\tif (tmp != null && tmp.parentNode == node)\n\t\t\t{\n\t\t\t\tmxUtils.removeWhitespace(tmp, true);\n\t\t\t\tmxUtils.removeWhitespace(tmp, false);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\tinner = tmp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinner = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the user object out of the XML node\n\t\t\tobj.value = node.cloneNode(true);\n\t\t\tvar id = obj.value.getAttribute('id');\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tobj.setId(id);\n\t\t\t\tobj.value.removeAttribute('id');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses ID from XML file as ID for cell in model\n\t\t\tobj.setId(node.getAttribute('id'));\n\t\t}\n\t\t\t\n\t\t// Preprocesses and removes all Id-references in order to use the\n\t\t// correct encoder (this) for the known references to cells (all).\n\t\tif (inner != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.idrefs.length; i++)\n\t\t\t{\n\t\t\t\tvar attr = this.idrefs[i];\n\t\t\t\tvar ref = inner.getAttribute(attr);\n\t\t\t\t\n\t\t\t\tif (ref != null)\n\t\t\t\t{\n\t\t\t\t\tinner.removeAttribute(attr);\n\t\t\t\t\tvar object = dec.objects[ref] || dec.lookup(ref);\n\t\t\t\t\t\n\t\t\t\t\tif (object == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Needs to decode forward reference\n\t\t\t\t\t\tvar element = dec.getElementById(ref);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (element != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar decoder = mxCodecRegistry.codecs[element.nodeName] || this;\n\t\t\t\t\t\t\tobject = decoder.decode(dec, element);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj[attr] = object;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn inner;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxModelCodec\n\t *\n\t * Codec for <mxGraphModel>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphModel());\n\n\t/**\n\t * Function: encodeObject\n\t *\n\t * Encodes the given <mxGraphModel> by writing a (flat) XML sequence of\n\t * cell nodes as produced by the <mxCellCodec>. The sequence is\n\t * wrapped-up in a node with the name root.\n\t */\n\tcodec.encodeObject = function(enc, obj, node)\n\t{\n\t\tvar rootNode = enc.document.createElement('root');\n\t\tenc.encodeCell(obj.getRoot(), rootNode);\n\t\tnode.appendChild(rootNode);\n\t};\n\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'root')\n\t\t{\n\t\t\tthis.decodeRoot(dec, child, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t\t}\n\t};\n\n\t/**\n\t * Function: decodeRoot\n\t *\n\t * Reads the cells into the graph model. All cells\n\t * are children of the root element in the node.\n\t */\n\tcodec.decodeRoot = function(dec, root, model)\n\t{\n\t\tvar rootCell = null;\n\t\tvar tmp = root.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tvar cell = dec.decodeCell(tmp);\n\t\t\t\n\t\t\tif (cell != null && cell.getParent() == null)\n\t\t\t{\n\t\t\t\trootCell = cell;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\n\t\t// Sets the root on the model if one has been decoded\n\t\tif (rootCell != null)\n\t\t{\n\t\t\tmodel.setRoot(rootCell);\n\t\t}\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxRootChangeCodec\n\t *\n\t * Codec for <mxRootChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - root\n\t */\n\tvar codec = new mxObjectCodec(new mxRootChange(),\n\t\t['model', 'previous', 'root']);\n\n\t/**\n\t * Function: onEncode\n\t *\n\t * Encodes the child recursively.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tenc.encodeCell(obj.root, node);\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the optional children as cells\n\t * using the respective decoder.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.root = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.root;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxChildChangeCodec\n\t *\n\t * Codec for <mxChildChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - previousIndex\n\t * - child\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t */\n\tvar codec = new mxObjectCodec(new mxChildChange(),\n\t\t['model', 'child', 'previousIndex'],\n\t\t['parent', 'previous']);\n\n\t/**\n\t * Function: isReference\n\t *\n\t * Returns true for the child attribute if the child\n\t * cell had a previous parent or if we're reading the\n\t * child as an attribute rather than a child node, in\n\t * which case it's always a reference.\n\t */\n\tcodec.isReference = function(obj, attr, value, isWrite)\n\t{\n\t\tif (attr == 'child' && (!isWrite || obj.model.contains(obj.previous)))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n\t};\n\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes references to parent or previous if not in the model.\n\t */\n  \tcodec.isExcluded = function(obj, attr, value, write)\n  \t{\n  \t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n  \t\t\t(write && value != null && (attr == 'previous' ||\n  \t\t\tattr == 'parent') && !obj.model.contains(value));\n  \t};\n  \t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes the child recusively and adds the result\n\t * to the given node.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (this.isReference(obj, 'child', obj.child, true))\n\t\t{\n\t\t\t// Encodes as reference (id)\n\t\t\tnode.setAttribute('child', enc.getId(obj.child));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// At this point, the encoder is no longer able to know which cells\n\t\t\t// are new, so we have to encode the complete cell hierarchy and\n\t\t\t// ignore the ones that are already there at decoding time. Note:\n\t\t\t// This can only be resolved by moving the notify event into the\n\t\t\t// execute of the edit.\n\t\t\tenc.encodeCell(obj.child, node);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the any child nodes as using the respective\n\t * codec from the registry.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.child = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\t\n\t\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\t// Ignores all existing cells because those do not need to\n\t\t\t\t\t// be re-inserted into the model. Since the encoded version\n\t\t\t\t\t// of these cells contains the new parent, this would leave\n\t\t\t\t\t// to an inconsistent state on the model (ie. a parent\n\t\t\t\t\t// change without a call to parentForCellChanged).\n\t\t\t\t\tvar id = tmp.getAttribute('id');\n\t\t\t\t\t\n\t\t\t\t\tif (dec.lookup(id) == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar childRef = node.getAttribute('child');\n\t\t\tobj.child = dec.getObject(childRef);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores object state in the child change.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Cells are decoded here after a complete transaction so the previous\n\t\t// parent must be restored on the cell for the case where the cell was\n\t\t// added. This is needed for the local model to identify the cell as a\n\t\t// new cell and register the ID.\n        if (obj.child != null)\n        {\n            if (obj.child.parent != null && obj.previous != null &&\n                obj.child.parent != obj.previous)\n            {\n                obj.previous = obj.child.parent;\n            }\n\n            obj.child.parent = obj.previous;\n            obj.previous = obj.parent;\n            obj.previousIndex = obj.index;\n        }\n\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxTerminalChangeCodec\n\t *\n\t * Codec for <mxTerminalChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t *\n\t * Reference Fields:\n\t *\n\t * - cell\n\t * - terminal\n\t */\n\tvar codec = new mxObjectCodec(new mxTerminalChange(),\n\t\t['model', 'previous'], ['cell', 'terminal']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.terminal;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGenericChangeCodec\n *\n * Codec for <mxValueChange>s, <mxStyleChange>s, <mxGeometryChange>s,\n * <mxCollapseChange>s and <mxVisibleChange>s. This class is created\n * and registered dynamically at load time and used implicitely\n * via <mxCodec> and the <mxCodecRegistry>.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n *\n * Reference Fields:\n *\n * - cell\n * \n * Constructor: mxGenericChangeCodec\n *\n * Factory function that creates a <mxObjectCodec> for\n * the specified change and fieldname.\n *\n * Parameters:\n *\n * obj - An instance of the change object.\n * variable - The fieldname for the change data.\n */\nvar mxGenericChangeCodec = function(obj, variable)\n{\n\tvar codec = new mxObjectCodec(obj,  ['model', 'previous'], ['cell']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Allows forward references in sessions. This is a workaround\n\t\t// for the sequence of edits in mxGraph.moveCells and cellsAdded.\n\t\tif (mxUtils.isNode(obj.cell))\n\t\t{\n\t\t\tobj.cell = dec.decodeCell(obj.cell, false);\n\t\t}\n\n\t\tobj.previous = obj[variable];\n\n\t\treturn obj;\n\t};\n\t\n\treturn codec;\n};\n\n// Registers the codecs\nmxCodecRegistry.register(mxGenericChangeCodec(new mxValueChange(), 'value'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxStyleChange(), 'style'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxGeometryChange(), 'geometry'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCollapseChange(), 'collapsed'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxVisibleChange(), 'visible'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCellAttributeChange(), 'value'));\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphCodec\n\t *\n\t * Codec for <mxGraph>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - graphListeners\n\t * - eventListeners\n\t * - view\n\t * - container\n\t * - cellRenderer\n\t * - editor\n\t * - selection\n\t */\n\treturn new mxObjectCodec(new mxGraph(),\n\t\t['graphListeners', 'eventListeners', 'view', 'container',\n\t\t'cellRenderer', 'editor', 'selection']);\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphViewCodec\n\t *\n\t * Custom encoder for <mxGraphView>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only writes views\n\t * into a XML format that can be used to create an image for\n\t * the graph, that is, it contains absolute coordinates with\n\t * computed perimeters, edge styles and cell styles.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphView());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes the given <mxGraphView> using <encodeCell>\n\t * starting at the model's root. This returns the\n\t * top-level graph node of the recursive encoding.\n\t */\n\tcodec.encode = function(enc, view)\n\t{\n\t\treturn this.encodeCell(enc, view,\n\t\t\tview.graph.getModel().getRoot());\n\t};\n\n\t/**\n\t * Function: encodeCell\n\t *\n\t * Recursively encodes the specifed cell. Uses layer\n\t * as the default nodename. If the cell's parent is\n\t * null, then graph is used for the nodename. If\n\t * <mxGraphModel.isEdge> returns true for the cell,\n\t * then edge is used for the nodename, else if\n\t * <mxGraphModel.isVertex> returns true for the cell,\n\t * then vertex is used for the nodename.\n\t *\n\t * <mxGraph.getLabel> is used to create the label\n\t * attribute for the cell. For graph nodes and vertices\n\t * the bounds are encoded into x, y, width and height.\n\t * For edges the points are encoded into a points\n\t * attribute as a space-separated list of comma-separated\n\t * coordinate pairs (eg. x0,y0 x1,y1 ... xn,yn). All\n\t * values from the cell style are added as attribute\n\t * values to the node. \n\t */\n\tcodec.encodeCell = function(enc, view, cell)\n\t{\n\t\tvar model = view.graph.getModel();\n\t\tvar state = view.getState(cell);\n\t\tvar parent = model.getParent(cell);\n\t\t\n\t\tif (parent == null || state != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\tvar geo = view.graph.getCellGeometry(cell);\n\t\t\tvar name = null;\n\t\t\t\n\t\t\tif (parent == model.getRoot())\n\t\t\t{\n\t\t\t\tname = 'layer';\n\t\t\t}\n\t\t\telse if (parent == null)\n\t\t\t{\n\t\t\t\tname = 'graph';\n\t\t\t}\n\t\t\telse if (model.isEdge(cell))\n\t\t\t{\n\t\t\t\tname = 'edge';\n\t\t\t}\n\t\t\telse if (childCount > 0 && geo != null)\n\t\t\t{\n\t\t\t\tname = 'group';\n\t\t\t}\n\t\t\telse if (model.isVertex(cell))\n\t\t\t{\n\t\t\t\tname = 'vertex';\n\t\t\t}\n\t\t\t\n\t\t\tif (name != null)\n\t\t\t{\n\t\t\t\tvar node = enc.document.createElement(name);\n\t\t\t\tvar lab = view.graph.getLabel(cell);\n\t\t\t\t\n\t\t\t\tif (lab != null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('label', view.graph.getLabel(cell));\n\t\t\t\t\t\n\t\t\t\t\tif (view.graph.isHtmlLabel(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('html', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tif (parent == null)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = view.getGraphBounds();\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(bounds.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(bounds.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(bounds.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(bounds.height));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tnode.setAttribute('scale', view.scale);\n\t\t\t\t}\n\t\t\t\telse if (state != null && geo != null)\n\t\t\t\t{\n\t\t\t\t\t// Writes each key, value in the style pair to an attribute\n\t\t\t\t    for (var i in state.style)\n\t\t\t\t    {\n\t\t\t\t    \tvar value = state.style[i];\n\t\t\n\t\t\t\t    \t// Tries to turn objects and functions into strings\n\t\t\t\t\t    if (typeof(value) == 'function' &&\n\t\t\t\t\t\t\ttypeof(value) == 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t    \tvalue = mxStyleRegistry.getName(value);\n\t\t\t\t        }\n\t\t\t\t    \t\n\t\t\t\t    \tif (value != null &&\n\t\t\t\t    \t\ttypeof(value) != 'function' &&\n\t\t\t\t\t\t\ttypeof(value) != 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute(i, value);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t\tvar abs = state.absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the list of points into one attribute\n\t\t\t\t\tif (abs != null && abs.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pts = Math.round(abs[0].x) + ',' + Math.round(abs[0].y);\n\t\t\n\t\t\t\t\t\tfor (var i=1; i<abs.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts += ' ' + Math.round(abs[i].x) + ',' +\n\t\t\t\t\t\t\t\tMath.round(abs[i].y);\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\tnode.setAttribute('points', pts);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Writes the bounds into 4 attributes\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(state.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(state.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(state.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(state.height));\t\t\t\t\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar offset = state.absoluteOffset;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the offset into 2 attributes\n\t\t\t\t\tif (offset != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (offset.x != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dx', Math.round(offset.x));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (offset.y != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dy', Math.round(offset.y));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tfor (var i=0; i<childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar childNode = this.encodeCell(enc,\n\t\t\t\t\t\t\tview, model.getChildAt(cell, i));\n\t\t\t\t\t\n\t\t\t\t\tif (childNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheetCodec\n *\n * Codec for <mxStylesheet>s. This class is created and registered\n * dynamically at load time and used implicitely via <mxCodec>\n * and the <mxCodecRegistry>.\n */\nvar mxStylesheetCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxStylesheet());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes a stylesheet. See <decode> for a description of the\n\t * format.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\tvar node = enc.document.createElement(this.getName());\n\t\t\n\t\tfor (var i in obj.styles)\n\t\t{\n\t\t\tvar style = obj.styles[i];\n\t\t\tvar styleNode = enc.document.createElement('add');\n\t\t\t\n\t\t\tif (i != null)\n\t\t\t{\n\t\t\t\tstyleNode.setAttribute('as', i);\n\t\t\t\t\n\t\t\t\tfor (var j in style)\n\t\t\t\t{\n\t\t\t\t\tvar value = this.getStringValue(j, style[j]);\n\t\t\t\t\t\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar entry = enc.document.createElement('add');\n\t\t\t\t\t\tentry.setAttribute('value', value);\n\t\t\t\t\t\tentry.setAttribute('as', j);\n\t\t\t\t\t\tstyleNode.appendChild(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (styleNode.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tnode.appendChild(styleNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t    return node;\n\t};\n\n\t/**\n\t * Function: getStringValue\n\t *\n\t * Returns the string for encoding the given value.\n\t */\n\tcodec.getStringValue = function(key, value)\n\t{\n\t\tvar type = typeof(value);\n\t\t\n\t\tif (type == 'function')\n\t\t{\n\t\t\tvalue = mxStyleRegistry.getName(value);\n\t\t}\n\t\telse if (type == 'object')\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new style.\n\t *\n\t * Attributes:\n\t *\n\t * as - Name of the style.\n\t * extend - Name of the style to inherit from.\n\t *\n\t * Each node contains another sequence of add and remove nodes with the following\n\t * attributes:\n\t *\n\t * as - Name of the style (see <mxConstants>).\n\t * value - Value for the style.\n\t *\n\t * Instead of the value-attribute, one can put Javascript expressions into\n\t * the node as follows if <mxStylesheetCodec.allowEval> is true:\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t *\n\t * A remove node will remove the entry with the name given in the as-attribute\n\t * from the style.\n\t * \n\t * Example:\n\t *\n\t * (code)\n\t * <mxStylesheet as=\"stylesheet\">\n\t *   <add as=\"text\">\n\t *     <add as=\"fontSize\" value=\"12\"/>\n\t *   </add>\n\t *   <add as=\"defaultVertex\" extend=\"text\">\n\t *     <add as=\"shape\" value=\"rectangle\"/>\n\t *   </add>\n\t * </mxStylesheet>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar obj = into || new this.template.constructor();\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.objects[id] = obj;\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tif (!this.processInclude(dec, node, obj) && node.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\n\t\t\t\tif (as != null)\n\t\t\t\t{\n\t\t\t\t\tvar extend = node.getAttribute('extend');\n\t\t\t\t\tvar style = (extend != null) ? mxUtils.clone(obj.styles[extend]) : null;\n\t\t\t\t\t\n\t\t\t\t\tif (style == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (extend != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxLog.warn('mxStylesheetCodec.decode: stylesheet ' +\n\t\t\t\t\t\t\t\textend + ' not found to extend');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstyle = new Object();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar entry = node.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (entry != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (entry.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t \tvar key = entry.getAttribute('as');\n\t\t\t\t\t\t \t\n\t\t\t\t\t\t \tif (entry.nodeName == 'add')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \tvar text = mxUtils.getTextContent(entry);\n\t\t\t\t\t\t\t \tvar value = null;\n\t\t\t\t\t\t\t \t\n\t\t\t\t\t\t\t \tif (text != null && text.length > 0 && mxStylesheetCodec.allowEval)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = mxUtils.eval(text);\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t \telse\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = entry.getAttribute('value');\n\t\t\t\t\t\t\t \t\t\n\t\t\t\t\t\t\t \t\tif (mxUtils.isNumeric(value))\n\t\t\t\t\t\t\t \t\t{\n\t\t\t\t\t\t\t\t\t\tvalue = parseFloat(value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t \t}\n\n\t\t\t\t\t\t\t \tif (value != null)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tstyle[key] = value;\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \telse if (entry.nodeName == 'remove')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t \t\tdelete style[key];\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tentry = entry.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj.putCellStyle(as, style);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input.\n */\nmxStylesheetCodec.allowEval = true;\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultKeyHandlerCodec\n\t *\n\t * Custom codec for configuring <mxDefaultKeyHandler>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing key handlers, it does not encode or create key handlers.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultKeyHandler());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Binds a keystroke to an actionname.\n\t *\n\t * Attributes:\n\t *\n\t * as - Keycode.\n\t * action - Actionname to execute in editor.\n\t * control - Optional boolean indicating if\n\t * \t\tthe control key must be pressed.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <mxDefaultKeyHandler as=\"keyHandler\">\n\t *   <add as=\"88\" control=\"true\" action=\"cut\"/>\n\t *   <add as=\"67\" control=\"true\" action=\"copy\"/>\n\t *   <add as=\"86\" control=\"true\" action=\"paste\"/>\n\t * </mxDefaultKeyHandler>\n\t * (end)\n\t *\n\t * The keycodes are for the x, c and v keys.\n\t *\n\t * See also: <mxDefaultKeyHandler.bindAction>,\n\t * http://www.js-examples.com/page/tutorials__key_codes.html\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (!this.processInclude(dec, node, into) &&\n\t\t\t\t\tnode.nodeName == 'add')\n\t\t\t\t{\n\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\tvar control = node.getAttribute('control');\n\t\t\t\t\t\n\t\t\t\t\tinto.bindAction(as, action, control);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbarCodec\n *\n * Custom codec for configuring <mxDefaultToolbar>s. This class is created\n * and registered dynamically at load time and used implicitely via\n * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n * data for existing toolbars handlers, it does not encode or create toolbars.\n */\nvar mxDefaultToolbarCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxDefaultToolbar());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new item to the toolbar. See below for attributes.\n\t * separator - Adds a vertical separator. No attributes.\n\t * hr - Adds a horizontal separator. No attributes.\n\t * br - Adds a linefeed. No attributes. \n\t *\n\t * Attributes:\n\t *\n\t * as - Resource key for the label.\n\t * action - Name of the action to execute in enclosing editor.\n\t * mode - Modename (see below).\n\t * template - Template name for cell insertion.\n\t * style - Optional style to override the template style.\n\t * icon - Icon (relative/absolute URL).\n\t * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n\t * id - Optional ID to be used for the created DOM element.\n\t * toggle - Optional 0 or 1 to disable toggling of the element. Default is\n\t * 1 (true).\n\t *\n\t * The action, mode and template attributes are mutually exclusive. The\n\t * style can only be used with the template attribute. The add node may\n\t * contain another sequence of add nodes with as and action attributes\n\t * to create a combo box in the toolbar. If the icon is specified then\n\t * a list of the child node is expected to have its template attribute\n\t * set and the action is ignored instead.\n\t * \n\t * Nodes with a specified template may define a function to be used for\n\t * inserting the cloned template into the graph. Here is an example of such\n\t * a node:\n\t * \n\t * (code)\n\t * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n\t *   function (editor, cell, evt, targetCell)\n\t *   {\n\t *     var pt = mxUtils.convertPoint(\n\t *       editor.graph.container, mxEvent.getClientX(evt),\n\t *         mxEvent.getClientY(evt));\n\t *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * In the above function, editor is the enclosing <mxEditor> instance, cell\n\t * is the clone of the template, evt is the mouse event that represents the\n\t * drop and targetCell is the cell under the mousepointer where the drop\n\t * occurred. The targetCell is retrieved using <mxGraph.getCellAt>.\n\t *\n\t * Futhermore, nodes with the mode attribute may define a function to\n\t * be executed upon selection of the respective toolbar icon. In the\n\t * example below, the default edge style is set when this specific\n\t * connect-mode is activated:\n\t *\n\t * (code)\n\t * <add as=\"connect\" mode=\"connect\"><![CDATA[\n\t *   function (editor)\n\t *   {\n\t *     if (editor.defaultEdge != null)\n\t *     {\n\t *       editor.defaultEdge.style = 'straightEdge';\n\t *     }\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * Both functions require <mxDefaultToolbarCodec.allowEval> to be set to true.\n\t *\n\t * Modes:\n\t *\n\t * select - Left mouse button used for rubberband- & cell-selection.\n\t * connect - Allows connecting vertices by inserting new edges.\n\t * pan - Disables selection and switches to panning on the left button.\n\t *\n\t * Example:\n\t *\n\t * To add items to the toolbar:\n\t * \n\t * (code)\n\t * <mxDefaultToolbar as=\"toolbar\">\n\t *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n\t *   <br/><hr/>\n\t *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n\t *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n\t * </mxDefaultToolbar>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\tif (!this.processInclude(dec, node, into))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (node.nodeName == 'separator')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.addSeparator();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'br')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addBreak();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'hr')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addLine();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'add')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\t\t\t\tvar icon = node.getAttribute('icon');\n\t\t\t\t\t\t\tvar pressedIcon = node.getAttribute('pressedIcon');\n\t\t\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\t\t\tvar mode = node.getAttribute('mode');\n\t\t\t\t\t\t\tvar template = node.getAttribute('template');\n\t\t\t\t\t\t\tvar toggle = node.getAttribute('toggle') != '0';\n\t\t\t\t\t\t\tvar text = mxUtils.getTextContent(node);\n\t\t\t\t\t\t\tvar elt = null;\n\n\t\t\t\t\t\t\tif (action != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telt = into.addItem(as, icon, action, pressedIcon);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (mode != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar funct = (mxDefaultToolbarCodec.allowEval) ? mxUtils.eval(text) : null;\n\t\t\t\t\t\t\t\telt = into.addMode(as, icon, mode, pressedIcon, funct);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (template != null || (text != null && text.length > 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar cell = editor.templates[template];\n\t\t\t\t\t\t\t\tvar style = node.getAttribute('style');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (cell != null && style != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcell = editor.graph.cloneCell(cell);\n\t\t\t\t\t\t\t\t\tcell.setStyle(style);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar insertFunction = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (text != null && text.length > 0 && mxDefaultToolbarCodec.allowEval)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tinsertFunction = mxUtils.eval(text);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\telt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar children = mxUtils.getChildNodes(node);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (children.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (icon == null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar combo = into.addActionCombo(as);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(combo, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar act = child.getAttribute('action');\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addActionOption(combo, lab, act);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar select = null;\n\t\t\t\t\t\t\t\t\t\tvar create = function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar template = editor.templates[select.value];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (template != null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar clone = template.clone();\n\t\t\t\t\t\t\t\t\t\t\t\tvar style = select.options[select.selectedIndex].cellStyle;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif (style != null)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tclone.setStyle(style);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn clone;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmxLog.warn('Template '+template+' not found');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar img = into.addPrototype(as, icon, create, null, null, toggle);\n\t\t\t\t\t\t\t\t\t\tselect = into.addCombo();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Selects the toolbar icon if a selection change\n\t\t\t\t\t\t\t\t\t\t// is made in the corresponding combobox.\n\t\t\t\t\t\t\t\t\t\tmxEvent.addListener(select, 'change', function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.selectMode(img, function(evt)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar pt = mxUtils.convertPoint(editor.graph.container,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn editor.addVertex(null, funct(), pt.x, pt.y);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.noReset = false;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Adds the entries to the combobox\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(select, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = child.getAttribute('template');\n\t\t\t\t\t\t\t\t\t\t\t\tvar option = into.addOption(select, lab, tmp || template);\n\t\t\t\t\t\t\t\t\t\t\t\toption.cellStyle = child.getAttribute('style');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Assigns an ID to the created element to access it later.\n\t\t\t\t\t\t\tif (elt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar id = node.getAttribute('id');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (id != null && id.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\telt.setAttribute('id', id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input\n */\nmxDefaultToolbarCodec.allowEval = true;\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultPopupMenuCodec\n\t *\n\t * Custom codec for configuring <mxDefaultPopupMenu>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing popup menus, it does not encode or create menus. Note\n\t * that this codec only passes the configuration node to the popup menu,\n\t * which uses the config to dynamically create menus. See\n\t * <mxDefaultPopupMenu.createMenu>.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultPopupMenu());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Uses the given node as the config for <mxDefaultPopupMenu>.\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar inc = node.getElementsByTagName('include')[0];\n\t\t\n\t\tif (inc != null)\n\t\t{\n\t\t\tthis.processInclude(dec, inc, into);\n\t\t}\n\t\telse if (into != null)\n\t\t{\n\t\t\tinto.config = node;\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxEditorCodec\n\t *\n\t * Codec for <mxEditor>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - modified\n\t * - lastSnapshot\n\t * - ignoredChanges\n\t * - undoManager\n\t * - graphContainer\n\t * - toolbarContainer\n\t */\n\tvar codec = new mxObjectCodec(new mxEditor(),\n\t\t['modified', 'lastSnapshot', 'ignoredChanges',\n\t\t'undoManager', 'graphContainer', 'toolbarContainer']);\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the ui-part of the configuration node by reading\n\t * a sequence of the following child nodes and attributes\n\t * and passes the control to the default decoding mechanism:\n\t *\n\t * Child Nodes:\n\t *\n\t * stylesheet - Adds a CSS stylesheet to the document.\n\t * resource - Adds the basename of a resource bundle.\n\t * add - Creates or configures a known UI element.\n\t *\n\t * These elements may appear in any order given that the\n\t * graph UI element is added before the toolbar element\n\t * (see Known Keys).\n\t *\n\t * Attributes:\n\t *\n\t * as - Key for the UI element (see below).\n\t * element - ID for the element in the document.\n\t * style - CSS style to be used for the element or window.\n\t * x - X coordinate for the new window.\n\t * y - Y coordinate for the new window.\n\t * width - Width for the new window.\n\t * height - Optional height for the new window.\n\t * name - Name of the stylesheet (absolute/relative URL).\n\t * basename - Basename of the resource bundle (see <mxResources>).\n\t *\n\t * The x, y, width and height attributes are used to create a new\n\t * <mxWindow> if the element attribute is not specified in an add\n\t * node. The name and basename are only used in the stylesheet and\n\t * resource nodes, respectively.\n\t *\n\t * Known Keys:\n\t *\n\t * graph - Main graph element (see <mxEditor.setGraphContainer>).\n\t * title - Title element (see <mxEditor.setTitleContainer>).\n\t * toolbar - Toolbar element (see <mxEditor.setToolbarContainer>).\n\t * status - Status bar element (see <mxEditor.setStatusContainer>).\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <ui>\n\t *   <stylesheet name=\"css/process.css\"/>\n\t *   <resource basename=\"resources/app\"/>\n\t *   <add as=\"graph\" element=\"graph\"\n\t *     style=\"left:70px;right:20px;top:20px;bottom:40px\"/>\n\t *   <add as=\"status\" element=\"status\"/>\n\t *   <add as=\"toolbar\" x=\"10\" y=\"20\" width=\"54\"/>\n\t * </ui>\n\t * (end)\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Assigns the specified templates for edges\n\t\tvar defaultEdge = node.getAttribute('defaultEdge');\n\t\t\n\t\tif (defaultEdge != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultEdge');\n\t\t\tobj.defaultEdge = obj.templates[defaultEdge];\n\t\t}\n\n\t\t// Assigns the specified templates for groups\n\t\tvar defaultGroup = node.getAttribute('defaultGroup');\n\t\t\n\t\tif (defaultGroup != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultGroup');\n\t\t\tobj.defaultGroup = obj.templates[defaultGroup];\n\t\t}\n\n\t\treturn obj;\n\t};\n\t\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'Array')\n\t\t{\n\t\t\tvar role = child.getAttribute('as');\n\t\t\t\n\t\t\tif (role == 'templates')\n\t\t\t{\n\t\t\t\tthis.decodeTemplates(dec, child, obj);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (child.nodeName == 'ui')\n\t\t{\n\t\t\tthis.decodeUi(dec, child, obj);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t};\n\t\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeUi = function(dec, node, editor)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = tmp.getAttribute('as');\n\t\t\t\tvar elt = tmp.getAttribute('element');\n\t\t\t\tvar style = tmp.getAttribute('style');\n\t\t\t\tvar element = null;\n\n\t\t\t\tif (elt != null)\n\t\t\t\t{\n\t\t\t\t\telement = document.getElementById(elt);\n\t\t\t\t\t\n\t\t\t\t\tif (element != null && style != null)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.style.cssText += ';' + style;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar x = parseInt(tmp.getAttribute('x'));\n\t\t\t\t\tvar y = parseInt(tmp.getAttribute('y'));\n\t\t\t\t\tvar width = tmp.getAttribute('width');\n\t\t\t\t\tvar height = tmp.getAttribute('height');\n\n\t\t\t\t\t// Creates a new window around the element\n\t\t\t\t\telement = document.createElement('div');\n\t\t\t\t\telement.style.cssText = style;\n\t\t\t\t\t\n\t\t\t\t\tvar wnd = new mxWindow(mxResources.get(as) || as,\n\t\t\t\t\t\telement, x, y, width, height, false, true);\n\t\t\t\t\twnd.setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// TODO: Make more generic\n\t\t\t\tif (as == 'graph')\n\t\t\t\t{\n\t\t\t\t\teditor.setGraphContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'toolbar')\n\t\t\t\t{\n\t\t\t\t\teditor.setToolbarContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'title')\n\t\t\t\t{\n\t\t\t\t\teditor.setTitleContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'status')\n\t\t\t\t{\n\t\t\t\t\teditor.setStatusContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'map')\n\t\t\t\t{\n\t\t\t\t\teditor.setMapContainer(element);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'resource')\n\t\t\t{\n\t\t\t\tmxResources.add(tmp.getAttribute('basename'));\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'stylesheet')\n\t\t\t{\n\t\t\t\tmxClient.link('stylesheet', tmp.getAttribute('name'));\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\t\n\t};\n\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeTemplates = function(dec, node, editor)\n\t{\n\t\tif (editor.templates == null)\n\t\t{\n\t\t\teditor.templates = [];\n\t\t}\n\t\t\n\t\tvar children = mxUtils.getChildNodes(node);\n\t\tfor (var j=0; j<children.length; j++)\n\t\t{\n\t\t\tvar name = children[j].getAttribute('as');\n\t\t\tvar child = children[j].firstChild;\n\t\t\t\n\t\t\twhile (child != null && child.nodeType != 1)\n\t\t\t{\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\t// LATER: Only single cells means you need\n\t\t\t\t// to group multiple cells within another\n\t\t\t\t// cell. This should be changed to support\n\t\t\t\t// arrays of cells, or the wrapper must\n\t\t\t\t// be automatically handled in this class.\n\t\t\t\teditor.templates[name] = dec.decodeCell(child);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n\n/*** EXPORTS FROM exports-loader ***/\nexports[\"mxClient\"] = (mxClient);\nexports[\"mxToolbar\"] = (mxToolbar);\nexports[\"mxConnectionHandler\"] = (mxConnectionHandler);\nexports[\"mxEllipse\"] = (mxEllipse);\nexports[\"mxConnectionConstraint\"] = (mxConnectionConstraint);\nexports[\"mxWindow\"] = (mxWindow);\nexports[\"mxObjectCodec\"] = (mxObjectCodec);\nexports[\"mxGraphModel\"] = (mxGraphModel);\nexports[\"mxActor\"] = (mxActor);\nexports[\"mxPopupMenu\"] = (mxPopupMenu);\nexports[\"mxShape\"] = (mxShape);\nexports[\"mxEventObject\"] = (mxEventObject);\nexports[\"mxGraph\"] = (mxGraph);\nexports[\"mxPopupMenuHandler\"] = (mxPopupMenuHandler);\nexports[\"mxPrintPreview\"] = (mxPrintPreview);\nexports[\"mxEventSource\"] = (mxEventSource);\nexports[\"mxRectangle\"] = (mxRectangle);\nexports[\"mxVertexHandler\"] = (mxVertexHandler);\nexports[\"mxMouseEvent\"] = (mxMouseEvent);\nexports[\"mxGraphView\"] = (mxGraphView);\nexports[\"mxCodecRegistry\"] = (mxCodecRegistry);\nexports[\"mxImage\"] = (mxImage);\nexports[\"mxGeometry\"] = (mxGeometry);\nexports[\"mxRubberband\"] = (mxRubberband);\nexports[\"mxConstraintHandler\"] = (mxConstraintHandler);\nexports[\"mxKeyHandler\"] = (mxKeyHandler);\nexports[\"mxDragSource\"] = (mxDragSource);\nexports[\"mxEvent\"] = (mxEvent);\nexports[\"mxUtils\"] = (mxUtils);\nexports[\"mxCodec\"] = (mxCodec);\nexports[\"mxCell\"] = (mxCell);\nexports[\"mxConstants\"] = (mxConstants);\nexports[\"mxPoint\"] = (mxPoint);\nexports[\"mxGraphHandler\"] = (mxGraphHandler);\nexports[\"mxCylinder\"] = (mxCylinder);\nexports[\"mxCellRenderer\"] = (mxCellRenderer);\nexports[\"mxUndoManager\"] = (mxUndoManager);\nexports[\"mxStencilRegistry\"] = (mxStencilRegistry);\nexports[\"mxStencil\"] = (mxStencil);"],"sourceRoot":""}